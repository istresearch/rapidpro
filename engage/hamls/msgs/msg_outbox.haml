-extends "msgs/message_box.html"
-load smartmin sms temba contacts i18n humanize

-block search-details
  .search-details

-block message-list
  %table.mt-4.object-list.list.lined
    %tbody
      -for broadcast in pending_broadcasts
        %tr
          %td.value-icon(style="width: 20px")
            %span.glyph.icon-bullhorn.text-gray-500
          %td.value-recipient
            .pt-1.inline-block
              -include "includes/recipients.haml" with groups=broadcast.groups.all contacts=broadcast.contacts.all urns=broadcast.raw_urns
          %td.value-text
            {{ broadcast.get_text }}
          %td.created_on
            %span.time
              {% format_datetime broadcast.created_on %}

      -for object in object_list
        %tr
          %td.value-recipient(colspan="2")
            .pt-1.inline-block
              -include "includes/recipients_contact.haml" with contact=object.contact
          %td.value-text
            {% get_value object 'text' %}

            - if 'label' in actions
              .value-labels
                - for label in object.labels.all
                  %span.label.label-info.lbl{ data-id: '{{label.id}}' }
                    %a{href:"{% url 'msgs.msg_filter' label.uuid %}"}
                      {{label.name}}

            -if object.attachments
              .value-attachments{ style:"margin-top: 5px" }
                - for attachment in object.attachments
                  {% attachment_button attachment %}

          %td.created_on
            %span.time
              {% format_datetime object.created_on %}

            -if show_channel_logs and not user_org.is_anon or perms.contacts.contact_break_anon
              .inline-block.text-gray-400.linked
                {% channel_log_link object %}

      -if not object_list and not pending_broadcasts
        %tr.empty_list
          %td{ colspan:'99' }
            -trans "No matching messages."

  -block paginator
    -if object_list.count
      .paginator
        -include "smartmin/sidebar_pagination.haml"

-block post-content
  - if org_perms.msgs.broadcast_send
    %temba-dialog#purge-confirmation.hide(
        header='{{ _("Purge Outbox")|escapejs }}'
        primaryButtonName='{{ _("Purge")|escapejs }}'
        destructive='true'
    )
      .p-6.confirmation-body
        %p
          -trans "Purge all messages from the outbox?"
        %p
          -trans "Once the outbox is purged, it's messages will be gone forever. There is no way to undo this operation."

    %temba-dialog#purge-success.hide(
        header='{{ _("Purge Outbox")|escapejs }}'
        primaryButtonName=''
        cancelButtonName='Ok'
    )
      .p-6
        -trans "Purge Successful"

    %temba-dialog#purge-fail.hide(
        header='{{ _("Purge Outbox")|escapejs }}'
        primaryButtonName=''
        cancelButtonName='Ok'
    )
      .p-6.important
        -trans "An error has occurred:"
      %p.fail-msg
        "Unknown error"

-block extra-script
  {{ block.super }}

  :javascript
    {% if org_perms.msgs.broadcast_send %}
      window.addEventListener('DOMContentLoaded', function(e) {
        const menuitemPurge = document.querySelector("#action-purge");
        const dlgPurge = document.querySelector("#purge-confirmation");
        if ( menuitemPurge && dlgPurge ) {
          menuitemPurge.addEventListener("click", function(e) {
            dlgPurge.classList.remove("hide");
            dlgPurge.open = true;
          });

          dlgPurge.addEventListener("temba-button-clicked", function(e) {
            if ( !e.detail.button.secondary ) {
              doPurgeOutbox("{% url 'channels.channel_purge_outbox' '4org' org.uuid %}");
            }
            dlgPurge.open = false;
          });
        }
      });

      const doPurgeOutbox = function( aUrl ) {
        showSpinner();
        $.ajax({ type: "GET", url: aUrl,
            success: function( data, textStatus, xhr ) {
              const dlg = document.querySelector("#purge-success");
              dlg.classList.remove("hide");
              dlg.open = true;
              hideSpinner();
            },
            error: function( req, status, error ) {
              const dlg = document.querySelector("#purge-fail");
              dlg.querySelector('.fail-msg').innerHTML = req.status + " " + error;
              dlg.classList.remove("hide");
              dlg.open = true;
              hideSpinner();
            }
        });
      };
    {% endif %}
