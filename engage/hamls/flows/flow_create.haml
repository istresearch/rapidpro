-extends 'includes/modax.haml'
-load smartmin i18n

-block fields
  .flex.items-start
    .flex-grow
      -render_field 'name'
    .ml-3
      -render_field 'flow_type'

  .flex.items-start
    .keywords(class="{% if form.flow_type.value == 'B' or form.flow_type.value == 'S' %}hidden{%endif%}")
      -render_field 'keyword_triggers'
    -if form.fields.base_language
      .w-half.flex.flex-col
        -render_field 'base_language'

  .flex.items-start
    -if form.fields.ignore_triggers
      #field_ignore_triggers.flex.flex-col
        -render_field 'ignore_triggers'
    -if form.fields.expires_after_minutes
      .flex-grow.flex-col
        -render_field 'expires_after_minutes'

  -if form.fields.flow_channels
    #flow_channel_pickers.flex.items-start
      .mr-10
        -render_field 'flow_schemes'
      .flex-grow
        -render_field 'flow_channels'

-block modal-script
  {{block.super}}

  :css
    .control-group.field_flow_channels #id_flow_channels,
    .control-group.field_flow_schemes #id_flow_schemes {
      overflow-y: auto;
      max-height: 12em;
    }
    .control-label {
      font-family: var(--font-family);
      padding: 0px;
      margin-left: 4px;
      display: block;
      font-weight: 400;
      font-size: var(--label-size);
      letter-spacing: 0.05em;
      line-height: normal;
      color: rgb(119, 119, 119);
    }
    .help-block {
      font-size: var(--help-text-size);
      line-height: normal;
      color: var(--color-text-help);
      margin-left: var(--help-text-margin-left);
      transition: opacity 100ms ease-in-out 0s, margin-top 200ms ease-in-out 0s;
      pointer-events: none;
    }

  :javascript
    //# sourceURL=create-flow.js
    var modalBody = document.querySelector("#create-flow-modal").shadowRoot;
    var typeSelect = modalBody.querySelector("temba-select[name='flow_type']");
    var ignoreTriggers = modalBody.querySelector("#field_ignore_triggers");
    var keywords = modalBody.querySelector(".keywords");
    var keywordsSelect = modalBody.querySelector("temba-select[name='keyword_triggers']");

    typeSelect.addEventListener("change", function(evt) {
        let selected = evt.target.values[0];
        if (selected.value === "B") {
          ignoreTriggers.classList.add("hidden");
        } else {
          ignoreTriggers.classList.remove("hidden");
        }
        if (selected.value === "B" || selected.value === "S") {
          keywords.classList.add("hidden");
          keywordsSelect.clear();
        } else {
          keywords.classList.remove("hidden");
        }
    });

    var flowSchemesCheckboxes = modalBody.querySelectorAll("input[type=checkbox][name=flow_schemes]");
    var flowChannelsCheckboxes = modalBody.querySelectorAll("input[type=checkbox][name=flow_channels]");
    var flowChannelFilter = [];
    for (let idxSchemes = 0; idxSchemes < flowSchemesCheckboxes.length; idxSchemes++) {
      flowSchemesCheckboxes[idxSchemes].addEventListener("change", function(e) {
        let uuid_list = e.target.value.split(',');
        if ( e.target.checked ) {
          flowChannelFilter = flowChannelFilter.concat(uuid_list);
          for (let i = 0; i < flowChannelsCheckboxes.length; i++) {
            let channel_uuid = flowChannelsCheckboxes[i].value;
            if ( flowChannelFilter.includes(channel_uuid) ) {
              flowChannelsCheckboxes[i].closest("div").classList.remove("hidden");
            } else {
              flowChannelsCheckboxes[i].checked = false;
              flowChannelsCheckboxes[i].closest("div").classList.add("hidden");
            }
          }
        } else {
          flowChannelFilter = flowChannelFilter.filter( ( el ) => !uuid_list.includes( el ) );
          for (let i = 0; i < flowChannelsCheckboxes.length; i++) {
            let channel_uuid = flowChannelsCheckboxes[i].value;
            if ( flowChannelFilter.includes(channel_uuid) || flowChannelFilter.length == 0 ) {
              flowChannelsCheckboxes[i].closest("div").classList.remove("hidden");
            } else {
              flowChannelsCheckboxes[i].checked = false;
              flowChannelsCheckboxes[i].closest("div").classList.add("hidden");
            }
          }
        }
      });
    }
