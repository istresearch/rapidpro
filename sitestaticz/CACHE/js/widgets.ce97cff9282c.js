// Generated by CoffeeScript 1.9.3
(function() {
  var app, makeSelect2Required,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  app = angular.module('temba.widgets', []);

  app.directive("ussd", [
    "$rootScope", "$log", "Flow", function($rootScope, $log, Flow) {
      var MESSAGE_LENGTH, link;
      MESSAGE_LENGTH = 182;
      link = function(scope, element, attrs) {
        var base, base1, base2, insertEmpty, isVisible, menu, name, refreshMenu, updateCategory;
        scope.USSD_MENU = parseInt(attrs.ussd) === 0;
        scope.USSD_RESPONSE = parseInt(attrs.ussd) === 1;
        scope.ruleset.ruleset_type = scope.USSD_MENU ? "wait_menu" : "wait_ussd";
        if ((base = scope.ruleset).config == null) {
          base.config = {};
        }
        if ((base1 = scope.ruleset.config).ussd_message == null) {
          base1.ussd_message = {};
        }
        if ((base2 = scope.ruleset.config.ussd_message)[name = Flow.flow.base_language] == null) {
          base2[name] = "";
        }
        isVisible = function(rule) {
          var ref;
          return ref = Flow.flow.flow_type, indexOf.call(rule._config.filter, ref) >= 0;
        };
        menu = null;
        (refreshMenu = function() {
          return menu = scope.ruleset.rules.filter(function(rule) {
            return isVisible(rule);
          });
        })();
        updateCategory = function(item) {
          var categoryName, words;
          if (!item.category._autoName) {
            return;
          }
          words = item.label[Flow.flow.base_language].trim().split(/\b/);
          if (words) {
            categoryName = words[0].toUpperCase();
            item.category._base = categoryName;
            if (categoryName.length > 1) {
              return item.category._base = categoryName.charAt(0) + categoryName.substr(1).toLowerCase();
            }
          }
        };
        (insertEmpty = function() {
          var ref, ref1, ref2;
          refreshMenu();
          if (scope.USSD_MENU) {
            if (scope.ruleset.rules.filter(function(rule) {
              return !rule.label && isVisible(rule);
            })) {
              scope.ruleset.rules = scope.ruleset.rules.filter(function(rule) {
                return rule.label || (!rule.label && !isVisible(rule));
              });
              refreshMenu();
            }
            if (menu.length === 0 || ((ref = menu[menu.length - 1].category) != null ? ref._base : void 0) !== "") {
              return scope.ruleset.rules.splice(menu.length, 0, {
                _config: Flow.getOperatorConfig("eq"),
                uuid: uuid(),
                label: {},
                test: {
                  type: 'eq',
                  _base: menu.length >= 9 ? 0 : menu.length + 1
                },
                category: {
                  _autoName: true,
                  _base: ""
                }
              });
            }
          } else {
            if (((ref1 = menu[menu.length - 1]) != null ? (ref2 = ref1.category) != null ? ref2._base : void 0 : void 0) === "") {
              return scope.ruleset.rules.splice(menu.length - 1, 1);
            }
          }
        })();
        scope.remove = function(item, index) {
          refreshMenu();
          scope.ruleset.rules.splice(index, 1);
          if (index === 0 || index === menu.length - 1) {
            return insertEmpty();
          }
        };
        scope.updateMenu = function(item, index) {
          refreshMenu();
          scope.countCharacters();
          updateCategory(item);
          if (item.label[Flow.flow.base_language].length === 1 && index === menu.length - 1) {
            return insertEmpty();
          }
        };
        return (scope.countCharacters = function() {
          var sumMenuItems, textLength, textMenuLength;
          sumMenuItems = function(items) {
            return items.filter(function(rule) {
              return isVisible(rule);
            }).reduce(function(prev, current) {
              var base3, name1;
              if ((base3 = current.label)[name1 = Flow.flow.base_language] == null) {
                base3[name1] = "";
              }
              return prev + current.test._base.toString().length + current.label[Flow.flow.base_language].length + 2;
            }, 0);
          };
          textLength = scope.ruleset.config.ussd_message[Flow.flow.base_language].length;
          if (scope.USSD_MENU) {
            textMenuLength = textLength + 1 + sumMenuItems(scope.ruleset.rules);
          }
          return $rootScope.characters = scope.USSD_MENU ? MESSAGE_LENGTH - textMenuLength : MESSAGE_LENGTH - textLength;
        })();
      };
      return {
        templateUrl: (typeof window.subdir === "string" && window.subdir.length > 0 ? '/' + window.subdir : '') + "/partials/ussd_directive",
        restrict: "A",
        link: link,
        scope: true
      };
    }
  ]);

  app.directive("msg", [
    "$log", "Flow", function($log, Flow) {
      var link;
      link = function(scope, element, attrs) {
        var messageLength, msgType;
        msgType = attrs.type ? attrs.type : "sms";
        if (msgType === "sms") {
          messageLength = 160;
        } else if (msgType === "ussd") {
          messageLength = 182;
        }
        scope.showCounter = true;
        if (attrs.showCounter != null) {
          scope.showCounter = eval(attrs.showCounter);
        }
        scope.countCharacters = function() {
          var length, modelController;
          if (scope.message) {
            if (msgType === "sms") {
              length = scope.message.length;
              scope.messages = Math.ceil(length / messageLength);
              scope.characters = scope.messages * messageLength - length;
            }
            if (msgType === "ussd") {
              length = scope.message.length;
              scope.characters = messageLength - length;
              modelController = element.find('textarea').controller('ngModel');
              return modelController != null ? modelController.$setValidity('message', scope.characters >= 0) : void 0;
            }
          } else {
            scope.messages = 0;
            return scope.characters = messageLength;
          }
        };
        scope.$watch((function() {
          return scope.message;
        }), scope.countCharacters);
        if (scope.msg) {
          scope.message = scope.msg[Flow.flow.base_language];
          if (!scope.message) {
            return scope.message = "";
          }
        }
      };
      return {
        templateUrl: (typeof window.subdir === "string" && window.subdir.length > 0 ? '/' + window.subdir : '') + "/partials/msg_directive",
        restrict: "A",
        link: link,
        scope: {
          msg: '=',
          message: '='
        }
      };
    }
  ]);

  app.directive("autoComplete", [
    "$rootScope", "$timeout", "$http", "$log", "Flow", function($rootScope, $timeout, $http, $log, Flow) {
      var link;
      link = function(scope, element, attrs) {
        return new AutoComplete(Flow.completions, Flow.function_completions).bind(element);
      };
      return {
        restrict: 'A',
        link: link
      };
    }
  ]);

  makeSelect2Required = function(scope, field, element) {
    var data, select2;
    select2 = element.data('select2');
    data = select2.data();
    if (data && !Array.isArray(data)) {
      data = [data];
    }
    field['selected'] = data;
    return element.on('change', function(e) {
      data = select2.data();
      if (data && !Array.isArray(data)) {
        data = [data];
      }
      field['selected'] = data;
      return scope.$evalAsync(function() {
        if (field['selected'] && field['selected'].length > 0) {
          return field.$setValidity("required", true);
        } else {
          field.$setValidity("required", false);
        }
      });
    });
  };

  app.directive("selectServer", [
    "$timeout", "$http", function($timeout, $http) {
      var link;
      link = function(scope, element, attrs, form) {
        var minimumResultsForSearch, url;
        minimumResultsForSearch = -1;
        if (attrs.search) {
          minimumResultsForSearch = 0;
        }
        url = attrs.selectServer;
        if (attrs.excludeCurrentFlow) {
          url += '&exclude_flow_uuid=' + window.flowUUID;
        }
        if (attrs.sameFlowType) {
          url += '&flow_type=' + window.flow_type;
        }
        element.select2({
          placeholder: attrs.placeholder,
          minimumResultsForSearch: minimumResultsForSearch,
          ajax: {
            url: url,
            dataType: "json",
            data: function(term, page) {
              return {
                search: term,
                page: page
              };
            },
            results: function(response, page, context) {
              return response;
            }
          },
          escapeMarkup: function(m) {
            return m;
          }
        });
        if (attrs.initId && attrs.initText) {
          element.data('select2').data({
            id: attrs.initId,
            text: attrs.initText
          });
        }
        if (attrs.required) {
          makeSelect2Required(scope, form[attrs['name']], element);
        }
        return $timeout(function() {
          return element.trigger('change');
        }, 0);
      };
      return {
        restrict: 'A',
        require: '^form',
        link: link
      };
    }
  ]);

  app.directive("select2", [
    "$timeout", function($timeout) {
      var link;
      link = function(scope, element, attrs) {
        element.select2({
          minimumResultsForSearch: -1,
          placeholder: attrs.placeholder
        });
        return $timeout(function() {
          return element.trigger('change');
        }, 0);
      };
      return {
        restrict: 'AC',
        link: link
      };
    }
  ]);

  app.directive("selectLabel", [
    "$timeout", "Flow", function($timeout, Flow) {
      var link;
      link = function(scope, element, attrs, form) {
        var field, i, initLabels, label, len, ref, select2;
        element.select2({
          tags: Flow.labels,
          multiple: true
        });
        field = form[attrs['name']];
        select2 = element.data('select2');
        if (scope.ngModel) {
          initLabels = [];
          ref = scope.ngModel;
          for (i = 0, len = ref.length; i < len; i++) {
            label = ref[i];
            initLabels.push({
              id: label.uuid,
              text: label.name
            });
          }
          select2.data(initLabels);
        }
        field['selected'] = select2.data();
        element.on('select2-selecting', function(e) {
          if (e.val.length < 1) {
            e.preventDefault();
            return;
          }
          if (e.val[0] === '@') {
            element.select2("search", e.val.slice(1));
            return e.preventDefault();
          }
        });
        element.on('change', function(e) {
          field['selected'] = select2.data();
          if (attrs.required) {
            if (!field['selected'] || field['selected'].length === 0) {
              select2.container.find('.select2-choices').addClass('select2-required');
              return scope.$apply(function() {
                return field.$setValidity("required", false);
              });
            } else {
              select2.container.find('.select2-choices').removeClass('select2-required');
              return scope.$apply(function() {
                return field.$setValidity("required", true);
              });
            }
          }
        });
        return $timeout(function() {
          return element.trigger('change');
        }, 0);
      };
      return {
        require: '^form',
        restrict: 'A',
        link: link,
        scope: {
          ngModel: '='
        }
      };
    }
  ]);

  app.directive("selectEmail", [
    "$timeout", function($timeout) {
      var link;
      link = function(scope, element, attrs, form) {
        if (scope.ngModel) {
          element.val(scope.ngModel.join());
        }
        element.select2({
          tags: [],
          multiple: true,
          selectOnBlur: true,
          minimumInputLength: 1,
          minimumResultsForSearch: -1,
          formatInputTooShort: function(term, minLength) {
            return "";
          },
          matcher: function(term, text, opt) {
            return text.toUpperCase().indexOf(term.toUpperCase()) === 0;
          },
          formatNoMatches: function(term) {
            return gettext("Enter a valid e-mail address or field");
          },
          createSearchChoice: function(term, data) {
            if ($(data).filter(function() {
              return this.text.localeCompare(term) === 0;
            }).length === 0) {
              if (/^@[a-zA-Z._]+|^[^@]+@([^@\.]+\.)+[^@\.]+$/.test(term)) {
                return {
                  id: term,
                  text: term
                };
              } else {
                return null;
              }
            }
          }
        });
        if (attrs.required) {
          makeSelect2Required(scope, form[attrs['name']], element);
        }
        return $timeout(function() {
          return element.trigger('change');
        }, 0);
      };
      return {
        require: '^form',
        restrict: 'A',
        link: link,
        scope: {
          ngModel: '='
        }
      };
    }
  ]);

  app.directive("selectStatic", [
    '$timeout', function($timeout) {
      var link;
      link = function(scope, element, attrs, form) {
        var field, initial, select2, staticData;
        staticData = JSON.parse(attrs.selectStatic);
        element.select2({
          data: staticData,
          minimumInputLength: 0,
          query: function(query) {
            var cleaned_query, d, data, exact_match, i, len, ref;
            data = {
              results: []
            };
            cleaned_query = query.term ? query.term.toLowerCase().strip() : "";
            exact_match = false;
            ref = this['data'];
            for (i = 0, len = ref.length; i < len; i++) {
              d = ref[i];
              if (d.text) {
                if (!query.term || d.text.toLowerCase().indexOf(cleaned_query) !== -1) {
                  data.results.push({
                    id: d.id,
                    text: d.text
                  });
                  if (d.text.toLowerCase() === cleaned_query) {
                    exact_match = true;
                  }
                }
              }
            }
            if (!exact_match && cleaned_query.length > 0 && cleaned_query.length <= 36 && /^[a-z0-9-][a-z0-9- ]*$/.test(cleaned_query)) {
              data.results.push({
                id: '[_NEW_]' + query.term,
                text: gettext('Add new variable') + ': ' + query.term
              });
            }
            return query.callback(data);
          },
          formatNoMatches: function(term) {
            return gettext("Enter a valid name, only letters, numbers, dashes and spaces are allowed");
          },
          createSearchChoice: function(term, data) {
            return data;
          }
        });
        field = form[attrs['name']];
        select2 = element.data('select2');
        initial = {};
        if (attrs.key && attrs.text) {
          initial = {
            id: attrs.key,
            text: attrs.text
          };
          select2.data(initial);
        }
        field['selected'] = select2.data();
        element.on('change', function(e) {
          field['selected'] = select2.data();
          if (attrs.required) {
            if (!field['selected'] || field['selected'].length === 0) {
              select2.container.find('.select2-choices').addClass('select2-required');
              return scope.$apply(function() {
                return field.$setValidity("required", false);
              });
            } else {
              select2.container.find('.select2-choices').removeClass('select2-required');
              return scope.$apply(function() {
                return field.$setValidity("required", true);
              });
            }
          }
        });
        return $timeout(function() {
          return element.trigger('change');
        }, 0);
      };
      return {
        restrict: "A",
        require: "^form",
        link: link
      };
    }
  ]);

  app.directive("omnibox", [
    "$timeout", "$log", "Flow", function($timeout, $log, Flow) {
      var arbitraryAddFunction, extraAndArbitraryAddFunction, link, omniArbitraryNumberOption, omniFormatOmniboxItem, omniFormatOmniboxOption, omniFormatOmniboxSelection, omniRemap, omnibox, parseData;
      omniRemap = function(element, callback) {
        callback();
      };
      omniArbitraryNumberOption = function(term, data) {
        if (anon_org) {
          return null;
        }
        if ($(data).filter(function() {
          return this.text.localeCompare(term) === 0;
        }).length === 0) {
          if (!isNaN(parseFloat(term)) && isFinite(term)) {
            return {
              id: "n-" + term,
              text: term
            };
          }
        }
      };
      omniFormatOmniboxSelection = function(item) {
        if (item.length === 0) {
          return "";
        }
        return omniFormatOmniboxItem(item);
      };
      omniFormatOmniboxOption = function(item, container, query) {
        if (query.term[0] === "+") {
          query.term = query.term.substring(1, query.length);
        }
        return omniFormatOmniboxItem(item);
      };
      omniFormatOmniboxItem = function(item) {
        var clazz, text;
        text = item.text;
        if (item.extra != null) {
          text = item.text + " (" + item.extra + ")";
        }
        clazz = '';
        if (item.id.indexOf("g-") === 0) {
          clazz = 'omni-group';
        } else if (item.id.indexOf("c-") === 0) {
          clazz = 'omni-contact';
        } else if (item.id.indexOf("u-") === 0) {
          if (item.scheme === 'tel') {
            clazz = 'omni-tel';
          } else if (item.scheme === 'twitter') {
            clazz = 'omni-twitter';
          }
        }
        return '<div class="omni-option ' + clazz + '">' + text + '</div>';
      };
      arbitraryAddFunction = function(term, data) {
        if (term.indexOf('@') !== 0 && data.length === 0) {
          return {
            id: term,
            text: term
          };
        }
      };
      extraAndArbitraryAddFunction = function(term, data) {
        if (/^@extra.(\w+)(\.\w+)*$/.test(term)) {
          return {
            id: term,
            text: term
          };
        } else {
          return arbitraryAddFunction(term, data);
        }
      };
      omnibox = function(ele, options) {
        var data, idx, multiple, placeholder, q, types, v;
        data = [];
        if (options === undefined) {
          options = {};
        }
        if (options.completions) {
          for (idx in options.completions) {
            v = "@" + options.completions[idx].name.toLowerCase();
            data.push({
              id: v,
              text: v
            });
          }
        }
        if (options.types) {
          types = options.types;
        } else {
          types = 'cg';
        }
        if (options.types === 'g') {
          placeholder = gettext("Enter one or more contact groups");
        } else if (options.types === 'c') {
          placeholder = gettext("Recipients, enter contacts");
        } else {
          placeholder = gettext("Recipients, enter contacts or groups");
        }
        ele.attr("placeholder", placeholder);
        q = "";
        if (options.arbitraryAdd) {
          if (options.allowExtra) {
            options.createSearchChoice = extraAndArbitraryAddFunction;
          } else {
            options.createSearchChoice = arbitraryAddFunction;
          }
        } else if (!options.createSearchChoice && types && types.indexOf('u') >= 0) {
          options.createSearchChoice = omniArbitraryNumberOption;
        }
        multiple = true;
        if (options.multiple !== undefined) {
          multiple = options.multiple;
        }
        ele.removeClass("loading").select2({
          placeholder: placeholder,
          data: data,
          allowClear: false,
          initSelection: omniRemap,
          selectOnBlur: false,
          minimumInputLength: 0,
          multiple: multiple,
          createSearchChoice: options.createSearchChoice,
          ajax: {
            url: (typeof window.subdir === "string" && window.subdir.length > 0 ? '/' + window.subdir : '') + "/contact/omnibox/?types=" + types,
            dataType: "json",
            data: function(term, page, context) {
              q = term;
              return {
                search: term,
                page: page
              };
            },
            results: function(response, page, context) {
              var variable;
              if (data && q) {
                q = q.toLowerCase();
                if (q.indexOf("@") === 0) {
                  for (idx in data) {
                    variable = data[idx];
                    if (variable.id.indexOf(q) === 0) {
                      response.results.unshift(variable);
                    }
                  }
                }
              }
              return response;
            }
          },
          escapeMarkup: function(m) {
            return m;
          },
          containerCssClass: "omnibox-select2",
          formatSelection: omniFormatOmniboxSelection,
          formatResult: omniFormatOmniboxOption
        });
        if (options.sortable) {
          $(ele).select2("container").find("ul.select2-choices").sortable({
            containment: 'parent',
            start: function() {
              return $(ele).select2("onSortStart");
            },
            stop: function() {
              return $(ele).select2("onSortEnd");
            }
          });
        }
        return ele;
      };
      parseData = function(data) {
        var contacts, groups, i, item, len, variables;
        groups = [];
        contacts = [];
        variables = [];
        for (i = 0, len = data.length; i < len; i++) {
          item = data[i];
          if (item.id.startsWith('g-')) {
            groups.push({
              id: item.id.slice(2),
              name: item.text
            });
          } else if (item.id.startsWith('c-')) {
            contacts.push({
              id: item.id.slice(2),
              name: item.text
            });
          } else if (item.id.startsWith('@')) {
            variables.push({
              id: item.id,
              name: item.id
            });
          } else {
            groups.push(item.text);
          }
        }
        return {
          groups: groups,
          contacts: contacts,
          variables: variables,
          total: groups.length + contacts.length + variables.length
        };
      };
      link = function(scope, element, attrs, form) {
        var contact, data, field, group, i, j, k, len, len1, len2, options, ref, ref1, ref2, select2, variable;
        options = {};
        if (attrs.omnibox) {
          options = JSON.parse(attrs.omnibox);
        }
        if (options.completions) {
          options.completions = Flow.completions;
        }
        data = [];
        if (scope.groups) {
          ref = scope.groups;
          for (i = 0, len = ref.length; i < len; i++) {
            group = ref[i];
            if (group.name) {
              data.push({
                id: 'g-' + group.uuid,
                text: group.name
              });
            } else {
              data.push({
                id: group,
                text: group
              });
            }
          }
        }
        if (scope.contacts) {
          ref1 = scope.contacts;
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            contact = ref1[j];
            if (contact.name) {
              data.push({
                id: 'c-' + contact.uuid,
                text: contact.name
              });
            } else {
              data.push({
                id: contact,
                text: contact
              });
            }
          }
        }
        if (scope.variables) {
          ref2 = scope.variables;
          for (k = 0, len2 = ref2.length; k < len2; k++) {
            variable = ref2[k];
            data.push({
              id: variable.id,
              text: variable.id
            });
          }
        }
        select2 = omnibox(element, options).data('select2');
        select2.data(data);
        field = form[attrs['name']];
        field['selected'] = parseData(data);
        element.on('change', function(e) {
          field['selected'] = parseData(select2.data());
          if (attrs.required) {
            if (field['selected'].total === 0) {
              select2.container.find('.select2-choices').addClass('select2-required');
              return scope.$apply(function() {
                return field.$setValidity("required", false);
              });
            } else {
              select2.container.find('.select2-choices').removeClass('select2-required');
              return scope.$apply(function() {
                return field.$setValidity("required", true);
              });
            }
          }
        });
        return $timeout(function() {
          return element.trigger('change');
        }, 0);
      };
      return {
        restrict: "AC",
        require: "^form",
        scope: {
          groups: "=",
          contacts: "=",
          variables: "="
        },
        link: link
      };
    }
  ]);

}).call(this);
