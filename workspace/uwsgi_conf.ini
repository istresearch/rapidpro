[uwsgi]
strict = true
master = true
enable-threads = true
vacuum = true                        ; Delete sockets during shutdown
single-interpreter = true
die-on-term = true                   ; Shutdown when receiving SIGTERM (default is respawn)
need-app = true

; @see https://stackoverflow.com/questions/73518167/uwsgi-segmentation-fault
py-autoreload = 30                    ; monitor file changes (good for local dev), disable!

;disable-logging = true               ; Disable built-in logging
;log-4xx = true                       ; but log 4xx's anyway
;log-5xx = true                       ; and 5xx's

harakiri = 120                        ; forcefully kill workers after X seconds
;py-callos-afterfork = true           ; allow workers to trap signals
buffer-size = 32768

; @see https://stackoverflow.com/questions/69396898/trying-to-figure-out-uwsgi-thread-workers-configuration
;max-requests = 1000                  ; Restart workers after this many requests
max-worker-lifetime = 3600           ; Restart workers after this many seconds
max-worker-lifetime-delta = 100      ; Restart workers taking PID into account so not all at once
reload-on-rss = 1200                 ; Restart workers after this much resident memory
worker-reload-mercy = 120            ; How long to wait before forcefully killing workers

threads = 1                          ; num threads allowed per worker
processes = 20                        ; Maximum number of workers allowed; formula = ( (# of CPUs)*2 ) + 1

cheaper-algo = busyness
cheaper = 1                          ; Minimum number of workers allowed
cheaper-initial = 5                  ; Workers created at startup
cheaper-overload = 5                 ; Length of a cycle in seconds
cheaper-step = 2                     ; How many workers to spawn at a time

cheaper-busyness-multiplier = 30     ; How many cycles to wait before killing workers
cheaper-busyness-min = 20            ; Below this threshold, kill workers (if stable for multiplier cycles)
cheaper-busyness-max = 70            ; Above this threshold, spawn new workers
cheaper-busyness-backlog-alert = 16  ; Spawn emergency workers if more than this many requests are waiting in the queue
cheaper-busyness-backlog-step = 2    ; How many emergency workers to create if there are too many requests in the queue
