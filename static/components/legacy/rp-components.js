!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["rp-components"]=t():e["rp-components"]=t()}(window,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=29)}([function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=n(5),i=n(11),a=Object.prototype.toString;function s(e){return"[object Array]"===a.call(e)}function u(e){return null!==e&&"object"===r(e)}function l(e){return"[object Function]"===a.call(e)}function c(e,t){if(null!=e)if("object"!==r(e)&&(e=[e]),s(e))for(var n=0,o=e.length;n<o;n++)t.call(null,e[n],n,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}e.exports={isArray:s,isArrayBuffer:function(e){return"[object ArrayBuffer]"===a.call(e)},isBuffer:i,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===a.call(e)},isFile:function(e){return"[object File]"===a.call(e)},isBlob:function(e){return"[object Blob]"===a.call(e)},isFunction:l,isStream:function(e){return u(e)&&l(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function n(n,o){"object"===r(t[o])&&"object"===r(n)?t[o]=e(t[o],n):t[o]=n}for(var o=0,i=arguments.length;o<i;o++)c(arguments[o],n);return t},extend:function(e,t,n){return c(t,function(t,r){e[r]=n&&"function"==typeof t?o(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){e.exports=n(10)},function(e,t,n){"use strict";var r=n(0),o=n(13),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,u={adapter:("undefined"!=typeof XMLHttpRequest?s=n(6):"undefined"!=typeof process&&(s=n(6)),s),transformRequest:[function(e,t){return o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){u.headers[e]={}}),r.forEach(["post","put","patch"],function(e){u.headers[e]=r.merge(i)}),e.exports=u},function(e,t,n){var r,o,i;o=[e,t],void 0===(i="function"==typeof(r=function(e,t){"use strict";var n,r,o="function"==typeof Map?new Map:(n=[],r=[],{has:function(e){return n.indexOf(e)>-1},get:function(e){return r[n.indexOf(e)]},set:function(e,t){-1===n.indexOf(e)&&(n.push(e),r.push(t))},delete:function(e){var t=n.indexOf(e);t>-1&&(n.splice(t,1),r.splice(t,1))}}),i=function(e){return new Event(e,{bubbles:!0})};try{new Event("test")}catch(e){i=function(e){var t=document.createEvent("Event");return t.initEvent(e,!0,!1),t}}function a(e){if(e&&e.nodeName&&"TEXTAREA"===e.nodeName&&!o.has(e)){var t=null,n=null,r=null,a=function(){e.clientWidth!==n&&p()},s=function(t){window.removeEventListener("resize",a,!1),e.removeEventListener("input",p,!1),e.removeEventListener("keyup",p,!1),e.removeEventListener("autosize:destroy",s,!1),e.removeEventListener("autosize:update",p,!1),Object.keys(t).forEach(function(n){e.style[n]=t[n]}),o.delete(e)}.bind(e,{height:e.style.height,resize:e.style.resize,overflowY:e.style.overflowY,overflowX:e.style.overflowX,wordWrap:e.style.wordWrap});e.addEventListener("autosize:destroy",s,!1),"onpropertychange"in e&&"oninput"in e&&e.addEventListener("keyup",p,!1),window.addEventListener("resize",a,!1),e.addEventListener("input",p,!1),e.addEventListener("autosize:update",p,!1),e.style.overflowX="hidden",e.style.wordWrap="break-word",o.set(e,{destroy:s,update:p}),"vertical"===(u=window.getComputedStyle(e,null)).resize?e.style.resize="none":"both"===u.resize&&(e.style.resize="horizontal"),t="content-box"===u.boxSizing?-(parseFloat(u.paddingTop)+parseFloat(u.paddingBottom)):parseFloat(u.borderTopWidth)+parseFloat(u.borderBottomWidth),isNaN(t)&&(t=0),p()}var u;function l(t){var n=e.style.width;e.style.width="0px",e.offsetWidth,e.style.width=n,e.style.overflowY=t}function c(){if(0!==e.scrollHeight){var r=function(e){for(var t=[];e&&e.parentNode&&e.parentNode instanceof Element;)e.parentNode.scrollTop&&t.push({node:e.parentNode,scrollTop:e.parentNode.scrollTop}),e=e.parentNode;return t}(e),o=document.documentElement&&document.documentElement.scrollTop;e.style.height="",e.style.height=e.scrollHeight+t+"px",n=e.clientWidth,r.forEach(function(e){e.node.scrollTop=e.scrollTop}),o&&(document.documentElement.scrollTop=o)}}function p(){c();var t=Math.round(parseFloat(e.style.height)),n=window.getComputedStyle(e,null),o="content-box"===n.boxSizing?Math.round(parseFloat(n.height)):e.offsetHeight;if(o<t?"hidden"===n.overflowY&&(l("scroll"),c(),o="content-box"===n.boxSizing?Math.round(parseFloat(window.getComputedStyle(e,null).height)):e.offsetHeight):"hidden"!==n.overflowY&&(l("hidden"),c(),o="content-box"===n.boxSizing?Math.round(parseFloat(window.getComputedStyle(e,null).height)):e.offsetHeight),r!==o){r=o;var a=i("autosize:resized");try{e.dispatchEvent(a)}catch(e){}}}}function s(e){var t=o.get(e);t&&t.destroy()}function u(e){var t=o.get(e);t&&t.update()}var l=null;"undefined"==typeof window||"function"!=typeof window.getComputedStyle?((l=function(e){return e}).destroy=function(e){return e},l.update=function(e){return e}):((l=function(e,t){return e&&Array.prototype.forEach.call(e.length?e:[e],function(e){return a(e)}),e}).destroy=function(e){return e&&Array.prototype.forEach.call(e.length?e:[e],s),e},l.update=function(e){return e&&Array.prototype.forEach.call(e.length?e:[e],u),e}),t.default=l,e.exports=t.default})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){!function(){var t=["direction","boxSizing","width","height","overflowX","overflowY","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","borderStyle","paddingTop","paddingRight","paddingBottom","paddingLeft","fontStyle","fontVariant","fontWeight","fontStretch","fontSize","fontSizeAdjust","lineHeight","fontFamily","textAlign","textTransform","textIndent","textDecoration","letterSpacing","wordSpacing","tabSize","MozTabSize"],n="undefined"!=typeof window,r=n&&null!=window.mozInnerScreenX;function o(e,o,i){if(!n)throw new Error("textarea-caret-position#getCaretCoordinates should only be called in a browser");var a=i&&i.debug||!1;if(a){var s=document.querySelector("#input-textarea-caret-position-mirror-div");s&&s.parentNode.removeChild(s)}var u=document.createElement("div");u.id="input-textarea-caret-position-mirror-div",document.body.appendChild(u);var l=u.style,c=window.getComputedStyle?window.getComputedStyle(e):e.currentStyle,p="INPUT"===e.nodeName;l.whiteSpace="pre-wrap",p||(l.wordWrap="break-word"),l.position="absolute",a||(l.visibility="hidden"),t.forEach(function(e){p&&"lineHeight"===e?l.lineHeight=c.height:l[e]=c[e]}),r?e.scrollHeight>parseInt(c.height)&&(l.overflowY="scroll"):l.overflow="hidden",u.textContent=e.value.substring(0,o),p&&(u.textContent=u.textContent.replace(/\s/g,"Â "));var f=document.createElement("span");f.textContent=e.value.substring(o)||".",u.appendChild(f);var h={top:f.offsetTop+parseInt(c.borderTopWidth),left:f.offsetLeft+parseInt(c.borderLeftWidth),height:parseInt(c.lineHeight)};return a?f.style.backgroundColor="#aaa":document.body.removeChild(u),h}void 0!==e.exports?e.exports=o:n&&(window.getCaretCoordinates=o)}()},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(0),o=n(14),i=n(16),a=n(17),s=n(18),u=n(7),l="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(19);e.exports=function(e){return new Promise(function(t,c){var p=e.data,f=e.headers;r.isFormData(p)&&delete f["Content-Type"];var h=new XMLHttpRequest,d="onreadystatechange",y=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in h||s(e.url)||(h=new window.XDomainRequest,d="onload",y=!0,h.onprogress=function(){},h.ontimeout=function(){}),e.auth){var v=e.auth.username||"",g=e.auth.password||"";f.Authorization="Basic "+l(v+":"+g)}if(h.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),h.timeout=e.timeout,h[d]=function(){if(h&&(4===h.readyState||y)&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in h?a(h.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?h.response:h.responseText,status:1223===h.status?204:h.status,statusText:1223===h.status?"No Content":h.statusText,headers:n,config:e,request:h};o(t,c,r),h=null}},h.onerror=function(){c(u("Network Error",e,null,h)),h=null},h.ontimeout=function(){c(u("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",h)),h=null},r.isStandardBrowserEnv()){var m=n(20),b=(e.withCredentials||s(e.url))&&e.xsrfCookieName?m.read(e.xsrfCookieName):void 0;b&&(f[e.xsrfHeaderName]=b)}if("setRequestHeader"in h&&r.forEach(f,function(e,t){void 0===p&&"content-type"===t.toLowerCase()?delete f[t]:h.setRequestHeader(t,e)}),e.withCredentials&&(h.withCredentials=!0),e.responseType)try{h.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&h.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){h&&(h.abort(),c(e),h=null)}),void 0===p&&(p=null),h.send(p)})}},function(e,t,n){"use strict";var r=n(15);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";var r=n(0),o=n(5),i=n(12),a=n(2);function s(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var u=s(a);u.Axios=i,u.create=function(e){return s(r.merge(a,e))},u.Cancel=n(9),u.CancelToken=n(26),u.isCancel=n(8),u.all=function(e){return Promise.all(e)},u.spread=n(27),e.exports=u,e.exports.default=u},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(2),o=n(0),i=n(21),a=n(22);function s(e){this.defaults=e,this.interceptors={request:new i,response:new i}}s.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},o.forEach(["delete","get","head","options"],function(e){s.prototype[e]=function(t,n){return this.request(o.merge(n||{},{method:e,url:t}))}}),o.forEach(["post","put","patch"],function(e){s.prototype[e]=function(t,n,r){return this.request(o.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=s},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(7);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},function(e,t,n){"use strict";var r=n(0);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))}))}),i=a.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},function(e,t,n){"use strict";var r=n(0),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}}),a):a}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,i=String(e),a="",s=0,u=r;i.charAt(0|s)||(u="=",s%1);a+=u.charAt(63&t>>8-s%1*8)){if((n=i.charCodeAt(s+=.75))>255)throw new o;t=t<<8|n}return a}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(i)&&s.push("domain="+i),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(0);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},function(e,t,n){"use strict";var r=n(0),o=n(23),i=n(8),a=n(2),s=n(24),u=n(25);function l(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return l(e),e.baseURL&&!s(e.url)&&(e.url=u(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||a.adapter)(e).then(function(t){return l(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return i(t)||(l(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(9);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){var r;function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(i){"use strict";var a={newline:/^\n+/,code:/^( {4}[^\n]+\n*)+/,fences:/^ {0,3}(`{3,}|~{3,})([^`~\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?:\n+|$)|$)/,hr:/^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,heading:/^ {0,3}(#{1,6}) +([^\n]*?)(?: +#+)? *(?:\n+|$)/,blockquote:/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,list:/^( {0,3})(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,html:"^ {0,3}(?:<(script|pre|style)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?\\?>\\n*|<![A-Z][\\s\\S]*?>\\n*|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\n*|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:\\n{2,}|$)|<(?!script|pre|style)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$)|</(?!script|pre|style)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$))",def:/^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,nptable:w,table:w,lheading:/^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,_paragraph:/^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html)[^\n]+)*)/,text:/^[^\n]+/};function s(e){this.tokens=[],this.tokens.links=Object.create(null),this.options=e||E.defaults,this.rules=a.normal,this.options.pedantic?this.rules=a.pedantic:this.options.gfm&&(this.rules=a.gfm)}a._label=/(?!\s*\])(?:\\[\[\]]|[^\[\]])+/,a._title=/(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/,a.def=v(a.def).replace("label",a._label).replace("title",a._title).getRegex(),a.bullet=/(?:[*+-]|\d{1,9}\.)/,a.item=/^( *)(bull) ?[^\n]*(?:\n(?!\1bull ?)[^\n]*)*/,a.item=v(a.item,"gm").replace(/bull/g,a.bullet).getRegex(),a.list=v(a.list).replace(/bull/g,a.bullet).replace("hr","\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def","\\n+(?="+a.def.source+")").getRegex(),a._tag="address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul",a._comment=/<!--(?!-?>)[\s\S]*?-->/,a.html=v(a.html,"i").replace("comment",a._comment).replace("tag",a._tag).replace("attribute",/ +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(),a.paragraph=v(a._paragraph).replace("hr",a.hr).replace("heading"," {0,3}#{1,6} +").replace("|lheading","").replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}|~{3,})[^`\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)").replace("tag",a._tag).getRegex(),a.blockquote=v(a.blockquote).replace("paragraph",a.paragraph).getRegex(),a.normal=x({},a),a.gfm=x({},a.normal,{nptable:/^ *([^|\n ].*\|.*)\n *([-:]+ *\|[-| :]*)(?:\n((?:.*[^>\n ].*(?:\n|$))*)\n*|$)/,table:/^ *\|(.+)\n *\|?( *[-:]+[-| :]*)(?:\n((?: *[^>\n ].*(?:\n|$))*)\n*|$)/}),a.pedantic=x({},a.normal,{html:v("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace("comment",a._comment).replace(/tag/g,"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,heading:/^ *(#{1,6}) *([^\n]+?) *(?:#+ *)?(?:\n+|$)/,fences:w,paragraph:v(a.normal._paragraph).replace("hr",a.hr).replace("heading"," *#{1,6} *[^\n]").replace("lheading",a.lheading).replace("blockquote"," {0,3}>").replace("|fences","").replace("|list","").replace("|html","").getRegex()}),s.rules=a,s.lex=function(e,t){return new s(t).lex(e)},s.prototype.lex=function(e){return e=e.replace(/\r\n|\r/g,"\n").replace(/\t/g,"    ").replace(/\u00a0/g," ").replace(/\u2424/g,"\n"),this.token(e,!0)},s.prototype.token=function(e,t){var n,r,o,i,s,u,l,c,p,f,h,y,v,g,m,b;for(e=e.replace(/^ +$/gm,"");e;)if((o=this.rules.newline.exec(e))&&(e=e.substring(o[0].length),o[0].length>1&&this.tokens.push({type:"space"})),o=this.rules.code.exec(e)){var w=this.tokens[this.tokens.length-1];e=e.substring(o[0].length),w&&"paragraph"===w.type?w.text+="\n"+o[0].trimRight():(o=o[0].replace(/^ {4}/gm,""),this.tokens.push({type:"code",codeBlockStyle:"indented",text:this.options.pedantic?o:_(o,"\n")}))}else if(o=this.rules.fences.exec(e))e=e.substring(o[0].length),this.tokens.push({type:"code",lang:o[2]?o[2].trim():o[2],text:o[3]||""});else if(o=this.rules.heading.exec(e))e=e.substring(o[0].length),this.tokens.push({type:"heading",depth:o[1].length,text:o[2]});else if((o=this.rules.nptable.exec(e))&&(u={type:"table",header:k(o[1].replace(/^ *| *\| *$/g,"")),align:o[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:o[3]?o[3].replace(/\n$/,"").split("\n"):[]}).header.length===u.align.length){for(e=e.substring(o[0].length),h=0;h<u.align.length;h++)/^ *-+: *$/.test(u.align[h])?u.align[h]="right":/^ *:-+: *$/.test(u.align[h])?u.align[h]="center":/^ *:-+ *$/.test(u.align[h])?u.align[h]="left":u.align[h]=null;for(h=0;h<u.cells.length;h++)u.cells[h]=k(u.cells[h],u.header.length);this.tokens.push(u)}else if(o=this.rules.hr.exec(e))e=e.substring(o[0].length),this.tokens.push({type:"hr"});else if(o=this.rules.blockquote.exec(e))e=e.substring(o[0].length),this.tokens.push({type:"blockquote_start"}),o=o[0].replace(/^ *> ?/gm,""),this.token(o,t),this.tokens.push({type:"blockquote_end"});else if(o=this.rules.list.exec(e)){for(e=e.substring(o[0].length),l={type:"list_start",ordered:g=(i=o[2]).length>1,start:g?+i:"",loose:!1},this.tokens.push(l),c=[],n=!1,v=(o=o[0].match(this.rules.item)).length,h=0;h<v;h++)f=(u=o[h]).length,~(u=u.replace(/^ *([*+-]|\d+\.) */,"")).indexOf("\n ")&&(f-=u.length,u=this.options.pedantic?u.replace(/^ {1,4}/gm,""):u.replace(new RegExp("^ {1,"+f+"}","gm"),"")),h!==v-1&&(s=a.bullet.exec(o[h+1])[0],(i.length>1?1===s.length:s.length>1||this.options.smartLists&&s!==i)&&(e=o.slice(h+1).join("\n")+e,h=v-1)),r=n||/\n\n(?!\s*$)/.test(u),h!==v-1&&(n="\n"===u.charAt(u.length-1),r||(r=n)),r&&(l.loose=!0),b=void 0,(m=/^\[[ xX]\] /.test(u))&&(b=" "!==u[1],u=u.replace(/^\[[ xX]\] +/,"")),p={type:"list_item_start",task:m,checked:b,loose:r},c.push(p),this.tokens.push(p),this.token(u,!1),this.tokens.push({type:"list_item_end"});if(l.loose)for(v=c.length,h=0;h<v;h++)c[h].loose=!0;this.tokens.push({type:"list_end"})}else if(o=this.rules.html.exec(e))e=e.substring(o[0].length),this.tokens.push({type:this.options.sanitize?"paragraph":"html",pre:!this.options.sanitizer&&("pre"===o[1]||"script"===o[1]||"style"===o[1]),text:this.options.sanitize?this.options.sanitizer?this.options.sanitizer(o[0]):d(o[0]):o[0]});else if(t&&(o=this.rules.def.exec(e)))e=e.substring(o[0].length),o[3]&&(o[3]=o[3].substring(1,o[3].length-1)),y=o[1].toLowerCase().replace(/\s+/g," "),this.tokens.links[y]||(this.tokens.links[y]={href:o[2],title:o[3]});else if((o=this.rules.table.exec(e))&&(u={type:"table",header:k(o[1].replace(/^ *| *\| *$/g,"")),align:o[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:o[3]?o[3].replace(/\n$/,"").split("\n"):[]}).header.length===u.align.length){for(e=e.substring(o[0].length),h=0;h<u.align.length;h++)/^ *-+: *$/.test(u.align[h])?u.align[h]="right":/^ *:-+: *$/.test(u.align[h])?u.align[h]="center":/^ *:-+ *$/.test(u.align[h])?u.align[h]="left":u.align[h]=null;for(h=0;h<u.cells.length;h++)u.cells[h]=k(u.cells[h].replace(/^ *\| *| *\| *$/g,""),u.header.length);this.tokens.push(u)}else if(o=this.rules.lheading.exec(e))e=e.substring(o[0].length),this.tokens.push({type:"heading",depth:"="===o[2].charAt(0)?1:2,text:o[1]});else if(t&&(o=this.rules.paragraph.exec(e)))e=e.substring(o[0].length),this.tokens.push({type:"paragraph",text:"\n"===o[1].charAt(o[1].length-1)?o[1].slice(0,-1):o[1]});else if(o=this.rules.text.exec(e))e=e.substring(o[0].length),this.tokens.push({type:"text",text:o[0]});else if(e)throw new Error("Infinite loop on byte: "+e.charCodeAt(0));return this.tokens};var u={escape:/^\\([!"#$%&'()*+,\-.\/:;<=>?@\[\]\\^_`{|}~])/,autolink:/^<(scheme:[^\s\x00-\x1f<>]*|email)>/,url:w,tag:"^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",link:/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,reflink:/^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,nolink:/^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,strong:/^__([^\s_])__(?!_)|^\*\*([^\s*])\*\*(?!\*)|^__([^\s][\s\S]*?[^\s])__(?!_)|^\*\*([^\s][\s\S]*?[^\s])\*\*(?!\*)/,em:/^_([^\s_])_(?!_)|^\*([^\s*<\[])\*(?!\*)|^_([^\s<][\s\S]*?[^\s_])_(?!_|[^\spunctuation])|^_([^\s_<][\s\S]*?[^\s])_(?!_|[^\spunctuation])|^\*([^\s<"][\s\S]*?[^\s\*])\*(?!\*|[^\spunctuation])|^\*([^\s*"<\[][\s\S]*?[^\s])\*(?!\*)/,code:/^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,br:/^( {2,}|\\)\n(?!\s*$)/,del:w,text:/^(`+|[^`])(?:[\s\S]*?(?:(?=[\\<!\[`*]|\b_|$)|[^ ](?= {2,}\n))|(?= {2,}\n))/};function l(e,t){if(this.options=t||E.defaults,this.links=e,this.rules=u.normal,this.renderer=this.options.renderer||new c,this.renderer.options=this.options,!this.links)throw new Error("Tokens array requires a `links` property.");this.options.pedantic?this.rules=u.pedantic:this.options.gfm&&(this.options.breaks?this.rules=u.breaks:this.rules=u.gfm)}function c(e){this.options=e||E.defaults}function p(){}function f(e){this.tokens=[],this.token=null,this.options=e||E.defaults,this.options.renderer=this.options.renderer||new c,this.renderer=this.options.renderer,this.renderer.options=this.options,this.slugger=new h}function h(){this.seen={}}function d(e,t){if(t){if(d.escapeTest.test(e))return e.replace(d.escapeReplace,function(e){return d.replacements[e]})}else if(d.escapeTestNoEncode.test(e))return e.replace(d.escapeReplaceNoEncode,function(e){return d.replacements[e]});return e}function y(e){return e.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi,function(e,t){return"colon"===(t=t.toLowerCase())?":":"#"===t.charAt(0)?"x"===t.charAt(1)?String.fromCharCode(parseInt(t.substring(2),16)):String.fromCharCode(+t.substring(1)):""})}function v(e,t){return e=e.source||e,t=t||"",{replace:function(t,n){return n=(n=n.source||n).replace(/(^|[^\[])\^/g,"$1"),e=e.replace(t,n),this},getRegex:function(){return new RegExp(e,t)}}}function g(e,t,n){if(e){try{var r=decodeURIComponent(y(n)).replace(/[^\w:]/g,"").toLowerCase()}catch(e){return null}if(0===r.indexOf("javascript:")||0===r.indexOf("vbscript:")||0===r.indexOf("data:"))return null}t&&!b.test(n)&&(n=function(e,t){m[" "+e]||(/^[^:]+:\/*[^\/]*$/.test(e)?m[" "+e]=e+"/":m[" "+e]=_(e,"/",!0));return e=m[" "+e],"//"===t.slice(0,2)?e.replace(/:[\s\S]*/,":")+t:"/"===t.charAt(0)?e.replace(/(:\/*[^\/]*)[\s\S]*/,"$1")+t:e+t}(t,n));try{n=encodeURI(n).replace(/%25/g,"%")}catch(e){return null}return n}u._punctuation="!\"#$%&'()*+,\\-./:;<=>?@\\[^_{|}~",u.em=v(u.em).replace(/punctuation/g,u._punctuation).getRegex(),u._escapes=/\\([!"#$%&'()*+,\-.\/:;<=>?@\[\]\\^_`{|}~])/g,u._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,u._email=/[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,u.autolink=v(u.autolink).replace("scheme",u._scheme).replace("email",u._email).getRegex(),u._attribute=/\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/,u.tag=v(u.tag).replace("comment",a._comment).replace("attribute",u._attribute).getRegex(),u._label=/(?:\[[^\[\]]*\]|\\.|`[^`]*`|[^\[\]\\`])*?/,u._href=/<(?:\\[<>]?|[^\s<>\\])*>|[^\s\x00-\x1f]*/,u._title=/"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/,u.link=v(u.link).replace("label",u._label).replace("href",u._href).replace("title",u._title).getRegex(),u.reflink=v(u.reflink).replace("label",u._label).getRegex(),u.normal=x({},u),u.pedantic=x({},u.normal,{strong:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,em:/^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/,link:v(/^!?\[(label)\]\((.*?)\)/).replace("label",u._label).getRegex(),reflink:v(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label",u._label).getRegex()}),u.gfm=x({},u.normal,{escape:v(u.escape).replace("])","~|])").getRegex(),_extended_email:/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,url:/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,_backpedal:/(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,del:/^~+(?=\S)([\s\S]*?\S)~+/,text:/^(`+|[^`])(?:[\s\S]*?(?:(?=[\\<!\[`*~]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))|(?= {2,}\n|[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))/}),u.gfm.url=v(u.gfm.url,"i").replace("email",u.gfm._extended_email).getRegex(),u.breaks=x({},u.gfm,{br:v(u.br).replace("{2,}","*").getRegex(),text:v(u.gfm.text).replace("\\b_","\\b_| {2,}\\n").replace(/\{2,\}/g,"*").getRegex()}),l.rules=u,l.output=function(e,t,n){return new l(t,n).output(e)},l.prototype.output=function(e){for(var t,n,r,o,i,a,s="";e;)if(i=this.rules.escape.exec(e))e=e.substring(i[0].length),s+=d(i[1]);else if(i=this.rules.tag.exec(e))!this.inLink&&/^<a /i.test(i[0])?this.inLink=!0:this.inLink&&/^<\/a>/i.test(i[0])&&(this.inLink=!1),!this.inRawBlock&&/^<(pre|code|kbd|script)(\s|>)/i.test(i[0])?this.inRawBlock=!0:this.inRawBlock&&/^<\/(pre|code|kbd|script)(\s|>)/i.test(i[0])&&(this.inRawBlock=!1),e=e.substring(i[0].length),s+=this.options.sanitize?this.options.sanitizer?this.options.sanitizer(i[0]):d(i[0]):i[0];else if(i=this.rules.link.exec(e)){var u=S(i[2],"()");if(u>-1){var c=4+i[1].length+u;i[2]=i[2].substring(0,u),i[0]=i[0].substring(0,c).trim(),i[3]=""}e=e.substring(i[0].length),this.inLink=!0,r=i[2],this.options.pedantic?(t=/^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(r))?(r=t[1],o=t[3]):o="":o=i[3]?i[3].slice(1,-1):"",r=r.trim().replace(/^<([\s\S]*)>$/,"$1"),s+=this.outputLink(i,{href:l.escapes(r),title:l.escapes(o)}),this.inLink=!1}else if((i=this.rules.reflink.exec(e))||(i=this.rules.nolink.exec(e))){if(e=e.substring(i[0].length),t=(i[2]||i[1]).replace(/\s+/g," "),!(t=this.links[t.toLowerCase()])||!t.href){s+=i[0].charAt(0),e=i[0].substring(1)+e;continue}this.inLink=!0,s+=this.outputLink(i,t),this.inLink=!1}else if(i=this.rules.strong.exec(e))e=e.substring(i[0].length),s+=this.renderer.strong(this.output(i[4]||i[3]||i[2]||i[1]));else if(i=this.rules.em.exec(e))e=e.substring(i[0].length),s+=this.renderer.em(this.output(i[6]||i[5]||i[4]||i[3]||i[2]||i[1]));else if(i=this.rules.code.exec(e))e=e.substring(i[0].length),s+=this.renderer.codespan(d(i[2].trim(),!0));else if(i=this.rules.br.exec(e))e=e.substring(i[0].length),s+=this.renderer.br();else if(i=this.rules.del.exec(e))e=e.substring(i[0].length),s+=this.renderer.del(this.output(i[1]));else if(i=this.rules.autolink.exec(e))e=e.substring(i[0].length),r="@"===i[2]?"mailto:"+(n=d(this.mangle(i[1]))):n=d(i[1]),s+=this.renderer.link(r,null,n);else if(this.inLink||!(i=this.rules.url.exec(e))){if(i=this.rules.text.exec(e))e=e.substring(i[0].length),this.inRawBlock?s+=this.renderer.text(this.options.sanitize?this.options.sanitizer?this.options.sanitizer(i[0]):d(i[0]):i[0]):s+=this.renderer.text(d(this.smartypants(i[0])));else if(e)throw new Error("Infinite loop on byte: "+e.charCodeAt(0))}else{if("@"===i[2])r="mailto:"+(n=d(i[0]));else{do{a=i[0],i[0]=this.rules._backpedal.exec(i[0])[0]}while(a!==i[0]);n=d(i[0]),r="www."===i[1]?"http://"+n:n}e=e.substring(i[0].length),s+=this.renderer.link(r,null,n)}return s},l.escapes=function(e){return e?e.replace(l.rules._escapes,"$1"):e},l.prototype.outputLink=function(e,t){var n=t.href,r=t.title?d(t.title):null;return"!"!==e[0].charAt(0)?this.renderer.link(n,r,this.output(e[1])):this.renderer.image(n,r,d(e[1]))},l.prototype.smartypants=function(e){return this.options.smartypants?e.replace(/---/g,"â").replace(/--/g,"â").replace(/(^|[-\u2014\/(\[{"\s])'/g,"$1â").replace(/'/g,"â").replace(/(^|[-\u2014\/(\[{\u2018\s])"/g,"$1â").replace(/"/g,"â").replace(/\.{3}/g,"â¦"):e},l.prototype.mangle=function(e){if(!this.options.mangle)return e;for(var t,n="",r=e.length,o=0;o<r;o++)t=e.charCodeAt(o),Math.random()>.5&&(t="x"+t.toString(16)),n+="&#"+t+";";return n},c.prototype.code=function(e,t,n){var r=(t||"").match(/\S*/)[0];if(this.options.highlight){var o=this.options.highlight(e,r);null!=o&&o!==e&&(n=!0,e=o)}return r?'<pre><code class="'+this.options.langPrefix+d(r,!0)+'">'+(n?e:d(e,!0))+"</code></pre>\n":"<pre><code>"+(n?e:d(e,!0))+"</code></pre>"},c.prototype.blockquote=function(e){return"<blockquote>\n"+e+"</blockquote>\n"},c.prototype.html=function(e){return e},c.prototype.heading=function(e,t,n,r){return this.options.headerIds?"<h"+t+' id="'+this.options.headerPrefix+r.slug(n)+'">'+e+"</h"+t+">\n":"<h"+t+">"+e+"</h"+t+">\n"},c.prototype.hr=function(){return this.options.xhtml?"<hr/>\n":"<hr>\n"},c.prototype.list=function(e,t,n){var r=t?"ol":"ul";return"<"+r+(t&&1!==n?' start="'+n+'"':"")+">\n"+e+"</"+r+">\n"},c.prototype.listitem=function(e){return"<li>"+e+"</li>\n"},c.prototype.checkbox=function(e){return"<input "+(e?'checked="" ':"")+'disabled="" type="checkbox"'+(this.options.xhtml?" /":"")+"> "},c.prototype.paragraph=function(e){return"<p>"+e+"</p>\n"},c.prototype.table=function(e,t){return t&&(t="<tbody>"+t+"</tbody>"),"<table>\n<thead>\n"+e+"</thead>\n"+t+"</table>\n"},c.prototype.tablerow=function(e){return"<tr>\n"+e+"</tr>\n"},c.prototype.tablecell=function(e,t){var n=t.header?"th":"td";return(t.align?"<"+n+' align="'+t.align+'">':"<"+n+">")+e+"</"+n+">\n"},c.prototype.strong=function(e){return"<strong>"+e+"</strong>"},c.prototype.em=function(e){return"<em>"+e+"</em>"},c.prototype.codespan=function(e){return"<code>"+e+"</code>"},c.prototype.br=function(){return this.options.xhtml?"<br/>":"<br>"},c.prototype.del=function(e){return"<del>"+e+"</del>"},c.prototype.link=function(e,t,n){if(null===(e=g(this.options.sanitize,this.options.baseUrl,e)))return n;var r='<a href="'+d(e)+'"';return t&&(r+=' title="'+t+'"'),r+=">"+n+"</a>"},c.prototype.image=function(e,t,n){if(null===(e=g(this.options.sanitize,this.options.baseUrl,e)))return n;var r='<img src="'+e+'" alt="'+n+'"';return t&&(r+=' title="'+t+'"'),r+=this.options.xhtml?"/>":">"},c.prototype.text=function(e){return e},p.prototype.strong=p.prototype.em=p.prototype.codespan=p.prototype.del=p.prototype.text=function(e){return e},p.prototype.link=p.prototype.image=function(e,t,n){return""+n},p.prototype.br=function(){return""},f.parse=function(e,t){return new f(t).parse(e)},f.prototype.parse=function(e){this.inline=new l(e.links,this.options),this.inlineText=new l(e.links,x({},this.options,{renderer:new p})),this.tokens=e.reverse();for(var t="";this.next();)t+=this.tok();return t},f.prototype.next=function(){return this.token=this.tokens.pop(),this.token},f.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0},f.prototype.parseText=function(){for(var e=this.token.text;"text"===this.peek().type;)e+="\n"+this.next().text;return this.inline.output(e)},f.prototype.tok=function(){switch(this.token.type){case"space":return"";case"hr":return this.renderer.hr();case"heading":return this.renderer.heading(this.inline.output(this.token.text),this.token.depth,y(this.inlineText.output(this.token.text)),this.slugger);case"code":return this.renderer.code(this.token.text,this.token.lang,this.token.escaped);case"table":var e,t,n,r,o="",i="";for(n="",e=0;e<this.token.header.length;e++)n+=this.renderer.tablecell(this.inline.output(this.token.header[e]),{header:!0,align:this.token.align[e]});for(o+=this.renderer.tablerow(n),e=0;e<this.token.cells.length;e++){for(t=this.token.cells[e],n="",r=0;r<t.length;r++)n+=this.renderer.tablecell(this.inline.output(t[r]),{header:!1,align:this.token.align[r]});i+=this.renderer.tablerow(n)}return this.renderer.table(o,i);case"blockquote_start":for(i="";"blockquote_end"!==this.next().type;)i+=this.tok();return this.renderer.blockquote(i);case"list_start":i="";for(var a=this.token.ordered,s=this.token.start;"list_end"!==this.next().type;)i+=this.tok();return this.renderer.list(i,a,s);case"list_item_start":i="";var u=this.token.loose,l=this.token.checked,c=this.token.task;for(this.token.task&&(i+=this.renderer.checkbox(l));"list_item_end"!==this.next().type;)i+=u||"text"!==this.token.type?this.tok():this.parseText();return this.renderer.listitem(i,c,l);case"html":return this.renderer.html(this.token.text);case"paragraph":return this.renderer.paragraph(this.inline.output(this.token.text));case"text":return this.renderer.paragraph(this.parseText());default:var p='Token with "'+this.token.type+'" type was not found.';if(!this.options.silent)throw new Error(p);console.log(p)}},h.prototype.slug=function(e){var t=e.toLowerCase().trim().replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,.\/:;<=>?@[\]^`{|}~]/g,"").replace(/\s/g,"-");if(this.seen.hasOwnProperty(t)){var n=t;do{this.seen[n]++,t=n+"-"+this.seen[n]}while(this.seen.hasOwnProperty(t))}return this.seen[t]=0,t},d.escapeTest=/[&<>"']/,d.escapeReplace=/[&<>"']/g,d.replacements={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},d.escapeTestNoEncode=/[<>"']|&(?!#?\w+;)/,d.escapeReplaceNoEncode=/[<>"']|&(?!#?\w+;)/g;var m={},b=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;function w(){}function x(e){for(var t,n,r=1;r<arguments.length;r++)for(n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}function k(e,t){var n=e.replace(/\|/g,function(e,t,n){for(var r=!1,o=t;--o>=0&&"\\"===n[o];)r=!r;return r?"|":" |"}).split(/ \|/),r=0;if(n.length>t)n.splice(t);else for(;n.length<t;)n.push("");for(;r<n.length;r++)n[r]=n[r].trim().replace(/\\\|/g,"|");return n}function _(e,t,n){if(0===e.length)return"";for(var r=0;r<e.length;){var o=e.charAt(e.length-r-1);if(o!==t||n){if(o===t||!n)break;r++}else r++}return e.substr(0,e.length-r)}function S(e,t){if(-1===e.indexOf(t[1]))return-1;for(var n=0,r=0;r<e.length;r++)if("\\"===e[r])r++;else if(e[r]===t[0])n++;else if(e[r]===t[1]&&--n<0)return r;return-1}function O(e){e&&e.sanitize&&!e.silent&&console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options")}function E(e,t,n){if(null==e)throw new Error("marked(): input parameter is undefined or null");if("string"!=typeof e)throw new Error("marked(): input parameter is of type "+Object.prototype.toString.call(e)+", string expected");if(n||"function"==typeof t){n||(n=t,t=null),O(t=x({},E.defaults,t||{}));var r,o,i=t.highlight,a=0;try{r=s.lex(e,t)}catch(e){return n(e)}o=r.length;var u=function(e){if(e)return t.highlight=i,n(e);var o;try{o=f.parse(r,t)}catch(t){e=t}return t.highlight=i,e?n(e):n(null,o)};if(!i||i.length<3)return u();if(delete t.highlight,!o)return u();for(;a<r.length;a++)!function(e){"code"!==e.type?--o||u():i(e.text,e.lang,function(t,n){return t?u(t):null==n||n===e.text?--o||u():(e.text=n,e.escaped=!0,void(--o||u()))})}(r[a])}else try{return t&&(t=x({},E.defaults,t)),O(t),f.parse(s.lex(e,t),t)}catch(e){if(e.message+="\nPlease report this to https://github.com/markedjs/marked.",(t||E.defaults).silent)return"<p>An error occurred:</p><pre>"+d(e.message+"",!0)+"</pre>";throw e}}w.exec=w,E.options=E.setOptions=function(e){return x(E.defaults,e),E},E.getDefaults=function(){return{baseUrl:null,breaks:!1,gfm:!0,headerIds:!0,headerPrefix:"",highlight:null,langPrefix:"language-",mangle:!0,pedantic:!1,renderer:new c,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,xhtml:!1}},E.defaults=E.getDefaults(),E.Parser=f,E.parser=f.parse,E.Renderer=c,E.TextRenderer=p,E.Lexer=s,E.lexer=s.lex,E.InlineLexer=l,E.inlineLexer=l.output,E.Slugger=h,E.parse=E,"object"===o(t)?e.exports=E:void 0===(r=function(){return E}.call(t,n,t,e))||(e.exports=r)}(this||("undefined"!=typeof window?window:global))},function(e,t,n){"use strict";n.r(t);var r=new WeakMap,o=function(e){return function(){var t=e.apply(void 0,arguments);return r.set(t,!0),t}},i=function(e){return"function"==typeof e&&r.has(e)},a=void 0!==window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,s=function(e,t){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;t!==n;){var r=t.nextSibling;e.removeChild(t),t=r}},u={},l={};var c="{{lit-".concat(String(Math.random()).slice(2),"}}"),p="\x3c!--".concat(c,"--\x3e"),f=new RegExp("".concat(c,"|").concat(p)),h=function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.parts=[],this.element=n;for(var r=[],o=[],i=document.createTreeWalker(n.content,133,null,!1),a=0,s=-1,u=0,l=t.strings,p=t.values.length;u<p;){var h=i.nextNode();if(null!==h){if(s++,1===h.nodeType){if(h.hasAttributes()){for(var y=h.attributes,m=y.length,b=0,w=0;w<m;w++)d(y[w].name,"$lit$")&&b++;for(;b-- >0;){var x=l[u],k=g.exec(x)[2],_=k.toLowerCase()+"$lit$",S=h.getAttribute(_);h.removeAttribute(_);var O=S.split(f);this.parts.push({type:"attribute",index:s,name:k,strings:O}),u+=O.length-1}}"TEMPLATE"===h.tagName&&(o.push(h),i.currentNode=h.content)}else if(3===h.nodeType){var E=h.data;if(E.indexOf(c)>=0){for(var P=h.parentNode,C=E.split(f),j=C.length-1,R=0;R<j;R++){var A=void 0,T=C[R];if(""===T)A=v();else{var z=g.exec(T);null!==z&&d(z[2],"$lit$")&&(T=T.slice(0,z.index)+z[1]+z[2].slice(0,-"$lit$".length)+z[3]),A=document.createTextNode(T)}P.insertBefore(A,h),this.parts.push({type:"node",index:++s})}""===C[j]?(P.insertBefore(v(),h),r.push(h)):h.data=C[j],u+=j}}else if(8===h.nodeType)if(h.data===c){var N=h.parentNode;null!==h.previousSibling&&s!==a||(s++,N.insertBefore(v(),h)),a=s,this.parts.push({type:"node",index:s}),null===h.nextSibling?h.data="":(r.push(h),s--),u++}else for(var q=-1;-1!==(q=h.data.indexOf(c,q+1));)this.parts.push({type:"node",index:-1}),u++}else i.currentNode=o.pop()}for(var D=0,L=r;D<L.length;D++){var B=L[D];B.parentNode.removeChild(B)}},d=function(e,t){var n=e.length-t.length;return n>=0&&e.slice(n)===t},y=function(e){return-1!==e.index},v=function(){return document.createComment("")},g=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=\/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;function m(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var w=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.__parts=[],this.template=t,this.processor=n,this.options=r}var t,n,r;return t=e,(n=[{key:"update",value:function(e){var t=0,n=!0,r=!1,o=void 0;try{for(var i,a=this.__parts[Symbol.iterator]();!(n=(i=a.next()).done);n=!0){var s=i.value;void 0!==s&&s.setValue(e[t]),t++}}catch(e){r=!0,o=e}finally{try{n||null==a.return||a.return()}finally{if(r)throw o}}var u=!0,l=!1,c=void 0;try{for(var p,f=this.__parts[Symbol.iterator]();!(u=(p=f.next()).done);u=!0){var h=p.value;void 0!==h&&h.commit()}}catch(e){l=!0,c=e}finally{try{u||null==f.return||f.return()}finally{if(l)throw c}}}},{key:"_clone",value:function(){for(var e,t=a?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),n=[],r=this.template.parts,o=document.createTreeWalker(t,133,null,!1),i=0,s=0,u=o.nextNode();i<r.length;)if(e=r[i],y(e)){for(;s<e.index;)s++,"TEMPLATE"===u.nodeName&&(n.push(u),o.currentNode=u.content),null===(u=o.nextNode())&&(o.currentNode=n.pop(),u=o.nextNode());if("node"===e.type){var l=this.processor.handleTextExpression(this.options);l.insertAfterNode(u.previousSibling),this.__parts.push(l)}else{var c;(c=this.__parts).push.apply(c,m(this.processor.handleAttributeExpressions(u,e.name,e.strings,this.options)))}i++}else this.__parts.push(void 0),i++;return a&&(document.adoptNode(t),customElements.upgrade(t)),t}}])&&b(t.prototype,n),r&&b(t,r),e}();function x(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function k(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _(e,t,n){return t&&k(e.prototype,t),n&&k(e,n),e}var S=function(){function e(t,n,r,o){x(this,e),this.strings=t,this.values=n,this.type=r,this.processor=o}return _(e,[{key:"getHTML",value:function(){for(var e=this.strings.length-1,t="",n=!1,r=0;r<e;r++){var o=this.strings[r],i=o.lastIndexOf("\x3c!--");n=(i>-1||n)&&-1===o.indexOf("--\x3e",i+1);var a=g.exec(o);t+=null===a?o+(n?c:p):o.substr(0,a.index)+a[1]+a[2]+"$lit$"+a[3]+c}return t+=this.strings[e]}},{key:"getTemplateElement",value:function(){var e=document.createElement("template");return e.innerHTML=this.getHTML(),e}}]),e}();function O(e,t){return!t||"object"!==z(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function E(e,t,n){return(E="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=P(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function P(e){return(P=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function C(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&j(e,t)}function j(e,t){return(j=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function R(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function A(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function T(e,t,n){return t&&A(e.prototype,t),n&&A(e,n),e}function z(e){return(z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var N=function(e){return null===e||!("object"===z(e)||"function"==typeof e)},q=function(e){return Array.isArray(e)||!(!e||!e[Symbol.iterator])},D=function(){function e(t,n,r){R(this,e),this.dirty=!0,this.element=t,this.name=n,this.strings=r,this.parts=[];for(var o=0;o<r.length-1;o++)this.parts[o]=this._createPart()}return T(e,[{key:"_createPart",value:function(){return new L(this)}},{key:"_getValue",value:function(){for(var e=this.strings,t=e.length-1,n="",r=0;r<t;r++){n+=e[r];var o=this.parts[r];if(void 0!==o){var i=o.value;if(N(i)||!q(i))n+="string"==typeof i?i:String(i);else{var a=!0,s=!1,u=void 0;try{for(var l,c=i[Symbol.iterator]();!(a=(l=c.next()).done);a=!0){var p=l.value;n+="string"==typeof p?p:String(p)}}catch(e){s=!0,u=e}finally{try{a||null==c.return||c.return()}finally{if(s)throw u}}}}}return n+=e[t]}},{key:"commit",value:function(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}]),e}(),L=function(){function e(t){R(this,e),this.value=void 0,this.committer=t}return T(e,[{key:"setValue",value:function(e){e===u||N(e)&&e===this.value||(this.value=e,i(e)||(this.committer.dirty=!0))}},{key:"commit",value:function(){for(;i(this.value);){var e=this.value;this.value=u,e(this)}this.value!==u&&this.committer.commit()}}]),e}(),B=function(){function e(t){R(this,e),this.value=void 0,this.__pendingValue=void 0,this.options=t}return T(e,[{key:"appendInto",value:function(e){this.startNode=e.appendChild(v()),this.endNode=e.appendChild(v())}},{key:"insertAfterNode",value:function(e){this.startNode=e,this.endNode=e.nextSibling}},{key:"appendIntoPart",value:function(e){e.__insert(this.startNode=v()),e.__insert(this.endNode=v())}},{key:"insertAfterPart",value:function(e){e.__insert(this.startNode=v()),this.endNode=e.endNode,e.endNode=this.startNode}},{key:"setValue",value:function(e){this.__pendingValue=e}},{key:"commit",value:function(){for(;i(this.__pendingValue);){var e=this.__pendingValue;this.__pendingValue=u,e(this)}var t=this.__pendingValue;t!==u&&(N(t)?t!==this.value&&this.__commitText(t):t instanceof S?this.__commitTemplateResult(t):t instanceof Node?this.__commitNode(t):q(t)?this.__commitIterable(t):t===l?(this.value=l,this.clear()):this.__commitText(t))}},{key:"__insert",value:function(e){this.endNode.parentNode.insertBefore(e,this.endNode)}},{key:"__commitNode",value:function(e){this.value!==e&&(this.clear(),this.__insert(e),this.value=e)}},{key:"__commitText",value:function(e){var t=this.startNode.nextSibling;e=null==e?"":e,t===this.endNode.previousSibling&&3===t.nodeType?t.data=e:this.__commitNode(document.createTextNode("string"==typeof e?e:String(e))),this.value=e}},{key:"__commitTemplateResult",value:function(e){var t=this.options.templateFactory(e);if(this.value instanceof w&&this.value.template===t)this.value.update(e.values);else{var n=new w(t,e.processor,this.options),r=n._clone();n.update(e.values),this.__commitNode(r),this.value=n}}},{key:"__commitIterable",value:function(t){Array.isArray(this.value)||(this.value=[],this.clear());var n,r=this.value,o=0,i=!0,a=!1,s=void 0;try{for(var u,l=t[Symbol.iterator]();!(i=(u=l.next()).done);i=!0){var c=u.value;void 0===(n=r[o])&&(n=new e(this.options),r.push(n),0===o?n.appendIntoPart(this):n.insertAfterPart(r[o-1])),n.setValue(c),n.commit(),o++}}catch(e){a=!0,s=e}finally{try{i||null==l.return||l.return()}finally{if(a)throw s}}o<r.length&&(r.length=o,this.clear(n&&n.endNode))}},{key:"clear",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.startNode;s(this.startNode.parentNode,e.nextSibling,this.endNode)}}]),e}(),$=function(){function e(t,n,r){if(R(this,e),this.value=void 0,this.__pendingValue=void 0,2!==r.length||""!==r[0]||""!==r[1])throw new Error("Boolean attributes can only contain a single expression");this.element=t,this.name=n,this.strings=r}return T(e,[{key:"setValue",value:function(e){this.__pendingValue=e}},{key:"commit",value:function(){for(;i(this.__pendingValue);){var e=this.__pendingValue;this.__pendingValue=u,e(this)}if(this.__pendingValue!==u){var t=!!this.__pendingValue;this.value!==t&&(t?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=t),this.__pendingValue=u}}}]),e}(),I=function(e){function t(e,n,r){var o;return R(this,t),(o=O(this,P(t).call(this,e,n,r))).single=2===r.length&&""===r[0]&&""===r[1],o}return C(t,D),T(t,[{key:"_createPart",value:function(){return new F(this)}},{key:"_getValue",value:function(){return this.single?this.parts[0].value:E(P(t.prototype),"_getValue",this).call(this)}},{key:"commit",value:function(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}]),t}(),F=function(e){function t(){return R(this,t),O(this,P(t).apply(this,arguments))}return C(t,L),t}(),U=!1;try{var M={get capture(){return U=!0,!1}};window.addEventListener("test",M,M),window.removeEventListener("test",M,M)}catch(e){}var V=function(){function e(t,n,r){var o=this;R(this,e),this.value=void 0,this.__pendingValue=void 0,this.element=t,this.eventName=n,this.eventContext=r,this.__boundHandleEvent=function(e){return o.handleEvent(e)}}return T(e,[{key:"setValue",value:function(e){this.__pendingValue=e}},{key:"commit",value:function(){for(;i(this.__pendingValue);){var e=this.__pendingValue;this.__pendingValue=u,e(this)}if(this.__pendingValue!==u){var t=this.__pendingValue,n=this.value,r=null==t||null!=n&&(t.capture!==n.capture||t.once!==n.once||t.passive!==n.passive),o=null!=t&&(null==n||r);r&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),o&&(this.__options=H(t),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=t,this.__pendingValue=u}}},{key:"handleEvent",value:function(e){"function"==typeof this.value?this.value.call(this.eventContext||this.element,e):this.value.handleEvent(e)}}]),e}(),H=function(e){return e&&(U?{capture:e.capture,passive:e.passive,once:e.once}:e.capture)};function W(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Z=new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"handleAttributeExpressions",value:function(e,t,n,r){var o=t[0];return"."===o?new I(e,t.slice(1),n).parts:"@"===o?[new V(e,t.slice(1),r.eventContext)]:"?"===o?[new $(e,t.slice(1),n)]:new D(e,t,n).parts}},{key:"handleTextExpression",value:function(e){return new B(e)}}])&&W(t.prototype,n),r&&W(t,r),e}());function X(e){var t=K.get(e.type);void 0===t&&(t={stringsArray:new WeakMap,keyString:new Map},K.set(e.type,t));var n=t.stringsArray.get(e.strings);if(void 0!==n)return n;var r=e.strings.join(c);return void 0===(n=t.keyString.get(r))&&(n=new h(e,e.getTemplateElement()),t.keyString.set(r,n)),t.stringsArray.set(e.strings,n),n}var K=new Map,J=new WeakMap;(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.0.0");var Q=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return new S(e,n,"html",Z)},Y=133;function G(e,t){for(var n=e.element.content,r=e.parts,o=document.createTreeWalker(n,Y,null,!1),i=te(r),a=r[i],s=-1,u=0,l=[],c=null;o.nextNode();){s++;var p=o.currentNode;for(p.previousSibling===c&&(c=null),t.has(p)&&(l.push(p),null===c&&(c=p)),null!==c&&u++;void 0!==a&&a.index===s;)a.index=null!==c?-1:a.index-u,a=r[i=te(r,i)]}l.forEach(function(e){return e.parentNode.removeChild(e)})}var ee=function(e){for(var t=11===e.nodeType?0:1,n=document.createTreeWalker(e,Y,null,!1);n.nextNode();)t++;return t},te=function(e){for(var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1)+1;t<e.length;t++){var n=e[t];if(y(n))return t}return-1};var ne=function(e,t){return"".concat(e,"--").concat(t)},re=!0;void 0===window.ShadyCSS?re=!1:void 0===window.ShadyCSS.prepareTemplateDom&&(console.warn("Incompatible ShadyCSS version detected. Please update to at least @webcomponents/webcomponentsjs@2.0.2 and @webcomponents/shadycss@1.3.1."),re=!1);var oe=function(e){return function(t){var n=ne(t.type,e),r=K.get(n);void 0===r&&(r={stringsArray:new WeakMap,keyString:new Map},K.set(n,r));var o=r.stringsArray.get(t.strings);if(void 0!==o)return o;var i=t.strings.join(c);if(void 0===(o=r.keyString.get(i))){var a=t.getTemplateElement();re&&window.ShadyCSS.prepareTemplateDom(a,e),o=new h(t,a),r.keyString.set(i,o)}return r.stringsArray.set(t.strings,o),o}},ie=["html","svg"],ae=new Set,se=function(e,t,n){ae.add(n);var r=e.querySelectorAll("style"),o=r.length;if(0!==o){for(var i=document.createElement("style"),a=0;a<o;a++){var s=r[a];s.parentNode.removeChild(s),i.textContent+=s.textContent}!function(e){ie.forEach(function(t){var n=K.get(ne(t,e));void 0!==n&&n.keyString.forEach(function(e){var t=e.element.content,n=new Set;Array.from(t.querySelectorAll("style")).forEach(function(e){n.add(e)}),G(e,n)})})}(n);var u=t.element.content;!function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=e.element.content,o=e.parts;if(null!=n)for(var i=document.createTreeWalker(r,Y,null,!1),a=te(o),s=0,u=-1;i.nextNode();)for(u++,i.currentNode===n&&(s=ee(t),n.parentNode.insertBefore(t,n));-1!==a&&o[a].index===u;){if(s>0){for(;-1!==a;)o[a].index+=s,a=te(o,a);return}a=te(o,a)}else r.appendChild(t)}(t,i,u.firstChild),window.ShadyCSS.prepareTemplateStyles(t.element,n);var l=u.querySelector("style");if(window.ShadyCSS.nativeShadow&&null!==l)e.insertBefore(l.cloneNode(!0),e.firstChild);else{u.insertBefore(i,u.firstChild);var c=new Set;c.add(i),G(t,c)}}else window.ShadyCSS.prepareTemplateStyles(t.element,n)};function ue(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function le(e){return(le="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ce(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function pe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function fe(e,t){return!t||"object"!==le(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function he(e){var t="function"==typeof Map?new Map:void 0;return(he=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return de(e,arguments,ve(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),ye(r,e)})(e)}function de(e,t,n){return(de=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&ye(o,n.prototype),o}).apply(null,arguments)}function ye(e,t){return(ye=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ve(e){return(ve=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}window.JSCompiler_renameProperty=function(e,t){return e};var ge={toAttribute:function(e,t){switch(t){case Boolean:return e?"":null;case Object:case Array:return null==e?e:JSON.stringify(e)}return e},fromAttribute:function(e,t){switch(t){case Boolean:return null!==e;case Number:return null===e?null:Number(e);case Object:case Array:return JSON.parse(e)}return e}},me=function(e,t){return t!==e&&(t==t||e==e)},be={attribute:!0,type:String,converter:ge,reflect:!1,hasChanged:me},we=Promise.resolve(!0),xe=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=fe(this,ve(t).call(this)))._updateState=0,e._instanceProperties=void 0,e._updatePromise=we,e._hasConnectedResolver=void 0,e._changedProperties=new Map,e._reflectingProperties=void 0,e.initialize(),e}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ye(e,t)}(t,he(HTMLElement)),n=t,r=[{key:"initialize",value:function(){this._saveInstanceProperties(),this._requestUpdate()}},{key:"_saveInstanceProperties",value:function(){var e=this;this.constructor._classProperties.forEach(function(t,n){if(e.hasOwnProperty(n)){var r=e[n];delete e[n],e._instanceProperties||(e._instanceProperties=new Map),e._instanceProperties.set(n,r)}})}},{key:"_applyInstanceProperties",value:function(){var e=this;this._instanceProperties.forEach(function(t,n){return e[n]=t}),this._instanceProperties=void 0}},{key:"connectedCallback",value:function(){this._updateState=32|this._updateState,this._hasConnectedResolver&&(this._hasConnectedResolver(),this._hasConnectedResolver=void 0)}},{key:"disconnectedCallback",value:function(){}},{key:"attributeChangedCallback",value:function(e,t,n){t!==n&&this._attributeToProperty(e,n)}},{key:"_propertyToAttribute",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:be,r=this.constructor,o=r._attributeNameForProperty(e,n);if(void 0!==o){var i=r._propertyValueToAttribute(t,n);if(void 0===i)return;this._updateState=8|this._updateState,null==i?this.removeAttribute(o):this.setAttribute(o,i),this._updateState=-9&this._updateState}}},{key:"_attributeToProperty",value:function(e,t){if(!(8&this._updateState)){var n=this.constructor,r=n._attributeToPropertyMap.get(e);if(void 0!==r){var o=n._classProperties.get(r)||be;this._updateState=16|this._updateState,this[r]=n._propertyValueFromAttribute(t,o),this._updateState=-17&this._updateState}}}},{key:"_requestUpdate",value:function(e,t){var n=!0;if(void 0!==e){var r=this.constructor,o=r._classProperties.get(e)||be;r._valueHasChanged(this[e],t,o.hasChanged)?(this._changedProperties.has(e)||this._changedProperties.set(e,t),!0!==o.reflect||16&this._updateState||(void 0===this._reflectingProperties&&(this._reflectingProperties=new Map),this._reflectingProperties.set(e,o))):n=!1}!this._hasRequestedUpdate&&n&&this._enqueueUpdate()}},{key:"requestUpdate",value:function(e,t){return this._requestUpdate(e,t),this.updateComplete}},{key:"_enqueueUpdate",value:function(){var e,t=(e=regeneratorRuntime.mark(function e(){var t,n,r,o,i=this;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return this._updateState=4|this._updateState,r=this._updatePromise,this._updatePromise=new Promise(function(e,r){t=e,n=r}),e.prev=3,e.next=6,r;case 6:e.next=10;break;case 8:e.prev=8,e.t0=e.catch(3);case 10:if(this._hasConnected){e.next=13;break}return e.next=13,new Promise(function(e){return i._hasConnectedResolver=e});case 13:if(e.prev=13,null==(o=this.performUpdate())){e.next=18;break}return e.next=18,o;case 18:e.next=23;break;case 20:e.prev=20,e.t1=e.catch(13),n(e.t1);case 23:t(!this._hasRequestedUpdate);case 24:case"end":return e.stop()}},e,this,[[3,8],[13,20]])}),function(){var t=this,n=arguments;return new Promise(function(r,o){var i=e.apply(t,n);function a(e){ce(i,r,o,a,s,"next",e)}function s(e){ce(i,r,o,a,s,"throw",e)}a(void 0)})});return function(){return t.apply(this,arguments)}}()},{key:"performUpdate",value:function(){this._instanceProperties&&this._applyInstanceProperties();var e=!1,t=this._changedProperties;try{(e=this.shouldUpdate(t))&&this.update(t)}catch(t){throw e=!1,t}finally{this._markUpdated()}e&&(1&this._updateState||(this._updateState=1|this._updateState,this.firstUpdated(t)),this.updated(t))}},{key:"_markUpdated",value:function(){this._changedProperties=new Map,this._updateState=-5&this._updateState}},{key:"shouldUpdate",value:function(e){return!0}},{key:"update",value:function(e){var t=this;void 0!==this._reflectingProperties&&this._reflectingProperties.size>0&&(this._reflectingProperties.forEach(function(e,n){return t._propertyToAttribute(n,t[n],e)}),this._reflectingProperties=void 0)}},{key:"updated",value:function(e){}},{key:"firstUpdated",value:function(e){}},{key:"_hasConnected",get:function(){return 32&this._updateState}},{key:"_hasRequestedUpdate",get:function(){return 4&this._updateState}},{key:"hasUpdated",get:function(){return 1&this._updateState}},{key:"updateComplete",get:function(){return this._updatePromise}}],o=[{key:"_ensureClassProperties",value:function(){var e=this;if(!this.hasOwnProperty(JSCompiler_renameProperty("_classProperties",this))){this._classProperties=new Map;var t=Object.getPrototypeOf(this)._classProperties;void 0!==t&&t.forEach(function(t,n){return e._classProperties.set(n,t)})}}},{key:"createProperty",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:be;if(this._ensureClassProperties(),this._classProperties.set(e,t),!t.noAccessor&&!this.prototype.hasOwnProperty(e)){var n="symbol"===le(e)?Symbol():"__".concat(e);Object.defineProperty(this.prototype,e,{get:function(){return this[n]},set:function(t){var r=this[e];this[n]=t,this._requestUpdate(e,r)},configurable:!0,enumerable:!0})}}},{key:"finalize",value:function(){if(!this.hasOwnProperty(JSCompiler_renameProperty("finalized",this))||!this.finalized){var e=Object.getPrototypeOf(this);if("function"==typeof e.finalize&&e.finalize(),this.finalized=!0,this._ensureClassProperties(),this._attributeToPropertyMap=new Map,this.hasOwnProperty(JSCompiler_renameProperty("properties",this))){var t=this.properties,n=[].concat(ue(Object.getOwnPropertyNames(t)),ue("function"==typeof Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t):[])),r=!0,o=!1,i=void 0;try{for(var a,s=n[Symbol.iterator]();!(r=(a=s.next()).done);r=!0){var u=a.value;this.createProperty(u,t[u])}}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}}}}},{key:"_attributeNameForProperty",value:function(e,t){var n=t.attribute;return!1===n?void 0:"string"==typeof n?n:"string"==typeof e?e.toLowerCase():void 0}},{key:"_valueHasChanged",value:function(e,t){return(arguments.length>2&&void 0!==arguments[2]?arguments[2]:me)(e,t)}},{key:"_propertyValueFromAttribute",value:function(e,t){var n=t.type,r=t.converter||ge,o="function"==typeof r?r:r.fromAttribute;return o?o(e,n):e}},{key:"_propertyValueToAttribute",value:function(e,t){if(void 0!==t.reflect){var n=t.type,r=t.converter;return(r&&r.toAttribute||ge.toAttribute)(e,n)}}},{key:"observedAttributes",get:function(){var e=this;this.finalize();var t=[];return this._classProperties.forEach(function(n,r){var o=e._attributeNameForProperty(r,n);void 0!==o&&(e._attributeToPropertyMap.set(o,r),t.push(o))}),t}}],r&&pe(n.prototype,r),o&&pe(n,o),t}();xe.finalized=!0;var ke=function(e){return function(t){return"function"==typeof t?function(e,t){return window.customElements.define(e,t),t}(e,t):function(e,t){return{kind:t.kind,elements:t.elements,finisher:function(t){window.customElements.define(e,t)}}}(e,t)}},_e=function(e,t){return"method"!==t.kind||!t.descriptor||"value"in t.descriptor?{kind:"field",key:Symbol(),placement:"own",descriptor:{},initializer:function(){"function"==typeof t.initializer&&(this[t.key]=t.initializer.call(this))},finisher:function(n){n.createProperty(t.key,e)}}:Object.assign({},t,{finisher:function(n){n.createProperty(t.key,e)}})},Se=function(e,t,n){t.constructor.createProperty(n,e)};function Oe(e){return function(t,n){return void 0!==n?Se(e,t,n):_e(e,t)}}function Ee(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Pe="adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,Ce=Symbol(),je=function(){function e(t,n){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n!==Ce)throw new Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t}var t,n,r;return t=e,(n=[{key:"toString",value:function(){return this.cssText}},{key:"styleSheet",get:function(){return void 0===this._styleSheet&&(Pe?(this._styleSheet=new CSSStyleSheet,this._styleSheet.replaceSync(this.cssText)):this._styleSheet=null),this._styleSheet}}])&&Ee(t.prototype,n),r&&Ee(t,r),e}(),Re=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=n.reduce(function(t,n,r){return t+function(e){if(e instanceof je)return e.cssText;throw new Error("Value passed to 'css' function must be a 'css' function result: ".concat(e,". Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security."))}(n)+e[r+1]},e[0]);return new je(o,Ce)};function Ae(e){return(Ae="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Te(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ze(e,t){return!t||"object"!==Ae(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ne(e,t,n){return(Ne="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=qe(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function qe(e){return(qe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function De(e,t){return(De=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}(window.litElementVersions||(window.litElementVersions=[])).push("2.0.1");var Le=function(e){return e.flat?e.flat(1/0):function e(t){for(var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=0,o=t.length;r<o;r++){var i=t[r];Array.isArray(i)?e(i,n):n.push(i)}return n}(e)},Be=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),ze(this,qe(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&De(e,t)}(t,xe),n=t,o=[{key:"finalize",value:function(){Ne(qe(t),"finalize",this).call(this),this._styles=this.hasOwnProperty(JSCompiler_renameProperty("styles",this))?this._getUniqueStyles():this._styles||[]}},{key:"_getUniqueStyles",value:function(){var e=this.styles,t=[];Array.isArray(e)?Le(e).reduceRight(function(e,t){return e.add(t),e},new Set).forEach(function(e){return t.unshift(e)}):e&&t.push(e);return t}}],(r=[{key:"initialize",value:function(){Ne(qe(t.prototype),"initialize",this).call(this),this.renderRoot=this.createRenderRoot(),window.ShadowRoot&&this.renderRoot instanceof window.ShadowRoot&&this.adoptStyles()}},{key:"createRenderRoot",value:function(){return this.attachShadow({mode:"open"})}},{key:"adoptStyles",value:function(){var e=this.constructor._styles;0!==e.length&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow?Pe?this.renderRoot.adoptedStyleSheets=e.map(function(e){return e.styleSheet}):this._needsShimAdoptedStyleSheets=!0:window.ShadyCSS.ScopingShim.prepareAdoptedCssText(e.map(function(e){return e.cssText}),this.localName))}},{key:"connectedCallback",value:function(){Ne(qe(t.prototype),"connectedCallback",this).call(this),this.hasUpdated&&void 0!==window.ShadyCSS&&window.ShadyCSS.styleElement(this)}},{key:"update",value:function(e){var n=this;Ne(qe(t.prototype),"update",this).call(this,e);var r=this.render();r instanceof S&&this.constructor.render(r,this.renderRoot,{scopeName:this.localName,eventContext:this}),this._needsShimAdoptedStyleSheets&&(this._needsShimAdoptedStyleSheets=!1,this.constructor._styles.forEach(function(e){var t=document.createElement("style");t.textContent=e.cssText,n.renderRoot.appendChild(t)}))}},{key:"render",value:function(){}}])&&Te(n.prototype,r),o&&Te(n,o),t}();Be.finalized=!0,Be.render=function(e,t,n){var r=n.scopeName,o=J.has(t),i=re&&11===t.nodeType&&!!t.host&&e instanceof S,a=i&&!ae.has(r),u=a?document.createDocumentFragment():t;if(function(e,t,n){var r=J.get(t);void 0===r&&(s(t,t.firstChild),J.set(t,r=new B(Object.assign({templateFactory:X},n))),r.appendInto(t)),r.setValue(e),r.commit()}(e,u,Object.assign({templateFactory:oe(r)},n)),a){var l=J.get(u);J.delete(u),l.value instanceof w&&se(u,l.value.template,r),s(t,t.firstChild),t.appendChild(u),J.set(t,l)}!o&&i&&window.ShadyCSS.styleElement(t.host)};var $e=n(1),Ie=n.n($e);function Fe(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}var Ue=function(e){var t=!0,n=!1,r=void 0;try{for(var o,i=document.cookie.split(";")[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value,s=a.indexOf("="),u=a.substr(0,s),l=a.substr(s+1);if(u=u.trim(),l=l.trim(),u===e)return l}}catch(e){n=!0,r=e}finally{try{t||null==i.return||i.return()}finally{if(n)throw r}}return null},Me=function(e){var t=[];Object.keys(e).forEach(function(n){e[n]&&t.push(n)});var n=t.join(" ");return n.trim().length>0&&(n=" "+n),n},Ve=function(e){return new Promise(function(t,n){We(e).then(function(e){t({assets:e.data.results,next:e.data.next})}).catch(function(e){return n(e)})})},He=function(){var e,t=(e=regeneratorRuntime.mark(function e(t){var n,r,o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t){e.next=2;break}return e.abrupt("return",new Promise(function(e,t){return e([])}));case 2:n=[],r=t;case 4:if(!r){e.next=12;break}return e.next=7,Ve(r);case 7:o=e.sent,n=n.concat(o.assets),r=o.next,e.next=4;break;case 12:return e.abrupt("return",n);case 13:case"end":return e.stop()}},e)}),function(){var t=this,n=arguments;return new Promise(function(r,o){var i=e.apply(t,n);function a(e){Fe(i,r,o,a,s,"next",e)}function s(e){Fe(i,r,o,a,s,"throw",e)}a(void 0)})});return function(e){return t.apply(this,arguments)}}(),We=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=Ue("csrftoken"),r={headers:n?{"X-CSRFToken":n}:{}};return t&&(r.cancelToken=t),Ie.a.get(e,r)},Ze=n(3),Xe=n.n(Ze);function Ke(){var e=it([":host{line-height:normal}rp-textinput{height:150px}#left-column{display:inline-block;margin-left:10px;width:300px;z-index:100}.search{margin-bottom:10px}.feature{padding:4px 14px;font-size:16px}.level-0{margin-left:0}.level-1{margin-left:5px;font-size:95%}.level-2{margin-left:10px;font-size:90%}.level-3{margin-left:15px;font-size:85%}.feature-name{display:inline-block}.clickable{text-decoration:none;cursor:pointer;color:var(--color-link-primary)}.clickable.secondary{color:var(--color-link-secondary)}.clickable:hover{text-decoration:underline;color:var(--color-link-primary-hover)}.feature:hover .showonhover{visibility:visible}.showonhover{visibility:hidden}.aliases{color:#bbb;font-size:80%;display:inline;margin-left:5px}rp-label{margin-right:3px;margin-bottom:3px;vertical-align:top}.selected{display:flex;flex-direction:column;padding:15px}.selected .name{font-size:18px;padding:5px}.selected .help{padding:5px 2px;font-size:11px;color:var(--color-secondary-light)}#right-column{vertical-align:top;margin-left:20px;display:inline-block}leaflet-map{height:250px;width:450px;border:0 solid #999;border-radius:5px}.edit{display:inline-block;margin-right:0}"]);return Ke=function(){return e},e}function Je(){var e=it(['<div id="left-column"><div class="search"><rp-select placeholder="Search" endpoint="',"boundaries/",'/?q=" .renderOptionDetail="','" @rp-selection="','"></rp-select></div><div class="feature-tree">','</div></div><div id="right-column"><leaflet-map endpoint="','" .feature="','" .osmId="','" .hovered="','" .onFeatureClicked="','"></leaflet-map></div><rp-dialog id="alias-dialog" title="Aliases for ','" primaryButtonName="Save" @rp-button-clicked="','"><div class="selected"><rp-textinput name="aliases" id="','" .value="','" textarea></rp-textinput><div class="help">Enter other aliases for ',", one per line</div></div></rp-dialog>"]);return Je=function(){return e},e}function Qe(){var e=it([""]);return Qe=function(){return e},e}function Ye(){var e=it(["",'<div class="path">','</div><div class="aliases">',"</div>"]);return Ye=function(){return e},e}function Ge(){var e=it(['<rp-label class="alias" dark>',"</rp-label>"]);return Ge=function(){return e},e}function et(){var e=it(["<style>rp-label{margin-top:3px;margin-right:3px}</style>"]);return et=function(){return e},e}function tt(){var e=it([""," ",""]);return tt=function(){return e},e}function nt(){var e=it(['<div class="edit clickable showonhover" @click="','"><rp-icon name="register" size="12"></rp-icon></div>']);return nt=function(){return e},e}function rt(){var e=it(['<rp-label class="alias" @click="','" light clickable>',"</rp-label>"]);return rt=function(){return e},e}function ot(){var e=it(['<div class="feature"><div @mouseover="','" @mouseout="','" class="level-','"><div class="feature-name ','" @click="','">','</div><div class="aliases">'," ","</div></div></div>"]);return ot=function(){return e},e}function it(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function at(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function st(e,t){return!t||"object"!==ct(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ut(e){return(ut=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function lt(e,t){return(lt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ct(e){return(ct="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var pt=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"===("undefined"==typeof Reflect?"undefined":ct(Reflect))&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},ft=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=st(this,ut(t).call(this))).path=[],e}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&lt(e,t)}(t,Be),n=t,o=[{key:"styles",get:function(){return Re(Ke())}}],(r=[{key:"updated",value:function(e){if(e.has("osmId")){var t=[],n=!0,r=!1,o=void 0;try{for(var i,a=this.path[Symbol.iterator]();!(n=(i=a.next()).done);n=!0){var s=i.value;if(t.push(s),s.osm_id===this.osmId)return this.path=[].concat(t),void this.hideAliasDialog()}}catch(e){r=!0,o=e}finally{try{n||null==a.return||a.return()}finally{if(r)throw o}}this.fetchFeature()}}},{key:"fetchFeature",value:function(){var e=this;We(this.getEndpoint()+"boundaries/"+this.osmId+"/").then(function(t){e.path=t.data,e.hideAliasDialog()})}},{key:"fireTextareaAutosize",value:function(){var e=this;window.setTimeout(function(){Xe()(e.shadowRoot.querySelector("textarea")),Xe.a.update(e.shadowRoot.querySelector("textarea"))},0)}},{key:"handleMapClicked",value:function(e){this.hovered=null,e&&e.osm_id===this.osmId||(this.osmId=e.osm_id)}},{key:"handlePlaceClicked",value:function(e){this.osmId=e.osm_id}},{key:"handleSearchSelection",value:function(e){var t=e.detail.selected;this.showAliasDialog(t)}},{key:"renderFeature",value:function(e,t){var n=this,r=this.path[this.path.length-1],o=(e.has_children||0===e.level)&&e!==r,i=Q(ot(),function(){e.level>0&&(n.hovered=e)},function(){n.hovered=null},e.level,o?"clickable":"",function(){o&&n.handlePlaceClicked(e)},e.name,e.aliases.split("\n").map(function(t){return t.trim().length>0?Q(rt(),function(){n.showAliasDialog(e)},t):null}),e.level>0?Q(nt(),function(t){n.showAliasDialog(e),t.preventDefault(),t.stopPropagation()}):""),a=(e.children||[]).map(function(e){return t.length>0&&t[0].osm_id===e.osm_id?n.renderFeature(t[0],t.slice(1)):0===t.length||0===t[0].children.length?n.renderFeature(e,t):null});return Q(tt(),i,a)}},{key:"showAliasDialog",value:function(e){this.editFeature=e;var t=this.shadowRoot.getElementById("alias-dialog");t&&(this.fireTextareaAutosize(),t.setAttribute("open",""))}},{key:"hideAliasDialog",value:function(){var e=this.shadowRoot.getElementById("alias-dialog");e&&e.removeAttribute("open"),this.requestUpdate()}},{key:"getEndpoint",value:function(){return this.endpoint+(this.endpoint.endsWith("/")?"":"/")}},{key:"handleDialogClick",value:function(e){var t=this,n=e.detail.button;if("Save"===n.name){n.setProgress(!0);var r=this.shadowRoot.getElementById(this.editFeature.osm_id).inputElement.value,o={osm_id:this.editFeature.osm_id,aliases:r};(function(e,t){var n=Ue("csrftoken"),r=n?{"X-CSRFToken":n}:{};return Ie.a.post(e,t,{headers:r})})(this.getEndpoint()+"boundaries/"+this.editFeature.osm_id+"/",o).then(function(e){t.fetchFeature()})}"Cancel"===n.name&&this.hideAliasDialog()}},{key:"renderOptionDetail",value:function(e,t){var n=Q(et()),r=e.aliases.split("\n").map(function(e){return e.trim().length>0?Q(Ge(),e):null});return Q(Ye(),n,e.path.replace(/>/gi,"â£"),r)}},{key:"render",value:function(){if(0===this.path.length)return Q(Qe());var e=this.path[this.path.length-1],t=0===e.children.length?this.path[this.path.length-2]:e,n=this.editFeature?this.editFeature.osm_id:null,r=this.editFeature?this.editFeature.name:null,o=this.editFeature?this.editFeature.aliases:null;return Q(Je(),this.getEndpoint(),this.path[0].osm_id,this.renderOptionDetail,this.handleSearchSelection.bind(this),this.renderFeature(this.path[0],this.path.slice(1)),this.getEndpoint(),t,t.osm_id,this.hovered,this.handleMapClicked.bind(this),r,this.handleDialogClick.bind(this),n,o,r)}}])&&at(n.prototype,r),o&&at(n,o),t}();pt([Oe({type:Array,attribute:!1})],ft.prototype,"path",void 0),pt([Oe()],ft.prototype,"endpoint",void 0),pt([Oe()],ft.prototype,"osmId",void 0),pt([Oe({type:Object})],ft.prototype,"hovered",void 0),pt([Oe({type:Object})],ft.prototype,"editFeature",void 0);ft=pt([ke("alias-editor")],ft);function ht(){var e=yt([".button{background:#00f;color:#fff;cursor:pointer;display:inline-block;border-radius:var(--curvature);outline:0}.button:focus{outline:0;margin:0}.button:focus .mask{background:rgb(0,0,0,.1);box-shadow:0 0 0 2px var(--color-button-primary)}.button.secondary:focus .mask{border:1px solid var(--color-button-secondary);background:0 0;box-shadow:0 0 0 2px var(--color-button-secondary)}.mask{padding:5px 10px;border-radius:var(--curvature);border:1px solid transparent}.primary{background:var(--color-button-primary);color:var(--color-button-primary-text)}.secondary{background:0 0;color:var(--color-button-secondary)}.secondary:hover .mask{border:1px solid var(--color-button-secondary)}.button.progress{background:#ddd}.button.progress:focus .mask{box-shadow:0 0 0 2px var(--color-button-secondary)}.mask:hover{background:rgb(0,0,0,.1)}.secondary .mask:hover{background:0 0}"]);return ht=function(){return e},e}function dt(){var e=yt(['<div class="button ','" tabindex="0" @keyup="','"><div class="mask">',"</div></div>"]);return dt=function(){return e},e}function yt(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function vt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function gt(e,t){return!t||"object"!==wt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function mt(e){return(mt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function bt(e,t){return(bt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function wt(e){return(wt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var xt=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"===("undefined"==typeof Reflect?"undefined":wt(Reflect))&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},kt=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),gt(this,mt(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&bt(e,t)}(t,Be),n=t,o=[{key:"styles",get:function(){return Re(ht())}}],(r=[{key:"setProgress",value:function(e){this.isProgress=e}},{key:"handleKeyUp",value:function(e){"Enter"===e.key&&this.click()}},{key:"render",value:function(){return Q(dt(),Me({progress:this.isProgress,primary:this.primary,secondary:this.secondary}),this.handleKeyUp,this.isProgress&&this.inProgessName||this.name)}}])&&vt(n.prototype,r),o&&vt(n,o),t}();xt([Oe({type:Boolean})],kt.prototype,"primary",void 0),xt([Oe({type:Boolean})],kt.prototype,"secondary",void 0),xt([Oe()],kt.prototype,"name",void 0),xt([Oe()],kt.prototype,"inProgessName",void 0),xt([Oe({type:Boolean})],kt.prototype,"isProgress",void 0);kt=xt([ke("rp-button")],kt);function _t(e){return(_t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function St(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ot(e,t){return!t||"object"!==_t(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Et(e,t,n){return(Et="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Pt(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function Pt(e){return(Pt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ct(e,t){return(Ct=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var jt,Rt=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),Ot(this,Pt(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ct(e,t)}(t,Be),n=t,(r=[{key:"getEventHandlers",value:function(){return[]}},{key:"connectedCallback",value:function(){Et(Pt(t.prototype),"connectedCallback",this).call(this);var e=!0,n=!1,r=void 0;try{for(var o,i=this.getEventHandlers()[Symbol.iterator]();!(e=(o=i.next()).done);e=!0){var a=o.value;document.addEventListener(a.event,a.method.bind(this))}}catch(e){n=!0,r=e}finally{try{e||null==i.return||i.return()}finally{if(n)throw r}}}},{key:"disconnectedCallback",value:function(){var e=!0,n=!1,r=void 0;try{for(var o,i=this.getEventHandlers()[Symbol.iterator]();!(e=(o=i.next()).done);e=!0){var a=o.value;document.removeEventListener(a.event,a.method)}}catch(e){n=!0,r=e}finally{try{e||null==i.return||i.return()}finally{if(n)throw r}}Et(Pt(t.prototype),"disconnectedCallback",this).call(this)}},{key:"fireEvent",value:function(e){this.dispatchEvent(new Event(e,{bubbles:!0,composed:!0}))}},{key:"fireCustomEvent",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=new CustomEvent(e,{detail:t,bubbles:!0,composed:!0});this.dispatchEvent(n)}}])&&St(n.prototype,r),o&&St(n,o),t}();!function(e){e.Canceled="rp-canceled",e.CursorChanged="rp-cursor-changed",e.Selection="rp-selection",e.ButtonClicked="rp-button-clicked"}(jt||(jt={}));var At=new WeakMap,Tt=o(function(e){return function(t){if(!(t instanceof L)||t instanceof F||"style"!==t.committer.name||t.committer.parts.length>1)throw new Error("The `styleMap` directive must be used in the style attribute and must be the only part in the attribute.");var n=t.committer,r=n.element.style;At.has(t)||(r.cssText=n.strings.join(" "));var o=At.get(t);for(var i in o)i in e||(-1===i.indexOf("-")?r[i]=null:r.removeProperty(i));for(var a in e)-1===a.indexOf("-")?r[a]=e[a]:r.setProperty(a,e[a]);At.set(t,e)}});function zt(){var e=Dt([".mask{width:100%;background:rgba(0,0,0,.5);opacity:0;visibility:hidden;position:fixed;top:0;left:0;transition:all ease-in 250ms}.dialog{width:500px;margin:0 auto;top:-200px;position:relative;transition:top ease-in-out .2s;border-radius:var(--curvature);box-shadow:0 0 0 4px rgba(0,0,0,.04);overflow:hidden}.body{background:#fff}.mask.open{opacity:1;visibility:visible}.mask.open > .dialog{top:100px}.title{padding:10px 20px;font-size:18px;color:var(--color-text-light);background:var(--color-primary-dark)}.footer{background:var(--color-primary-light);padding:10px;display:flex;flex-flow:row-reverse}rp-button{margin-left:5px}"]);return zt=function(){return e},e}function Nt(){var e=Dt(["<slot></slot>"]);return Nt=function(){return e},e}function qt(){var e=Dt(['<div class="mask ','" style="','"><div @keyup="','" class="dialog"><div class="header"><div class="title">','</div></div><div class="body" @keypress="','">','</div><div class="footer"><rp-button @click="','" name="','" inProgessName="','" primary>}</rp-button><rp-button @click="','" name="','" secondary></rp-button></div></div></div>']);return qt=function(){return e},e}function Dt(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function Lt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Bt(e,t){return!t||"object"!==Ft(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function $t(e){return($t=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function It(e,t){return(It=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ft(e){return(Ft="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var Ut=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"===("undefined"==typeof Reflect?"undefined":Ft(Reflect))&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},Mt=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=Bt(this,$t(t).call(this))).primaryButtonName="Ok",e.cancelButtonName="Cancel",e.inProgressName="Saving",e}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&It(e,t)}(t,Rt),n=t,o=[{key:"styles",get:function(){return Re(zt())}}],(r=[{key:"updated",value:function(e){if(e.has("open")&&this.open){this.shadowRoot.querySelectorAll("rp-button").forEach(function(e){return e.setProgress(!1)});var t=this.querySelectorAll("textarea,input");t.length>0&&window.setTimeout(function(){t[0].focus()},100)}}},{key:"handleClick",value:function(e){var t=e.currentTarget;t.isProgress||this.fireCustomEvent(jt.ButtonClicked,{button:t})}},{key:"getDocumentHeight",value:function(){var e=document.body,t=document.documentElement;return Math.max(e.scrollHeight,e.offsetHeight,t.clientHeight,t.scrollHeight,t.offsetHeight)}},{key:"handleKeyUp",value:function(e){var t=this;"Escape"===e.key&&this.shadowRoot.querySelectorAll("rp-button").forEach(function(e){e.name===t.cancelButtonName&&e.click()})}},{key:"render",value:function(){var e=this.getDocumentHeight(),t={height:"".concat(e+100,"px")};return Q(qt(),this.open?"open":"",Tt(t),this.handleKeyUp,this.title,this.handleKeyUp,this.body?this.body:Q(Nt()),this.handleClick,this.primaryButtonName,this.inProgressName,this.handleClick,this.cancelButtonName)}}])&&Lt(n.prototype,r),o&&Lt(n,o),t}();Ut([Oe({type:Boolean})],Mt.prototype,"open",void 0),Ut([Oe()],Mt.prototype,"title",void 0),Ut([Oe()],Mt.prototype,"body",void 0),Ut([Oe()],Mt.prototype,"primaryButtonName",void 0),Ut([Oe({type:String})],Mt.prototype,"cancelButtonName",void 0),Ut([Oe()],Mt.prototype,"inProgressName",void 0),Ut([Oe({attribute:!1})],Mt.prototype,"onButtonClicked",void 0);Mt=Ut([ke("rp-dialog")],Mt);function Vt(){var e=Xt([".input-container{border-radius:var(--curvature);overflow:hidden;cursor:text;background:var(--color-widget-bg);border:1px solid var(--color-widget-border);box-shadow:none;transition:all ease-in-out .2s;display:flex;flex-direction:row;align-items:stretch}.input-container:focus-within{border-color:var(--color-widget-border);background:var(--color-widget-bg-focused);box-shadow:var(--color-widget-shadow-focused) 0 0 3px 0}.input-container:hover{background:var(--color-widget-bg-focused)}textarea{height:85%}.textinput{padding:8px;border:0 solid red;flex:1;margin:0;background:0 0;color:var(--color-text);font-size:13px;cursor:text;resize:none;box-shadow:var(--color-widget-shadow-focused) 0 1px 1px 0 inset}.textinput:focus{outline:0;box-shadow:none;cursor:text}.textinput::placeholder{color:rgba(0,0,0,.15)}"]);return Vt=function(){return e},e}function Ht(){var e=Xt(['<input class="textinput" name="','" type="text" placeholder="','" .value="','">']);return Ht=function(){return e},e}function Wt(){var e=Xt(['<textarea class="textinput" name="','" placeholder="','" .value="','">\n        </textarea>']);return Wt=function(){return e},e}function Zt(){var e=Xt(['<div class="input-container" style="','" @click="','">',"</div>"]);return Zt=function(){return e},e}function Xt(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function Kt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Jt(e,t){return!t||"object"!==en(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Qt(e,t,n){return(Qt="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Yt(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function Yt(e){return(Yt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Gt(e,t){return(Gt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function en(e){return(en="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var tn=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"===("undefined"==typeof Reflect?"undefined":en(Reflect))&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},nn=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=Jt(this,Yt(t).apply(this,arguments))).placeholder="",e.value="",e.name="",e}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Gt(e,t)}(t,Rt),n=t,o=[{key:"styles",get:function(){return Re(Vt())}}],(r=[{key:"firstUpdated",value:function(e){Qt(Yt(t.prototype),"firstUpdated",this).call(this,e),this.inputElement=this.shadowRoot.querySelector(".textinput")}},{key:"render",value:function(){var e=this,t={height:"".concat(this.textarea?"100%":"auto")};return Q(Zt(),Tt(t),function(){e.shadowRoot.querySelector(".textinput").focus()},this.textarea?Q(Wt(),this.name,this.placeholder,this.value):Q(Ht(),this.name,this.placeholder,this.value))}}])&&Kt(n.prototype,r),o&&Kt(n,o),t}();tn([Oe({type:Boolean})],nn.prototype,"textarea",void 0),tn([Oe({type:String})],nn.prototype,"placeholder",void 0),tn([Oe({type:String})],nn.prototype,"value",void 0),tn([Oe({type:String})],nn.prototype,"name",void 0),tn([Oe({type:Object})],nn.prototype,"inputElement",void 0);nn=tn([ke("rp-textinput")],nn);function rn(){var e=an([":host{display:inline-block}.mask{padding:3px 6px;border-radius:var(--curvature)}.label.clickable .mask:hover{background:rgb(0,0,0,.05)}.label{border-radius:2px;font-size:80%;font-weight:400;border-radius:var(--curvature);background:tomato;color:#fff;text-shadow:0 .04em .04em rgba(0,0,0,.35)}.primary{background:var(--color-label-primary);color:var(--color-label-primary-text)}.secondary{background:var(--color-label-secondary);color:var(--color-label-secondary-text);text-shadow:none}.light{background:var(--color-overlay-light);color:var(--color-overlay-light-text);text-shadow:none}.dark{background:var(--color-overlay-dark);color:var(--color-overlay-dark-text);text-shadow:none}.clickable{cursor:pointer}"]);return rn=function(){return e},e}function on(){var e=an(['<div class="label ','" style="','"><div class="mask"><slot></slot></div></div>']);return on=function(){return e},e}function an(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function sn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function un(e,t){return!t||"object"!==pn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ln(e){return(ln=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function cn(e,t){return(cn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function pn(e){return(pn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var fn=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"===("undefined"==typeof Reflect?"undefined":pn(Reflect))&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},hn=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),un(this,ln(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&cn(e,t)}(t,Be),n=t,o=[{key:"styles",get:function(){return Re(rn())}}],(r=[{key:"render",value:function(){var e=this.backgroundColor&&this.textColor?{background:"".concat(this.backgroundColor),color:"".concat(this.textColor)}:{};return Q(on(),Me({clickable:this.clickable,primary:this.primary,secondary:this.secondary,light:this.light,dark:this.dark}),Tt(e))}}])&&sn(n.prototype,r),o&&sn(n,o),t}();fn([Oe({type:Boolean})],hn.prototype,"clickable",void 0),fn([Oe({type:Boolean})],hn.prototype,"primary",void 0),fn([Oe({type:Boolean})],hn.prototype,"secondary",void 0),fn([Oe({type:Boolean})],hn.prototype,"light",void 0),fn([Oe({type:Boolean})],hn.prototype,"dark",void 0),fn([Oe()],hn.prototype,"backgroundColor",void 0),fn([Oe()],hn.prototype,"textColor",void 0);hn=fn([ke("rp-label")],hn);function dn(){var e=xn([".options-container{visibility:hidden;position:fixed;border-radius:var(--curvature);border:0 solid var(--color-borders);box-shadow:0 0 2px 0 #ccc;background:#fff;z-index:1}.options{border-radius:var(--curvature);background:#fff;overflow-y:scroll;max-height:225px;border:none}.show{visibility:visible}.option{font-size:14px;padding:7px 14px;border-radius:var(--curvature);margin:3px;cursor:pointer;color:var(--color-text)}.option.focused{background:var(--color-selection);color:var(--color-text-light)}.option .detail{font-size:85%;color:rgba(255,255,255,.9)}code{background:rgba(0,0,0,.15);padding:1px 5px;border-radius:var(--curvature)}"]);return dn=function(){return e},e}function yn(){var e=xn(['<div @mouseover="','" @click="','" class="option ','">',"</div>"]);return yn=function(){return e},e}function vn(){var e=xn(['<div class="options-container ','" style="','"><div class="options" style="','">',"</div><slot></slot></div>"]);return vn=function(){return e},e}function gn(){var e=xn(["",""]);return gn=function(){return e},e}function mn(){var e=xn(["",""]);return mn=function(){return e},e}function bn(){var e=xn(['<div class="name">',"</div>"]);return bn=function(){return e},e}function wn(){var e=xn(['<div class="name">','</div><div class="detail">',"</div>"]);return wn=function(){return e},e}function xn(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function kn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _n(e,t){return!t||"object"!==Pn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Sn(e,t,n){return(Sn="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=On(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function On(e){return(On=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function En(e,t){return(En=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Pn(e){return(Pn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var Cn=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"===("undefined"==typeof Reflect?"undefined":Pn(Reflect))&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},jn=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=_n(this,On(t).apply(this,arguments))).cursorIndex=0,e}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&En(e,t)}(t,Rt),n=t,o=[{key:"styles",get:function(){return Re(dn())}}],(r=[{key:"updated",value:function(e){if(Sn(On(t.prototype),"updated",this).call(this,e),e.has("cursorIndex")){var n=this.shadowRoot.querySelector(".focused");if(n){var r=this.shadowRoot.querySelector(".options"),o=r.getBoundingClientRect().height,i=n.getBoundingClientRect().height;if(n.offsetTop+i>r.scrollTop+o-5){var a=n.offsetTop-o+i+5;r.scrollTop=a}else if(n.offsetTop<r.scrollTop){var s=n.offsetTop-5;r.scrollTop=s}}}e.has("options")&&(this.calculatePosition(),this.cursorIndex=0)}},{key:"renderOptionDefault",value:function(e,t){var n=this.renderOptionName||this.renderOptionNameDefault,r=this.renderOptionDetail||this.renderOptionDetailDefault;return t?Q(wn(),n(e,t),r(e,t)):Q(bn(),n(e,t))}},{key:"renderOptionNameDefault",value:function(e,t){return Q(mn(),e.name)}},{key:"renderOptionDetailDefault",value:function(e,t){return Q(gn(),e.detail)}},{key:"handleSelection",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this.options[this.cursorIndex];this.fireCustomEvent(jt.Selection,{selected:t,tabbed:e})}},{key:"moveCursor",value:function(e){var t=Math.max(Math.min(this.cursorIndex+e,this.options.length-1),0);this.setCursor(t)}},{key:"setCursor",value:function(e){e!==this.cursorIndex&&(this.cursorIndex=e,this.fireCustomEvent(jt.CursorChanged,{index:e}))}},{key:"handleKeyDown",value:function(e){this.visible&&(e.ctrlKey&&"n"===e.key||"ArrowDown"===e.key?(this.moveCursor(1),e.preventDefault()):e.ctrlKey&&"p"===e.key||"ArrowUp"===e.key?(this.moveCursor(-1),e.preventDefault()):"Enter"!==e.key&&"Tab"!==e.key||(this.handleSelection("Tab"===e.key),e.preventDefault()),"Escape"===e.key&&this.fireCustomEvent(jt.Canceled))}},{key:"calculatePosition",value:function(){var e=this.shadowRoot.querySelector(".options-container").getBoundingClientRect();if(this.anchorTo){var t=this.anchorTo.getBoundingClientRect(),n=t.top-e.height;n>0&&t.bottom+e.height>window.innerHeight?this.top=n:this.top=t.bottom,this.left=t.left,this.width=t.width}}},{key:"getEventHandlers",value:function(){return[{event:"keydown",method:this.handleKeyDown},{event:"scroll",method:this.calculatePosition}]}},{key:"render",value:function(){var e=this,t=(this.renderOption||this.renderOptionDefault).bind(this),n={top:"".concat(this.top,"px"),left:"".concat(this.left,"px"),width:"".concat(this.width,"px")},r={width:"".concat(this.width,"px")};return Q(vn(),this.visible?"show":"",Tt(n),Tt(r),this.options.map(function(n,r){return Q(yn(),function(t){Math.abs(t.movementX)+Math.abs(t.movementY)>0&&e.setCursor(r)},function(){e.handleSelection()},r==e.cursorIndex?"focused":"",t(n,r==e.cursorIndex))}))}}])&&kn(n.prototype,r),o&&kn(n,o),t}();Cn([Oe({type:Number})],jn.prototype,"top",void 0),Cn([Oe({type:Number})],jn.prototype,"left",void 0),Cn([Oe({type:Number})],jn.prototype,"width",void 0),Cn([Oe({type:Object})],jn.prototype,"anchorTo",void 0),Cn([Oe({type:Boolean})],jn.prototype,"visible",void 0),Cn([Oe({type:Number})],jn.prototype,"cursorIndex",void 0),Cn([Oe({type:Array})],jn.prototype,"options",void 0),Cn([Oe({attribute:!1})],jn.prototype,"renderOption",void 0),Cn([Oe({attribute:!1})],jn.prototype,"renderOptionName",void 0),Cn([Oe({attribute:!1})],jn.prototype,"renderOptionDetail",void 0);jn=Cn([ke("rp-options")],jn);function Rn(){var e=Tn([":host{display:flex;flex-direction:column}"]);return Rn=function(){return e},e}function An(){var e=Tn(['<rp-textinput @keyup="','" @blur="','" @focus="','" .value="','" placeholder="','"></rp-textinput><rp-options cursorIndex="','" @rp-selection="','" .renderOptionDetail="','" .renderOptionName="','" .renderOption="','" .anchorTo="','" .options="','" ?visible="','"></rp-options>']);return An=function(){return e},e}function Tn(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function zn(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function Nn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function qn(e,t){return!t||"object"!==$n(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Dn(e,t,n){return(Dn="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Ln(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function Ln(e){return(Ln=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Bn(e,t){return(Bn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function $n(e){return($n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var In=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"===("undefined"==typeof Reflect?"undefined":$n(Reflect))&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},Fn=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=qn(this,Ln(t).call(this))).selected=[],e.placeholder="",e.input="",e.options=[],e.quietMillis=200,e.renderOptionDetail=function(){},e}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Bn(e,t)}(t,Rt),n=t,o=[{key:"styles",get:function(){return Re(Rn())}}],(r=[{key:"updated",value:function(e){var n=this;if(Dn(Ln(t.prototype),"updated",this).call(this,e),e.has("selected")&&(this.input="",this.shadowRoot.querySelector("input").blur()),e.has("input")&&!e.has("selected")){if(!this.input)return void(this.options=[]);this.lastQuery&&window.clearTimeout(this.lastQuery),this.lastQuery=window.setTimeout(function(){n.fetchOptions(n.input)},this.quietMillis)}e.has("cursorIndex")&&this.options.length>0&&this.query&&!this.complete&&this.cursorIndex>this.options.length-20&&this.fetchOptions(this.query,this.page+1)}},{key:"handleOptionSelection",value:function(e){var t=e.detail.selected;this.selected=[t],this.options=[],this.input=t.name}},{key:"fetchOptions",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(!this.fetching){this.cancelToken&&this.cancelToken.cancel();var r=Ie.a.CancelToken;this.cancelToken=r.source(),this.fetching=!0,We(this.endpoint+encodeURIComponent(e)+"&page="+n,this.cancelToken.token).then(function(r){if(0===n)t.options=r.data.filter(function(e){return e.level>0}),t.cursorIndex=0,t.query=e,t.complete=0===t.options.length;else{var o=r.data.filter(function(e){return e.level>0});o.length>0&&(t.options=[].concat(zn(t.options),zn(o))),t.complete=0===o.length}t.fetching=!1,t.page=n}).catch(function(e){})}}},{key:"handleBlur",value:function(){var e=this;window.setTimeout(function(){e.options=[]},100)}},{key:"handleFocus",value:function(){}},{key:"handleKeyUp",value:function(e){var t=e.currentTarget;this.input=t.inputElement.value.trim()}},{key:"handleCancel",value:function(){this.options=[]}},{key:"handleCursorChanged",value:function(e){this.cursorIndex=e.detail.index}},{key:"getEventHandlers",value:function(){return[{event:jt.Canceled,method:this.handleCancel},{event:jt.CursorChanged,method:this.handleCursorChanged}]}},{key:"firstUpdated",value:function(e){this.anchorElement=this.shadowRoot.querySelector("rp-textinput")}},{key:"render",value:function(){return Q(An(),this.handleKeyUp,this.handleBlur,this.handleFocus,this.input,this.placeholder,this.cursorIndex,this.handleOptionSelection,this.renderOptionDetail,this.renderOptionName,this.renderOption,this.anchorElement,this.options,this.input.length>0&&this.options.length>0)}}])&&Nn(n.prototype,r),o&&Nn(n,o),t}();In([Oe({type:Array})],Fn.prototype,"selected",void 0),In([Oe()],Fn.prototype,"placeholder",void 0),In([Oe()],Fn.prototype,"endpoint",void 0),In([Oe({type:String})],Fn.prototype,"input",void 0),In([Oe({type:Array})],Fn.prototype,"options",void 0),In([Oe({type:Number})],Fn.prototype,"quietMillis",void 0),In([Oe({type:Boolean})],Fn.prototype,"fetching",void 0),In([Oe({attribute:!1})],Fn.prototype,"cursorIndex",void 0),In([Oe({attribute:!1})],Fn.prototype,"anchorElement",void 0),In([Oe({attribute:!1})],Fn.prototype,"renderOption",void 0),In([Oe({attribute:!1})],Fn.prototype,"renderOptionName",void 0),In([Oe({attribute:!1})],Fn.prototype,"renderOptionDetail",void 0);Fn=In([ke("rp-select")],Fn);function Un(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Mn=function(e,t,n){var r=e.substring(1);if("("===r[0])return!0;var o=r.split(".")[0].toLowerCase();if(!n)return t.indexOf(o)>=0;var i,a=!0,s=!1,u=void 0;try{for(var l,c=t[Symbol.iterator]();!(a=(l=c.next()).done);a=!0){var p=l.value;if(i=o,0===p.indexOf(i,0))return!0}}catch(e){s=!0,u=e}finally{try{a||null==c.return||c.return()}finally{if(s)throw u}}return!1},Vn=function(e){return e>="a"&&e<="z"||e>="A"&&e<="Z"||e>="0"&&e<="9"||"_"===e},Hn=function(e){var t=0,n=!0,r=!1,o=void 0;try{for(var i,a=e[Symbol.iterator]();!(n=(i=a.next()).done);n=!0){'"'===i.value&&t++}}catch(e){r=!0,o=e}finally{try{n||null==a.return||a.return()}finally{if(r)throw o}}return t%2!=0},Wn=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.expressionPrefix=t,this.allowedTopLevels=n}var t,n,r;return t=e,(n=[{key:"expressionContext",value:function(e){var t=this.findExpressions(e);if(0===t.length)return null;var n=t[t.length-1];return n.end<e.length||n.closed?null:n.text.substring(1)}},{key:"autoCompleteContext",value:function(e){if(Hn(e))return null;for(var t=[],n="",r=!1,o=!1,i="",a=e.length-1;a>=0;a--){var s=e[a];if(" "===s&&(r=!0),","===s&&(r=!0,"("!==t[t.length-1]&&t.push("(")),")"!==s||o||(r=!0,t.push("("),t.push("(")),'"'===s&&(o=!o),r&&("("!==s||o||("("===t[t.length-1]&&t.pop(),0===t.length&&(r=!1))),"("===s&&""===n&&(i="#"),!(r||o||"("===s&&""===n)){if(!Vn(s)&&"."!==s)break;n=s+n}}return n.match(/[A-Za-z][\w]*(\.[\w]+)*/)?i+n:null}},{key:"functionContext",value:function(e){for(var t=Hn(e)?4:6,n="",r="("===e[-1]?0:1,o=e.length-1;o>=0;o--){var i=e[o];if("@"===i)return"";if(6===t)0!==r||!Vn(i)&&"."!==i?'"'===i?t=4:"("===i?r--:")"===i&&r++:(t=2,n=i+n);else if(2===t){if(!Vn(i)&&"."!==i)return n;n=i+n}else 4===t&&'"'===i&&(t=6)}return""}},{key:"getContactFields",value:function(e){var t={},n=/((parent|child\.)*contact\.)*fields\.([a-z0-9_]+)/g,r=this.findExpressions(e),o=!0,i=!1,a=void 0;try{for(var s,u=r[Symbol.iterator]();!(o=(s=u.next()).done);o=!0)for(var l=s.value,c=void 0;c=n.exec(l.text);)t[c[3]]=!0}catch(e){i=!0,a=e}finally{try{o||null==u.return||u.return()}finally{if(i)throw a}}return Object.keys(t)}},{key:"findExpressions",value:function(e){for(var t=[],n=0,r=null,o=0,i=0;i<e.length;i++){var a=e[i],s=i<e.length-1?e[i+1]:0,u=i<e.length-2?e[i+2]:0;if(0===n?a!==this.expressionPrefix||!Vn(s)&&"("!==s?a===this.expressionPrefix&&s===this.expressionPrefix&&(n=5):(n=1,r={start:i,end:null,text:a,closed:!1}):1===n?(Vn(a)?n=2:"("===a&&(n=3,o+=1),r.text+=a):2===n?r.text+=a:3===n?("("===a?o+=1:")"===a?o-=1:'"'===a&&(n=4),r.text+=a,0===o&&(r.end=i+1)):4===n?('"'===a&&(n=3),r.text+=a):5===n&&(n=0),2===n&&(!Vn(s)&&"."!==s||"."===s&&!Vn(u))&&(r.end=i+1),null!=r&&(null!=r.end||0===s)){var l=0===s;Mn(r.text,this.allowedTopLevels,l)&&(r.closed="("===r.text[1]&&0===o,r.end=i+1,t.push(r)),r=null,n=0}}return t}}])&&Un(t.prototype,n),r&&Un(t,r),e}(),Zn=function(e,t){return t?e.filter(function(e){return!!e.signature&&0===e.signature.indexOf(t)}):e},Xn=function(e,t){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=(t||"").split("."),o=e.root_no_session,i="",a="";r.length>0;){if(a=r.shift())if("break"===function(){var t=o.find(function(e){return e.key===a});if(!t)return o=o.filter(function(e){return e.key.startsWith(a.toLowerCase())}),"break";var r=e.types.find(function(e){return e.name===t.type});if(r&&r.properties)o=r.properties,i+=a+".";else{if(!r||!r.property_template)return o=o.filter(function(e){return e.key.startsWith(a.toLowerCase())}),"break";i+=a+".";var s=r.property_template;o=n[r.name]?n[r.name].map(function(e){return{key:s.key.replace("{key}",e),help:s.help.replace("{key}",e),type:s.type}}):[]}}())break}return o.map(function(e){return{name:"__default__"===e.key?i.substr(0,i.length-1):i+e.key,summary:e.help}})},Kn=n(4),Jn=n.n(Kn),Qn=new WeakMap,Yn=o(function(e){return function(t){if(!(t instanceof B))throw new Error("unsafeHTML can only be used in text bindings");var n=Qn.get(t);if(void 0===n||!N(e)||e!==n.value||t.value!==n.fragment){var r=document.createElement("template");r.innerHTML=e;var o=document.importNode(r.content,!0);t.setValue(o),Qn.set(t,{value:e,fragment:o})}}});function Gn(){var e=ar([":host{display:block}.comp-container{position:relative;height:100%}#anchor{position:absolute;visibility:hidden;width:250px;height:20px}.fn-marker{font-weight:700;font-size:42px}.option-slot{background:#fff}.current-fn{padding:10px;margin:5px;background:var(--color-primary-light);color:rgba(0,0,0,.5);border-radius:var(--curvature);font-size:90%}.footer{padding:5px 10px;background:var(--color-primary-light);color:rgba(0,0,0,.5);font-size:80%}code{background:rgba(0,0,0,.1);padding:1px 5px;border-radius:var(--curvature)}"]);return Gn=function(){return e},e}function er(){var e=ar(['<div class="current-fn">',"</div>"]);return er=function(){return e},e}function tr(){var e=ar(['<div class="comp-container"><div id="anchor" style="','"></div><rp-textinput name="','" placeholder="','" @keyup="','" @click="','" @input="','" .value="','" ?textarea="','"></rp-textinput><rp-options @rp-selection="','" @rp-canceled="','" .anchorTo="','" .options="','" .renderOption="','" ?visible="','">','<div class="footer">Tab to complete, enter to select</div></rp-options></div>']);return tr=function(){return e},e}function nr(){var e=ar(['<div style="font-size: 85%">',"</div>"]);return nr=function(){return e},e}function rr(){var e=ar(['<div><div style="','">',"</div>","</div>"]);return rr=function(){return e},e}function or(){var e=ar(['<div style="display:inline-block; font-weight: 300; font-size: 85%">','</div><div class="detail">',"</div>"]);return or=function(){return e},e}function ir(){var e=ar(['<div style="','"><div style="display:inline-block;">Æ</div><div style="display:inline-block">',"</div>","</div>"]);return ir=function(){return e},e}function ar(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function sr(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function ur(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function lr(e,t){return!t||"object"!==hr(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function cr(e,t,n){return(cr="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=pr(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function pr(e){return(pr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function fr(e,t){return(fr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function hr(e){return(hr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var dr,yr=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"===("undefined"==typeof Reflect?"undefined":hr(Reflect))&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},vr=n(28),gr=o(function(e){return function(t){t.setValue(Yn(vr(e)))}}),mr=dr=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=lr(this,pr(t).apply(this,arguments))).anchorPosition={left:0,top:0},e.placeholder="",e.options=[],e.name="",e.value="",e}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&fr(e,t)}(t,Rt),n=t,o=[{key:"styles",get:function(){return Re(Gn())}}],(r=[{key:"firstUpdated",value:function(e){var t=this;this.textInputElement=this.shadowRoot.querySelector("rp-textinput"),this.anchorElement=this.shadowRoot.querySelector("#anchor"),this.completionsEndpoint&&We(this.completionsEndpoint).then(function(e){t.schema=e.data}),this.functionsEndpoint&&We(this.functionsEndpoint).then(function(e){t.functions=e.data}),this.fieldsEndpoint&&He(this.fieldsEndpoint).then(function(e){t.keyedAssets={fields:e.map(function(e){return e.key})}}),this.hiddenElement=document.createElement("input"),this.hiddenElement.setAttribute("type","hidden"),this.hiddenElement.setAttribute("name",this.getAttribute("name")),this.hiddenElement.setAttribute("value",this.getAttribute("value")||""),this.appendChild(this.hiddenElement)}},{key:"handleKeyUp",value:function(e){if(this.options.length>0){if("ArrowUp"===e.key||"ArrowDown"===e.key)return;if(e.ctrlKey&&("n"===e.key||"p"===e.key))return;if("Enter"===e.key||"Escape"===e.key||"Tab"===e.key||e.key.startsWith("Control"))return;this.executeQuery(e.currentTarget)}}},{key:"handleClick",value:function(e){this.executeQuery(e.currentTarget)}},{key:"executeQuery",value:function(e){if(this.inputElement=e.inputElement,this.currentFunction=null,this.schema){var t=e.inputElement.selectionStart,n=e.inputElement.value.substring(0,t),r=dr.parser.findExpressions(n).find(function(e){return e.start<=t&&(e.end>t||e.end===t&&!e.closed)});if(r){var o=r.text.indexOf("(")>-1;if(o){var i=dr.parser.functionContext(r.text);if(i){var a=Zn(this.functions,i);a.length>0&&(this.currentFunction=a[0])}}for(var s=r.text.length;s>=0;s--){var u=r.text[s];if("@"===u||"("===u||" "===u||","===u||")"===u||0===s){"("!==u&&" "!==u&&","!==u&&")"!==u&&"@"!==u||s++;var l=Jn()(e.inputElement,r.start+s);return this.anchorPosition={left:l.left-2-this.inputElement.scrollLeft,top:l.top-this.inputElement.scrollTop},this.query=r.text.substr(s,r.text.length-s),void(this.options=[].concat(sr(Xn(this.schema,this.query,this.keyedAssets)),sr(o?Zn(this.functions,this.query):[])))}}}else this.options=[],this.query=""}}},{key:"updated",value:function(e){cr(pr(t.prototype),"updated",this).call(this,e),e.has("value")&&this.hiddenElement.setAttribute("value",this.value)}},{key:"handleInput",value:function(e){var t=e.currentTarget;this.executeQuery(t),this.value=t.inputElement.value}},{key:"handleOptionCanceled",value:function(e){this.options=[],this.query=""}},{key:"handleOptionSelection",value:function(e){var t=e.detail.selected,n=e.detail.tabbed,r="";if(r=t.signature?t.signature.substr(0,t.signature.indexOf("(")+1):t.name,this.inputElement){var o=this.inputElement.value,i=this.inputElement.selectionStart-this.query.length,a=o.substr(0,i),s=o.substr(i+this.query.length),u=a.length+r.length;this.inputElement.value=a+r+s,this.inputElement.setSelectionRange(u,u);var l=Jn()(this.inputElement,u);l.left>this.inputElement.width&&(this.inputElement.scrollLeft=l.left)}this.query="",this.options=[],n&&this.executeQuery(this.textInputElement)}},{key:"renderCompletionOption",value:function(e,t){if(e.signature){var n=e.signature.indexOf("("),r=e.signature.substr(0,n),o=e.signature.substr(n);return Q(ir(),t?"font-weight: 400":"",r,t?Q(or(),o,gr(e.summary)):null)}return Q(rr(),t?"font-weight: 400":"",e.name,t?Q(nr(),e.summary):null)}},{key:"render",value:function(){var e={top:"".concat(this.anchorPosition.top,"px"),left:"".concat(this.anchorPosition.left,"px")};return Q(tr(),Tt(e),this.name,this.placeholder,this.handleKeyUp,this.handleClick,this.handleInput,this.value,this.textarea,this.handleOptionSelection,this.handleOptionCanceled,this.anchorElement,this.options,this.renderCompletionOption,this.options.length>0,this.currentFunction?Q(er(),this.renderCompletionOption(this.currentFunction,!0)):null)}}])&&ur(n.prototype,r),o&&ur(n,o),t}();mr.parser=new Wn("@",["contact","fields","urns"]),yr([Oe({type:Object})],mr.prototype,"anchorPosition",void 0),yr([Oe({attribute:!1})],mr.prototype,"currentFunction",void 0),yr([Oe({type:String})],mr.prototype,"placeholder",void 0),yr([Oe({attribute:!1})],mr.prototype,"textInputElement",void 0),yr([Oe({attribute:!1})],mr.prototype,"anchorElement",void 0),yr([Oe({type:Array})],mr.prototype,"options",void 0),yr([Oe({type:String})],mr.prototype,"name",void 0),yr([Oe({type:String})],mr.prototype,"value",void 0),yr([Oe({type:String})],mr.prototype,"completionsEndpoint",void 0),yr([Oe({type:String})],mr.prototype,"functionsEndpoint",void 0),yr([Oe({type:String})],mr.prototype,"fieldsEndpoint",void 0),yr([Oe({type:Boolean})],mr.prototype,"textarea",void 0);mr=dr=yr([ke("rp-completion")],mr)}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,