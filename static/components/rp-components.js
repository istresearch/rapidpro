!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["rp-components"]=t():e["rp-components"]=t()}(window,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=10)}([function(e,t,n){"use strict";var r=n(5),i=n(12),o=Object.prototype.toString;function s(e){return"[object Array]"===o.call(e)}function a(e){return null!==e&&"object"==typeof e}function l(e){return"[object Function]"===o.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),s(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}e.exports={isArray:s,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:i,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:a,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:l,isStream:function(e){return a(e)&&l(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,i=arguments.length;r<i;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,function(t,i){e[i]=n&&"function"==typeof t?r(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){e.exports=n(11)},function(e,t,n){"use strict";(function(t){var r=n(0),i=n(15),o={"Content-Type":"application/x-www-form-urlencoded"};function s(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var a,l={adapter:("undefined"!=typeof XMLHttpRequest?a=n(6):void 0!==t&&(a=n(6)),a),transformRequest:[function(e,t){return i(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(s(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(s(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};l.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){l.headers[e]={}}),r.forEach(["post","put","patch"],function(e){l.headers[e]=r.merge(o)}),e.exports=l}).call(this,n(14))},function(e,t,n){var r,i,o;i=[e,t],void 0===(o="function"==typeof(r=function(e,t){"use strict";var n,r,i="function"==typeof Map?new Map:(n=[],r=[],{has:function(e){return n.indexOf(e)>-1},get:function(e){return r[n.indexOf(e)]},set:function(e,t){-1===n.indexOf(e)&&(n.push(e),r.push(t))},delete:function(e){var t=n.indexOf(e);t>-1&&(n.splice(t,1),r.splice(t,1))}}),o=function(e){return new Event(e,{bubbles:!0})};try{new Event("test")}catch(e){o=function(e){var t=document.createEvent("Event");return t.initEvent(e,!0,!1),t}}function s(e){if(e&&e.nodeName&&"TEXTAREA"===e.nodeName&&!i.has(e)){var t=null,n=null,r=null,s=function(){e.clientWidth!==n&&p()},a=function(t){window.removeEventListener("resize",s,!1),e.removeEventListener("input",p,!1),e.removeEventListener("keyup",p,!1),e.removeEventListener("autosize:destroy",a,!1),e.removeEventListener("autosize:update",p,!1),Object.keys(t).forEach(function(n){e.style[n]=t[n]}),i.delete(e)}.bind(e,{height:e.style.height,resize:e.style.resize,overflowY:e.style.overflowY,overflowX:e.style.overflowX,wordWrap:e.style.wordWrap});e.addEventListener("autosize:destroy",a,!1),"onpropertychange"in e&&"oninput"in e&&e.addEventListener("keyup",p,!1),window.addEventListener("resize",s,!1),e.addEventListener("input",p,!1),e.addEventListener("autosize:update",p,!1),e.style.overflowX="hidden",e.style.wordWrap="break-word",i.set(e,{destroy:a,update:p}),"vertical"===(l=window.getComputedStyle(e,null)).resize?e.style.resize="none":"both"===l.resize&&(e.style.resize="horizontal"),t="content-box"===l.boxSizing?-(parseFloat(l.paddingTop)+parseFloat(l.paddingBottom)):parseFloat(l.borderTopWidth)+parseFloat(l.borderBottomWidth),isNaN(t)&&(t=0),p()}var l;function c(t){var n=e.style.width;e.style.width="0px",e.offsetWidth,e.style.width=n,e.style.overflowY=t}function u(){if(0!==e.scrollHeight){var r=function(e){for(var t=[];e&&e.parentNode&&e.parentNode instanceof Element;)e.parentNode.scrollTop&&t.push({node:e.parentNode,scrollTop:e.parentNode.scrollTop}),e=e.parentNode;return t}(e),i=document.documentElement&&document.documentElement.scrollTop;e.style.height="",e.style.height=e.scrollHeight+t+"px",n=e.clientWidth,r.forEach(function(e){e.node.scrollTop=e.scrollTop}),i&&(document.documentElement.scrollTop=i)}}function p(){u();var t=Math.round(parseFloat(e.style.height)),n=window.getComputedStyle(e,null),i="content-box"===n.boxSizing?Math.round(parseFloat(n.height)):e.offsetHeight;if(i<t?"hidden"===n.overflowY&&(c("scroll"),u(),i="content-box"===n.boxSizing?Math.round(parseFloat(window.getComputedStyle(e,null).height)):e.offsetHeight):"hidden"!==n.overflowY&&(c("hidden"),u(),i="content-box"===n.boxSizing?Math.round(parseFloat(window.getComputedStyle(e,null).height)):e.offsetHeight),r!==i){r=i;var s=o("autosize:resized");try{e.dispatchEvent(s)}catch(e){}}}}function a(e){var t=i.get(e);t&&t.destroy()}function l(e){var t=i.get(e);t&&t.update()}var c=null;"undefined"==typeof window||"function"!=typeof window.getComputedStyle?((c=function(e){return e}).destroy=function(e){return e},c.update=function(e){return e}):((c=function(e,t){return e&&Array.prototype.forEach.call(e.length?e:[e],function(e){return s(e)}),e}).destroy=function(e){return e&&Array.prototype.forEach.call(e.length?e:[e],a),e},c.update=function(e){return e&&Array.prototype.forEach.call(e.length?e:[e],l),e}),t.default=c,e.exports=t.default})?r.apply(t,i):r)||(e.exports=o)},function(e,t,n){!function(){var t=["direction","boxSizing","width","height","overflowX","overflowY","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","borderStyle","paddingTop","paddingRight","paddingBottom","paddingLeft","fontStyle","fontVariant","fontWeight","fontStretch","fontSize","fontSizeAdjust","lineHeight","fontFamily","textAlign","textTransform","textIndent","textDecoration","letterSpacing","wordSpacing","tabSize","MozTabSize"],n="undefined"!=typeof window,r=n&&null!=window.mozInnerScreenX;function i(e,i,o){if(!n)throw new Error("textarea-caret-position#getCaretCoordinates should only be called in a browser");var s=o&&o.debug||!1;if(s){var a=document.querySelector("#input-textarea-caret-position-mirror-div");a&&a.parentNode.removeChild(a)}var l=document.createElement("div");l.id="input-textarea-caret-position-mirror-div",document.body.appendChild(l);var c=l.style,u=window.getComputedStyle?window.getComputedStyle(e):e.currentStyle,p="INPUT"===e.nodeName;c.whiteSpace="pre-wrap",p||(c.wordWrap="break-word"),c.position="absolute",s||(c.visibility="hidden"),t.forEach(function(e){p&&"lineHeight"===e?c.lineHeight=u.height:c[e]=u[e]}),r?e.scrollHeight>parseInt(u.height)&&(c.overflowY="scroll"):c.overflow="hidden",l.textContent=e.value.substring(0,i),p&&(l.textContent=l.textContent.replace(/\s/g,"Â "));var h=document.createElement("span");h.textContent=e.value.substring(i)||".",l.appendChild(h);var d={top:h.offsetTop+parseInt(u.borderTopWidth),left:h.offsetLeft+parseInt(u.borderLeftWidth),height:parseInt(u.lineHeight)};return s?h.style.backgroundColor="#aaa":document.body.removeChild(l),d}void 0!==e.exports?e.exports=i:n&&(window.getCaretCoordinates=i)}()},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(0),i=n(16),o=n(18),s=n(19),a=n(20),l=n(7),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(21);e.exports=function(e){return new Promise(function(t,u){var p=e.data,h=e.headers;r.isFormData(p)&&delete h["Content-Type"];var d=new XMLHttpRequest,f="onreadystatechange",g=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in d||a(e.url)||(d=new window.XDomainRequest,f="onload",g=!0,d.onprogress=function(){},d.ontimeout=function(){}),e.auth){var m=e.auth.username||"",y=e.auth.password||"";h.Authorization="Basic "+c(m+":"+y)}if(d.open(e.method.toUpperCase(),o(e.url,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d[f]=function(){if(d&&(4===d.readyState||g)&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?s(d.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:1223===d.status?204:d.status,statusText:1223===d.status?"No Content":d.statusText,headers:n,config:e,request:d};i(t,u,r),d=null}},d.onerror=function(){u(l("Network Error",e,null,d)),d=null},d.ontimeout=function(){u(l("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var v=n(22),b=(e.withCredentials||a(e.url))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;b&&(h[e.xsrfHeaderName]=b)}if("setRequestHeader"in d&&r.forEach(h,function(e,t){void 0===p&&"content-type"===t.toLowerCase()?delete h[t]:d.setRequestHeader(t,e)}),e.withCredentials&&(d.withCredentials=!0),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){d&&(d.abort(),u(e),d=null)}),void 0===p&&(p=null),d.send(p)})}},function(e,t,n){"use strict";var r=n(17);e.exports=function(e,t,n,i,o){var s=new Error(e);return r(s,t,n,i,o)}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){e.exports=n(32)},function(e,t,n){"use strict";var r=n(0),i=n(5),o=n(13),s=n(2);function a(e){var t=new o(e),n=i(o.prototype.request,t);return r.extend(n,o.prototype,t),r.extend(n,t),n}var l=a(s);l.Axios=o,l.create=function(e){return a(r.merge(s,e))},l.Cancel=n(9),l.CancelToken=n(28),l.isCancel=n(8),l.all=function(e){return Promise.all(e)},l.spread=n(29),e.exports=l,e.exports.default=l},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(2),i=n(0),o=n(23),s=n(24);function a(e){this.defaults=e,this.interceptors={request:new o,response:new o}}a.prototype.request=function(e){"string"==typeof e&&(e=i.merge({url:arguments[0]},arguments[1])),(e=i.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[s,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},i.forEach(["delete","get","head","options"],function(e){a.prototype[e]=function(t,n){return this.request(i.merge(n||{},{method:e,url:t}))}}),i.forEach(["post","put","patch"],function(e){a.prototype[e]=function(t,n,r){return this.request(i.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=a},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(e){r=s}}();var l,c=[],u=!1,p=-1;function h(){u&&l&&(u=!1,l.length?c=l.concat(c):p=-1,c.length&&d())}function d(){if(!u){var e=a(h);u=!0;for(var t=c.length;t;){for(l=c,c=[];++p<t;)l&&l[p].run();p=-1,t=c.length}l=null,u=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function f(e,t){this.fun=e,this.array=t}function g(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new f(e,t)),1!==c.length||u||a(d)},f.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.prependListener=g,i.prependOnceListener=g,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(7);e.exports=function(e,t,n){var i=n.config.validateStatus;n.status&&i&&!i(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,i){return e.config=t,n&&(e.code=n),e.request=r,e.response=i,e}},function(e,t,n){"use strict";var r=n(0);function i(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var o;if(n)o=n(t);else if(r.isURLSearchParams(t))o=t.toString();else{var s=[];r.forEach(t,function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),s.push(i(t)+"="+i(e))}))}),o=s.join("&")}return o&&(e+=(-1===e.indexOf("?")?"?":"&")+o),e}},function(e,t,n){"use strict";var r=n(0),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,o,s={};return e?(r.forEach(e.split("\n"),function(e){if(o=e.indexOf(":"),t=r.trim(e.substr(0,o)).toLowerCase(),n=r.trim(e.substr(o+1)),t){if(s[t]&&i.indexOf(t)>=0)return;s[t]="set-cookie"===t?(s[t]?s[t]:[]).concat([n]):s[t]?s[t]+", "+n:n}}),s):s}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function i(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=i(window.location.href),function(t){var n=r.isString(t)?i(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function i(){this.message="String contains an invalid character"}i.prototype=new Error,i.prototype.code=5,i.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,o=String(e),s="",a=0,l=r;o.charAt(0|a)||(l="=",a%1);s+=l.charAt(63&t>>8-a%1*8)){if((n=o.charCodeAt(a+=.75))>255)throw new i;t=t<<8|n}return s}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,i,o,s){var a=[];a.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),r.isString(i)&&a.push("path="+i),r.isString(o)&&a.push("domain="+o),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(0);function i(){this.handlers=[]}i.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},i.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},i.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=i},function(e,t,n){"use strict";var r=n(0),i=n(25),o=n(8),s=n(2),a=n(26),l=n(27);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!a(e.url)&&(e.url=l(e.baseURL,e.url)),e.headers=e.headers||{},e.data=i(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||s.adapter)(e).then(function(t){return c(e),t.data=i(t.data,t.headers,e.transformResponse),t},function(t){return o(t)||(c(e),t&&t.response&&(t.response.data=i(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(9);function i(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var e;return{token:new i(function(t){e=t}),cancel:e}},e.exports=i},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){(function(t){!function(t){"use strict";var n={newline:/^\n+/,code:/^( {4}[^\n]+\n*)+/,fences:/^ {0,3}(`{3,}|~{3,})([^`~\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?:\n+|$)|$)/,hr:/^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,heading:/^ {0,3}(#{1,6}) +([^\n]*?)(?: +#+)? *(?:\n+|$)/,blockquote:/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,list:/^( {0,3})(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,html:"^ {0,3}(?:<(script|pre|style)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?\\?>\\n*|<![A-Z][\\s\\S]*?>\\n*|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\n*|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:\\n{2,}|$)|<(?!script|pre|style)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$)|</(?!script|pre|style)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$))",def:/^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,nptable:m,table:m,lheading:/^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,_paragraph:/^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html)[^\n]+)*)/,text:/^[^\n]+/};function r(e){this.tokens=[],this.tokens.links=Object.create(null),this.options=e||k.defaults,this.rules=n.normal,this.options.pedantic?this.rules=n.pedantic:this.options.gfm&&(this.rules=n.gfm)}n._label=/(?!\s*\])(?:\\[\[\]]|[^\[\]])+/,n._title=/(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/,n.def=h(n.def).replace("label",n._label).replace("title",n._title).getRegex(),n.bullet=/(?:[*+-]|\d{1,9}\.)/,n.item=/^( *)(bull) ?[^\n]*(?:\n(?!\1bull ?)[^\n]*)*/,n.item=h(n.item,"gm").replace(/bull/g,n.bullet).getRegex(),n.list=h(n.list).replace(/bull/g,n.bullet).replace("hr","\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def","\\n+(?="+n.def.source+")").getRegex(),n._tag="address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul",n._comment=/<!--(?!-?>)[\s\S]*?-->/,n.html=h(n.html,"i").replace("comment",n._comment).replace("tag",n._tag).replace("attribute",/ +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(),n.paragraph=h(n._paragraph).replace("hr",n.hr).replace("heading"," {0,3}#{1,6} +").replace("|lheading","").replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}|~{3,})[^`\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)").replace("tag",n._tag).getRegex(),n.blockquote=h(n.blockquote).replace("paragraph",n.paragraph).getRegex(),n.normal=y({},n),n.gfm=y({},n.normal,{nptable:/^ *([^|\n ].*\|.*)\n *([-:]+ *\|[-| :]*)(?:\n((?:.*[^>\n ].*(?:\n|$))*)\n*|$)/,table:/^ *\|(.+)\n *\|?( *[-:]+[-| :]*)(?:\n((?: *[^>\n ].*(?:\n|$))*)\n*|$)/}),n.pedantic=y({},n.normal,{html:h("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace("comment",n._comment).replace(/tag/g,"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,heading:/^ *(#{1,6}) *([^\n]+?) *(?:#+ *)?(?:\n+|$)/,fences:m,paragraph:h(n.normal._paragraph).replace("hr",n.hr).replace("heading"," *#{1,6} *[^\n]").replace("lheading",n.lheading).replace("blockquote"," {0,3}>").replace("|fences","").replace("|list","").replace("|html","").getRegex()}),r.rules=n,r.lex=function(e,t){return new r(t).lex(e)},r.prototype.lex=function(e){return e=e.replace(/\r\n|\r/g,"\n").replace(/\t/g,"    ").replace(/\u00a0/g," ").replace(/\u2424/g,"\n"),this.token(e,!0)},r.prototype.token=function(e,t){var r,i,o,s,a,l,c,p,h,d,f,g,m,y,x,w;for(e=e.replace(/^ +$/gm,"");e;)if((o=this.rules.newline.exec(e))&&(e=e.substring(o[0].length),o[0].length>1&&this.tokens.push({type:"space"})),o=this.rules.code.exec(e)){var k=this.tokens[this.tokens.length-1];e=e.substring(o[0].length),k&&"paragraph"===k.type?k.text+="\n"+o[0].trimRight():(o=o[0].replace(/^ {4}/gm,""),this.tokens.push({type:"code",codeBlockStyle:"indented",text:this.options.pedantic?o:b(o,"\n")}))}else if(o=this.rules.fences.exec(e))e=e.substring(o[0].length),this.tokens.push({type:"code",lang:o[2]?o[2].trim():o[2],text:o[3]||""});else if(o=this.rules.heading.exec(e))e=e.substring(o[0].length),this.tokens.push({type:"heading",depth:o[1].length,text:o[2]});else if((o=this.rules.nptable.exec(e))&&(l={type:"table",header:v(o[1].replace(/^ *| *\| *$/g,"")),align:o[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:o[3]?o[3].replace(/\n$/,"").split("\n"):[]}).header.length===l.align.length){for(e=e.substring(o[0].length),f=0;f<l.align.length;f++)/^ *-+: *$/.test(l.align[f])?l.align[f]="right":/^ *:-+: *$/.test(l.align[f])?l.align[f]="center":/^ *:-+ *$/.test(l.align[f])?l.align[f]="left":l.align[f]=null;for(f=0;f<l.cells.length;f++)l.cells[f]=v(l.cells[f],l.header.length);this.tokens.push(l)}else if(o=this.rules.hr.exec(e))e=e.substring(o[0].length),this.tokens.push({type:"hr"});else if(o=this.rules.blockquote.exec(e))e=e.substring(o[0].length),this.tokens.push({type:"blockquote_start"}),o=o[0].replace(/^ *> ?/gm,""),this.token(o,t),this.tokens.push({type:"blockquote_end"});else if(o=this.rules.list.exec(e)){for(e=e.substring(o[0].length),c={type:"list_start",ordered:y=(s=o[2]).length>1,start:y?+s:"",loose:!1},this.tokens.push(c),p=[],r=!1,m=(o=o[0].match(this.rules.item)).length,f=0;f<m;f++)d=(l=o[f]).length,~(l=l.replace(/^ *([*+-]|\d+\.) */,"")).indexOf("\n ")&&(d-=l.length,l=this.options.pedantic?l.replace(/^ {1,4}/gm,""):l.replace(new RegExp("^ {1,"+d+"}","gm"),"")),f!==m-1&&(a=n.bullet.exec(o[f+1])[0],(s.length>1?1===a.length:a.length>1||this.options.smartLists&&a!==s)&&(e=o.slice(f+1).join("\n")+e,f=m-1)),i=r||/\n\n(?!\s*$)/.test(l),f!==m-1&&(r="\n"===l.charAt(l.length-1),i||(i=r)),i&&(c.loose=!0),w=void 0,(x=/^\[[ xX]\] /.test(l))&&(w=" "!==l[1],l=l.replace(/^\[[ xX]\] +/,"")),h={type:"list_item_start",task:x,checked:w,loose:i},p.push(h),this.tokens.push(h),this.token(l,!1),this.tokens.push({type:"list_item_end"});if(c.loose)for(m=p.length,f=0;f<m;f++)p[f].loose=!0;this.tokens.push({type:"list_end"})}else if(o=this.rules.html.exec(e))e=e.substring(o[0].length),this.tokens.push({type:this.options.sanitize?"paragraph":"html",pre:!this.options.sanitizer&&("pre"===o[1]||"script"===o[1]||"style"===o[1]),text:this.options.sanitize?this.options.sanitizer?this.options.sanitizer(o[0]):u(o[0]):o[0]});else if(t&&(o=this.rules.def.exec(e)))e=e.substring(o[0].length),o[3]&&(o[3]=o[3].substring(1,o[3].length-1)),g=o[1].toLowerCase().replace(/\s+/g," "),this.tokens.links[g]||(this.tokens.links[g]={href:o[2],title:o[3]});else if((o=this.rules.table.exec(e))&&(l={type:"table",header:v(o[1].replace(/^ *| *\| *$/g,"")),align:o[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:o[3]?o[3].replace(/\n$/,"").split("\n"):[]}).header.length===l.align.length){for(e=e.substring(o[0].length),f=0;f<l.align.length;f++)/^ *-+: *$/.test(l.align[f])?l.align[f]="right":/^ *:-+: *$/.test(l.align[f])?l.align[f]="center":/^ *:-+ *$/.test(l.align[f])?l.align[f]="left":l.align[f]=null;for(f=0;f<l.cells.length;f++)l.cells[f]=v(l.cells[f].replace(/^ *\| *| *\| *$/g,""),l.header.length);this.tokens.push(l)}else if(o=this.rules.lheading.exec(e))e=e.substring(o[0].length),this.tokens.push({type:"heading",depth:"="===o[2].charAt(0)?1:2,text:o[1]});else if(t&&(o=this.rules.paragraph.exec(e)))e=e.substring(o[0].length),this.tokens.push({type:"paragraph",text:"\n"===o[1].charAt(o[1].length-1)?o[1].slice(0,-1):o[1]});else if(o=this.rules.text.exec(e))e=e.substring(o[0].length),this.tokens.push({type:"text",text:o[0]});else if(e)throw new Error("Infinite loop on byte: "+e.charCodeAt(0));return this.tokens};var i={escape:/^\\([!"#$%&'()*+,\-.\/:;<=>?@\[\]\\^_`{|}~])/,autolink:/^<(scheme:[^\s\x00-\x1f<>]*|email)>/,url:m,tag:"^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",link:/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,reflink:/^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,nolink:/^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,strong:/^__([^\s_])__(?!_)|^\*\*([^\s*])\*\*(?!\*)|^__([^\s][\s\S]*?[^\s])__(?!_)|^\*\*([^\s][\s\S]*?[^\s])\*\*(?!\*)/,em:/^_([^\s_])_(?!_)|^\*([^\s*<\[])\*(?!\*)|^_([^\s<][\s\S]*?[^\s_])_(?!_|[^\spunctuation])|^_([^\s_<][\s\S]*?[^\s])_(?!_|[^\spunctuation])|^\*([^\s<"][\s\S]*?[^\s\*])\*(?!\*|[^\spunctuation])|^\*([^\s*"<\[][\s\S]*?[^\s])\*(?!\*)/,code:/^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,br:/^( {2,}|\\)\n(?!\s*$)/,del:m,text:/^(`+|[^`])(?:[\s\S]*?(?:(?=[\\<!\[`*]|\b_|$)|[^ ](?= {2,}\n))|(?= {2,}\n))/};function o(e,t){if(this.options=t||k.defaults,this.links=e,this.rules=i.normal,this.renderer=this.options.renderer||new s,this.renderer.options=this.options,!this.links)throw new Error("Tokens array requires a `links` property.");this.options.pedantic?this.rules=i.pedantic:this.options.gfm&&(this.options.breaks?this.rules=i.breaks:this.rules=i.gfm)}function s(e){this.options=e||k.defaults}function a(){}function l(e){this.tokens=[],this.token=null,this.options=e||k.defaults,this.options.renderer=this.options.renderer||new s,this.renderer=this.options.renderer,this.renderer.options=this.options,this.slugger=new c}function c(){this.seen={}}function u(e,t){if(t){if(u.escapeTest.test(e))return e.replace(u.escapeReplace,function(e){return u.replacements[e]})}else if(u.escapeTestNoEncode.test(e))return e.replace(u.escapeReplaceNoEncode,function(e){return u.replacements[e]});return e}function p(e){return e.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi,function(e,t){return"colon"===(t=t.toLowerCase())?":":"#"===t.charAt(0)?"x"===t.charAt(1)?String.fromCharCode(parseInt(t.substring(2),16)):String.fromCharCode(+t.substring(1)):""})}function h(e,t){return e=e.source||e,t=t||"",{replace:function(t,n){return n=(n=n.source||n).replace(/(^|[^\[])\^/g,"$1"),e=e.replace(t,n),this},getRegex:function(){return new RegExp(e,t)}}}function d(e,t,n){if(e){try{var r=decodeURIComponent(p(n)).replace(/[^\w:]/g,"").toLowerCase()}catch(e){return null}if(0===r.indexOf("javascript:")||0===r.indexOf("vbscript:")||0===r.indexOf("data:"))return null}t&&!g.test(n)&&(n=function(e,t){f[" "+e]||(/^[^:]+:\/*[^\/]*$/.test(e)?f[" "+e]=e+"/":f[" "+e]=b(e,"/",!0));return e=f[" "+e],"//"===t.slice(0,2)?e.replace(/:[\s\S]*/,":")+t:"/"===t.charAt(0)?e.replace(/(:\/*[^\/]*)[\s\S]*/,"$1")+t:e+t}(t,n));try{n=encodeURI(n).replace(/%25/g,"%")}catch(e){return null}return n}i._punctuation="!\"#$%&'()*+,\\-./:;<=>?@\\[^_{|}~",i.em=h(i.em).replace(/punctuation/g,i._punctuation).getRegex(),i._escapes=/\\([!"#$%&'()*+,\-.\/:;<=>?@\[\]\\^_`{|}~])/g,i._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,i._email=/[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,i.autolink=h(i.autolink).replace("scheme",i._scheme).replace("email",i._email).getRegex(),i._attribute=/\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/,i.tag=h(i.tag).replace("comment",n._comment).replace("attribute",i._attribute).getRegex(),i._label=/(?:\[[^\[\]]*\]|\\.|`[^`]*`|[^\[\]\\`])*?/,i._href=/<(?:\\[<>]?|[^\s<>\\])*>|[^\s\x00-\x1f]*/,i._title=/"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/,i.link=h(i.link).replace("label",i._label).replace("href",i._href).replace("title",i._title).getRegex(),i.reflink=h(i.reflink).replace("label",i._label).getRegex(),i.normal=y({},i),i.pedantic=y({},i.normal,{strong:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,em:/^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/,link:h(/^!?\[(label)\]\((.*?)\)/).replace("label",i._label).getRegex(),reflink:h(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label",i._label).getRegex()}),i.gfm=y({},i.normal,{escape:h(i.escape).replace("])","~|])").getRegex(),_extended_email:/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,url:/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,_backpedal:/(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,del:/^~+(?=\S)([\s\S]*?\S)~+/,text:/^(`+|[^`])(?:[\s\S]*?(?:(?=[\\<!\[`*~]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))|(?= {2,}\n|[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))/}),i.gfm.url=h(i.gfm.url,"i").replace("email",i.gfm._extended_email).getRegex(),i.breaks=y({},i.gfm,{br:h(i.br).replace("{2,}","*").getRegex(),text:h(i.gfm.text).replace("\\b_","\\b_| {2,}\\n").replace(/\{2,\}/g,"*").getRegex()}),o.rules=i,o.output=function(e,t,n){return new o(t,n).output(e)},o.prototype.output=function(e){for(var t,n,r,i,s,a,l="";e;)if(s=this.rules.escape.exec(e))e=e.substring(s[0].length),l+=u(s[1]);else if(s=this.rules.tag.exec(e))!this.inLink&&/^<a /i.test(s[0])?this.inLink=!0:this.inLink&&/^<\/a>/i.test(s[0])&&(this.inLink=!1),!this.inRawBlock&&/^<(pre|code|kbd|script)(\s|>)/i.test(s[0])?this.inRawBlock=!0:this.inRawBlock&&/^<\/(pre|code|kbd|script)(\s|>)/i.test(s[0])&&(this.inRawBlock=!1),e=e.substring(s[0].length),l+=this.options.sanitize?this.options.sanitizer?this.options.sanitizer(s[0]):u(s[0]):s[0];else if(s=this.rules.link.exec(e)){var c=x(s[2],"()");if(c>-1){var p=4+s[1].length+c;s[2]=s[2].substring(0,c),s[0]=s[0].substring(0,p).trim(),s[3]=""}e=e.substring(s[0].length),this.inLink=!0,r=s[2],this.options.pedantic?(t=/^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(r))?(r=t[1],i=t[3]):i="":i=s[3]?s[3].slice(1,-1):"",r=r.trim().replace(/^<([\s\S]*)>$/,"$1"),l+=this.outputLink(s,{href:o.escapes(r),title:o.escapes(i)}),this.inLink=!1}else if((s=this.rules.reflink.exec(e))||(s=this.rules.nolink.exec(e))){if(e=e.substring(s[0].length),t=(s[2]||s[1]).replace(/\s+/g," "),!(t=this.links[t.toLowerCase()])||!t.href){l+=s[0].charAt(0),e=s[0].substring(1)+e;continue}this.inLink=!0,l+=this.outputLink(s,t),this.inLink=!1}else if(s=this.rules.strong.exec(e))e=e.substring(s[0].length),l+=this.renderer.strong(this.output(s[4]||s[3]||s[2]||s[1]));else if(s=this.rules.em.exec(e))e=e.substring(s[0].length),l+=this.renderer.em(this.output(s[6]||s[5]||s[4]||s[3]||s[2]||s[1]));else if(s=this.rules.code.exec(e))e=e.substring(s[0].length),l+=this.renderer.codespan(u(s[2].trim(),!0));else if(s=this.rules.br.exec(e))e=e.substring(s[0].length),l+=this.renderer.br();else if(s=this.rules.del.exec(e))e=e.substring(s[0].length),l+=this.renderer.del(this.output(s[1]));else if(s=this.rules.autolink.exec(e))e=e.substring(s[0].length),r="@"===s[2]?"mailto:"+(n=u(this.mangle(s[1]))):n=u(s[1]),l+=this.renderer.link(r,null,n);else if(this.inLink||!(s=this.rules.url.exec(e))){if(s=this.rules.text.exec(e))e=e.substring(s[0].length),this.inRawBlock?l+=this.renderer.text(this.options.sanitize?this.options.sanitizer?this.options.sanitizer(s[0]):u(s[0]):s[0]):l+=this.renderer.text(u(this.smartypants(s[0])));else if(e)throw new Error("Infinite loop on byte: "+e.charCodeAt(0))}else{if("@"===s[2])r="mailto:"+(n=u(s[0]));else{do{a=s[0],s[0]=this.rules._backpedal.exec(s[0])[0]}while(a!==s[0]);n=u(s[0]),r="www."===s[1]?"http://"+n:n}e=e.substring(s[0].length),l+=this.renderer.link(r,null,n)}return l},o.escapes=function(e){return e?e.replace(o.rules._escapes,"$1"):e},o.prototype.outputLink=function(e,t){var n=t.href,r=t.title?u(t.title):null;return"!"!==e[0].charAt(0)?this.renderer.link(n,r,this.output(e[1])):this.renderer.image(n,r,u(e[1]))},o.prototype.smartypants=function(e){return this.options.smartypants?e.replace(/---/g,"â").replace(/--/g,"â").replace(/(^|[-\u2014\/(\[{"\s])'/g,"$1â").replace(/'/g,"â").replace(/(^|[-\u2014\/(\[{\u2018\s])"/g,"$1â").replace(/"/g,"â").replace(/\.{3}/g,"â¦"):e},o.prototype.mangle=function(e){if(!this.options.mangle)return e;for(var t,n="",r=e.length,i=0;i<r;i++)t=e.charCodeAt(i),Math.random()>.5&&(t="x"+t.toString(16)),n+="&#"+t+";";return n},s.prototype.code=function(e,t,n){var r=(t||"").match(/\S*/)[0];if(this.options.highlight){var i=this.options.highlight(e,r);null!=i&&i!==e&&(n=!0,e=i)}return r?'<pre><code class="'+this.options.langPrefix+u(r,!0)+'">'+(n?e:u(e,!0))+"</code></pre>\n":"<pre><code>"+(n?e:u(e,!0))+"</code></pre>"},s.prototype.blockquote=function(e){return"<blockquote>\n"+e+"</blockquote>\n"},s.prototype.html=function(e){return e},s.prototype.heading=function(e,t,n,r){return this.options.headerIds?"<h"+t+' id="'+this.options.headerPrefix+r.slug(n)+'">'+e+"</h"+t+">\n":"<h"+t+">"+e+"</h"+t+">\n"},s.prototype.hr=function(){return this.options.xhtml?"<hr/>\n":"<hr>\n"},s.prototype.list=function(e,t,n){var r=t?"ol":"ul";return"<"+r+(t&&1!==n?' start="'+n+'"':"")+">\n"+e+"</"+r+">\n"},s.prototype.listitem=function(e){return"<li>"+e+"</li>\n"},s.prototype.checkbox=function(e){return"<input "+(e?'checked="" ':"")+'disabled="" type="checkbox"'+(this.options.xhtml?" /":"")+"> "},s.prototype.paragraph=function(e){return"<p>"+e+"</p>\n"},s.prototype.table=function(e,t){return t&&(t="<tbody>"+t+"</tbody>"),"<table>\n<thead>\n"+e+"</thead>\n"+t+"</table>\n"},s.prototype.tablerow=function(e){return"<tr>\n"+e+"</tr>\n"},s.prototype.tablecell=function(e,t){var n=t.header?"th":"td";return(t.align?"<"+n+' align="'+t.align+'">':"<"+n+">")+e+"</"+n+">\n"},s.prototype.strong=function(e){return"<strong>"+e+"</strong>"},s.prototype.em=function(e){return"<em>"+e+"</em>"},s.prototype.codespan=function(e){return"<code>"+e+"</code>"},s.prototype.br=function(){return this.options.xhtml?"<br/>":"<br>"},s.prototype.del=function(e){return"<del>"+e+"</del>"},s.prototype.link=function(e,t,n){if(null===(e=d(this.options.sanitize,this.options.baseUrl,e)))return n;var r='<a href="'+u(e)+'"';return t&&(r+=' title="'+t+'"'),r+=">"+n+"</a>"},s.prototype.image=function(e,t,n){if(null===(e=d(this.options.sanitize,this.options.baseUrl,e)))return n;var r='<img src="'+e+'" alt="'+n+'"';return t&&(r+=' title="'+t+'"'),r+=this.options.xhtml?"/>":">"},s.prototype.text=function(e){return e},a.prototype.strong=a.prototype.em=a.prototype.codespan=a.prototype.del=a.prototype.text=function(e){return e},a.prototype.link=a.prototype.image=function(e,t,n){return""+n},a.prototype.br=function(){return""},l.parse=function(e,t){return new l(t).parse(e)},l.prototype.parse=function(e){this.inline=new o(e.links,this.options),this.inlineText=new o(e.links,y({},this.options,{renderer:new a})),this.tokens=e.reverse();for(var t="";this.next();)t+=this.tok();return t},l.prototype.next=function(){return this.token=this.tokens.pop(),this.token},l.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0},l.prototype.parseText=function(){for(var e=this.token.text;"text"===this.peek().type;)e+="\n"+this.next().text;return this.inline.output(e)},l.prototype.tok=function(){switch(this.token.type){case"space":return"";case"hr":return this.renderer.hr();case"heading":return this.renderer.heading(this.inline.output(this.token.text),this.token.depth,p(this.inlineText.output(this.token.text)),this.slugger);case"code":return this.renderer.code(this.token.text,this.token.lang,this.token.escaped);case"table":var e,t,n,r,i="",o="";for(n="",e=0;e<this.token.header.length;e++)n+=this.renderer.tablecell(this.inline.output(this.token.header[e]),{header:!0,align:this.token.align[e]});for(i+=this.renderer.tablerow(n),e=0;e<this.token.cells.length;e++){for(t=this.token.cells[e],n="",r=0;r<t.length;r++)n+=this.renderer.tablecell(this.inline.output(t[r]),{header:!1,align:this.token.align[r]});o+=this.renderer.tablerow(n)}return this.renderer.table(i,o);case"blockquote_start":for(o="";"blockquote_end"!==this.next().type;)o+=this.tok();return this.renderer.blockquote(o);case"list_start":o="";for(var s=this.token.ordered,a=this.token.start;"list_end"!==this.next().type;)o+=this.tok();return this.renderer.list(o,s,a);case"list_item_start":o="";var l=this.token.loose,c=this.token.checked,u=this.token.task;for(this.token.task&&(o+=this.renderer.checkbox(c));"list_item_end"!==this.next().type;)o+=l||"text"!==this.token.type?this.tok():this.parseText();return this.renderer.listitem(o,u,c);case"html":return this.renderer.html(this.token.text);case"paragraph":return this.renderer.paragraph(this.inline.output(this.token.text));case"text":return this.renderer.paragraph(this.parseText());default:var h='Token with "'+this.token.type+'" type was not found.';if(!this.options.silent)throw new Error(h);console.log(h)}},c.prototype.slug=function(e){var t=e.toLowerCase().trim().replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,.\/:;<=>?@[\]^`{|}~]/g,"").replace(/\s/g,"-");if(this.seen.hasOwnProperty(t)){var n=t;do{this.seen[n]++,t=n+"-"+this.seen[n]}while(this.seen.hasOwnProperty(t))}return this.seen[t]=0,t},u.escapeTest=/[&<>"']/,u.escapeReplace=/[&<>"']/g,u.replacements={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},u.escapeTestNoEncode=/[<>"']|&(?!#?\w+;)/,u.escapeReplaceNoEncode=/[<>"']|&(?!#?\w+;)/g;var f={},g=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;function m(){}function y(e){for(var t,n,r=1;r<arguments.length;r++)for(n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}function v(e,t){var n=e.replace(/\|/g,function(e,t,n){for(var r=!1,i=t;--i>=0&&"\\"===n[i];)r=!r;return r?"|":" |"}).split(/ \|/),r=0;if(n.length>t)n.splice(t);else for(;n.length<t;)n.push("");for(;r<n.length;r++)n[r]=n[r].trim().replace(/\\\|/g,"|");return n}function b(e,t,n){if(0===e.length)return"";for(var r=0;r<e.length;){var i=e.charAt(e.length-r-1);if(i!==t||n){if(i===t||!n)break;r++}else r++}return e.substr(0,e.length-r)}function x(e,t){if(-1===e.indexOf(t[1]))return-1;for(var n=0,r=0;r<e.length;r++)if("\\"===e[r])r++;else if(e[r]===t[0])n++;else if(e[r]===t[1]&&--n<0)return r;return-1}function w(e){e&&e.sanitize&&!e.silent&&console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options")}function k(e,t,n){if(null==e)throw new Error("marked(): input parameter is undefined or null");if("string"!=typeof e)throw new Error("marked(): input parameter is of type "+Object.prototype.toString.call(e)+", string expected");if(n||"function"==typeof t){n||(n=t,t=null),w(t=y({},k.defaults,t||{}));var i,o,s=t.highlight,a=0;try{i=r.lex(e,t)}catch(e){return n(e)}o=i.length;var c=function(e){if(e)return t.highlight=s,n(e);var r;try{r=l.parse(i,t)}catch(t){e=t}return t.highlight=s,e?n(e):n(null,r)};if(!s||s.length<3)return c();if(delete t.highlight,!o)return c();for(;a<i.length;a++)!function(e){"code"!==e.type?--o||c():s(e.text,e.lang,function(t,n){return t?c(t):null==n||n===e.text?--o||c():(e.text=n,e.escaped=!0,void(--o||c()))})}(i[a])}else try{return t&&(t=y({},k.defaults,t)),w(t),l.parse(r.lex(e,t),t)}catch(e){if(e.message+="\nPlease report this to https://github.com/markedjs/marked.",(t||k.defaults).silent)return"<p>An error occurred:</p><pre>"+u(e.message+"",!0)+"</pre>";throw e}}m.exec=m,k.options=k.setOptions=function(e){return y(k.defaults,e),k},k.getDefaults=function(){return{baseUrl:null,breaks:!1,gfm:!0,headerIds:!0,headerPrefix:"",highlight:null,langPrefix:"language-",mangle:!0,pedantic:!1,renderer:new s,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,xhtml:!1}},k.defaults=k.getDefaults(),k.Parser=l,k.parser=l.parse,k.Renderer=s,k.TextRenderer=a,k.Lexer=r,k.lexer=r.lex,k.InlineLexer=o,k.inlineLexer=o.output,k.Slugger=c,k.parse=k,e.exports=k}(this||"undefined"!=typeof window&&window)}).call(this,n(31))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.r(t);const r=new WeakMap,i=e=>(function(){const t=e(...arguments);return r.set(t,!0),t}),o=e=>"function"==typeof e&&r.has(e),s=void 0!==window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,a=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;for(;t!==n;){const n=t.nextSibling;e.removeChild(t),t=n}},l={},c={},u="{{lit-".concat(String(Math.random()).slice(2),"}}"),p="\x3c!--".concat(u,"--\x3e"),h=new RegExp("".concat(u,"|").concat(p)),d="$lit$";class f{constructor(e,t){this.parts=[],this.element=t;const n=[],r=[],i=document.createTreeWalker(t.content,133,null,!1);let o=0,s=-1,a=0;const{strings:l,values:{length:c}}=e;for(;a<c;){const e=i.nextNode();if(null!==e){if(s++,1===e.nodeType){if(e.hasAttributes()){const t=e.attributes,{length:n}=t;let r=0;for(let e=0;e<n;e++)g(t[e].name,d)&&r++;for(;r-- >0;){const t=l[a],n=v.exec(t)[2],r=n.toLowerCase()+d,i=e.getAttribute(r);e.removeAttribute(r);const o=i.split(h);this.parts.push({type:"attribute",index:s,name:n,strings:o}),a+=o.length-1}}"TEMPLATE"===e.tagName&&(r.push(e),i.currentNode=e.content)}else if(3===e.nodeType){const t=e.data;if(t.indexOf(u)>=0){const r=e.parentNode,i=t.split(h),o=i.length-1;for(let t=0;t<o;t++){let n,o=i[t];if(""===o)n=y();else{const e=v.exec(o);null!==e&&g(e[2],d)&&(o=o.slice(0,e.index)+e[1]+e[2].slice(0,-d.length)+e[3]),n=document.createTextNode(o)}r.insertBefore(n,e),this.parts.push({type:"node",index:++s})}""===i[o]?(r.insertBefore(y(),e),n.push(e)):e.data=i[o],a+=o}}else if(8===e.nodeType)if(e.data===u){const t=e.parentNode;null!==e.previousSibling&&s!==o||(s++,t.insertBefore(y(),e)),o=s,this.parts.push({type:"node",index:s}),null===e.nextSibling?e.data="":(n.push(e),s--),a++}else{let t=-1;for(;-1!==(t=e.data.indexOf(u,t+1));)this.parts.push({type:"node",index:-1}),a++}}else i.currentNode=r.pop()}for(const e of n)e.parentNode.removeChild(e)}}const g=(e,t)=>{const n=e.length-t.length;return n>=0&&e.slice(n)===t},m=e=>-1!==e.index,y=()=>document.createComment(""),v=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=\/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;class b{constructor(e,t,n){this.__parts=[],this.template=e,this.processor=t,this.options=n}update(e){let t=0;for(const n of this.__parts)void 0!==n&&n.setValue(e[t]),t++;for(const e of this.__parts)void 0!==e&&e.commit()}_clone(){const e=s?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),t=[],n=this.template.parts,r=document.createTreeWalker(e,133,null,!1);let i,o=0,a=0,l=r.nextNode();for(;o<n.length;)if(i=n[o],m(i)){for(;a<i.index;)a++,"TEMPLATE"===l.nodeName&&(t.push(l),r.currentNode=l.content),null===(l=r.nextNode())&&(r.currentNode=t.pop(),l=r.nextNode());if("node"===i.type){const e=this.processor.handleTextExpression(this.options);e.insertAfterNode(l.previousSibling),this.__parts.push(e)}else this.__parts.push(...this.processor.handleAttributeExpressions(l,i.name,i.strings,this.options));o++}else this.__parts.push(void 0),o++;return s&&(document.adoptNode(e),customElements.upgrade(e)),e}}class x{constructor(e,t,n,r){this.strings=e,this.values=t,this.type=n,this.processor=r}getHTML(){const e=this.strings.length-1;let t="",n=!1;for(let r=0;r<e;r++){const e=this.strings[r],i=e.lastIndexOf("\x3c!--");n=(i>-1||n)&&-1===e.indexOf("--\x3e",i+1);const o=v.exec(e);t+=null===o?e+(n?u:p):e.substr(0,o.index)+o[1]+o[2]+d+o[3]+u}return t+=this.strings[e]}getTemplateElement(){const e=document.createElement("template");return e.innerHTML=this.getHTML(),e}}const w=e=>null===e||!("object"==typeof e||"function"==typeof e),k=e=>Array.isArray(e)||!(!e||!e[Symbol.iterator]);class _{constructor(e,t,n){this.dirty=!0,this.element=e,this.name=t,this.strings=n,this.parts=[];for(let e=0;e<n.length-1;e++)this.parts[e]=this._createPart()}_createPart(){return new S(this)}_getValue(){const e=this.strings,t=e.length-1;let n="";for(let r=0;r<t;r++){n+=e[r];const t=this.parts[r];if(void 0!==t){const e=t.value;if(w(e)||!k(e))n+="string"==typeof e?e:String(e);else for(const t of e)n+="string"==typeof t?t:String(t)}}return n+=e[t]}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class S{constructor(e){this.value=void 0,this.committer=e}setValue(e){e===l||w(e)&&e===this.value||(this.value=e,o(e)||(this.committer.dirty=!0))}commit(){for(;o(this.value);){const e=this.value;this.value=l,e(this)}this.value!==l&&this.committer.commit()}}class E{constructor(e){this.value=void 0,this.__pendingValue=void 0,this.options=e}appendInto(e){this.startNode=e.appendChild(y()),this.endNode=e.appendChild(y())}insertAfterNode(e){this.startNode=e,this.endNode=e.nextSibling}appendIntoPart(e){e.__insert(this.startNode=y()),e.__insert(this.endNode=y())}insertAfterPart(e){e.__insert(this.startNode=y()),this.endNode=e.endNode,e.endNode=this.startNode}setValue(e){this.__pendingValue=e}commit(){for(;o(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=l,e(this)}const e=this.__pendingValue;e!==l&&(w(e)?e!==this.value&&this.__commitText(e):e instanceof x?this.__commitTemplateResult(e):e instanceof Node?this.__commitNode(e):k(e)?this.__commitIterable(e):e===c?(this.value=c,this.clear()):this.__commitText(e))}__insert(e){this.endNode.parentNode.insertBefore(e,this.endNode)}__commitNode(e){this.value!==e&&(this.clear(),this.__insert(e),this.value=e)}__commitText(e){const t=this.startNode.nextSibling;e=null==e?"":e,t===this.endNode.previousSibling&&3===t.nodeType?t.data=e:this.__commitNode(document.createTextNode("string"==typeof e?e:String(e))),this.value=e}__commitTemplateResult(e){const t=this.options.templateFactory(e);if(this.value instanceof b&&this.value.template===t)this.value.update(e.values);else{const n=new b(t,e.processor,this.options),r=n._clone();n.update(e.values),this.__commitNode(r),this.value=n}}__commitIterable(e){Array.isArray(this.value)||(this.value=[],this.clear());const t=this.value;let n,r=0;for(const i of e)void 0===(n=t[r])&&(n=new E(this.options),t.push(n),0===r?n.appendIntoPart(this):n.insertAfterPart(t[r-1])),n.setValue(i),n.commit(),r++;r<t.length&&(t.length=r,this.clear(n&&n.endNode))}clear(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.startNode;a(this.startNode.parentNode,e.nextSibling,this.endNode)}}class C{constructor(e,t,n){if(this.value=void 0,this.__pendingValue=void 0,2!==n.length||""!==n[0]||""!==n[1])throw new Error("Boolean attributes can only contain a single expression");this.element=e,this.name=t,this.strings=n}setValue(e){this.__pendingValue=e}commit(){for(;o(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=l,e(this)}if(this.__pendingValue===l)return;const e=!!this.__pendingValue;this.value!==e&&(e?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=e),this.__pendingValue=l}}class O extends _{constructor(e,t,n){super(e,t,n),this.single=2===n.length&&""===n[0]&&""===n[1]}_createPart(){return new A(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class A extends S{}let P=!1;try{const e={get capture(){return P=!0,!1}};window.addEventListener("test",e,e),window.removeEventListener("test",e,e)}catch(e){}class T{constructor(e,t,n){this.value=void 0,this.__pendingValue=void 0,this.element=e,this.eventName=t,this.eventContext=n,this.__boundHandleEvent=(e=>this.handleEvent(e))}setValue(e){this.__pendingValue=e}commit(){for(;o(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=l,e(this)}if(this.__pendingValue===l)return;const e=this.__pendingValue,t=this.value,n=null==e||null!=t&&(e.capture!==t.capture||e.once!==t.once||e.passive!==t.passive),r=null!=e&&(null==t||n);n&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),r&&(this.__options=R(e),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=e,this.__pendingValue=l}handleEvent(e){"function"==typeof this.value?this.value.call(this.eventContext||this.element,e):this.value.handleEvent(e)}}const R=e=>e&&(P?{capture:e.capture,passive:e.passive,once:e.once}:e.capture);const z=new class{handleAttributeExpressions(e,t,n,r){const i=t[0];return"."===i?new O(e,t.slice(1),n).parts:"@"===i?[new T(e,t.slice(1),r.eventContext)]:"?"===i?[new C(e,t.slice(1),n)]:new _(e,t,n).parts}handleTextExpression(e){return new E(e)}};function N(e){let t=j.get(e.type);void 0===t&&(t={stringsArray:new WeakMap,keyString:new Map},j.set(e.type,t));let n=t.stringsArray.get(e.strings);if(void 0!==n)return n;const r=e.strings.join(u);return void 0===(n=t.keyString.get(r))&&(n=new f(e,e.getTemplateElement()),t.keyString.set(r,n)),t.stringsArray.set(e.strings,n),n}const j=new Map,q=new WeakMap;(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.0.0");const L=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return new x(e,n,"html",z)},B=133;function D(e,t){const{element:{content:n},parts:r}=e,i=document.createTreeWalker(n,B,null,!1);let o=F(r),s=r[o],a=-1,l=0;const c=[];let u=null;for(;i.nextNode();){a++;const e=i.currentNode;for(e.previousSibling===u&&(u=null),t.has(e)&&(c.push(e),null===u&&(u=e)),null!==u&&l++;void 0!==s&&s.index===a;)s.index=null!==u?-1:s.index-l,s=r[o=F(r,o)]}c.forEach(e=>e.parentNode.removeChild(e))}const I=e=>{let t=11===e.nodeType?0:1;const n=document.createTreeWalker(e,B,null,!1);for(;n.nextNode();)t++;return t},F=function(e){for(let t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1)+1;t<e.length;t++){const n=e[t];if(m(n))return t}return-1};const U=(e,t)=>"".concat(e,"--").concat(t);let $=!0;void 0===window.ShadyCSS?$=!1:void 0===window.ShadyCSS.prepareTemplateDom&&(console.warn("Incompatible ShadyCSS version detected. Please update to at least @webcomponents/webcomponentsjs@2.0.2 and @webcomponents/shadycss@1.3.1."),$=!1);const M=e=>t=>{const n=U(t.type,e);let r=j.get(n);void 0===r&&(r={stringsArray:new WeakMap,keyString:new Map},j.set(n,r));let i=r.stringsArray.get(t.strings);if(void 0!==i)return i;const o=t.strings.join(u);if(void 0===(i=r.keyString.get(o))){const n=t.getTemplateElement();$&&window.ShadyCSS.prepareTemplateDom(n,e),i=new f(t,n),r.keyString.set(o,i)}return r.stringsArray.set(t.strings,i),i},V=["html","svg"],H=new Set,W=(e,t,n)=>{H.add(n);const r=e.querySelectorAll("style"),{length:i}=r;if(0===i)return void window.ShadyCSS.prepareTemplateStyles(t.element,n);const o=document.createElement("style");for(let e=0;e<i;e++){const t=r[e];t.parentNode.removeChild(t),o.textContent+=t.textContent}(e=>{V.forEach(t=>{const n=j.get(U(t,e));void 0!==n&&n.keyString.forEach(e=>{const{element:{content:t}}=e,n=new Set;Array.from(t.querySelectorAll("style")).forEach(e=>{n.add(e)}),D(e,n)})})})(n);const s=t.element.content;!function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;const{element:{content:r},parts:i}=e;if(null==n)return void r.appendChild(t);const o=document.createTreeWalker(r,B,null,!1);let s=F(i),a=0,l=-1;for(;o.nextNode();)for(l++,o.currentNode===n&&(a=I(t),n.parentNode.insertBefore(t,n));-1!==s&&i[s].index===l;){if(a>0){for(;-1!==s;)i[s].index+=a,s=F(i,s);return}s=F(i,s)}}(t,o,s.firstChild),window.ShadyCSS.prepareTemplateStyles(t.element,n);const a=s.querySelector("style");if(window.ShadyCSS.nativeShadow&&null!==a)e.insertBefore(a.cloneNode(!0),e.firstChild);else{s.insertBefore(o,s.firstChild);const e=new Set;e.add(o),D(t,e)}};window.JSCompiler_renameProperty=((e,t)=>e);const Z={toAttribute(e,t){switch(t){case Boolean:return e?"":null;case Object:case Array:return null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){switch(t){case Boolean:return null!==e;case Number:return null===e?null:Number(e);case Object:case Array:return JSON.parse(e)}return e}},X=(e,t)=>t!==e&&(t==t||e==e),K={attribute:!0,type:String,converter:Z,reflect:!1,hasChanged:X},J=Promise.resolve(!0),Q=1,Y=4,G=8,ee=16,te=32;class ne extends HTMLElement{constructor(){super(),this._updateState=0,this._instanceProperties=void 0,this._updatePromise=J,this._hasConnectedResolver=void 0,this._changedProperties=new Map,this._reflectingProperties=void 0,this.initialize()}static get observedAttributes(){this.finalize();const e=[];return this._classProperties.forEach((t,n)=>{const r=this._attributeNameForProperty(n,t);void 0!==r&&(this._attributeToPropertyMap.set(r,n),e.push(r))}),e}static _ensureClassProperties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_classProperties",this))){this._classProperties=new Map;const e=Object.getPrototypeOf(this)._classProperties;void 0!==e&&e.forEach((e,t)=>this._classProperties.set(t,e))}}static createProperty(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:K;if(this._ensureClassProperties(),this._classProperties.set(e,t),t.noAccessor||this.prototype.hasOwnProperty(e))return;const n="symbol"==typeof e?Symbol():"__".concat(e);Object.defineProperty(this.prototype,e,{get(){return this[n]},set(t){const r=this[e];this[n]=t,this._requestUpdate(e,r)},configurable:!0,enumerable:!0})}static finalize(){if(this.hasOwnProperty(JSCompiler_renameProperty("finalized",this))&&this.finalized)return;const e=Object.getPrototypeOf(this);if("function"==typeof e.finalize&&e.finalize(),this.finalized=!0,this._ensureClassProperties(),this._attributeToPropertyMap=new Map,this.hasOwnProperty(JSCompiler_renameProperty("properties",this))){const e=this.properties,t=[...Object.getOwnPropertyNames(e),..."function"==typeof Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(e):[]];for(const n of t)this.createProperty(n,e[n])}}static _attributeNameForProperty(e,t){const n=t.attribute;return!1===n?void 0:"string"==typeof n?n:"string"==typeof e?e.toLowerCase():void 0}static _valueHasChanged(e,t){return(arguments.length>2&&void 0!==arguments[2]?arguments[2]:X)(e,t)}static _propertyValueFromAttribute(e,t){const n=t.type,r=t.converter||Z,i="function"==typeof r?r:r.fromAttribute;return i?i(e,n):e}static _propertyValueToAttribute(e,t){if(void 0===t.reflect)return;const n=t.type,r=t.converter;return(r&&r.toAttribute||Z.toAttribute)(e,n)}initialize(){this._saveInstanceProperties(),this._requestUpdate()}_saveInstanceProperties(){this.constructor._classProperties.forEach((e,t)=>{if(this.hasOwnProperty(t)){const e=this[t];delete this[t],this._instanceProperties||(this._instanceProperties=new Map),this._instanceProperties.set(t,e)}})}_applyInstanceProperties(){this._instanceProperties.forEach((e,t)=>this[t]=e),this._instanceProperties=void 0}connectedCallback(){this._updateState=this._updateState|te,this._hasConnectedResolver&&(this._hasConnectedResolver(),this._hasConnectedResolver=void 0)}disconnectedCallback(){}attributeChangedCallback(e,t,n){t!==n&&this._attributeToProperty(e,n)}_propertyToAttribute(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:K;const r=this.constructor,i=r._attributeNameForProperty(e,n);if(void 0!==i){const e=r._propertyValueToAttribute(t,n);if(void 0===e)return;this._updateState=this._updateState|G,null==e?this.removeAttribute(i):this.setAttribute(i,e),this._updateState=this._updateState&~G}}_attributeToProperty(e,t){if(this._updateState&G)return;const n=this.constructor,r=n._attributeToPropertyMap.get(e);if(void 0!==r){const e=n._classProperties.get(r)||K;this._updateState=this._updateState|ee,this[r]=n._propertyValueFromAttribute(t,e),this._updateState=this._updateState&~ee}}_requestUpdate(e,t){let n=!0;if(void 0!==e){const r=this.constructor,i=r._classProperties.get(e)||K;r._valueHasChanged(this[e],t,i.hasChanged)?(this._changedProperties.has(e)||this._changedProperties.set(e,t),!0!==i.reflect||this._updateState&ee||(void 0===this._reflectingProperties&&(this._reflectingProperties=new Map),this._reflectingProperties.set(e,i))):n=!1}!this._hasRequestedUpdate&&n&&this._enqueueUpdate()}requestUpdate(e,t){return this._requestUpdate(e,t),this.updateComplete}async _enqueueUpdate(){let e,t;this._updateState=this._updateState|Y;const n=this._updatePromise;this._updatePromise=new Promise((n,r)=>{e=n,t=r});try{await n}catch(e){}this._hasConnected||await new Promise(e=>this._hasConnectedResolver=e);try{const e=this.performUpdate();null!=e&&await e}catch(e){t(e)}e(!this._hasRequestedUpdate)}get _hasConnected(){return this._updateState&te}get _hasRequestedUpdate(){return this._updateState&Y}get hasUpdated(){return this._updateState&Q}performUpdate(){this._instanceProperties&&this._applyInstanceProperties();let e=!1;const t=this._changedProperties;try{(e=this.shouldUpdate(t))&&this.update(t)}catch(t){throw e=!1,t}finally{this._markUpdated()}e&&(this._updateState&Q||(this._updateState=this._updateState|Q,this.firstUpdated(t)),this.updated(t))}_markUpdated(){this._changedProperties=new Map,this._updateState=this._updateState&~Y}get updateComplete(){return this._updatePromise}shouldUpdate(e){return!0}update(e){void 0!==this._reflectingProperties&&this._reflectingProperties.size>0&&(this._reflectingProperties.forEach((e,t)=>this._propertyToAttribute(t,this[t],e)),this._reflectingProperties=void 0)}updated(e){}firstUpdated(e){}}ne.finalized=!0;const re=e=>t=>"function"==typeof t?((e,t)=>(window.customElements.define(e,t),t))(e,t):((e,t)=>{const{kind:n,elements:r}=t;return{kind:n,elements:r,finisher(t){window.customElements.define(e,t)}}})(e,t),ie=(e,t)=>"method"!==t.kind||!t.descriptor||"value"in t.descriptor?{kind:"field",key:Symbol(),placement:"own",descriptor:{},initializer(){"function"==typeof t.initializer&&(this[t.key]=t.initializer.call(this))},finisher(n){n.createProperty(t.key,e)}}:Object.assign({},t,{finisher(n){n.createProperty(t.key,e)}}),oe=(e,t,n)=>{t.constructor.createProperty(n,e)};function se(e){return(t,n)=>void 0!==n?oe(e,t,n):ie(e,t)}const ae="adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,le=Symbol();class ce{constructor(e,t){if(t!==le)throw new Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e}get styleSheet(){return void 0===this._styleSheet&&(ae?(this._styleSheet=new CSSStyleSheet,this._styleSheet.replaceSync(this.cssText)):this._styleSheet=null),this._styleSheet}toString(){return this.cssText}}const ue=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];const i=n.reduce((t,n,r)=>t+(e=>{if(e instanceof ce)return e.cssText;throw new Error("Value passed to 'css' function must be a 'css' function result: ".concat(e,". Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security."))})(n)+e[r+1],e[0]);return new ce(i,le)};(window.litElementVersions||(window.litElementVersions=[])).push("2.0.1");const pe=e=>e.flat?e.flat(1/0):function e(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];for(let r=0,i=t.length;r<i;r++){const i=t[r];Array.isArray(i)?e(i,n):n.push(i)}return n}(e);class he extends ne{static finalize(){super.finalize(),this._styles=this.hasOwnProperty(JSCompiler_renameProperty("styles",this))?this._getUniqueStyles():this._styles||[]}static _getUniqueStyles(){const e=this.styles,t=[];if(Array.isArray(e)){pe(e).reduceRight((e,t)=>(e.add(t),e),new Set).forEach(e=>t.unshift(e))}else e&&t.push(e);return t}initialize(){super.initialize(),this.renderRoot=this.createRenderRoot(),window.ShadowRoot&&this.renderRoot instanceof window.ShadowRoot&&this.adoptStyles()}createRenderRoot(){return this.attachShadow({mode:"open"})}adoptStyles(){const e=this.constructor._styles;0!==e.length&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow?ae?this.renderRoot.adoptedStyleSheets=e.map(e=>e.styleSheet):this._needsShimAdoptedStyleSheets=!0:window.ShadyCSS.ScopingShim.prepareAdoptedCssText(e.map(e=>e.cssText),this.localName))}connectedCallback(){super.connectedCallback(),this.hasUpdated&&void 0!==window.ShadyCSS&&window.ShadyCSS.styleElement(this)}update(e){super.update(e);const t=this.render();t instanceof x&&this.constructor.render(t,this.renderRoot,{scopeName:this.localName,eventContext:this}),this._needsShimAdoptedStyleSheets&&(this._needsShimAdoptedStyleSheets=!1,this.constructor._styles.forEach(e=>{const t=document.createElement("style");t.textContent=e.cssText,this.renderRoot.appendChild(t)}))}render(){}}he.finalized=!0,he.render=((e,t,n)=>{const r=n.scopeName,i=q.has(t),o=$&&11===t.nodeType&&!!t.host&&e instanceof x,s=o&&!H.has(r),l=s?document.createDocumentFragment():t;if(((e,t,n)=>{let r=q.get(t);void 0===r&&(a(t,t.firstChild),q.set(t,r=new E(Object.assign({templateFactory:N},n))),r.appendInto(t)),r.setValue(e),r.commit()})(e,l,Object.assign({templateFactory:M(r)},n)),s){const e=q.get(l);q.delete(l),e.value instanceof b&&W(l,e.value.template,r),a(t,t.firstChild),t.appendChild(l),q.set(t,e)}!i&&o&&window.ShadyCSS.styleElement(t.host)});var de=n(1),fe=n.n(de);const ge=e=>{for(const t of document.cookie.split(";")){const n=t.indexOf("=");let r=t.substr(0,n),i=t.substr(n+1);if(r=r.trim(),i=i.trim(),r===e)return i}return null},me=e=>{const t=[];Object.keys(e).forEach(n=>{e[n]&&t.push(n)});let n=t.join(" ");return n.trim().length>0&&(n=" "+n),n},ye=e=>new Promise((t,n)=>{ve(e).then(e=>{t({assets:e.data.results,next:e.data.next})}).catch(e=>n(e))}),ve=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const n=ge("csrftoken"),r={headers:n?{"X-CSRFToken":n}:{}};return t&&(r.cancelToken=t),fe.a.get(e,r)};var be=n(3),xe=n.n(be);function we(){const e=Re(['<div id="left-column"><div class="search"><rp-select placeholder="Search" endpoint="',"boundaries/",'/?q=" .renderOptionDetail="','" @rp-selection="','"></rp-select></div><div class="feature-tree">','</div></div><div id="right-column"><leaflet-map endpoint="','" .feature="','" .osmId="','" .hovered="','" .onFeatureClicked="','"></leaflet-map></div><rp-dialog id="alias-dialog" title="Aliases for ','" primaryButtonName="Save" @rp-button-clicked="','"><div class="selected"><textarea id="','" .value="','"></textarea><div class="help">Enter other aliases for ',", one per line</div></div></rp-dialog>"]);return we=function(){return e},e}function ke(){const e=Re([""]);return ke=function(){return e},e}function _e(){const e=Re(["",'<div class="path">','</div><div class="aliases">',"</div>"]);return _e=function(){return e},e}function Se(){const e=Re(['<rp-label class="alias" dark>',"</rp-label>"]);return Se=function(){return e},e}function Ee(){const e=Re(["<style>rp-label {\n          margin-top: 3px;\n          margin-right: 3px;\n        }</style>"]);return Ee=function(){return e},e}function Ce(){const e=Re([""," ",""]);return Ce=function(){return e},e}function Oe(){const e=Re(['<div class="edit clickable showonhover" @click="','"><rp-icon name="register" size="12"></rp-icon></div>']);return Oe=function(){return e},e}function Ae(){const e=Re(['<rp-label class="alias" @click="','" light clickable>',"</rp-label>"]);return Ae=function(){return e},e}function Pe(){const e=Re(['<div class="feature"><div @mouseover="','" @mouseout="','" class="level-','"><div class="feature-name ','" @click="','">','</div><div class="aliases">'," ","</div></div></div>"]);return Pe=function(){return e},e}function Te(){const e=Re([":host {\n        line-height: normal;\n      }\n\n      textarea {\n        border-radius: 5px;\n        border-color: var(--color-borders);\n        padding: 10px;\n        color: var(--color-text);\n        font-size: 14px;\n        resize: none;\n      }\n\n      textarea:focus {\n        box-shadow: none;\n        outline: none;\n      }\n\n      #left-column {\n        display: inline-block;\n        margin-left: 10px;\n        width: 300px;\n        z-index: 100;\n      }\n\n      .search {\n        margin-bottom: 10px;\n      }\n\n      .feature {\n        padding: 4px 14px;\n        font-size: 16px;\n      }\n\n      .level-0 {\n        margin-left: 0px;\n      }\n\n      .level-1 {\n        margin-left: 5px;\n        font-size: 95%;\n      }\n\n      .level-2 {\n        margin-left: 10px;\n        font-size: 90%;\n      }\n\n      .level-3 {\n        margin-left: 15px;\n        font-size: 85%;\n      }\n\n      .feature-name {\n        display: inline-block;\n      }\n\n      .clickable {\n        text-decoration: none;\n        cursor: pointer;\n        color: var(--color-link-primary);\n      }\n\n      .clickable.secondary {\n        color: var(--color-link-secondary);\n      }\n\n      .clickable:hover {\n        text-decoration: underline;\n        color: var(--color-link-primary-hover);\n      }\n\n      .feature:hover .showonhover {\n        visibility: visible;\n      }\n\n      .showonhover {\n        visibility: hidden;\n      }\n\n      .aliases {\n        color: #bbb;\n        font-size: 80%;\n        display: inline;\n        margin-left: 5px;\n      }\n\n      rp-label {\n        margin-right: 3px;\n        margin-bottom: 3px;\n        vertical-align: top;\n      }\n\n      .selected {\n        display: flex;\n        flex-direction: column;\n        padding: 15px;\n      }\n\n      .selected .name {\n        font-size: 18px;\n        padding: 5px;\n      }\n\n      .selected .help {\n        padding: 5px 2px;\n        font-size: 11px;\n        color: var(--color-secondary-light);\n      }\n\n      #right-column {\n        vertical-align: top;\n        margin-left: 20px;\n        display: inline-block;\n      }\n\n      leaflet-map {\n        height: 250px;\n        width: 450px;\n        border: 0px solid #999;\n        border-radius: 5px;\n      }\n\n      .edit {\n        display: inline-block;\n        margin-right: 0px;\n      }"]);return Te=function(){return e},e}function Re(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var ze=function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s};let Ne=class extends he{constructor(){super(),this.path=[]}static get styles(){return ue(Te())}updated(e){if(e.has("osmId")){const e=[];for(let t of this.path)if(e.push(t),t.osm_id===this.osmId)return this.path=[...e],void this.hideAliasDialog();this.fetchFeature()}}fetchFeature(){ve(this.getEndpoint()+"boundaries/"+this.osmId+"/").then(e=>{this.path=e.data,this.hideAliasDialog()})}fireTextareaAutosize(){window.setTimeout(()=>{xe()(this.shadowRoot.querySelector("textarea")),xe.a.update(this.shadowRoot.querySelector("textarea"))},0)}handleMapClicked(e){this.hovered=null,e&&e.osm_id===this.osmId||(this.osmId=e.osm_id)}handlePlaceClicked(e){this.osmId=e.osm_id}handleSearchSelection(e){const t=e.detail.selected;this.showAliasDialog(t)}renderFeature(e,t){const n=this.path[this.path.length-1],r=(e.has_children||0===e.level)&&e!==n,i=L(Pe(),()=>{e.level>0&&(this.hovered=e)},()=>{this.hovered=null},e.level,r?"clickable":"",()=>{r&&this.handlePlaceClicked(e)},e.name,e.aliases.split("\n").map(t=>t.trim().length>0?L(Ae(),()=>{this.showAliasDialog(e)},t):null),e.level>0?L(Oe(),t=>{this.showAliasDialog(e),t.preventDefault(),t.stopPropagation()}):""),o=(e.children||[]).map(e=>t.length>0&&t[0].osm_id===e.osm_id?this.renderFeature(t[0],t.slice(1)):0===t.length||0===t[0].children.length?this.renderFeature(e,t):null);return L(Ce(),i,o)}showAliasDialog(e){this.editFeature=e;const t=this.shadowRoot.getElementById("alias-dialog");t&&(this.fireTextareaAutosize(),t.setAttribute("open",""))}hideAliasDialog(){const e=this.shadowRoot.getElementById("alias-dialog");e&&e.removeAttribute("open"),this.requestUpdate()}getEndpoint(){return this.endpoint+(this.endpoint.endsWith("/")?"":"/")}handleDialogClick(e){const t=e.detail.button;if("Save"===t.name){t.setProgress(!0);const e=this.shadowRoot.getElementById(this.editFeature.osm_id).value,n={osm_id:this.editFeature.osm_id,aliases:e};((e,t)=>{const n=ge("csrftoken"),r=n?{"X-CSRFToken":n}:{};return fe.a.post(e,t,{headers:r})})(this.getEndpoint()+"boundaries/"+this.editFeature.osm_id+"/",n).then(e=>{this.fetchFeature()})}"Cancel"===t.name&&this.hideAliasDialog()}renderOptionDetail(e,t){const n=L(Ee()),r=e.aliases.split("\n").map(e=>e.trim().length>0?L(Se(),e):null);return L(_e(),n,e.path.replace(/>/gi,"â£"),r)}render(){if(0===this.path.length)return L(ke());const e=this.path[this.path.length-1],t=0===e.children.length?this.path[this.path.length-2]:e,n=this.editFeature?this.editFeature.osm_id:null,r=this.editFeature?this.editFeature.name:null,i=this.editFeature?this.editFeature.aliases:null;return L(we(),this.getEndpoint(),this.path[0].osm_id,this.renderOptionDetail,this.handleSearchSelection.bind(this),this.renderFeature(this.path[0],this.path.slice(1)),this.getEndpoint(),t,t.osm_id,this.hovered,this.handleMapClicked.bind(this),r,this.handleDialogClick.bind(this),n,i,r)}};ze([se({type:Array,attribute:!1})],Ne.prototype,"path",void 0),ze([se()],Ne.prototype,"endpoint",void 0),ze([se()],Ne.prototype,"osmId",void 0),ze([se({type:Object})],Ne.prototype,"hovered",void 0),ze([se({type:Object})],Ne.prototype,"editFeature",void 0);Ne=ze([re("alias-editor")],Ne);function je(){const e=Le(['<div class="button ','" tabindex="0" @keyup="','"><div class="mask">',"</div></div>"]);return je=function(){return e},e}function qe(){const e=Le([".button {\n        background: blue;\n        color: #fff;\n        cursor: pointer;\n        display: inline-block;\n        border-radius: var(--curvature);\n        outline: none;\n      }\n\n      .button:focus {\n        outline: none;\n        margin: 0;\n      }\n\n      .button:focus .mask{\n        background: rgb(0,0,0,.1);\n        box-shadow: 0 0 0px 2px var(--color-button-primary);\n      }\n\n      .button.secondary:focus .mask{\n        border: 1px solid var(--color-button-secondary);\n        background: transparent;\n        box-shadow: 0 0 0px 2px var(--color-button-secondary);\n      }\n\n      .mask {\n        padding: 5px 10px;\n        border-radius: var(--curvature);\n        border: 1px solid transparent;\n      }\n\n      .primary {\n        background: var(--color-button-primary);\n        color: var(--color-button-primary-text);\n      }\n\n      .secondary {\n        background: transparent;\n        color: var(--color-button-secondary);\n      }\n\n      .secondary:hover .mask{\n        border: 1px solid var(--color-button-secondary);\n      }\n\n      .button.progress{\n        background: #ddd;\n      }\n\n      .button.progress:focus .mask {\n        box-shadow: 0 0 0px 2px var(--color-button-secondary);\n      }\n\n      .mask:hover {\n        background: rgb(0,0,0,.1);\n      }\n\n      .secondary .mask:hover {\n        background: transparent;\n      }"]);return qe=function(){return e},e}function Le(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Be=function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s};let De=class extends he{static get styles(){return ue(qe())}setProgress(e){this.isProgress=e}handleKeyUp(e){"Enter"===e.key&&this.click()}render(){return L(je(),me({progress:this.isProgress,primary:this.primary,secondary:this.secondary}),this.handleKeyUp,this.isProgress&&this.inProgessName||this.name)}};Be([se({type:Boolean})],De.prototype,"primary",void 0),Be([se({type:Boolean})],De.prototype,"secondary",void 0),Be([se()],De.prototype,"name",void 0),Be([se()],De.prototype,"inProgessName",void 0),Be([se({type:Boolean})],De.prototype,"isProgress",void 0);var Ie;De=Be([re("rp-button")],De);class Fe extends he{getEventHandlers(){return[]}connectedCallback(){super.connectedCallback();for(const e of this.getEventHandlers())document.addEventListener(e.event,e.method.bind(this))}disconnectedCallback(){for(const e of this.getEventHandlers())document.removeEventListener(e.event,e.method);super.disconnectedCallback()}fireEvent(e){this.dispatchEvent(new Event(e,{bubbles:!0,composed:!0}))}fireCustomEvent(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=new CustomEvent(e,{detail:t,bubbles:!0,composed:!0});this.dispatchEvent(n)}}function Ue(){const e=Ve(["<slot></slot>"]);return Ue=function(){return e},e}function $e(){const e=Ve(["<style>.mask {\n            height: ",'px;\n          }\n          .mask.open > .dialog {\n            top: 100px;\n          }</style><div class="mask ','"><div @keyup="','" class="dialog"><div class="header"><div class="title">','</div></div><div class="body" @keypress="','">','</div><div class="footer"><rp-button @click="','" name="','" inProgessName="','" primary>}</rp-button><rp-button @click="','" name="','" secondary></rp-button></div></div></div>']);return $e=function(){return e},e}function Me(){const e=Ve([".mask {\n        width: 100%;\n        background: rgba(0, 0, 0, .5);\n        opacity: 0;\n        visibility: hidden;\n        position: fixed;\n        top:0px;\n        left:0px;\n        transition: all ease-in 250ms;\n      }\n\n      .dialog {\n        background: #fff;\n        width: 500px;\n        margin: 0px auto; \n        top: -200px;\n        position: relative;\n        transition: top ease-in-out 200ms;\n        border-radius: var(--curvature); \n        box-shadow: 0px 0px 0px 4px rgba(0,0,0,.04);\n      }\n\n      .mask.open {\n        opacity: 1;\n        visibility: visible;\n      }\n\n      .title {\n        padding: 10px 20px;\n        font-size: 18px;\n        color: var(--color-text-light);\n        background: var(--color-primary-dark);\n      }\n\n      .footer {\n        background: var(--color-primary-light);\n        padding: 10px;\n        display: flex;\n        flex-flow: row-reverse;\n      }\n\n      rp-button {\n        margin-left: 5px;\n      }"]);return Me=function(){return e},e}function Ve(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}!function(e){e.Canceled="rp-canceled",e.CursorChanged="rp-cursor-changed",e.Selection="rp-selection",e.ButtonClicked="rp-button-clicked"}(Ie||(Ie={}));var He=function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s};let We=class extends Fe{constructor(){super(),this.primaryButtonName="Ok",this.cancelButtonName="Cancel",this.inProgressName="Saving"}static get styles(){return ue(Me())}updated(e){if(e.has("open")&&this.open){this.shadowRoot.querySelectorAll("rp-button").forEach(e=>e.setProgress(!1));const e=this.querySelectorAll("textarea,input");e.length>0&&window.setTimeout(()=>{e[0].focus()},100)}}handleClick(e){const t=e.currentTarget;t.isProgress||this.fireCustomEvent(Ie.ButtonClicked,{button:t})}getDocumentHeight(){const e=document.body,t=document.documentElement;return Math.max(e.scrollHeight,e.offsetHeight,t.clientHeight,t.scrollHeight,t.offsetHeight)}handleKeyUp(e){"Escape"===e.key&&this.shadowRoot.querySelectorAll("rp-button").forEach(e=>{e.name===this.cancelButtonName&&e.click()})}render(){const e=this.getDocumentHeight();return L($e(),e+100,this.open?"open":"",this.handleKeyUp,this.title,this.handleKeyUp,this.body?this.body:L(Ue()),this.handleClick,this.primaryButtonName,this.inProgressName,this.handleClick,this.cancelButtonName)}};He([se({type:Boolean})],We.prototype,"open",void 0),He([se()],We.prototype,"title",void 0),He([se()],We.prototype,"body",void 0),He([se()],We.prototype,"primaryButtonName",void 0),He([se({type:String})],We.prototype,"cancelButtonName",void 0),He([se()],We.prototype,"inProgressName",void 0),He([se({attribute:!1})],We.prototype,"onButtonClicked",void 0);We=He([re("rp-dialog")],We);function Ze(){const e=Qe(['<input class="textinput" name="','" type="text" placeholder="','" .value="','">']);return Ze=function(){return e},e}function Xe(){const e=Qe(['<textarea class="textinput" name="','" placeholder="','" .value="','">\n        </textarea>']);return Xe=function(){return e},e}function Ke(){const e=Qe(["<style>.input-container {\n        height: ",';\n      }</style><div class="input-container" @click="','">',"</div>"]);return Ke=function(){return e},e}function Je(){const e=Qe([".input-container {\n        border-radius: 5px;\n        overflow: hidden;\n        cursor: pointer;\n        background: var(--color-widget-bg);\n        border: 1px solid var(--color-widget-border);\n        box-shadow: none;\n        transition: all ease-in-out 200ms;\n        display: flex;\n        flex-direction: row;\n        align-items: stretch;\n      }\n\n      .input-container:focus-within {\n        border-color: var(--color-widget-border);\n        background: var(--color-widget-bg-focused);\n        box-shadow: var(--color-widget-shadow-focused) 1px 1px 6px 0px inset;\n      }\n\n      .input-container:hover {\n        background: var(--color-widget-bg-focused);\n      }\n\n      textarea {\n        height: 85%;\n      }\n\n      .textinput {\n        padding: 8px;\n        border: 0px solid red;\n        flex: 1;\n        margin: 0;\n        background: none;\n        color: var(--color-text);\n        font-size: 13px;\n        cursor: pointer;\n        resize: none;\n      }\n\n      .textinput:focus {\n        outline: none;\n        cursor: text;\n      }\n\n      .textinput::placeholder {\n        color: rgba(0,0,0,.15);\n      }"]);return Je=function(){return e},e}function Qe(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Ye=function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s};let Ge=class extends Fe{constructor(){super(...arguments),this.placeholder="",this.value="",this.name=""}static get styles(){return ue(Je())}firstUpdated(e){super.firstUpdated(e),this.inputElement=this.shadowRoot.querySelector(".textinput")}render(){return L(Ke(),this.textarea?"100%":"auto",()=>{this.shadowRoot.querySelector(".textinput").focus()},this.textarea?L(Xe(),this.name,this.placeholder,this.value):L(Ze(),this.name,this.placeholder,this.value))}};Ye([se({type:Boolean})],Ge.prototype,"textarea",void 0),Ye([se({type:String})],Ge.prototype,"placeholder",void 0),Ye([se({type:String})],Ge.prototype,"value",void 0),Ye([se({type:String})],Ge.prototype,"name",void 0),Ye([se({type:Object})],Ge.prototype,"inputElement",void 0);Ge=Ye([re("rp-textinput")],Ge);function et(){const e=rt(["<style>.label {\n            background: ",";\n            color: ",";\n          }</style>"]);return et=function(){return e},e}function tt(){const e=rt(["",'<div class="label ','"><div class="mask"><slot></slot></div></div>']);return tt=function(){return e},e}function nt(){const e=rt([":host {\n        display: inline-block;\n      }\n\n      .mask {\n        padding: 3px 6px;\n        border-radius: var(--curvature);\n      }\n\n      .label.clickable .mask:hover {\n        background: rgb(0,0,0,.05);\n      }\n\n      .label {\n        border-radius: 2px;\n        font-size: 80%;\n        font-weight: 400;\n        border-radius: var(--curvature);\n        background: tomato;\n        color: #fff;\n        text-shadow: 0 0.04em 0.04em rgba(0,0,0,0.35);\n      }\n\n      .primary {\n        background: var(--color-label-primary);\n        color: var(--color-label-primary-text);\n      }\n\n      .secondary {\n        background: var(--color-label-secondary);\n        color: var(--color-label-secondary-text);\n        text-shadow: none;\n      }\n\n      .light {\n        background: var(--color-overlay-light);\n        color: var(--color-overlay-light-text);\n        text-shadow: none;\n      }\n\n      .dark {\n        background: var(--color-overlay-dark);\n        color: var(--color-overlay-dark-text);\n        text-shadow: none;\n      }\n\n      .clickable {\n        cursor: pointer;\n      }"]);return nt=function(){return e},e}function rt(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var it=function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s};let ot=class extends he{static get styles(){return ue(nt())}render(){return L(tt(),this.backgroundColor&&this.textColor?L(et(),this.backgroundColor,this.textColor):null,me({clickable:this.clickable,primary:this.primary,secondary:this.secondary,light:this.light,dark:this.dark}))}};it([se({type:Boolean})],ot.prototype,"clickable",void 0),it([se({type:Boolean})],ot.prototype,"primary",void 0),it([se({type:Boolean})],ot.prototype,"secondary",void 0),it([se({type:Boolean})],ot.prototype,"light",void 0),it([se({type:Boolean})],ot.prototype,"dark",void 0),it([se()],ot.prototype,"backgroundColor",void 0),it([se()],ot.prototype,"textColor",void 0);ot=it([re("rp-label")],ot);function st(){const e=dt(['<div @mouseover="','" @click="','" class="option ','">',"</div>"]);return st=function(){return e},e}function at(){const e=dt(["<style>.container {\n          top: ","px;\n          left: ","px;\n          width: ","px;\n        }\n\n        .options {\n          width: ",'px;\n        }</style><div class="container ','"><div class="options">',"</div><slot></slot></div>"]);return at=function(){return e},e}function lt(){const e=dt(["",""]);return lt=function(){return e},e}function ct(){const e=dt(["",""]);return ct=function(){return e},e}function ut(){const e=dt(['<div class="name">',"</div>"]);return ut=function(){return e},e}function pt(){const e=dt(['<div class="name">','</div><div class="detail">',"</div>"]);return pt=function(){return e},e}function ht(){const e=dt([".container {\n        visibility: hidden;\n        position: fixed;\n        border-radius: var(--curvature);\n        border: 1px solid var(--color-borders);\n        box-shadow: 0px 0px 3px 1px rgba(0,0,0,.06);\n        background: #fff;\n        z-index: 1;\n      }\n\n      .options {\n        border-radius: var(--curvature);\n        background: #fff;\n        overflow-y: scroll;\n        max-height: 225px;\n      }\n\n      .show {\n        visibility: visible;\n      }\n\n      .option {\n        font-size: 14px;\n        padding: 10px 20px;\n        border-radius: 5px;\n        margin: 5px;\n        cursor: pointer;\n        color: var(--color-text);\n      }\n\n      .option.focused {\n        background: rgba(var(--primary-rgb), .8);\n        color: var(--color-text-light);\n      }\n\n      .option .detail {\n        font-size: 85%;\n        color: rgba(255,255,255,.9);\n      }\n\n      code {\n        background: rgba(0,0,0,.15);\n        padding: 1px 5px;\n        border-radius: var(--curvature);\n      }"]);return ht=function(){return e},e}function dt(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var ft=function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s};let gt=class extends Fe{constructor(){super(...arguments),this.cursorIndex=0}static get styles(){return ue(ht())}updated(e){if(super.updated(e),e.has("cursorIndex")){const e=this.shadowRoot.querySelector(".focused");if(e){const t=this.shadowRoot.querySelector(".options"),n=t.getBoundingClientRect().height,r=e.getBoundingClientRect().height;if(e.offsetTop+r>t.scrollTop+n-5){const i=e.offsetTop-n+r+5;t.scrollTop=i}else if(e.offsetTop<t.scrollTop){const n=e.offsetTop-5;t.scrollTop=n}}}e.has("options")&&(this.calculatePosition(),this.cursorIndex=0)}renderOptionDefault(e,t){const n=this.renderOptionName||this.renderOptionNameDefault,r=this.renderOptionDetail||this.renderOptionDetailDefault;return t?L(pt(),n(e,t),r(e,t)):L(ut(),n(e,t))}renderOptionNameDefault(e,t){return L(ct(),e.name)}renderOptionDetailDefault(e,t){return L(lt(),e.detail)}handleSelection(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];const t=this.options[this.cursorIndex];this.fireCustomEvent(Ie.Selection,{selected:t,tabbed:e})}moveCursor(e){const t=Math.max(Math.min(this.cursorIndex+e,this.options.length-1),0);this.setCursor(t)}setCursor(e){e!==this.cursorIndex&&(this.cursorIndex=e,this.fireCustomEvent(Ie.CursorChanged,{index:e}))}handleKeyDown(e){this.visible&&(e.ctrlKey&&"n"===e.key||"ArrowDown"===e.key?(this.moveCursor(1),e.preventDefault()):e.ctrlKey&&"p"===e.key||"ArrowUp"===e.key?(this.moveCursor(-1),e.preventDefault()):"Enter"!==e.key&&"Tab"!==e.key||(this.handleSelection("Tab"===e.key),e.preventDefault()),"Escape"===e.key&&this.fireCustomEvent(Ie.Canceled))}calculatePosition(){const e=this.shadowRoot.querySelector(".container").getBoundingClientRect();if(this.anchorTo){const t=this.anchorTo.getBoundingClientRect(),n=t.top-e.height;n>0&&t.bottom+e.height>window.innerHeight?this.top=n:this.top=t.bottom,this.left=t.left,this.width=t.width}}getEventHandlers(){return[{event:"keydown",method:this.handleKeyDown},{event:"scroll",method:this.calculatePosition}]}render(){const e=(this.renderOption||this.renderOptionDefault).bind(this);return L(at(),this.top,this.left,this.width,this.width,this.visible?"show":"",this.options.map((t,n)=>L(st(),e=>{Math.abs(e.movementX)+Math.abs(e.movementY)>0&&this.setCursor(n)},()=>{this.handleSelection()},n==this.cursorIndex?"focused":"",e(t,n==this.cursorIndex))))}};ft([se({type:Number})],gt.prototype,"top",void 0),ft([se({type:Number})],gt.prototype,"left",void 0),ft([se({type:Number})],gt.prototype,"width",void 0),ft([se({type:Object})],gt.prototype,"anchorTo",void 0),ft([se({type:Boolean})],gt.prototype,"visible",void 0),ft([se({type:Number})],gt.prototype,"cursorIndex",void 0),ft([se({type:Array})],gt.prototype,"options",void 0),ft([se({attribute:!1})],gt.prototype,"renderOption",void 0),ft([se({attribute:!1})],gt.prototype,"renderOptionName",void 0),ft([se({attribute:!1})],gt.prototype,"renderOptionDetail",void 0);gt=ft([re("rp-options")],gt);function mt(){const e=vt(['<rp-textinput @keyup="','" @blur="','" @focus="','" .value="','" placeholder="','"></rp-textinput><rp-options cursorIndex="','" @rp-selection="','" .renderOptionDetail="','" .renderOptionName="','" .renderOption="','" .anchorTo="','" .options="','" ?visible="','"></rp-options>']);return mt=function(){return e},e}function yt(){const e=vt([":host {\n        display: flex;\n        flex-direction: column;\n      }"]);return yt=function(){return e},e}function vt(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var bt=function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s};let xt=class extends Fe{constructor(){super(),this.selected=[],this.placeholder="",this.input="",this.options=[],this.quietMillis=200,this.renderOptionDetail=(()=>{})}static get styles(){return ue(yt())}updated(e){if(super.updated(e),e.has("selected")&&(this.input="",this.shadowRoot.querySelector("input").blur()),e.has("input")&&!e.has("selected")){if(!this.input)return void(this.options=[]);this.lastQuery&&window.clearTimeout(this.lastQuery),this.lastQuery=window.setTimeout(()=>{this.fetchOptions(this.input)},this.quietMillis)}e.has("cursorIndex")&&this.options.length>0&&this.query&&!this.complete&&this.cursorIndex>this.options.length-20&&this.fetchOptions(this.query,this.page+1)}handleOptionSelection(e){const t=e.detail.selected;this.selected=[t],this.options=[],this.input=t.name}fetchOptions(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(!this.fetching){this.cancelToken&&this.cancelToken.cancel();const n=fe.a.CancelToken;this.cancelToken=n.source(),this.fetching=!0,ve(this.endpoint+encodeURIComponent(e)+"&page="+t,this.cancelToken.token).then(n=>{if(0===t)this.options=n.data.filter(e=>e.level>0),this.cursorIndex=0,this.query=e,this.complete=0===this.options.length;else{const e=n.data.filter(e=>e.level>0);e.length>0&&(this.options=[...this.options,...e]),this.complete=0===e.length}this.fetching=!1,this.page=t}).catch(e=>{})}}handleBlur(){window.setTimeout(()=>{this.options=[]},100)}handleFocus(){}handleKeyUp(e){const t=e.currentTarget;this.input=t.inputElement.value.trim()}handleCancel(){this.options=[]}handleCursorChanged(e){this.cursorIndex=e.detail.index}getEventHandlers(){return[{event:Ie.Canceled,method:this.handleCancel},{event:Ie.CursorChanged,method:this.handleCursorChanged}]}firstUpdated(e){this.anchorElement=this.shadowRoot.querySelector("rp-textinput")}render(){return L(mt(),this.handleKeyUp,this.handleBlur,this.handleFocus,this.input,this.placeholder,this.cursorIndex,this.handleOptionSelection,this.renderOptionDetail,this.renderOptionName,this.renderOption,this.anchorElement,this.options,this.input.length>0&&this.options.length>0)}};bt([se({type:Array})],xt.prototype,"selected",void 0),bt([se()],xt.prototype,"placeholder",void 0),bt([se()],xt.prototype,"endpoint",void 0),bt([se({type:String})],xt.prototype,"input",void 0),bt([se({type:Array})],xt.prototype,"options",void 0),bt([se({type:Number})],xt.prototype,"quietMillis",void 0),bt([se({type:Boolean})],xt.prototype,"fetching",void 0),bt([se({attribute:!1})],xt.prototype,"cursorIndex",void 0),bt([se({attribute:!1})],xt.prototype,"anchorElement",void 0),bt([se({attribute:!1})],xt.prototype,"renderOption",void 0),bt([se({attribute:!1})],xt.prototype,"renderOptionName",void 0),bt([se({attribute:!1})],xt.prototype,"renderOptionDetail",void 0);xt=bt([re("rp-select")],xt);const wt=0,kt=1,_t=2,St=3,Et=4,Ct=5,Ot=6,At=(e,t)=>0===e.indexOf(t,0),Pt=(e,t,n)=>{const r=e.substring(1);if("("===r[0])return!0;{const e=r.split(".")[0].toLowerCase();if(!n)return t.indexOf(e)>=0;for(const n of t)if(At(n,e))return!0;return!1}},Tt=e=>e>="a"&&e<="z"||e>="A"&&e<="Z"||e>="0"&&e<="9"||"_"===e,Rt=e=>{let t=0;for(const n of e)'"'===n&&t++;return t%2!=0};const zt=(e,t)=>t?e.filter(e=>!!e.signature&&0===e.signature.indexOf(t)):e,Nt=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const r=(t||"").split(".");let i=e.root_no_session,o="",s="";for(;r.length>0;)if(s=r.shift()){const t=i.find(e=>e.key===s);if(!t){i=i.filter(e=>e.key.startsWith(s.toLowerCase()));break}{const r=e.types.find(e=>e.name===t.type);if(r&&r.properties)i=r.properties,o+=s+".";else{if(!r||!r.property_template){i=i.filter(e=>e.key.startsWith(s.toLowerCase()));break}{o+=s+".";const e=r.property_template;i=n[r.name]?n[r.name].map(t=>({key:e.key.replace("{key}",t),help:e.help.replace("{key}",t),type:e.type})):[]}}}}return i.map(e=>{return{name:"__default__"===e.key?o.substr(0,o.length-1):o+e.key,summary:e.help}})};var jt=n(4),qt=n.n(jt);const Lt=new WeakMap,Bt=i(e=>t=>{if(!(t instanceof E))throw new Error("unsafeHTML can only be used in text bindings");const n=Lt.get(t);if(void 0!==n&&w(e)&&e===n.value&&t.value===n.fragment)return;const r=document.createElement("template");r.innerHTML=e;const i=document.importNode(r.content,!0);t.setValue(i),Lt.set(t,{value:e,fragment:i})});function Dt(){const e=Ht(['<div class="current-fn">',"</div>"]);return Dt=function(){return e},e}function It(){const e=Ht(["<style>#anchor {\n          top:","px;\n          left:",'px;\n        }</style><div class="container"><div id="anchor"></div><rp-textinput name="','" placeholder="','" @keyup="','" @click="','" @input="','" .value="','" ?textarea="','"></rp-textinput><rp-options @rp-selection="','" @rp-canceled="','" .anchorTo="','" .options="','" .renderOption="','" ?visible="','">','<div class="footer">Tab to complete, enter to select</div></rp-options></div>']);return It=function(){return e},e}function Ft(){const e=Ht(['<div style="font-size: 85%">',"</div>"]);return Ft=function(){return e},e}function Ut(){const e=Ht(['<div><div style="','">',"</div>","</div>"]);return Ut=function(){return e},e}function $t(){const e=Ht(['<div style="display:inline-block; font-weight: 300; font-size: 85%">','</div><div class="detail">',"</div>"]);return $t=function(){return e},e}function Mt(){const e=Ht(['<div style="','"><div style="display:inline-block;">Æ</div><div style="display:inline-block">',"</div>","</div>"]);return Mt=function(){return e},e}function Vt(){const e=Ht([":host {\n        display: block;\n      }\n\n      .container {\n        position: relative;\n        height: 100%;\n      }\n\n      #anchor {\n        /* background: rgba(132, 40, 158, .1); */\n        position: absolute;\n        visibility: hidden;\n        width: 250px;\n        height: 20px;\n      }\n\n      .fn-marker {\n        font-weight: bold;\n        font-size: 42px;\n      }\n\n      .option-slot {\n        background: #fff;\n      }\n\n      .current-fn {\n        padding: 10px;\n        margin: 5px;\n        background: var(--color-widget-bg);\n        color: rgba(0, 0, 0, .5);\n        border-radius: var(--curvature);\n        font-size: 90%;\n      }\n\n      .footer {\n        padding: 5px 10px;\n        background: var(--color-widget-bg);\n        color: rgba(0, 0, 0, .5);\n        font-size: 80%;\n      }\n\n      code {\n        background: rgba(0,0,0,.1);\n        padding: 1px 5px;\n        border-radius: var(--curvature);\n      }"]);return Vt=function(){return e},e}function Ht(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Wt,Zt=function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s};const Xt=n(30),Kt=i(e=>t=>{t.setValue(Bt(Xt(e)))});let Jt=Wt=class extends Fe{constructor(){super(...arguments),this.anchorPosition={left:0,top:0},this.placeholder="",this.options=[],this.name="",this.value=""}static get styles(){return ue(Vt())}firstUpdated(e){this.textInputElement=this.shadowRoot.querySelector("rp-textinput"),this.anchorElement=this.shadowRoot.querySelector("#anchor"),this.completionsEndpoint&&ve(this.completionsEndpoint).then(e=>{this.schema=e.data}),this.functionsEndpoint&&ve(this.functionsEndpoint).then(e=>{this.functions=e.data}),this.fieldsEndpoint&&(async e=>{if(!e)return new Promise((e,t)=>e([]));let t=[],n=e;for(;n;){const e=await ye(n);t=t.concat(e.assets),n=e.next}return t})(this.fieldsEndpoint).then(e=>{this.keyedAssets={fields:e.map(e=>e.key)}}),this.hiddenElement=document.createElement("input"),this.hiddenElement.setAttribute("type","hidden"),this.hiddenElement.setAttribute("name",this.getAttribute("name")),this.hiddenElement.setAttribute("value",this.getAttribute("value")||""),this.appendChild(this.hiddenElement)}handleKeyUp(e){if(this.options.length>0){if("ArrowUp"===e.key||"ArrowDown"===e.key)return;if(e.ctrlKey&&("n"===e.key||"p"===e.key))return;if("Enter"===e.key||"Escape"===e.key||"Tab"===e.key||e.key.startsWith("Control"))return;this.executeQuery(e.currentTarget)}}handleClick(e){this.executeQuery(e.currentTarget)}executeQuery(e){if(this.inputElement=e.inputElement,this.currentFunction=null,this.schema){const n=e.inputElement.selectionStart,r=e.inputElement.value.substring(0,n),i=Wt.parser.findExpressions(r).find(e=>e.start<=n&&(e.end>n||e.end===n&&!e.closed));if(i){const n=i.text.indexOf("(")>-1;if(n){const e=Wt.parser.functionContext(i.text);if(e){const t=zt(this.functions,e);t.length>0&&(this.currentFunction=t[0])}}for(let r=i.text.length;r>=0;r--){const o=i.text[r];if("@"===o||"("===o||" "===o||","===o||")"===o||0===r){"("!==o&&" "!==o&&","!==o&&")"!==o&&"@"!==o||r++;var t=qt()(e.inputElement,i.start+r);return this.anchorPosition={left:t.left+7-this.inputElement.scrollLeft,top:t.top-this.inputElement.scrollTop},this.query=i.text.substr(r,i.text.length-r),void(this.options=[...Nt(this.schema,this.query,this.keyedAssets),...n?zt(this.functions,this.query):[]])}}}else this.options=[],this.query=""}}handleInput(e){const t=e.currentTarget;this.executeQuery(t),this.hiddenElement.setAttribute("value",t.inputElement.value)}handleOptionCanceled(e){this.options=[],this.query=""}handleOptionSelection(e){const t=e.detail.selected,n=e.detail.tabbed;let r="";if(r=t.signature?t.signature.substr(0,t.signature.indexOf("(")+1):t.name,this.inputElement){let e=this.inputElement.value;const t=this.inputElement.selectionStart-this.query.length,n=e.substr(0,t),i=e.substr(t+this.query.length),o=n.length+r.length;this.inputElement.value=n+r+i,this.inputElement.setSelectionRange(o,o);const s=qt()(this.inputElement,o);s.left>this.inputElement.width&&(this.inputElement.scrollLeft=s.left)}this.query="",this.options=[],n&&this.executeQuery(this.textInputElement)}renderCompletionOption(e,t){if(e.signature){const n=e.signature.indexOf("("),r=e.signature.substr(0,n),i=e.signature.substr(n);return L(Mt(),t?"font-weight: 400":"",r,t?L($t(),i,Kt(e.summary)):null)}return L(Ut(),t?"font-weight: 400":"",e.name,t?L(Ft(),e.summary):null)}render(){return L(It(),this.anchorPosition.top,this.anchorPosition.left,this.name,this.placeholder,this.handleKeyUp,this.handleClick,this.handleInput,this.value||"",this.textarea,this.handleOptionSelection,this.handleOptionCanceled,this.anchorElement,this.options,this.renderCompletionOption,this.options.length>0,this.currentFunction?L(Dt(),this.renderCompletionOption(this.currentFunction,!0)):null)}};Jt.parser=new class{constructor(e,t){this.expressionPrefix=e,this.allowedTopLevels=t}expressionContext(e){const t=this.findExpressions(e);if(0===t.length)return null;const n=t[t.length-1];return n.end<e.length||n.closed?null:n.text.substring(1)}autoCompleteContext(e){if(Rt(e))return null;const t=[];let n="",r=!1,i=!1,o="";for(let s=e.length-1;s>=0;s--){const a=e[s];if(" "===a&&(r=!0),","===a&&(r=!0,"("!==t[t.length-1]&&t.push("(")),")"!==a||i||(r=!0,t.push("("),t.push("(")),'"'===a&&(i=!i),r&&("("!==a||i||("("===t[t.length-1]&&t.pop(),0===t.length&&(r=!1))),"("===a&&""===n&&(o="#"),!(r||i||"("===a&&""===n)){if(!Tt(a)&&"."!==a)break;n=a+n}}return n.match(/[A-Za-z][\w]*(\.[\w]+)*/)?o+n:null}functionContext(e){let t=Rt(e)?Et:Ot,n="",r="("===e[-1]?0:1;for(let i=e.length-1;i>=0;i--){const o=e[i];if("@"===o)return"";if(t===Ot)0!==r||!Tt(o)&&"."!==o?'"'===o?t=Et:"("===o?r--:")"===o&&r++:(t=_t,n=o+n);else if(t===_t){if(!Tt(o)&&"."!==o)return n;n=o+n}else t===Et&&'"'===o&&(t=Ot)}return""}getContactFields(e){const t={},n=/((parent|child\.)*contact\.)*fields\.([a-z0-9_]+)/g,r=this.findExpressions(e);for(const e of r){let r;for(;r=n.exec(e.text);)t[r[3]]=!0}return Object.keys(t)}findExpressions(e){const t=[];let n=wt,r=null,i=0;for(let o=0;o<e.length;o++){const s=e[o],a=o<e.length-1?e[o+1]:0,l=o<e.length-2?e[o+2]:0;if(n===wt?s!==this.expressionPrefix||!Tt(a)&&"("!==a?s===this.expressionPrefix&&a===this.expressionPrefix&&(n=Ct):(n=kt,r={start:o,end:null,text:s,closed:!1}):n===kt?(Tt(s)?n=_t:"("===s&&(n=St,i+=1),r.text+=s):n===_t?r.text+=s:n===St?("("===s?i+=1:")"===s?i-=1:'"'===s&&(n=Et),r.text+=s,0===i&&(r.end=o+1)):n===Et?('"'===s&&(n=St),r.text+=s):n===Ct&&(n=wt),n===_t&&(!Tt(a)&&"."!==a||"."===a&&!Tt(l))&&(r.end=o+1),null!=r&&(null!=r.end||0===a)){const e=0===a;Pt(r.text,this.allowedTopLevels,e)&&(r.closed="("===r.text[1]&&0===i,r.end=o+1,t.push(r)),r=null,n=wt}}return t}}("@",["contact","fields","urns"]),Zt([se({type:Object})],Jt.prototype,"anchorPosition",void 0),Zt([se({attribute:!1})],Jt.prototype,"currentFunction",void 0),Zt([se({type:String})],Jt.prototype,"placeholder",void 0),Zt([se({attribute:!1})],Jt.prototype,"textInputElement",void 0),Zt([se({attribute:!1})],Jt.prototype,"anchorElement",void 0),Zt([se({type:Array})],Jt.prototype,"options",void 0),Zt([se({type:String})],Jt.prototype,"name",void 0),Zt([se({type:String})],Jt.prototype,"value",void 0),Zt([se({type:String})],Jt.prototype,"completionsEndpoint",void 0),Zt([se({type:String})],Jt.prototype,"functionsEndpoint",void 0),Zt([se({type:String})],Jt.prototype,"fieldsEndpoint",void 0),Zt([se({type:Boolean})],Jt.prototype,"textarea",void 0);Jt=Wt=Zt([re("rp-completion")],Jt)}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ycC1jb21wb25lbnRzL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9ycC1jb21wb25lbnRzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcnAtY29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vcnAtY29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9hdXRvc2l6ZS9kaXN0L2F1dG9zaXplLmpzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvdGV4dGFyZWEtY2FyZXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcnAtY29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly9ycC1jb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly9ycC1jb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvaXMtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vcnAtY29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vcnAtY29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vcnAtY29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vcnAtY29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vcnAtY29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idG9hLmpzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly9ycC1jb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9ycC1jb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly9ycC1jb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vcnAtY29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vcnAtY29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvbWFya2VkL2xpYi9tYXJrZWQuanMiLCJ3ZWJwYWNrOi8vcnAtY29tcG9uZW50cy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vcnAtY29tcG9uZW50cy8uLi9zcmMvbGliL2RpcmVjdGl2ZS50cyIsIndlYnBhY2s6Ly9ycC1jb21wb25lbnRzLy4uL3NyYy9saWIvZG9tLnRzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi4vc3JjL2xpYi9wYXJ0LnRzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi4vc3JjL2xpYi90ZW1wbGF0ZS50cyIsIndlYnBhY2s6Ly9ycC1jb21wb25lbnRzLy4uL3NyYy9saWIvdGVtcGxhdGUtaW5zdGFuY2UudHMiLCJ3ZWJwYWNrOi8vcnAtY29tcG9uZW50cy8uLi9zcmMvbGliL3RlbXBsYXRlLXJlc3VsdC50cyIsIndlYnBhY2s6Ly9ycC1jb21wb25lbnRzLy4uL3NyYy9saWIvcGFydHMudHMiLCJ3ZWJwYWNrOi8vcnAtY29tcG9uZW50cy8uLi9zcmMvbGliL2RlZmF1bHQtdGVtcGxhdGUtcHJvY2Vzc29yLnRzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi4vc3JjL2xpYi90ZW1wbGF0ZS1mYWN0b3J5LnRzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi4vc3JjL2xpYi9yZW5kZXIudHMiLCJ3ZWJwYWNrOi8vcnAtY29tcG9uZW50cy9zcmMvbGl0LWh0bWwudHMiLCJ3ZWJwYWNrOi8vcnAtY29tcG9uZW50cy8uLi9zcmMvbGliL21vZGlmeS10ZW1wbGF0ZS50cyIsIndlYnBhY2s6Ly9ycC1jb21wb25lbnRzLy4uL3NyYy9saWIvc2hhZHktcmVuZGVyLnRzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi4vc3JjL2xpYi91cGRhdGluZy1lbGVtZW50LnRzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi4vc3JjL2xpYi9kZWNvcmF0b3JzLnRzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi4vc3JjL2xpYi9jc3MtdGFnLnRzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvc3JjL2xpdC1lbGVtZW50LnRzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi9zcmMvdXRpbHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vcnAtY29tcG9uZW50cy8uL3NyYy9hbGlhc2VkaXRvci9BbGlhc0VkaXRvci50cyIsIndlYnBhY2s6Ly9ycC1jb21wb25lbnRzLy4vc3JjL2J1dHRvbi9CdXR0b24udHMiLCJ3ZWJwYWNrOi8vcnAtY29tcG9uZW50cy8uL3NyYy9pbnRlcmZhY2VzLnRzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi9zcmMvUmFwaWRFbGVtZW50LnRzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi9zcmMvZGlhbG9nL0RpYWxvZy50cyIsIndlYnBhY2s6Ly9ycC1jb21wb25lbnRzLy4vc3JjL3RleHRpbnB1dC9UZXh0SW5wdXQudHMiLCJ3ZWJwYWNrOi8vcnAtY29tcG9uZW50cy8uL3NyYy9sYWJlbC9MYWJlbC50cyIsIndlYnBhY2s6Ly9ycC1jb21wb25lbnRzLy4vc3JjL29wdGlvbnMvT3B0aW9ucy50cyIsIndlYnBhY2s6Ly9ycC1jb21wb25lbnRzLy4vc3JjL3NlbGVjdC9TZWxlY3QudHMiLCJ3ZWJwYWNrOi8vcnAtY29tcG9uZW50cy8uL3NyYy9jb21wbGV0aW9uL0V4Y2VsbGVudFBhcnNlci50cyIsIndlYnBhY2s6Ly9ycC1jb21wb25lbnRzLy4vc3JjL2NvbXBsZXRpb24vaGVscGVycy50cyIsIndlYnBhY2s6Ly9ycC1jb21wb25lbnRzLy4uL3NyYy9kaXJlY3RpdmVzL3Vuc2FmZS1odG1sLnRzIiwid2VicGFjazovL3JwLWNvbXBvbmVudHMvLi9zcmMvY29tcGxldGlvbi9Db21wbGV0aW9uLnRzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsIndpbmRvdyIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJyZXF1aXJlIiwiaXNCdWZmZXIiLCJ0b1N0cmluZyIsImlzQXJyYXkiLCJ2YWwiLCJpc09iamVjdCIsImlzRnVuY3Rpb24iLCJmb3JFYWNoIiwib2JqIiwiZm4iLCJsZW5ndGgiLCJpc0FycmF5QnVmZmVyIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJpc1VuZGVmaW5lZCIsImlzRGF0ZSIsImlzRmlsZSIsImlzQmxvYiIsImlzU3RyZWFtIiwicGlwZSIsImlzVVJMU2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0IiwiZG9jdW1lbnQiLCJtZXJnZSIsInJlc3VsdCIsImFzc2lnblZhbHVlIiwiYXJndW1lbnRzIiwiZXh0ZW5kIiwiYSIsImIiLCJ0aGlzQXJnIiwidHJpbSIsInN0ciIsInJlcGxhY2UiLCJwcm9jZXNzIiwidXRpbHMiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJDb250ZW50LVR5cGUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJoZWFkZXJzIiwiYWRhcHRlciIsImRlZmF1bHRzIiwiWE1MSHR0cFJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiZGF0YSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInBhcnNlIiwiZSIsInRpbWVvdXQiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwic3RhdHVzIiwiY29tbW9uIiwiQWNjZXB0IiwibWV0aG9kIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwidW5kZWZpbmVkIiwia2V5cyIsInZhbHVlcyIsIm1hcCIsIk1hcCIsImhhcyIsImluZGV4T2YiLCJzZXQiLCJwdXNoIiwiZGVsZXRlIiwiaW5kZXgiLCJzcGxpY2UiLCJjcmVhdGVFdmVudCIsIkV2ZW50IiwiYnViYmxlcyIsImV2dCIsImluaXRFdmVudCIsImFzc2lnbiIsInRhIiwibm9kZU5hbWUiLCJoZWlnaHRPZmZzZXQiLCJjbGllbnRXaWR0aCIsImNhY2hlZEhlaWdodCIsInBhZ2VSZXNpemUiLCJ1cGRhdGUiLCJkZXN0cm95Iiwic3R5bGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaGVpZ2h0IiwicmVzaXplIiwib3ZlcmZsb3dZIiwib3ZlcmZsb3dYIiwid29yZFdyYXAiLCJhZGRFdmVudExpc3RlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImJveFNpemluZyIsInBhcnNlRmxvYXQiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJpc05hTiIsImNoYW5nZU92ZXJmbG93Iiwid2lkdGgiLCJvZmZzZXRXaWR0aCIsInNjcm9sbEhlaWdodCIsIm92ZXJmbG93cyIsImVsIiwiYXJyIiwicGFyZW50Tm9kZSIsIkVsZW1lbnQiLCJzY3JvbGxUb3AiLCJub2RlIiwiZ2V0UGFyZW50T3ZlcmZsb3dzIiwiZG9jVG9wIiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGVIZWlnaHQiLCJNYXRoIiwicm91bmQiLCJjb21wdXRlZCIsImFjdHVhbEhlaWdodCIsIm9mZnNldEhlaWdodCIsImRpc3BhdGNoRXZlbnQiLCJlcnIiLCJtZXRob2RzIiwiYXV0b3NpemUiLCJvcHRpb25zIiwiQXJyYXkiLCJ4IiwiZGVmYXVsdCIsImFwcGx5IiwicHJvcGVydGllcyIsImlzQnJvd3NlciIsImlzRmlyZWZveCIsIm1veklubmVyU2NyZWVuWCIsImdldENhcmV0Q29vcmRpbmF0ZXMiLCJlbGVtZW50IiwicG9zaXRpb24iLCJFcnJvciIsImRlYnVnIiwicXVlcnlTZWxlY3RvciIsInJlbW92ZUNoaWxkIiwiZGl2IiwiY3JlYXRlRWxlbWVudCIsImlkIiwiYm9keSIsImFwcGVuZENoaWxkIiwiY3VycmVudFN0eWxlIiwiaXNJbnB1dCIsIndoaXRlU3BhY2UiLCJ2aXNpYmlsaXR5IiwicHJvcCIsImxpbmVIZWlnaHQiLCJwYXJzZUludCIsIm92ZXJmbG93IiwidGV4dENvbnRlbnQiLCJzdWJzdHJpbmciLCJzcGFuIiwiY29vcmRpbmF0ZXMiLCJ0b3AiLCJvZmZzZXRUb3AiLCJsZWZ0Iiwib2Zmc2V0TGVmdCIsImJhY2tncm91bmRDb2xvciIsImFyZ3MiLCJzZXR0bGUiLCJidWlsZFVSTCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwiYnRvYSIsImNvbmZpZyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3QiLCJsb2FkRXZlbnQiLCJ4RG9tYWluIiwiWERvbWFpblJlcXVlc3QiLCJ1cmwiLCJvbnByb2dyZXNzIiwib250aW1lb3V0IiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJBdXRob3JpemF0aW9uIiwib3BlbiIsInRvVXBwZXJDYXNlIiwicGFyYW1zIiwicGFyYW1zU2VyaWFsaXplciIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIm9uZXJyb3IiLCJjb29raWVzIiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwicmVhZCIsInRvTG93ZXJDYXNlIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWxUb2tlbiIsInByb21pc2UiLCJ0aGVuIiwiY2FuY2VsIiwiYWJvcnQiLCJzZW5kIiwiZW5oYW5jZUVycm9yIiwibWVzc2FnZSIsImNvZGUiLCJlcnJvciIsIl9fQ0FOQ0VMX18iLCJDYW5jZWwiLCJ0aGlzIiwiQXhpb3MiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJjb250ZXh0IiwiaW5zdGFuY2UiLCJheGlvcyIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsImFsbCIsInByb21pc2VzIiwic3ByZWFkIiwiY29uc3RydWN0b3IiLCJyZWFkRmxvYXRMRSIsInNsaWNlIiwiaXNTbG93QnVmZmVyIiwiX2lzQnVmZmVyIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiaW50ZXJjZXB0b3JzIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsInVuc2hpZnQiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInNoaWZ0IiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImNvbmNhdCIsImRyYWluUXVldWUiLCJsZW4iLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwiYXJyYXkiLCJub29wIiwibmV4dFRpY2siLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJub3JtYWxpemVkTmFtZSIsImVuY29kZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZWRQYXJhbXMiLCJwYXJ0cyIsInYiLCJ0b0lTT1N0cmluZyIsImpvaW4iLCJpZ25vcmVEdXBsaWNhdGVPZiIsInBhcnNlZCIsInNwbGl0IiwibGluZSIsInN1YnN0ciIsIm9yaWdpblVSTCIsIm1zaWUiLCJ0ZXN0IiwidXNlckFnZW50IiwidXJsUGFyc2luZ05vZGUiLCJyZXNvbHZlVVJMIiwiaHJlZiIsInNldEF0dHJpYnV0ZSIsInByb3RvY29sIiwiaG9zdCIsInNlYXJjaCIsImhhc2giLCJob3N0bmFtZSIsInBvcnQiLCJwYXRobmFtZSIsImNoYXJBdCIsImxvY2F0aW9uIiwicmVxdWVzdFVSTCIsImNoYXJzIiwiRSIsImlucHV0IiwiYmxvY2siLCJjaGFyQ29kZSIsIlN0cmluZyIsIm91dHB1dCIsImlkeCIsImNoYXJDb2RlQXQiLCJ3cml0ZSIsImV4cGlyZXMiLCJwYXRoIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwiRGF0ZSIsInRvR01UU3RyaW5nIiwibWF0Y2giLCJSZWdFeHAiLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJub3ciLCJoYW5kbGVycyIsInVzZSIsImVqZWN0IiwiaCIsInRyYW5zZm9ybURhdGEiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsImJhc2VVUkwiLCJyZWFzb24iLCJmbnMiLCJyZWxhdGl2ZVVSTCIsImV4ZWN1dG9yIiwiVHlwZUVycm9yIiwicmVzb2x2ZVByb21pc2UiLCJ0b2tlbiIsInNvdXJjZSIsImNhbGxiYWNrIiwiZ2xvYmFsIiwibmV3bGluZSIsImZlbmNlcyIsImhyIiwiaGVhZGluZyIsImJsb2NrcXVvdGUiLCJsaXN0IiwiaHRtbCIsImRlZiIsIm5wdGFibGUiLCJ0YWJsZSIsImxoZWFkaW5nIiwiX3BhcmFncmFwaCIsInRleHQiLCJMZXhlciIsInRva2VucyIsImxpbmtzIiwibWFya2VkIiwicnVsZXMiLCJub3JtYWwiLCJwZWRhbnRpYyIsImdmbSIsIl9sYWJlbCIsIl90aXRsZSIsImVkaXQiLCJnZXRSZWdleCIsImJ1bGxldCIsIml0ZW0iLCJfdGFnIiwiX2NvbW1lbnQiLCJwYXJhZ3JhcGgiLCJsZXgiLCJzcmMiLCJuZXh0IiwibG9vc2UiLCJjYXAiLCJidWxsIiwibGlzdFN0YXJ0IiwibGlzdEl0ZW1zIiwic3BhY2UiLCJ0YWciLCJpc29yZGVyZWQiLCJpc3Rhc2siLCJpc2NoZWNrZWQiLCJleGVjIiwidHlwZSIsImxhc3RUb2tlbiIsInRyaW1SaWdodCIsImNvZGVCbG9ja1N0eWxlIiwicnRyaW0iLCJsYW5nIiwiZGVwdGgiLCJoZWFkZXIiLCJzcGxpdENlbGxzIiwiYWxpZ24iLCJjZWxscyIsIm9yZGVyZWQiLCJzdGFydCIsInNtYXJ0TGlzdHMiLCJ0YXNrIiwiY2hlY2tlZCIsInNhbml0aXplIiwicHJlIiwic2FuaXRpemVyIiwiZXNjYXBlIiwiaW5saW5lIiwiYXV0b2xpbmsiLCJsaW5rIiwicmVmbGluayIsIm5vbGluayIsInN0cm9uZyIsImVtIiwiYnIiLCJkZWwiLCJJbmxpbmVMZXhlciIsInJlbmRlcmVyIiwiUmVuZGVyZXIiLCJicmVha3MiLCJUZXh0UmVuZGVyZXIiLCJQYXJzZXIiLCJzbHVnZ2VyIiwiU2x1Z2dlciIsInNlZW4iLCJlc2NhcGVUZXN0IiwiZXNjYXBlUmVwbGFjZSIsImNoIiwicmVwbGFjZW1lbnRzIiwiZXNjYXBlVGVzdE5vRW5jb2RlIiwiZXNjYXBlUmVwbGFjZU5vRW5jb2RlIiwidW5lc2NhcGUiLCJfIiwiZnJvbUNoYXJDb2RlIiwicmVnZXgiLCJvcHQiLCJjbGVhblVybCIsImJhc2UiLCJwcm90Iiwib3JpZ2luSW5kZXBlbmRlbnRVcmwiLCJiYXNlVXJscyIsInJlc29sdmVVcmwiLCJlbmNvZGVVUkkiLCJfcHVuY3R1YXRpb24iLCJfZXNjYXBlcyIsIl9zY2hlbWUiLCJfZW1haWwiLCJfYXR0cmlidXRlIiwiX2hyZWYiLCJfZXh0ZW5kZWRfZW1haWwiLCJfYmFja3BlZGFsIiwicHJldkNhcFplcm8iLCJvdXQiLCJpbkxpbmsiLCJpblJhd0Jsb2NrIiwibGFzdFBhcmVuSW5kZXgiLCJmaW5kQ2xvc2luZ0JyYWNrZXQiLCJsaW5rTGVuIiwib3V0cHV0TGluayIsImVzY2FwZXMiLCJjb2Rlc3BhbiIsIm1hbmdsZSIsInNtYXJ0eXBhbnRzIiwiaW1hZ2UiLCJyYW5kb20iLCJpbmZvc3RyaW5nIiwiZXNjYXBlZCIsImhpZ2hsaWdodCIsImxhbmdQcmVmaXgiLCJxdW90ZSIsImxldmVsIiwicmF3IiwiaGVhZGVySWRzIiwiaGVhZGVyUHJlZml4Iiwic2x1ZyIsInhodG1sIiwibGlzdGl0ZW0iLCJjaGVja2JveCIsInRhYmxlcm93IiwiY29udGVudCIsInRhYmxlY2VsbCIsImZsYWdzIiwiYmFzZVVybCIsImlubGluZVRleHQiLCJyZXZlcnNlIiwidG9rIiwicG9wIiwicGVlayIsInBhcnNlVGV4dCIsInJvdyIsImNlbGwiLCJqIiwiZXJyTXNnIiwic2lsZW50IiwiY29uc29sZSIsImxvZyIsIm9yaWdpbmFsU2x1ZyIsIiYiLCI8IiwiPiIsIlwiIiwiJyIsInRhcmdldCIsInRhYmxlUm93IiwiY291bnQiLCJvZmZzZXQiLCJjdXJyIiwiaW52ZXJ0Iiwic3VmZkxlbiIsImN1cnJDaGFyIiwiY2hlY2tTYW5pdGl6ZURlcHJlY2F0aW9uIiwid2FybiIsInBlbmRpbmciLCJkb25lIiwic2V0T3B0aW9ucyIsImdldERlZmF1bHRzIiwicGFyc2VyIiwibGV4ZXIiLCJpbmxpbmVMZXhlciIsImciLCJGdW5jdGlvbiIsImRpcmVjdGl2ZXMiLCJXZWFrTWFwIiwiZGlyZWN0aXZlX2RpcmVjdGl2ZSIsImYiLCJpc0RpcmVjdGl2ZSIsImlzQ0VQb2x5ZmlsbCIsImN1c3RvbUVsZW1lbnRzIiwicG9seWZpbGxXcmFwRmx1c2hDYWxsYmFjayIsInJlbW92ZU5vZGVzIiwiY29udGFpbmVyIiwiZW5kIiwibmV4dFNpYmxpbmciLCJub0NoYW5nZSIsIm5vdGhpbmciLCJub2RlTWFya2VyIiwibWFya2VyUmVnZXgiLCJib3VuZEF0dHJpYnV0ZVN1ZmZpeCIsIlRlbXBsYXRlIiwiW29iamVjdCBPYmplY3RdIiwibm9kZXNUb1JlbW92ZSIsInN0YWNrIiwid2Fsa2VyIiwiY3JlYXRlVHJlZVdhbGtlciIsImxhc3RQYXJ0SW5kZXgiLCJwYXJ0SW5kZXgiLCJzdHJpbmdzIiwibmV4dE5vZGUiLCJub2RlVHlwZSIsImhhc0F0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwiZW5kc1dpdGgiLCJzdHJpbmdGb3JQYXJ0IiwibGFzdEF0dHJpYnV0ZU5hbWVSZWdleCIsImF0dHJpYnV0ZUxvb2t1cE5hbWUiLCJhdHRyaWJ1dGVWYWx1ZSIsImdldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsInN0YXRpY3MiLCJ0YWdOYW1lIiwiY3VycmVudE5vZGUiLCJwYXJlbnQiLCJsYXN0SW5kZXgiLCJpbnNlcnQiLCJjcmVhdGVNYXJrZXIiLCJjcmVhdGVUZXh0Tm9kZSIsImluc2VydEJlZm9yZSIsInByZXZpb3VzU2libGluZyIsInN1ZmZpeCIsImlzVGVtcGxhdGVQYXJ0QWN0aXZlIiwicGFydCIsImNyZWF0ZUNvbW1lbnQiLCJ0ZW1wbGF0ZV9pbnN0YW5jZV9UZW1wbGF0ZUluc3RhbmNlIiwidGVtcGxhdGUiLCJwcm9jZXNzb3IiLCJfX3BhcnRzIiwic2V0VmFsdWUiLCJjb21taXQiLCJmcmFnbWVudCIsImNsb25lTm9kZSIsImltcG9ydE5vZGUiLCJub2RlSW5kZXgiLCJoYW5kbGVUZXh0RXhwcmVzc2lvbiIsImluc2VydEFmdGVyTm9kZSIsImhhbmRsZUF0dHJpYnV0ZUV4cHJlc3Npb25zIiwiYWRvcHROb2RlIiwidXBncmFkZSIsInRlbXBsYXRlX3Jlc3VsdF9UZW1wbGF0ZVJlc3VsdCIsImlzQ29tbWVudEJpbmRpbmciLCJjb21tZW50T3BlbiIsImxhc3RJbmRleE9mIiwiYXR0cmlidXRlTWF0Y2giLCJpbm5lckhUTUwiLCJnZXRIVE1MIiwiaXNQcmltaXRpdmUiLCJpc0l0ZXJhYmxlIiwiaXRlcmF0b3IiLCJBdHRyaWJ1dGVDb21taXR0ZXIiLCJkaXJ0eSIsIl9jcmVhdGVQYXJ0IiwicGFydHNfQXR0cmlidXRlUGFydCIsIl9nZXRWYWx1ZSIsImNvbW1pdHRlciIsImRpcmVjdGl2ZSIsInBhcnRzX05vZGVQYXJ0IiwiX19wZW5kaW5nVmFsdWUiLCJzdGFydE5vZGUiLCJlbmROb2RlIiwicmVmIiwiX19pbnNlcnQiLCJfX2NvbW1pdFRleHQiLCJfX2NvbW1pdFRlbXBsYXRlUmVzdWx0IiwiTm9kZSIsIl9fY29tbWl0Tm9kZSIsIl9fY29tbWl0SXRlcmFibGUiLCJjbGVhciIsInRlbXBsYXRlRmFjdG9yeSIsIl9jbG9uZSIsIml0ZW1QYXJ0cyIsIml0ZW1QYXJ0IiwiYXBwZW5kSW50b1BhcnQiLCJpbnNlcnRBZnRlclBhcnQiLCJwYXJ0c19Cb29sZWFuQXR0cmlidXRlUGFydCIsIlByb3BlcnR5Q29tbWl0dGVyIiwic3VwZXIiLCJzaW5nbGUiLCJQcm9wZXJ0eVBhcnQiLCJldmVudE9wdGlvbnNTdXBwb3J0ZWQiLCJjYXB0dXJlIiwiX2UiLCJwYXJ0c19FdmVudFBhcnQiLCJldmVudE5hbWUiLCJldmVudENvbnRleHQiLCJfX2JvdW5kSGFuZGxlRXZlbnQiLCJoYW5kbGVFdmVudCIsIm5ld0xpc3RlbmVyIiwib2xkTGlzdGVuZXIiLCJzaG91bGRSZW1vdmVMaXN0ZW5lciIsInBhc3NpdmUiLCJzaG91bGRBZGRMaXN0ZW5lciIsIl9fb3B0aW9ucyIsImdldE9wdGlvbnMiLCJldmVudCIsImRlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvciIsInByZWZpeCIsInRlbXBsYXRlQ2FjaGUiLCJ0ZW1wbGF0ZUNhY2hlcyIsInN0cmluZ3NBcnJheSIsImtleVN0cmluZyIsImdldFRlbXBsYXRlRWxlbWVudCIsInJlbmRlcl9wYXJ0cyIsImxpdF9odG1sX2h0bWwiLCJfbGVuIiwiX2tleSIsIndhbGtlck5vZGVGaWx0ZXIiLCJyZW1vdmVOb2Rlc0Zyb21UZW1wbGF0ZSIsIm1vZGlmeV90ZW1wbGF0ZV9uZXh0QWN0aXZlSW5kZXhJblRlbXBsYXRlUGFydHMiLCJyZW1vdmVDb3VudCIsIm5vZGVzVG9SZW1vdmVJblRlbXBsYXRlIiwiY3VycmVudFJlbW92aW5nTm9kZSIsImNvdW50Tm9kZXMiLCJnZXRUZW1wbGF0ZUNhY2hlS2V5Iiwic2NvcGVOYW1lIiwiY29tcGF0aWJsZVNoYWR5Q1NTVmVyc2lvbiIsIlNoYWR5Q1NTIiwicHJlcGFyZVRlbXBsYXRlRG9tIiwic2hhZHlUZW1wbGF0ZUZhY3RvcnkiLCJjYWNoZUtleSIsIlRFTVBMQVRFX1RZUEVTIiwic2hhZHlSZW5kZXJTZXQiLCJTZXQiLCJwcmVwYXJlVGVtcGxhdGVTdHlsZXMiLCJyZW5kZXJlZERPTSIsImFkZCIsInN0eWxlcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjb25kZW5zZWRTdHlsZSIsInRlbXBsYXRlcyIsImZyb20iLCJyZW1vdmVTdHlsZXNGcm9tTGl0VGVtcGxhdGVzIiwicmVmTm9kZSIsImluc2VydENvdW50Iiwid2Fsa2VySW5kZXgiLCJpbnNlcnROb2RlSW50b1RlbXBsYXRlIiwiZmlyc3RDaGlsZCIsIm5hdGl2ZVNoYWRvdyIsInJlbW92ZXMiLCJKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5IiwiX29iaiIsImRlZmF1bHRDb252ZXJ0ZXIiLCJCb29sZWFuIiwiTnVtYmVyIiwibm90RXF1YWwiLCJvbGQiLCJkZWZhdWx0UHJvcGVydHlEZWNsYXJhdGlvbiIsImF0dHJpYnV0ZSIsImNvbnZlcnRlciIsInJlZmxlY3QiLCJoYXNDaGFuZ2VkIiwibWljcm90YXNrUHJvbWlzZSIsIlNUQVRFX0hBU19VUERBVEVEIiwiU1RBVEVfVVBEQVRFX1JFUVVFU1RFRCIsIlNUQVRFX0lTX1JFRkxFQ1RJTkdfVE9fQVRUUklCVVRFIiwiU1RBVEVfSVNfUkVGTEVDVElOR19UT19QUk9QRVJUWSIsIlNUQVRFX0hBU19DT05ORUNURUQiLCJVcGRhdGluZ0VsZW1lbnQiLCJIVE1MRWxlbWVudCIsIl91cGRhdGVTdGF0ZSIsIl9pbnN0YW5jZVByb3BlcnRpZXMiLCJfdXBkYXRlUHJvbWlzZSIsIl9oYXNDb25uZWN0ZWRSZXNvbHZlciIsIl9jaGFuZ2VkUHJvcGVydGllcyIsIl9yZWZsZWN0aW5nUHJvcGVydGllcyIsImluaXRpYWxpemUiLCJvYnNlcnZlZEF0dHJpYnV0ZXMiLCJmaW5hbGl6ZSIsIl9jbGFzc1Byb3BlcnRpZXMiLCJhdHRyIiwiX2F0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eSIsIl9hdHRyaWJ1dGVUb1Byb3BlcnR5TWFwIiwic3VwZXJQcm9wZXJ0aWVzIiwiZ2V0UHJvdG90eXBlT2YiLCJrIiwiX2Vuc3VyZUNsYXNzUHJvcGVydGllcyIsIm5vQWNjZXNzb3IiLCJvbGRWYWx1ZSIsIl9yZXF1ZXN0VXBkYXRlIiwiY29uZmlndXJhYmxlIiwiZmluYWxpemVkIiwic3VwZXJDdG9yIiwicHJvcHMiLCJwcm9wS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJjcmVhdGVQcm9wZXJ0eSIsImZyb21BdHRyaWJ1dGUiLCJ0b0F0dHJpYnV0ZSIsIl9zYXZlSW5zdGFuY2VQcm9wZXJ0aWVzIiwiX3YiLCJfYXR0cmlidXRlVG9Qcm9wZXJ0eSIsImN0b3IiLCJhdHRyVmFsdWUiLCJfcHJvcGVydHlWYWx1ZVRvQXR0cmlidXRlIiwicHJvcE5hbWUiLCJfcHJvcGVydHlWYWx1ZUZyb21BdHRyaWJ1dGUiLCJzaG91bGRSZXF1ZXN0VXBkYXRlIiwiX3ZhbHVlSGFzQ2hhbmdlZCIsIl9oYXNSZXF1ZXN0ZWRVcGRhdGUiLCJfZW5xdWV1ZVVwZGF0ZSIsInVwZGF0ZUNvbXBsZXRlIiwicHJldmlvdXNVcGRhdGVQcm9taXNlIiwicmVzIiwicmVqIiwiX2hhc0Nvbm5lY3RlZCIsInBlcmZvcm1VcGRhdGUiLCJoYXNVcGRhdGVkIiwiX2FwcGx5SW5zdGFuY2VQcm9wZXJ0aWVzIiwic2hvdWxkVXBkYXRlIiwiY2hhbmdlZFByb3BlcnRpZXMiLCJfbWFya1VwZGF0ZWQiLCJmaXJzdFVwZGF0ZWQiLCJ1cGRhdGVkIiwic2l6ZSIsIl9wcm9wZXJ0eVRvQXR0cmlidXRlIiwiY3VzdG9tRWxlbWVudCIsImNsYXNzT3JEZXNjcmlwdG9yIiwiY2xhenoiLCJsZWdhY3lDdXN0b21FbGVtZW50IiwiZGVzY3JpcHRvciIsImtpbmQiLCJlbGVtZW50cyIsInN0YW5kYXJkQ3VzdG9tRWxlbWVudCIsInN0YW5kYXJkUHJvcGVydHkiLCJwbGFjZW1lbnQiLCJpbml0aWFsaXplciIsImxlZ2FjeVByb3BlcnR5IiwicHJvdG8iLCJwcm90b09yRGVzY3JpcHRvciIsInN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyIsIkRvY3VtZW50IiwiQ1NTU3R5bGVTaGVldCIsImNvbnN0cnVjdGlvblRva2VuIiwiQ1NTUmVzdWx0IiwiY3NzVGV4dCIsInNhZmVUb2tlbiIsInN0eWxlU2hlZXQiLCJfc3R5bGVTaGVldCIsInJlcGxhY2VTeW5jIiwiY3NzIiwicmVkdWNlIiwiYWNjIiwidGV4dEZyb21DU1NSZXN1bHQiLCJmbGF0dGVuU3R5bGVzIiwiZmxhdCIsIkluZmluaXR5IiwiYXJyYXlGbGF0IiwibGl0X2VsZW1lbnRfTGl0RWxlbWVudCIsIl9zdHlsZXMiLCJfZ2V0VW5pcXVlU3R5bGVzIiwidXNlclN0eWxlcyIsInJlZHVjZVJpZ2h0IiwicmVuZGVyUm9vdCIsImNyZWF0ZVJlbmRlclJvb3QiLCJTaGFkb3dSb290IiwiYWRvcHRTdHlsZXMiLCJhdHRhY2hTaGFkb3ciLCJhZG9wdGVkU3R5bGVTaGVldHMiLCJfbmVlZHNTaGltQWRvcHRlZFN0eWxlU2hlZXRzIiwiU2NvcGluZ1NoaW0iLCJwcmVwYXJlQWRvcHRlZENzc1RleHQiLCJsb2NhbE5hbWUiLCJjb25uZWN0ZWRDYWxsYmFjayIsInN0eWxlRWxlbWVudCIsInRlbXBsYXRlUmVzdWx0IiwicmVuZGVyIiwiaGFzUmVuZGVyZWQiLCJuZWVkc1Njb3BpbmciLCJmaXJzdFNjb3BlUmVuZGVyIiwicmVuZGVyQ29udGFpbmVyIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImFwcGVuZEludG8iLCJnZXRDb29raWUiLCJnZXRDbGFzc2VzIiwiY2xhc3NOYW1lcyIsImNsYXNzTmFtZSIsImdldEFzc2V0UGFnZSIsInV0aWxzX2dldFVybCIsImFzc2V0cyIsInJlc3VsdHMiLCJjYXRjaCIsImNzcmYiLCJYLUNTUkZUb2tlbiIsImF4aW9zX2RlZmF1bHQiLCJBbGlhc0VkaXRvcl9BbGlhc0VkaXRvciIsIkFsaWFzRWRpdG9yX3RlbXBsYXRlT2JqZWN0IiwibmV3UGF0aCIsImZlYXR1cmUiLCJvc21faWQiLCJvc21JZCIsImhpZGVBbGlhc0RpYWxvZyIsImZldGNoRmVhdHVyZSIsImdldEVuZHBvaW50IiwiYXV0b3NpemVfZGVmYXVsdCIsInNoYWRvd1Jvb3QiLCJob3ZlcmVkIiwic2VsZWN0aW9uIiwiZGV0YWlsIiwic2VsZWN0ZWQiLCJzaG93QWxpYXNEaWFsb2ciLCJyZW1haW5pbmdQYXRoIiwic2VsZWN0ZWRGZWF0dXJlIiwiY2xpY2thYmxlIiwiaGFzX2NoaWxkcmVuIiwicmVuZGVyZWRGZWF0dXJlIiwiX3RlbXBsYXRlT2JqZWN0MiIsImhhbmRsZVBsYWNlQ2xpY2tlZCIsImFsaWFzZXMiLCJhbGlhcyIsIl90ZW1wbGF0ZU9iamVjdDMiLCJfdGVtcGxhdGVPYmplY3Q0IiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJyZW5kZXJlZENoaWxkcmVuIiwiY2hpbGRyZW4iLCJjaGlsZCIsInJlbmRlckZlYXR1cmUiLCJfdGVtcGxhdGVPYmplY3Q1IiwiZWRpdEZlYXR1cmUiLCJhbGlhc0RpYWxvZyIsImdldEVsZW1lbnRCeUlkIiwiZmlyZVRleHRhcmVhQXV0b3NpemUiLCJyZXF1ZXN0VXBkYXRlIiwiZW5kcG9pbnQiLCJidXR0b24iLCJzZXRQcm9ncmVzcyIsInBheWxvYWQiLCJwb3N0IiwicG9zdFVybCIsIm9wdGlvbiIsIl90ZW1wbGF0ZU9iamVjdDYiLCJfdGVtcGxhdGVPYmplY3Q3IiwiX3RlbXBsYXRlT2JqZWN0OCIsIl90ZW1wbGF0ZU9iamVjdDkiLCJtYXBGZWF0dXJlIiwiZWRpdEZlYXR1cmVJZCIsImVkaXRGZWF0dXJlTmFtZSIsImVkaXRGZWF0dXJlQWxpYXNlcyIsIl90ZW1wbGF0ZU9iamVjdDEwIiwicmVuZGVyT3B0aW9uRGV0YWlsIiwiaGFuZGxlU2VhcmNoU2VsZWN0aW9uIiwiaGFuZGxlTWFwQ2xpY2tlZCIsImhhbmRsZURpYWxvZ0NsaWNrIiwiX19kZWNvcmF0ZSIsIkJ1dHRvbl9CdXR0b24iLCJCdXR0b25fdGVtcGxhdGVPYmplY3QiLCJwcm9ncmVzcyIsImlzUHJvZ3Jlc3MiLCJjbGljayIsIkJ1dHRvbl90ZW1wbGF0ZU9iamVjdDIiLCJwcmltYXJ5Iiwic2Vjb25kYXJ5IiwiaGFuZGxlS2V5VXAiLCJpblByb2dlc3NOYW1lIiwiQnV0dG9uX2RlY29yYXRlIiwiQ3VzdG9tRXZlbnRUeXBlIiwiUmFwaWRFbGVtZW50X1JhcGlkRWxlbWVudCIsImhhbmRsZXIiLCJnZXRFdmVudEhhbmRsZXJzIiwiZGlzY29ubmVjdGVkQ2FsbGJhY2siLCJjb21wb3NlZCIsIkN1c3RvbUV2ZW50IiwiRGlhbG9nX0RpYWxvZyIsInByaW1hcnlCdXR0b25OYW1lIiwiY2FuY2VsQnV0dG9uTmFtZSIsImluUHJvZ3Jlc3NOYW1lIiwiRGlhbG9nX3RlbXBsYXRlT2JqZWN0IiwiaW5wdXRzIiwiZm9jdXMiLCJjdXJyZW50VGFyZ2V0IiwiZmlyZUN1c3RvbUV2ZW50IiwiQnV0dG9uQ2xpY2tlZCIsIm1heCIsImNsaWVudEhlaWdodCIsImdldERvY3VtZW50SGVpZ2h0IiwiRGlhbG9nX3RlbXBsYXRlT2JqZWN0MiIsIkRpYWxvZ190ZW1wbGF0ZU9iamVjdDMiLCJoYW5kbGVDbGljayIsIkRpYWxvZ19kZWNvcmF0ZSIsIlRleHRJbnB1dF9UZXh0SW5wdXQiLCJwbGFjZWhvbGRlciIsIlRleHRJbnB1dF90ZW1wbGF0ZU9iamVjdCIsImNoYW5nZXMiLCJpbnB1dEVsZW1lbnQiLCJUZXh0SW5wdXRfdGVtcGxhdGVPYmplY3QyIiwidGV4dGFyZWEiLCJUZXh0SW5wdXRfdGVtcGxhdGVPYmplY3QzIiwiVGV4dElucHV0X3RlbXBsYXRlT2JqZWN0NCIsIlRleHRJbnB1dF9kZWNvcmF0ZSIsIkxhYmVsX0xhYmVsIiwiTGFiZWxfdGVtcGxhdGVPYmplY3QiLCJMYWJlbF90ZW1wbGF0ZU9iamVjdDIiLCJ0ZXh0Q29sb3IiLCJMYWJlbF90ZW1wbGF0ZU9iamVjdDMiLCJsaWdodCIsImRhcmsiLCJMYWJlbF9kZWNvcmF0ZSIsIk9wdGlvbnNfT3B0aW9ucyIsImN1cnNvckluZGV4IiwiT3B0aW9uc190ZW1wbGF0ZU9iamVjdCIsImZvY3VzZWRFbGUiLCJzY3JvbGxCb3giLCJzY3JvbGxCb3hIZWlnaHQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJmb2N1c2VkRWxlSGVpZ2h0Iiwic2Nyb2xsVG8iLCJjYWxjdWxhdGVQb3NpdGlvbiIsInJlbmRlck9wdGlvbk5hbWUiLCJyZW5kZXJPcHRpb25OYW1lRGVmYXVsdCIsInJlbmRlck9wdGlvbkRldGFpbERlZmF1bHQiLCJPcHRpb25zX3RlbXBsYXRlT2JqZWN0MiIsIk9wdGlvbnNfdGVtcGxhdGVPYmplY3QzIiwiT3B0aW9uc190ZW1wbGF0ZU9iamVjdDQiLCJPcHRpb25zX3RlbXBsYXRlT2JqZWN0NSIsInRhYmJlZCIsIlNlbGVjdGlvbiIsImRpcmVjdGlvbiIsIm5ld0luZGV4IiwibWluIiwic2V0Q3Vyc29yIiwiQ3Vyc29yQ2hhbmdlZCIsInZpc2libGUiLCJjdHJsS2V5IiwibW92ZUN1cnNvciIsImhhbmRsZVNlbGVjdGlvbiIsIkNhbmNlbGVkIiwib3B0aW9uc0JvdW5kcyIsImFuY2hvclRvIiwiYW5jaG9yQm91bmRzIiwidG9wVG9wIiwiYm90dG9tIiwiaW5uZXJIZWlnaHQiLCJoYW5kbGVLZXlEb3duIiwicmVuZGVyT3B0aW9uIiwicmVuZGVyT3B0aW9uRGVmYXVsdCIsIk9wdGlvbnNfdGVtcGxhdGVPYmplY3Q2IiwiT3B0aW9uc190ZW1wbGF0ZU9iamVjdDciLCJhYnMiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJPcHRpb25zX2RlY29yYXRlIiwiU2VsZWN0X1NlbGVjdCIsInF1aWV0TWlsbGlzIiwiU2VsZWN0X3RlbXBsYXRlT2JqZWN0IiwiYmx1ciIsImxhc3RRdWVyeSIsImZldGNoT3B0aW9ucyIsInF1ZXJ5IiwiY29tcGxldGUiLCJwYWdlIiwiZmV0Y2hpbmciLCJmaWx0ZXIiLCJuZXdSZXN1bHRzIiwiZWxlIiwiaGFuZGxlQ2FuY2VsIiwiaGFuZGxlQ3Vyc29yQ2hhbmdlZCIsImFuY2hvckVsZW1lbnQiLCJTZWxlY3RfdGVtcGxhdGVPYmplY3QyIiwiaGFuZGxlQmx1ciIsImhhbmRsZUZvY3VzIiwiaGFuZGxlT3B0aW9uU2VsZWN0aW9uIiwiU2VsZWN0X2RlY29yYXRlIiwiU1RBVEVfQk9EWSIsIlNUQVRFX1BSRUZJWCIsIlNUQVRFX0lERU5USUZJRVIiLCJTVEFURV9CQUxBTkNFRCIsIlNUQVRFX1NUUklOR19MSVRFUkFMIiwiU1RBVEVfRVNDQVBFRF9QUkVGSVgiLCJTVEFURV9JR05PUkUiLCJzdGFydHNXaXRoIiwiaXNWYWxpZFN0YXJ0IiwicGFydGlhbEV4cHJlc3Npb24iLCJhbGxvd2VkVG9wTGV2ZWxzIiwiYWxsb3dJbmNvbXBsZXRlIiwidG9wTGV2ZWwiLCJhbGxvd2VkIiwiaXNXb3JkQ2hhciIsImlzSW5TdHJpbmdMaXRlcmFsIiwibnVtUXVvdGVzIiwicG9zIiwiZ2V0RnVuY3Rpb25zIiwiZnVuY3Rpb25zIiwic2lnbmF0dXJlIiwiZ2V0Q29tcGxldGlvbnMiLCJzY2hlbWEiLCJkb3RRdWVyeSIsImtleWVkQXNzZXRzIiwiY3VycmVudFByb3BzIiwicm9vdF9ub19zZXNzaW9uIiwibmV4dFByb3AiLCJmaW5kIiwibmV4dFR5cGUiLCJ0eXBlcyIsInByb3BlcnR5X3RlbXBsYXRlIiwiaGVscCIsInN1bW1hcnkiLCJwcmV2aW91c1ZhbHVlcyIsInVuc2FmZUhUTUwiLCJwcmV2aW91c1ZhbHVlIiwibWFya2VkUmVuZGVyIiwiY29udGVudHMiLCJDb21wbGV0aW9uX0NvbXBsZXRpb24iLCJDb21wbGV0aW9uXzEiLCJhbmNob3JQb3NpdGlvbiIsIkNvbXBsZXRpb25fdGVtcGxhdGVPYmplY3QiLCJ0ZXh0SW5wdXRFbGVtZW50IiwiY29tcGxldGlvbnNFbmRwb2ludCIsImZ1bmN0aW9uc0VuZHBvaW50IiwiZmllbGRzRW5kcG9pbnQiLCJhc3luYyIsInBhZ2VVcmwiLCJhc3NldFBhZ2UiLCJnZXRBc3NldHMiLCJmaWVsZHMiLCJhc3NldCIsImhpZGRlbkVsZW1lbnQiLCJleGVjdXRlUXVlcnkiLCJjdXJyZW50RnVuY3Rpb24iLCJjdXJzb3IiLCJzZWxlY3Rpb25TdGFydCIsImN1cnJlbnRFeHByZXNzaW9uIiwiZmluZEV4cHJlc3Npb25zIiwiZXhwciIsImNsb3NlZCIsImluY2x1ZGVGdW5jdGlvbnMiLCJmdW5jdGlvblF1ZXJ5IiwiZnVuY3Rpb25Db250ZXh0IiwiY2FyZXQiLCJ0ZXh0YXJlYV9jYXJldF9kZWZhdWx0Iiwic2Nyb2xsTGVmdCIsImluc2VydFRleHQiLCJpbnNlcnRpb25Qb2ludCIsImxlZnRTaWRlIiwicmVtYWluaW5nIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJhcmdTdGFydCIsIkNvbXBsZXRpb25fdGVtcGxhdGVPYmplY3QyIiwiQ29tcGxldGlvbl90ZW1wbGF0ZU9iamVjdDMiLCJDb21wbGV0aW9uX3RlbXBsYXRlT2JqZWN0NCIsIkNvbXBsZXRpb25fdGVtcGxhdGVPYmplY3Q1IiwiQ29tcGxldGlvbl90ZW1wbGF0ZU9iamVjdDYiLCJoYW5kbGVJbnB1dCIsImhhbmRsZU9wdGlvbkNhbmNlbGVkIiwicmVuZGVyQ29tcGxldGlvbk9wdGlvbiIsIkNvbXBsZXRpb25fdGVtcGxhdGVPYmplY3Q3IiwiZXhwcmVzc2lvblByZWZpeCIsInRleHRUb0NhcmV0IiwiZXhwcmVzc2lvbnMiLCJsYXN0RXhwcmVzc2lvbiIsIm5lZWRlZFBhcmVudGhlc2VzIiwic2tpcENoYXIiLCJpblF1b3RlcyIsInByZXBlbmRGbGFnIiwic3RhdGUiLCJpZGVudGlmaWVyIiwicGFyZW50aGVzZXNMZXZlbCIsInJlIiwiZXhwcmVzc2lvbiIsIm5leHRDaCIsIm5leHROZXh0Q2giLCJDb21wbGV0aW9uX2RlY29yYXRlIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFBQSxFQUFBQyxHQUNBLGlCQUFBQyxTQUFBLGlCQUFBQyxPQUNBQSxPQUFBRCxRQUFBRCxJQUNBLG1CQUFBRyxlQUFBQyxJQUNBRCxPQUFBLEdBQUFILEdBQ0EsaUJBQUFDLFFBQ0FBLFFBQUEsaUJBQUFELElBRUFELEVBQUEsaUJBQUFDLElBUkEsQ0FTQ0ssT0FBQSxXQUNELG1CQ1RBLElBQUFDLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxH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QixHQUFBLENBREM3bkMsR0FBUyxDQUFDMmEsS0FBTWpGLHFEQUlqQm15QixHQUFBLENBREM3bkMsR0FBUyxDQUFDMmEsS0FBTWpGLG1EQUlqQm15QixHQUFBLENBREM3bkMsR0FBUyxDQUFDMmEsS0FBTWpGLGdEQUlqQm15QixHQUFBLENBREM3bkMsR0FBUyxDQUFDMmEsS0FBTStTLDJDQXJHRXdXLEdBQVVDLEdBQUEwRCxHQUFBLENBRDlCelYsR0FBYyxrQkFDTThSIiwiZmlsZSI6InJwLWNvbXBvbmVudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJycC1jb21wb25lbnRzXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcInJwLWNvbXBvbmVudHNcIl0gPSBmYWN0b3J5KCk7XG59KSh3aW5kb3csIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBpc0J1ZmZlciA9IHJlcXVpcmUoJ2lzLWJ1ZmZlcicpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cbn07XG5cbmRlZmF1bHRzLmhlYWRlcnMgPSB7XG4gIGNvbW1vbjoge1xuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwiLyohXG5cdGF1dG9zaXplIDQuMC4yXG5cdGxpY2Vuc2U6IE1JVFxuXHRodHRwOi8vd3d3LmphY2tsbW9vcmUuY29tL2F1dG9zaXplXG4qL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0aWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0ZGVmaW5lKFsnbW9kdWxlJywgJ2V4cG9ydHMnXSwgZmFjdG9yeSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRmYWN0b3J5KG1vZHVsZSwgZXhwb3J0cyk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIG1vZCA9IHtcblx0XHRcdGV4cG9ydHM6IHt9XG5cdFx0fTtcblx0XHRmYWN0b3J5KG1vZCwgbW9kLmV4cG9ydHMpO1xuXHRcdGdsb2JhbC5hdXRvc2l6ZSA9IG1vZC5leHBvcnRzO1xuXHR9XG59KSh0aGlzLCBmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgbWFwID0gdHlwZW9mIE1hcCA9PT0gXCJmdW5jdGlvblwiID8gbmV3IE1hcCgpIDogZnVuY3Rpb24gKCkge1xuXHRcdHZhciBrZXlzID0gW107XG5cdFx0dmFyIHZhbHVlcyA9IFtdO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuXHRcdFx0XHRyZXR1cm4ga2V5cy5pbmRleE9mKGtleSkgPiAtMTtcblx0XHRcdH0sXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcblx0XHRcdFx0cmV0dXJuIHZhbHVlc1trZXlzLmluZGV4T2Yoa2V5KV07XG5cdFx0XHR9LFxuXHRcdFx0c2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuXHRcdFx0XHRpZiAoa2V5cy5pbmRleE9mKGtleSkgPT09IC0xKSB7XG5cdFx0XHRcdFx0a2V5cy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0dmFsdWVzLnB1c2godmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZXRlOiBmdW5jdGlvbiBfZGVsZXRlKGtleSkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSBrZXlzLmluZGV4T2Yoa2V5KTtcblx0XHRcdFx0aWYgKGluZGV4ID4gLTEpIHtcblx0XHRcdFx0XHRrZXlzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdFx0dmFsdWVzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9KCk7XG5cblx0dmFyIGNyZWF0ZUV2ZW50ID0gZnVuY3Rpb24gY3JlYXRlRXZlbnQobmFtZSkge1xuXHRcdHJldHVybiBuZXcgRXZlbnQobmFtZSwgeyBidWJibGVzOiB0cnVlIH0pO1xuXHR9O1xuXHR0cnkge1xuXHRcdG5ldyBFdmVudCgndGVzdCcpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSUUgZG9lcyBub3Qgc3VwcG9ydCBgbmV3IEV2ZW50KClgXG5cdFx0Y3JlYXRlRXZlbnQgPSBmdW5jdGlvbiBjcmVhdGVFdmVudChuYW1lKSB7XG5cdFx0XHR2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG5cdFx0XHRldnQuaW5pdEV2ZW50KG5hbWUsIHRydWUsIGZhbHNlKTtcblx0XHRcdHJldHVybiBldnQ7XG5cdFx0fTtcblx0fVxuXG5cdGZ1bmN0aW9uIGFzc2lnbih0YSkge1xuXHRcdGlmICghdGEgfHwgIXRhLm5vZGVOYW1lIHx8IHRhLm5vZGVOYW1lICE9PSAnVEVYVEFSRUEnIHx8IG1hcC5oYXModGEpKSByZXR1cm47XG5cblx0XHR2YXIgaGVpZ2h0T2Zmc2V0ID0gbnVsbDtcblx0XHR2YXIgY2xpZW50V2lkdGggPSBudWxsO1xuXHRcdHZhciBjYWNoZWRIZWlnaHQgPSBudWxsO1xuXG5cdFx0ZnVuY3Rpb24gaW5pdCgpIHtcblx0XHRcdHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRhLCBudWxsKTtcblxuXHRcdFx0aWYgKHN0eWxlLnJlc2l6ZSA9PT0gJ3ZlcnRpY2FsJykge1xuXHRcdFx0XHR0YS5zdHlsZS5yZXNpemUgPSAnbm9uZSc7XG5cdFx0XHR9IGVsc2UgaWYgKHN0eWxlLnJlc2l6ZSA9PT0gJ2JvdGgnKSB7XG5cdFx0XHRcdHRhLnN0eWxlLnJlc2l6ZSA9ICdob3Jpem9udGFsJztcblx0XHRcdH1cblxuXHRcdFx0aWYgKHN0eWxlLmJveFNpemluZyA9PT0gJ2NvbnRlbnQtYm94Jykge1xuXHRcdFx0XHRoZWlnaHRPZmZzZXQgPSAtKHBhcnNlRmxvYXQoc3R5bGUucGFkZGluZ1RvcCkgKyBwYXJzZUZsb2F0KHN0eWxlLnBhZGRpbmdCb3R0b20pKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhlaWdodE9mZnNldCA9IHBhcnNlRmxvYXQoc3R5bGUuYm9yZGVyVG9wV2lkdGgpICsgcGFyc2VGbG9hdChzdHlsZS5ib3JkZXJCb3R0b21XaWR0aCk7XG5cdFx0XHR9XG5cdFx0XHQvLyBGaXggd2hlbiBhIHRleHRhcmVhIGlzIG5vdCBvbiBkb2N1bWVudCBib2R5IGFuZCBoZWlnaHRPZmZzZXQgaXMgTm90IGEgTnVtYmVyXG5cdFx0XHRpZiAoaXNOYU4oaGVpZ2h0T2Zmc2V0KSkge1xuXHRcdFx0XHRoZWlnaHRPZmZzZXQgPSAwO1xuXHRcdFx0fVxuXG5cdFx0XHR1cGRhdGUoKTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBjaGFuZ2VPdmVyZmxvdyh2YWx1ZSkge1xuXHRcdFx0e1xuXHRcdFx0XHQvLyBDaHJvbWUvU2FmYXJpLXNwZWNpZmljIGZpeDpcblx0XHRcdFx0Ly8gV2hlbiB0aGUgdGV4dGFyZWEgeS1vdmVyZmxvdyBpcyBoaWRkZW4sIENocm9tZS9TYWZhcmkgZG8gbm90IHJlZmxvdyB0aGUgdGV4dCB0byBhY2NvdW50IGZvciB0aGUgc3BhY2Vcblx0XHRcdFx0Ly8gbWFkZSBhdmFpbGFibGUgYnkgcmVtb3ZpbmcgdGhlIHNjcm9sbGJhci4gVGhlIGZvbGxvd2luZyBmb3JjZXMgdGhlIG5lY2Vzc2FyeSB0ZXh0IHJlZmxvdy5cblx0XHRcdFx0dmFyIHdpZHRoID0gdGEuc3R5bGUud2lkdGg7XG5cdFx0XHRcdHRhLnN0eWxlLndpZHRoID0gJzBweCc7XG5cdFx0XHRcdC8vIEZvcmNlIHJlZmxvdzpcblx0XHRcdFx0LyoganNoaW50IGlnbm9yZTpzdGFydCAqL1xuXHRcdFx0XHR0YS5vZmZzZXRXaWR0aDtcblx0XHRcdFx0LyoganNoaW50IGlnbm9yZTplbmQgKi9cblx0XHRcdFx0dGEuc3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdH1cblxuXHRcdFx0dGEuc3R5bGUub3ZlcmZsb3dZID0gdmFsdWU7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0UGFyZW50T3ZlcmZsb3dzKGVsKSB7XG5cdFx0XHR2YXIgYXJyID0gW107XG5cblx0XHRcdHdoaWxlIChlbCAmJiBlbC5wYXJlbnROb2RlICYmIGVsLnBhcmVudE5vZGUgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG5cdFx0XHRcdGlmIChlbC5wYXJlbnROb2RlLnNjcm9sbFRvcCkge1xuXHRcdFx0XHRcdGFyci5wdXNoKHtcblx0XHRcdFx0XHRcdG5vZGU6IGVsLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRzY3JvbGxUb3A6IGVsLnBhcmVudE5vZGUuc2Nyb2xsVG9wXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWwgPSBlbC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gYXJyO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHJlc2l6ZSgpIHtcblx0XHRcdGlmICh0YS5zY3JvbGxIZWlnaHQgPT09IDApIHtcblx0XHRcdFx0Ly8gSWYgdGhlIHNjcm9sbEhlaWdodCBpcyAwLCB0aGVuIHRoZSBlbGVtZW50IHByb2JhYmx5IGhhcyBkaXNwbGF5Om5vbmUgb3IgaXMgZGV0YWNoZWQgZnJvbSB0aGUgRE9NLlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBvdmVyZmxvd3MgPSBnZXRQYXJlbnRPdmVyZmxvd3ModGEpO1xuXHRcdFx0dmFyIGRvY1RvcCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wOyAvLyBOZWVkZWQgZm9yIE1vYmlsZSBJRSAodGlja2V0ICMyNDApXG5cblx0XHRcdHRhLnN0eWxlLmhlaWdodCA9ICcnO1xuXHRcdFx0dGEuc3R5bGUuaGVpZ2h0ID0gdGEuc2Nyb2xsSGVpZ2h0ICsgaGVpZ2h0T2Zmc2V0ICsgJ3B4JztcblxuXHRcdFx0Ly8gdXNlZCB0byBjaGVjayBpZiBhbiB1cGRhdGUgaXMgYWN0dWFsbHkgbmVjZXNzYXJ5IG9uIHdpbmRvdy5yZXNpemVcblx0XHRcdGNsaWVudFdpZHRoID0gdGEuY2xpZW50V2lkdGg7XG5cblx0XHRcdC8vIHByZXZlbnRzIHNjcm9sbC1wb3NpdGlvbiBqdW1waW5nXG5cdFx0XHRvdmVyZmxvd3MuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcblx0XHRcdFx0ZWwubm9kZS5zY3JvbGxUb3AgPSBlbC5zY3JvbGxUb3A7XG5cdFx0XHR9KTtcblxuXHRcdFx0aWYgKGRvY1RvcCkge1xuXHRcdFx0XHRkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wID0gZG9jVG9wO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHVwZGF0ZSgpIHtcblx0XHRcdHJlc2l6ZSgpO1xuXG5cdFx0XHR2YXIgc3R5bGVIZWlnaHQgPSBNYXRoLnJvdW5kKHBhcnNlRmxvYXQodGEuc3R5bGUuaGVpZ2h0KSk7XG5cdFx0XHR2YXIgY29tcHV0ZWQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0YSwgbnVsbCk7XG5cblx0XHRcdC8vIFVzaW5nIG9mZnNldEhlaWdodCBhcyBhIHJlcGxhY2VtZW50IGZvciBjb21wdXRlZC5oZWlnaHQgaW4gSUUsIGJlY2F1c2UgSUUgZG9lcyBub3QgYWNjb3VudCB1c2Ugb2YgYm9yZGVyLWJveFxuXHRcdFx0dmFyIGFjdHVhbEhlaWdodCA9IGNvbXB1dGVkLmJveFNpemluZyA9PT0gJ2NvbnRlbnQtYm94JyA/IE1hdGgucm91bmQocGFyc2VGbG9hdChjb21wdXRlZC5oZWlnaHQpKSA6IHRhLm9mZnNldEhlaWdodDtcblxuXHRcdFx0Ly8gVGhlIGFjdHVhbCBoZWlnaHQgbm90IG1hdGNoaW5nIHRoZSBzdHlsZSBoZWlnaHQgKHNldCB2aWEgdGhlIHJlc2l6ZSBtZXRob2QpIGluZGljYXRlcyB0aGF0IFxuXHRcdFx0Ly8gdGhlIG1heC1oZWlnaHQgaGFzIGJlZW4gZXhjZWVkZWQsIGluIHdoaWNoIGNhc2UgdGhlIG92ZXJmbG93IHNob3VsZCBiZSBhbGxvd2VkLlxuXHRcdFx0aWYgKGFjdHVhbEhlaWdodCA8IHN0eWxlSGVpZ2h0KSB7XG5cdFx0XHRcdGlmIChjb21wdXRlZC5vdmVyZmxvd1kgPT09ICdoaWRkZW4nKSB7XG5cdFx0XHRcdFx0Y2hhbmdlT3ZlcmZsb3coJ3Njcm9sbCcpO1xuXHRcdFx0XHRcdHJlc2l6ZSgpO1xuXHRcdFx0XHRcdGFjdHVhbEhlaWdodCA9IGNvbXB1dGVkLmJveFNpemluZyA9PT0gJ2NvbnRlbnQtYm94JyA/IE1hdGgucm91bmQocGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0YSwgbnVsbCkuaGVpZ2h0KSkgOiB0YS5vZmZzZXRIZWlnaHQ7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIE5vcm1hbGx5IGtlZXAgb3ZlcmZsb3cgc2V0IHRvIGhpZGRlbiwgdG8gYXZvaWQgZmxhc2ggb2Ygc2Nyb2xsYmFyIGFzIHRoZSB0ZXh0YXJlYSBleHBhbmRzLlxuXHRcdFx0XHRpZiAoY29tcHV0ZWQub3ZlcmZsb3dZICE9PSAnaGlkZGVuJykge1xuXHRcdFx0XHRcdGNoYW5nZU92ZXJmbG93KCdoaWRkZW4nKTtcblx0XHRcdFx0XHRyZXNpemUoKTtcblx0XHRcdFx0XHRhY3R1YWxIZWlnaHQgPSBjb21wdXRlZC5ib3hTaXppbmcgPT09ICdjb250ZW50LWJveCcgPyBNYXRoLnJvdW5kKHBhcnNlRmxvYXQod2luZG93LmdldENvbXB1dGVkU3R5bGUodGEsIG51bGwpLmhlaWdodCkpIDogdGEub2Zmc2V0SGVpZ2h0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChjYWNoZWRIZWlnaHQgIT09IGFjdHVhbEhlaWdodCkge1xuXHRcdFx0XHRjYWNoZWRIZWlnaHQgPSBhY3R1YWxIZWlnaHQ7XG5cdFx0XHRcdHZhciBldnQgPSBjcmVhdGVFdmVudCgnYXV0b3NpemU6cmVzaXplZCcpO1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHRhLmRpc3BhdGNoRXZlbnQoZXZ0KTtcblx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0Ly8gRmlyZWZveCB3aWxsIHRocm93IGFuIGVycm9yIG9uIGRpc3BhdGNoRXZlbnQgZm9yIGEgZGV0YWNoZWQgZWxlbWVudFxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTg4OTM3NlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIHBhZ2VSZXNpemUgPSBmdW5jdGlvbiBwYWdlUmVzaXplKCkge1xuXHRcdFx0aWYgKHRhLmNsaWVudFdpZHRoICE9PSBjbGllbnRXaWR0aCkge1xuXHRcdFx0XHR1cGRhdGUoKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dmFyIGRlc3Ryb3kgPSBmdW5jdGlvbiAoc3R5bGUpIHtcblx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBwYWdlUmVzaXplLCBmYWxzZSk7XG5cdFx0XHR0YS5yZW1vdmVFdmVudExpc3RlbmVyKCdpbnB1dCcsIHVwZGF0ZSwgZmFsc2UpO1xuXHRcdFx0dGEucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB1cGRhdGUsIGZhbHNlKTtcblx0XHRcdHRhLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2F1dG9zaXplOmRlc3Ryb3knLCBkZXN0cm95LCBmYWxzZSk7XG5cdFx0XHR0YS5yZW1vdmVFdmVudExpc3RlbmVyKCdhdXRvc2l6ZTp1cGRhdGUnLCB1cGRhdGUsIGZhbHNlKTtcblxuXHRcdFx0T2JqZWN0LmtleXMoc3R5bGUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0XHR0YS5zdHlsZVtrZXldID0gc3R5bGVba2V5XTtcblx0XHRcdH0pO1xuXG5cdFx0XHRtYXAuZGVsZXRlKHRhKTtcblx0XHR9LmJpbmQodGEsIHtcblx0XHRcdGhlaWdodDogdGEuc3R5bGUuaGVpZ2h0LFxuXHRcdFx0cmVzaXplOiB0YS5zdHlsZS5yZXNpemUsXG5cdFx0XHRvdmVyZmxvd1k6IHRhLnN0eWxlLm92ZXJmbG93WSxcblx0XHRcdG92ZXJmbG93WDogdGEuc3R5bGUub3ZlcmZsb3dYLFxuXHRcdFx0d29yZFdyYXA6IHRhLnN0eWxlLndvcmRXcmFwXG5cdFx0fSk7XG5cblx0XHR0YS5hZGRFdmVudExpc3RlbmVyKCdhdXRvc2l6ZTpkZXN0cm95JywgZGVzdHJveSwgZmFsc2UpO1xuXG5cdFx0Ly8gSUU5IGRvZXMgbm90IGZpcmUgb25wcm9wZXJ0eWNoYW5nZSBvciBvbmlucHV0IGZvciBkZWxldGlvbnMsXG5cdFx0Ly8gc28gYmluZGluZyB0byBvbmtleXVwIHRvIGNhdGNoIG1vc3Qgb2YgdGhvc2UgZXZlbnRzLlxuXHRcdC8vIFRoZXJlIGlzIG5vIHdheSB0aGF0IEkga25vdyBvZiB0byBkZXRlY3Qgc29tZXRoaW5nIGxpa2UgJ2N1dCcgaW4gSUU5LlxuXHRcdGlmICgnb25wcm9wZXJ0eWNoYW5nZScgaW4gdGEgJiYgJ29uaW5wdXQnIGluIHRhKSB7XG5cdFx0XHR0YS5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHVwZGF0ZSwgZmFsc2UpO1xuXHRcdH1cblxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBwYWdlUmVzaXplLCBmYWxzZSk7XG5cdFx0dGEuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB1cGRhdGUsIGZhbHNlKTtcblx0XHR0YS5hZGRFdmVudExpc3RlbmVyKCdhdXRvc2l6ZTp1cGRhdGUnLCB1cGRhdGUsIGZhbHNlKTtcblx0XHR0YS5zdHlsZS5vdmVyZmxvd1ggPSAnaGlkZGVuJztcblx0XHR0YS5zdHlsZS53b3JkV3JhcCA9ICdicmVhay13b3JkJztcblxuXHRcdG1hcC5zZXQodGEsIHtcblx0XHRcdGRlc3Ryb3k6IGRlc3Ryb3ksXG5cdFx0XHR1cGRhdGU6IHVwZGF0ZVxuXHRcdH0pO1xuXG5cdFx0aW5pdCgpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGVzdHJveSh0YSkge1xuXHRcdHZhciBtZXRob2RzID0gbWFwLmdldCh0YSk7XG5cdFx0aWYgKG1ldGhvZHMpIHtcblx0XHRcdG1ldGhvZHMuZGVzdHJveSgpO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZSh0YSkge1xuXHRcdHZhciBtZXRob2RzID0gbWFwLmdldCh0YSk7XG5cdFx0aWYgKG1ldGhvZHMpIHtcblx0XHRcdG1ldGhvZHMudXBkYXRlKCk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIGF1dG9zaXplID0gbnVsbDtcblxuXHQvLyBEbyBub3RoaW5nIGluIE5vZGUuanMgZW52aXJvbm1lbnQgYW5kIElFOCAob3IgbG93ZXIpXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2Ygd2luZG93LmdldENvbXB1dGVkU3R5bGUgIT09ICdmdW5jdGlvbicpIHtcblx0XHRhdXRvc2l6ZSA9IGZ1bmN0aW9uIGF1dG9zaXplKGVsKSB7XG5cdFx0XHRyZXR1cm4gZWw7XG5cdFx0fTtcblx0XHRhdXRvc2l6ZS5kZXN0cm95ID0gZnVuY3Rpb24gKGVsKSB7XG5cdFx0XHRyZXR1cm4gZWw7XG5cdFx0fTtcblx0XHRhdXRvc2l6ZS51cGRhdGUgPSBmdW5jdGlvbiAoZWwpIHtcblx0XHRcdHJldHVybiBlbDtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGF1dG9zaXplID0gZnVuY3Rpb24gYXV0b3NpemUoZWwsIG9wdGlvbnMpIHtcblx0XHRcdGlmIChlbCkge1xuXHRcdFx0XHRBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGVsLmxlbmd0aCA/IGVsIDogW2VsXSwgZnVuY3Rpb24gKHgpIHtcblx0XHRcdFx0XHRyZXR1cm4gYXNzaWduKHgsIG9wdGlvbnMpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBlbDtcblx0XHR9O1xuXHRcdGF1dG9zaXplLmRlc3Ryb3kgPSBmdW5jdGlvbiAoZWwpIHtcblx0XHRcdGlmIChlbCkge1xuXHRcdFx0XHRBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGVsLmxlbmd0aCA/IGVsIDogW2VsXSwgZGVzdHJveSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZWw7XG5cdFx0fTtcblx0XHRhdXRvc2l6ZS51cGRhdGUgPSBmdW5jdGlvbiAoZWwpIHtcblx0XHRcdGlmIChlbCkge1xuXHRcdFx0XHRBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGVsLmxlbmd0aCA/IGVsIDogW2VsXSwgdXBkYXRlKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBlbDtcblx0XHR9O1xuXHR9XG5cblx0ZXhwb3J0cy5kZWZhdWx0ID0gYXV0b3NpemU7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSk7IiwiLyoganNoaW50IGJyb3dzZXI6IHRydWUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblxuLy8gV2UnbGwgY29weSB0aGUgcHJvcGVydGllcyBiZWxvdyBpbnRvIHRoZSBtaXJyb3IgZGl2LlxuLy8gTm90ZSB0aGF0IHNvbWUgYnJvd3NlcnMsIHN1Y2ggYXMgRmlyZWZveCwgZG8gbm90IGNvbmNhdGVuYXRlIHByb3BlcnRpZXNcbi8vIGludG8gdGhlaXIgc2hvcnRoYW5kIChlLmcuIHBhZGRpbmctdG9wLCBwYWRkaW5nLWJvdHRvbSBldGMuIC0+IHBhZGRpbmcpLFxuLy8gc28gd2UgaGF2ZSB0byBsaXN0IGV2ZXJ5IHNpbmdsZSBwcm9wZXJ0eSBleHBsaWNpdGx5LlxudmFyIHByb3BlcnRpZXMgPSBbXG4gICdkaXJlY3Rpb24nLCAgLy8gUlRMIHN1cHBvcnRcbiAgJ2JveFNpemluZycsXG4gICd3aWR0aCcsICAvLyBvbiBDaHJvbWUgYW5kIElFLCBleGNsdWRlIHRoZSBzY3JvbGxiYXIsIHNvIHRoZSBtaXJyb3IgZGl2IHdyYXBzIGV4YWN0bHkgYXMgdGhlIHRleHRhcmVhIGRvZXNcbiAgJ2hlaWdodCcsXG4gICdvdmVyZmxvd1gnLFxuICAnb3ZlcmZsb3dZJywgIC8vIGNvcHkgdGhlIHNjcm9sbGJhciBmb3IgSUVcblxuICAnYm9yZGVyVG9wV2lkdGgnLFxuICAnYm9yZGVyUmlnaHRXaWR0aCcsXG4gICdib3JkZXJCb3R0b21XaWR0aCcsXG4gICdib3JkZXJMZWZ0V2lkdGgnLFxuICAnYm9yZGVyU3R5bGUnLFxuXG4gICdwYWRkaW5nVG9wJyxcbiAgJ3BhZGRpbmdSaWdodCcsXG4gICdwYWRkaW5nQm90dG9tJyxcbiAgJ3BhZGRpbmdMZWZ0JyxcblxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZm9udFxuICAnZm9udFN0eWxlJyxcbiAgJ2ZvbnRWYXJpYW50JyxcbiAgJ2ZvbnRXZWlnaHQnLFxuICAnZm9udFN0cmV0Y2gnLFxuICAnZm9udFNpemUnLFxuICAnZm9udFNpemVBZGp1c3QnLFxuICAnbGluZUhlaWdodCcsXG4gICdmb250RmFtaWx5JyxcblxuICAndGV4dEFsaWduJyxcbiAgJ3RleHRUcmFuc2Zvcm0nLFxuICAndGV4dEluZGVudCcsXG4gICd0ZXh0RGVjb3JhdGlvbicsICAvLyBtaWdodCBub3QgbWFrZSBhIGRpZmZlcmVuY2UsIGJ1dCBiZXR0ZXIgYmUgc2FmZVxuXG4gICdsZXR0ZXJTcGFjaW5nJyxcbiAgJ3dvcmRTcGFjaW5nJyxcblxuICAndGFiU2l6ZScsXG4gICdNb3pUYWJTaXplJ1xuXG5dO1xuXG52YXIgaXNCcm93c2VyID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKTtcbnZhciBpc0ZpcmVmb3ggPSAoaXNCcm93c2VyICYmIHdpbmRvdy5tb3pJbm5lclNjcmVlblggIT0gbnVsbCk7XG5cbmZ1bmN0aW9uIGdldENhcmV0Q29vcmRpbmF0ZXMoZWxlbWVudCwgcG9zaXRpb24sIG9wdGlvbnMpIHtcbiAgaWYgKCFpc0Jyb3dzZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3RleHRhcmVhLWNhcmV0LXBvc2l0aW9uI2dldENhcmV0Q29vcmRpbmF0ZXMgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGluIGEgYnJvd3NlcicpO1xuICB9XG5cbiAgdmFyIGRlYnVnID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlYnVnIHx8IGZhbHNlO1xuICBpZiAoZGVidWcpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaW5wdXQtdGV4dGFyZWEtY2FyZXQtcG9zaXRpb24tbWlycm9yLWRpdicpO1xuICAgIGlmIChlbCkgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gIH1cblxuICAvLyBUaGUgbWlycm9yIGRpdiB3aWxsIHJlcGxpY2F0ZSB0aGUgdGV4dGFyZWEncyBzdHlsZVxuICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRpdi5pZCA9ICdpbnB1dC10ZXh0YXJlYS1jYXJldC1wb3NpdGlvbi1taXJyb3ItZGl2JztcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkaXYpO1xuXG4gIHZhciBzdHlsZSA9IGRpdi5zdHlsZTtcbiAgdmFyIGNvbXB1dGVkID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUgPyB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSA6IGVsZW1lbnQuY3VycmVudFN0eWxlOyAgLy8gY3VycmVudFN0eWxlIGZvciBJRSA8IDlcbiAgdmFyIGlzSW5wdXQgPSBlbGVtZW50Lm5vZGVOYW1lID09PSAnSU5QVVQnO1xuXG4gIC8vIERlZmF1bHQgdGV4dGFyZWEgc3R5bGVzXG4gIHN0eWxlLndoaXRlU3BhY2UgPSAncHJlLXdyYXAnO1xuICBpZiAoIWlzSW5wdXQpXG4gICAgc3R5bGUud29yZFdyYXAgPSAnYnJlYWstd29yZCc7ICAvLyBvbmx5IGZvciB0ZXh0YXJlYS1zXG5cbiAgLy8gUG9zaXRpb24gb2ZmLXNjcmVlblxuICBzdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7ICAvLyByZXF1aXJlZCB0byByZXR1cm4gY29vcmRpbmF0ZXMgcHJvcGVybHlcbiAgaWYgKCFkZWJ1ZylcbiAgICBzdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7ICAvLyBub3QgJ2Rpc3BsYXk6IG5vbmUnIGJlY2F1c2Ugd2Ugd2FudCByZW5kZXJpbmdcblxuICAvLyBUcmFuc2ZlciB0aGUgZWxlbWVudCdzIHByb3BlcnRpZXMgdG8gdGhlIGRpdlxuICBwcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICBpZiAoaXNJbnB1dCAmJiBwcm9wID09PSAnbGluZUhlaWdodCcpIHtcbiAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgPGlucHV0PnMgYmVjYXVzZSB0ZXh0IGlzIHJlbmRlcmVkIGNlbnRlcmVkIGFuZCBsaW5lIGhlaWdodCBtYXkgYmUgIT0gaGVpZ2h0XG4gICAgICBzdHlsZS5saW5lSGVpZ2h0ID0gY29tcHV0ZWQuaGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZVtwcm9wXSA9IGNvbXB1dGVkW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKGlzRmlyZWZveCkge1xuICAgIC8vIEZpcmVmb3ggbGllcyBhYm91dCB0aGUgb3ZlcmZsb3cgcHJvcGVydHkgZm9yIHRleHRhcmVhczogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9OTg0Mjc1XG4gICAgaWYgKGVsZW1lbnQuc2Nyb2xsSGVpZ2h0ID4gcGFyc2VJbnQoY29tcHV0ZWQuaGVpZ2h0KSlcbiAgICAgIHN0eWxlLm92ZXJmbG93WSA9ICdzY3JvbGwnO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7ICAvLyBmb3IgQ2hyb21lIHRvIG5vdCByZW5kZXIgYSBzY3JvbGxiYXI7IElFIGtlZXBzIG92ZXJmbG93WSA9ICdzY3JvbGwnXG4gIH1cblxuICBkaXYudGV4dENvbnRlbnQgPSBlbGVtZW50LnZhbHVlLnN1YnN0cmluZygwLCBwb3NpdGlvbik7XG4gIC8vIFRoZSBzZWNvbmQgc3BlY2lhbCBoYW5kbGluZyBmb3IgaW5wdXQgdHlwZT1cInRleHRcIiB2cyB0ZXh0YXJlYTpcbiAgLy8gc3BhY2VzIG5lZWQgdG8gYmUgcmVwbGFjZWQgd2l0aCBub24tYnJlYWtpbmcgc3BhY2VzIC0gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTM0MDIwMzUvMTI2OTAzN1xuICBpZiAoaXNJbnB1dClcbiAgICBkaXYudGV4dENvbnRlbnQgPSBkaXYudGV4dENvbnRlbnQucmVwbGFjZSgvXFxzL2csICdcXHUwMGEwJyk7XG5cbiAgdmFyIHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gIC8vIFdyYXBwaW5nIG11c3QgYmUgcmVwbGljYXRlZCAqZXhhY3RseSosIGluY2x1ZGluZyB3aGVuIGEgbG9uZyB3b3JkIGdldHNcbiAgLy8gb250byB0aGUgbmV4dCBsaW5lLCB3aXRoIHdoaXRlc3BhY2UgYXQgdGhlIGVuZCBvZiB0aGUgbGluZSBiZWZvcmUgKCM3KS5cbiAgLy8gVGhlICAqb25seSogcmVsaWFibGUgd2F5IHRvIGRvIHRoYXQgaXMgdG8gY29weSB0aGUgKmVudGlyZSogcmVzdCBvZiB0aGVcbiAgLy8gdGV4dGFyZWEncyBjb250ZW50IGludG8gdGhlIDxzcGFuPiBjcmVhdGVkIGF0IHRoZSBjYXJldCBwb3NpdGlvbi5cbiAgLy8gRm9yIGlucHV0cywganVzdCAnLicgd291bGQgYmUgZW5vdWdoLCBidXQgbm8gbmVlZCB0byBib3RoZXIuXG4gIHNwYW4udGV4dENvbnRlbnQgPSBlbGVtZW50LnZhbHVlLnN1YnN0cmluZyhwb3NpdGlvbikgfHwgJy4nOyAgLy8gfHwgYmVjYXVzZSBhIGNvbXBsZXRlbHkgZW1wdHkgZmF1eCBzcGFuIGRvZXNuJ3QgcmVuZGVyIGF0IGFsbFxuICBkaXYuYXBwZW5kQ2hpbGQoc3Bhbik7XG5cbiAgdmFyIGNvb3JkaW5hdGVzID0ge1xuICAgIHRvcDogc3Bhbi5vZmZzZXRUb3AgKyBwYXJzZUludChjb21wdXRlZFsnYm9yZGVyVG9wV2lkdGgnXSksXG4gICAgbGVmdDogc3Bhbi5vZmZzZXRMZWZ0ICsgcGFyc2VJbnQoY29tcHV0ZWRbJ2JvcmRlckxlZnRXaWR0aCddKSxcbiAgICBoZWlnaHQ6IHBhcnNlSW50KGNvbXB1dGVkWydsaW5lSGVpZ2h0J10pXG4gIH07XG5cbiAgaWYgKGRlYnVnKSB7XG4gICAgc3Bhbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnI2FhYSc7XG4gIH0gZWxzZSB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkaXYpO1xuICB9XG5cbiAgcmV0dXJuIGNvb3JkaW5hdGVzO1xufVxuXG5pZiAodHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBnZXRDYXJldENvb3JkaW5hdGVzO1xufSBlbHNlIGlmKGlzQnJvd3Nlcikge1xuICB3aW5kb3cuZ2V0Q2FyZXRDb29yZGluYXRlcyA9IGdldENhcmV0Q29vcmRpbmF0ZXM7XG59XG5cbn0oKSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xudmFyIGJ0b2EgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmJ0b2EgJiYgd2luZG93LmJ0b2EuYmluZCh3aW5kb3cpKSB8fCByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnRvYScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHZhciBsb2FkRXZlbnQgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbiAgICB2YXIgeERvbWFpbiA9IGZhbHNlO1xuXG4gICAgLy8gRm9yIElFIDgvOSBDT1JTIHN1cHBvcnRcbiAgICAvLyBPbmx5IHN1cHBvcnRzIFBPU1QgYW5kIEdFVCBjYWxscyBhbmQgZG9lc24ndCByZXR1cm5zIHRoZSByZXNwb25zZSBoZWFkZXJzLlxuICAgIC8vIERPTidUIGRvIHRoaXMgZm9yIHRlc3RpbmcgYi9jIFhNTEh0dHBSZXF1ZXN0IGlzIG1vY2tlZCwgbm90IFhEb21haW5SZXF1ZXN0LlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXG4gICAgICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHdpbmRvdy5YRG9tYWluUmVxdWVzdCAmJiAhKCd3aXRoQ3JlZGVudGlhbHMnIGluIHJlcXVlc3QpICYmXG4gICAgICAgICFpc1VSTFNhbWVPcmlnaW4oY29uZmlnLnVybCkpIHtcbiAgICAgIHJlcXVlc3QgPSBuZXcgd2luZG93LlhEb21haW5SZXF1ZXN0KCk7XG4gICAgICBsb2FkRXZlbnQgPSAnb25sb2FkJztcbiAgICAgIHhEb21haW4gPSB0cnVlO1xuICAgICAgcmVxdWVzdC5vbnByb2dyZXNzID0gZnVuY3Rpb24gaGFuZGxlUHJvZ3Jlc3MoKSB7fTtcbiAgICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHt9O1xuICAgIH1cblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgfHwgJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3RbbG9hZEV2ZW50XSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCAmJiAheERvbWFpbikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgLy8gSUUgc2VuZHMgMTIyMyBpbnN0ZWFkIG9mIDIwNCAoaHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9zL2lzc3Vlcy8yMDEpXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAyMDQgOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAnTm8gQ29udGVudCcgOiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIHZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcblxuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UodXRpbHMubWVyZ2UoZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cblxuLy8gRm9yIE5vZGUgdjAuMTAgc3VwcG9ydC4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseS5cbmZ1bmN0aW9uIGlzU2xvd0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLy4uL2RlZmF1bHRzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gdXRpbHMubWVyZ2Uoe1xuICAgICAgdXJsOiBhcmd1bWVudHNbMF1cbiAgICB9LCBhcmd1bWVudHNbMV0pO1xuICB9XG5cbiAgY29uZmlnID0gdXRpbHMubWVyZ2UoZGVmYXVsdHMsIHttZXRob2Q6ICdnZXQnfSwgdGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIC8vIE5vdGU6IHN0YXR1cyBpcyBub3QgZXhwb3NlZCBieSBYRG9tYWluUmVxdWVzdFxuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyU0MC9naSwgJ0AnKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBidG9hIHBvbHlmaWxsIGZvciBJRTwxMCBjb3VydGVzeSBodHRwczovL2dpdGh1Yi5jb20vZGF2aWRjaGFtYmVycy9CYXNlNjQuanNcblxudmFyIGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89JztcblxuZnVuY3Rpb24gRSgpIHtcbiAgdGhpcy5tZXNzYWdlID0gJ1N0cmluZyBjb250YWlucyBhbiBpbnZhbGlkIGNoYXJhY3Rlcic7XG59XG5FLnByb3RvdHlwZSA9IG5ldyBFcnJvcjtcbkUucHJvdG90eXBlLmNvZGUgPSA1O1xuRS5wcm90b3R5cGUubmFtZSA9ICdJbnZhbGlkQ2hhcmFjdGVyRXJyb3InO1xuXG5mdW5jdGlvbiBidG9hKGlucHV0KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoaW5wdXQpO1xuICB2YXIgb3V0cHV0ID0gJyc7XG4gIGZvciAoXG4gICAgLy8gaW5pdGlhbGl6ZSByZXN1bHQgYW5kIGNvdW50ZXJcbiAgICB2YXIgYmxvY2ssIGNoYXJDb2RlLCBpZHggPSAwLCBtYXAgPSBjaGFycztcbiAgICAvLyBpZiB0aGUgbmV4dCBzdHIgaW5kZXggZG9lcyBub3QgZXhpc3Q6XG4gICAgLy8gICBjaGFuZ2UgdGhlIG1hcHBpbmcgdGFibGUgdG8gXCI9XCJcbiAgICAvLyAgIGNoZWNrIGlmIGQgaGFzIG5vIGZyYWN0aW9uYWwgZGlnaXRzXG4gICAgc3RyLmNoYXJBdChpZHggfCAwKSB8fCAobWFwID0gJz0nLCBpZHggJSAxKTtcbiAgICAvLyBcIjggLSBpZHggJSAxICogOFwiIGdlbmVyYXRlcyB0aGUgc2VxdWVuY2UgMiwgNCwgNiwgOFxuICAgIG91dHB1dCArPSBtYXAuY2hhckF0KDYzICYgYmxvY2sgPj4gOCAtIGlkeCAlIDEgKiA4KVxuICApIHtcbiAgICBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KGlkeCArPSAzIC8gNCk7XG4gICAgaWYgKGNoYXJDb2RlID4gMHhGRikge1xuICAgICAgdGhyb3cgbmV3IEUoKTtcbiAgICB9XG4gICAgYmxvY2sgPSBibG9jayA8PCA4IHwgY2hhckNvZGU7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBidG9hO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICB9LFxuXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBTdXBwb3J0IGJhc2VVUkwgY29uZmlnXG4gIGlmIChjb25maWcuYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChjb25maWcudXJsKSkge1xuICAgIGNvbmZpZy51cmwgPSBjb21iaW5lVVJMcyhjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gIH1cblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzIHx8IHt9XG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIi8qKlxuICogbWFya2VkIC0gYSBtYXJrZG93biBwYXJzZXJcbiAqIENvcHlyaWdodCAoYykgMjAxMS0yMDE4LCBDaHJpc3RvcGhlciBKZWZmcmV5LiAoTUlUIExpY2Vuc2VkKVxuICogaHR0cHM6Ly9naXRodWIuY29tL21hcmtlZGpzL21hcmtlZFxuICovXG5cbjsoZnVuY3Rpb24ocm9vdCkge1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEJsb2NrLUxldmVsIEdyYW1tYXJcbiAqL1xuXG52YXIgYmxvY2sgPSB7XG4gIG5ld2xpbmU6IC9eXFxuKy8sXG4gIGNvZGU6IC9eKCB7NH1bXlxcbl0rXFxuKikrLyxcbiAgZmVuY2VzOiAvXiB7MCwzfShgezMsfXx+ezMsfSkoW15gflxcbl0qKVxcbig/OnwoW1xcc1xcU10qPylcXG4pKD86IHswLDN9XFwxW35gXSogKig/Olxcbit8JCl8JCkvLFxuICBocjogL14gezAsM30oKD86LSAqKXszLH18KD86XyAqKXszLH18KD86XFwqICopezMsfSkoPzpcXG4rfCQpLyxcbiAgaGVhZGluZzogL14gezAsM30oI3sxLDZ9KSArKFteXFxuXSo/KSg/OiArIyspPyAqKD86XFxuK3wkKS8sXG4gIGJsb2NrcXVvdGU6IC9eKCB7MCwzfT4gPyhwYXJhZ3JhcGh8W15cXG5dKikoPzpcXG58JCkpKy8sXG4gIGxpc3Q6IC9eKCB7MCwzfSkoYnVsbCkgW1xcc1xcU10rPyg/OmhyfGRlZnxcXG57Mix9KD8hICkoPyFcXDFidWxsIClcXG4qfFxccyokKS8sXG4gIGh0bWw6ICdeIHswLDN9KD86JyAvLyBvcHRpb25hbCBpbmRlbnRhdGlvblxuICAgICsgJzwoc2NyaXB0fHByZXxzdHlsZSlbXFxcXHM+XVtcXFxcc1xcXFxTXSo/KD86PC9cXFxcMT5bXlxcXFxuXSpcXFxcbit8JCknIC8vICgxKVxuICAgICsgJ3xjb21tZW50W15cXFxcbl0qKFxcXFxuK3wkKScgLy8gKDIpXG4gICAgKyAnfDxcXFxcP1tcXFxcc1xcXFxTXSo/XFxcXD8+XFxcXG4qJyAvLyAoMylcbiAgICArICd8PCFbQS1aXVtcXFxcc1xcXFxTXSo/PlxcXFxuKicgLy8gKDQpXG4gICAgKyAnfDwhXFxcXFtDREFUQVxcXFxbW1xcXFxzXFxcXFNdKj9cXFxcXVxcXFxdPlxcXFxuKicgLy8gKDUpXG4gICAgKyAnfDwvPyh0YWcpKD86ICt8XFxcXG58Lz8+KVtcXFxcc1xcXFxTXSo/KD86XFxcXG57Mix9fCQpJyAvLyAoNilcbiAgICArICd8PCg/IXNjcmlwdHxwcmV8c3R5bGUpKFthLXpdW1xcXFx3LV0qKSg/OmF0dHJpYnV0ZSkqPyAqLz8+KD89WyBcXFxcdF0qKD86XFxcXG58JCkpW1xcXFxzXFxcXFNdKj8oPzpcXFxcbnsyLH18JCknIC8vICg3KSBvcGVuIHRhZ1xuICAgICsgJ3w8Lyg/IXNjcmlwdHxwcmV8c3R5bGUpW2Etel1bXFxcXHctXSpcXFxccyo+KD89WyBcXFxcdF0qKD86XFxcXG58JCkpW1xcXFxzXFxcXFNdKj8oPzpcXFxcbnsyLH18JCknIC8vICg3KSBjbG9zaW5nIHRhZ1xuICAgICsgJyknLFxuICBkZWY6IC9eIHswLDN9XFxbKGxhYmVsKVxcXTogKlxcbj8gKjw/KFteXFxzPl0rKT4/KD86KD86ICtcXG4/ICp8ICpcXG4gKikodGl0bGUpKT8gKig/Olxcbit8JCkvLFxuICBucHRhYmxlOiBub29wLFxuICB0YWJsZTogbm9vcCxcbiAgbGhlYWRpbmc6IC9eKFteXFxuXSspXFxuIHswLDN9KD0rfC0rKSAqKD86XFxuK3wkKS8sXG4gIC8vIHJlZ2V4IHRlbXBsYXRlLCBwbGFjZWhvbGRlcnMgd2lsbCBiZSByZXBsYWNlZCBhY2NvcmRpbmcgdG8gZGlmZmVyZW50IHBhcmFncmFwaFxuICAvLyBpbnRlcnJ1cHRpb24gcnVsZXMgb2YgY29tbW9ubWFyayBhbmQgdGhlIG9yaWdpbmFsIG1hcmtkb3duIHNwZWM6XG4gIF9wYXJhZ3JhcGg6IC9eKFteXFxuXSsoPzpcXG4oPyFocnxoZWFkaW5nfGxoZWFkaW5nfGJsb2NrcXVvdGV8ZmVuY2VzfGxpc3R8aHRtbClbXlxcbl0rKSopLyxcbiAgdGV4dDogL15bXlxcbl0rL1xufTtcblxuYmxvY2suX2xhYmVsID0gLyg/IVxccypcXF0pKD86XFxcXFtcXFtcXF1dfFteXFxbXFxdXSkrLztcbmJsb2NrLl90aXRsZSA9IC8oPzpcIig/OlxcXFxcIj98W15cIlxcXFxdKSpcInwnW14nXFxuXSooPzpcXG5bXidcXG5dKykqXFxuPyd8XFwoW14oKV0qXFwpKS87XG5ibG9jay5kZWYgPSBlZGl0KGJsb2NrLmRlZilcbiAgLnJlcGxhY2UoJ2xhYmVsJywgYmxvY2suX2xhYmVsKVxuICAucmVwbGFjZSgndGl0bGUnLCBibG9jay5fdGl0bGUpXG4gIC5nZXRSZWdleCgpO1xuXG5ibG9jay5idWxsZXQgPSAvKD86WyorLV18XFxkezEsOX1cXC4pLztcbmJsb2NrLml0ZW0gPSAvXiggKikoYnVsbCkgP1teXFxuXSooPzpcXG4oPyFcXDFidWxsID8pW15cXG5dKikqLztcbmJsb2NrLml0ZW0gPSBlZGl0KGJsb2NrLml0ZW0sICdnbScpXG4gIC5yZXBsYWNlKC9idWxsL2csIGJsb2NrLmJ1bGxldClcbiAgLmdldFJlZ2V4KCk7XG5cbmJsb2NrLmxpc3QgPSBlZGl0KGJsb2NrLmxpc3QpXG4gIC5yZXBsYWNlKC9idWxsL2csIGJsb2NrLmJ1bGxldClcbiAgLnJlcGxhY2UoJ2hyJywgJ1xcXFxuKyg/PVxcXFwxPyg/Oig/Oi0gKil7Myx9fCg/Ol8gKil7Myx9fCg/OlxcXFwqICopezMsfSkoPzpcXFxcbit8JCkpJylcbiAgLnJlcGxhY2UoJ2RlZicsICdcXFxcbisoPz0nICsgYmxvY2suZGVmLnNvdXJjZSArICcpJylcbiAgLmdldFJlZ2V4KCk7XG5cbmJsb2NrLl90YWcgPSAnYWRkcmVzc3xhcnRpY2xlfGFzaWRlfGJhc2V8YmFzZWZvbnR8YmxvY2txdW90ZXxib2R5fGNhcHRpb24nXG4gICsgJ3xjZW50ZXJ8Y29sfGNvbGdyb3VwfGRkfGRldGFpbHN8ZGlhbG9nfGRpcnxkaXZ8ZGx8ZHR8ZmllbGRzZXR8ZmlnY2FwdGlvbidcbiAgKyAnfGZpZ3VyZXxmb290ZXJ8Zm9ybXxmcmFtZXxmcmFtZXNldHxoWzEtNl18aGVhZHxoZWFkZXJ8aHJ8aHRtbHxpZnJhbWUnXG4gICsgJ3xsZWdlbmR8bGl8bGlua3xtYWlufG1lbnV8bWVudWl0ZW18bWV0YXxuYXZ8bm9mcmFtZXN8b2x8b3B0Z3JvdXB8b3B0aW9uJ1xuICArICd8cHxwYXJhbXxzZWN0aW9ufHNvdXJjZXxzdW1tYXJ5fHRhYmxlfHRib2R5fHRkfHRmb290fHRofHRoZWFkfHRpdGxlfHRyJ1xuICArICd8dHJhY2t8dWwnO1xuYmxvY2suX2NvbW1lbnQgPSAvPCEtLSg/IS0/PilbXFxzXFxTXSo/LS0+LztcbmJsb2NrLmh0bWwgPSBlZGl0KGJsb2NrLmh0bWwsICdpJylcbiAgLnJlcGxhY2UoJ2NvbW1lbnQnLCBibG9jay5fY29tbWVudClcbiAgLnJlcGxhY2UoJ3RhZycsIGJsb2NrLl90YWcpXG4gIC5yZXBsYWNlKCdhdHRyaWJ1dGUnLCAvICtbYS16QS1aOl9dW1xcdy46LV0qKD86ICo9ICpcIlteXCJcXG5dKlwifCAqPSAqJ1teJ1xcbl0qJ3wgKj0gKlteXFxzXCInPTw+YF0rKT8vKVxuICAuZ2V0UmVnZXgoKTtcblxuYmxvY2sucGFyYWdyYXBoID0gZWRpdChibG9jay5fcGFyYWdyYXBoKVxuICAucmVwbGFjZSgnaHInLCBibG9jay5ocilcbiAgLnJlcGxhY2UoJ2hlYWRpbmcnLCAnIHswLDN9I3sxLDZ9ICsnKVxuICAucmVwbGFjZSgnfGxoZWFkaW5nJywgJycpIC8vIHNldGV4IGhlYWRpbmdzIGRvbid0IGludGVycnVwdCBjb21tb25tYXJrIHBhcmFncmFwaHNcbiAgLnJlcGxhY2UoJ2Jsb2NrcXVvdGUnLCAnIHswLDN9PicpXG4gIC5yZXBsYWNlKCdmZW5jZXMnLCAnIHswLDN9KD86YHszLH18fnszLH0pW15gXFxcXG5dKlxcXFxuJylcbiAgLnJlcGxhY2UoJ2xpc3QnLCAnIHswLDN9KD86WyorLV18MVsuKV0pICcpIC8vIG9ubHkgbGlzdHMgc3RhcnRpbmcgZnJvbSAxIGNhbiBpbnRlcnJ1cHRcbiAgLnJlcGxhY2UoJ2h0bWwnLCAnPC8/KD86dGFnKSg/OiArfFxcXFxufC8/Pil8PCg/OnNjcmlwdHxwcmV8c3R5bGV8IS0tKScpXG4gIC5yZXBsYWNlKCd0YWcnLCBibG9jay5fdGFnKSAvLyBwYXJzIGNhbiBiZSBpbnRlcnJ1cHRlZCBieSB0eXBlICg2KSBodG1sIGJsb2Nrc1xuICAuZ2V0UmVnZXgoKTtcblxuYmxvY2suYmxvY2txdW90ZSA9IGVkaXQoYmxvY2suYmxvY2txdW90ZSlcbiAgLnJlcGxhY2UoJ3BhcmFncmFwaCcsIGJsb2NrLnBhcmFncmFwaClcbiAgLmdldFJlZ2V4KCk7XG5cbi8qKlxuICogTm9ybWFsIEJsb2NrIEdyYW1tYXJcbiAqL1xuXG5ibG9jay5ub3JtYWwgPSBtZXJnZSh7fSwgYmxvY2spO1xuXG4vKipcbiAqIEdGTSBCbG9jayBHcmFtbWFyXG4gKi9cblxuYmxvY2suZ2ZtID0gbWVyZ2Uoe30sIGJsb2NrLm5vcm1hbCwge1xuICBucHRhYmxlOiAvXiAqKFtefFxcbiBdLipcXHwuKilcXG4gKihbLTpdKyAqXFx8Wy18IDpdKikoPzpcXG4oKD86LipbXj5cXG4gXS4qKD86XFxufCQpKSopXFxuKnwkKS8sXG4gIHRhYmxlOiAvXiAqXFx8KC4rKVxcbiAqXFx8PyggKlstOl0rWy18IDpdKikoPzpcXG4oKD86ICpbXj5cXG4gXS4qKD86XFxufCQpKSopXFxuKnwkKS9cbn0pO1xuXG4vKipcbiAqIFBlZGFudGljIGdyYW1tYXIgKG9yaWdpbmFsIEpvaG4gR3J1YmVyJ3MgbG9vc2UgbWFya2Rvd24gc3BlY2lmaWNhdGlvbilcbiAqL1xuXG5ibG9jay5wZWRhbnRpYyA9IG1lcmdlKHt9LCBibG9jay5ub3JtYWwsIHtcbiAgaHRtbDogZWRpdChcbiAgICAnXiAqKD86Y29tbWVudCAqKD86XFxcXG58XFxcXHMqJCknXG4gICAgKyAnfDwodGFnKVtcXFxcc1xcXFxTXSs/PC9cXFxcMT4gKig/OlxcXFxuezIsfXxcXFxccyokKScgLy8gY2xvc2VkIHRhZ1xuICAgICsgJ3w8dGFnKD86XCJbXlwiXSpcInxcXCdbXlxcJ10qXFwnfFxcXFxzW15cXCdcIi8+XFxcXHNdKikqPy8/PiAqKD86XFxcXG57Mix9fFxcXFxzKiQpKScpXG4gICAgLnJlcGxhY2UoJ2NvbW1lbnQnLCBibG9jay5fY29tbWVudClcbiAgICAucmVwbGFjZSgvdGFnL2csICcoPyEoPzonXG4gICAgICArICdhfGVtfHN0cm9uZ3xzbWFsbHxzfGNpdGV8cXxkZm58YWJicnxkYXRhfHRpbWV8Y29kZXx2YXJ8c2FtcHxrYmR8c3ViJ1xuICAgICAgKyAnfHN1cHxpfGJ8dXxtYXJrfHJ1Ynl8cnR8cnB8YmRpfGJkb3xzcGFufGJyfHdicnxpbnN8ZGVsfGltZyknXG4gICAgICArICdcXFxcYilcXFxcdysoPyE6fFteXFxcXHdcXFxcc0BdKkApXFxcXGInKVxuICAgIC5nZXRSZWdleCgpLFxuICBkZWY6IC9eICpcXFsoW15cXF1dKylcXF06ICo8PyhbXlxccz5dKyk+Pyg/OiArKFtcIihdW15cXG5dK1tcIildKSk/ICooPzpcXG4rfCQpLyxcbiAgaGVhZGluZzogL14gKigjezEsNn0pICooW15cXG5dKz8pICooPzojKyAqKT8oPzpcXG4rfCQpLyxcbiAgZmVuY2VzOiBub29wLCAvLyBmZW5jZXMgbm90IHN1cHBvcnRlZFxuICBwYXJhZ3JhcGg6IGVkaXQoYmxvY2subm9ybWFsLl9wYXJhZ3JhcGgpXG4gICAgLnJlcGxhY2UoJ2hyJywgYmxvY2suaHIpXG4gICAgLnJlcGxhY2UoJ2hlYWRpbmcnLCAnICojezEsNn0gKlteXFxuXScpXG4gICAgLnJlcGxhY2UoJ2xoZWFkaW5nJywgYmxvY2subGhlYWRpbmcpXG4gICAgLnJlcGxhY2UoJ2Jsb2NrcXVvdGUnLCAnIHswLDN9PicpXG4gICAgLnJlcGxhY2UoJ3xmZW5jZXMnLCAnJylcbiAgICAucmVwbGFjZSgnfGxpc3QnLCAnJylcbiAgICAucmVwbGFjZSgnfGh0bWwnLCAnJylcbiAgICAuZ2V0UmVnZXgoKVxufSk7XG5cbi8qKlxuICogQmxvY2sgTGV4ZXJcbiAqL1xuXG5mdW5jdGlvbiBMZXhlcihvcHRpb25zKSB7XG4gIHRoaXMudG9rZW5zID0gW107XG4gIHRoaXMudG9rZW5zLmxpbmtzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCBtYXJrZWQuZGVmYXVsdHM7XG4gIHRoaXMucnVsZXMgPSBibG9jay5ub3JtYWw7XG5cbiAgaWYgKHRoaXMub3B0aW9ucy5wZWRhbnRpYykge1xuICAgIHRoaXMucnVsZXMgPSBibG9jay5wZWRhbnRpYztcbiAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuZ2ZtKSB7XG4gICAgdGhpcy5ydWxlcyA9IGJsb2NrLmdmbTtcbiAgfVxufVxuXG4vKipcbiAqIEV4cG9zZSBCbG9jayBSdWxlc1xuICovXG5cbkxleGVyLnJ1bGVzID0gYmxvY2s7XG5cbi8qKlxuICogU3RhdGljIExleCBNZXRob2RcbiAqL1xuXG5MZXhlci5sZXggPSBmdW5jdGlvbihzcmMsIG9wdGlvbnMpIHtcbiAgdmFyIGxleGVyID0gbmV3IExleGVyKG9wdGlvbnMpO1xuICByZXR1cm4gbGV4ZXIubGV4KHNyYyk7XG59O1xuXG4vKipcbiAqIFByZXByb2Nlc3NpbmdcbiAqL1xuXG5MZXhlci5wcm90b3R5cGUubGV4ID0gZnVuY3Rpb24oc3JjKSB7XG4gIHNyYyA9IHNyY1xuICAgIC5yZXBsYWNlKC9cXHJcXG58XFxyL2csICdcXG4nKVxuICAgIC5yZXBsYWNlKC9cXHQvZywgJyAgICAnKVxuICAgIC5yZXBsYWNlKC9cXHUwMGEwL2csICcgJylcbiAgICAucmVwbGFjZSgvXFx1MjQyNC9nLCAnXFxuJyk7XG5cbiAgcmV0dXJuIHRoaXMudG9rZW4oc3JjLCB0cnVlKTtcbn07XG5cbi8qKlxuICogTGV4aW5nXG4gKi9cblxuTGV4ZXIucHJvdG90eXBlLnRva2VuID0gZnVuY3Rpb24oc3JjLCB0b3ApIHtcbiAgc3JjID0gc3JjLnJlcGxhY2UoL14gKyQvZ20sICcnKTtcbiAgdmFyIG5leHQsXG4gICAgICBsb29zZSxcbiAgICAgIGNhcCxcbiAgICAgIGJ1bGwsXG4gICAgICBiLFxuICAgICAgaXRlbSxcbiAgICAgIGxpc3RTdGFydCxcbiAgICAgIGxpc3RJdGVtcyxcbiAgICAgIHQsXG4gICAgICBzcGFjZSxcbiAgICAgIGksXG4gICAgICB0YWcsXG4gICAgICBsLFxuICAgICAgaXNvcmRlcmVkLFxuICAgICAgaXN0YXNrLFxuICAgICAgaXNjaGVja2VkO1xuXG4gIHdoaWxlIChzcmMpIHtcbiAgICAvLyBuZXdsaW5lXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMubmV3bGluZS5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBpZiAoY2FwWzBdLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgICAgdHlwZTogJ3NwYWNlJ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjb2RlXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuY29kZS5leGVjKHNyYykpIHtcbiAgICAgIHZhciBsYXN0VG9rZW4gPSB0aGlzLnRva2Vuc1t0aGlzLnRva2Vucy5sZW5ndGggLSAxXTtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICAvLyBBbiBpbmRlbnRlZCBjb2RlIGJsb2NrIGNhbm5vdCBpbnRlcnJ1cHQgYSBwYXJhZ3JhcGguXG4gICAgICBpZiAobGFzdFRva2VuICYmIGxhc3RUb2tlbi50eXBlID09PSAncGFyYWdyYXBoJykge1xuICAgICAgICBsYXN0VG9rZW4udGV4dCArPSAnXFxuJyArIGNhcFswXS50cmltUmlnaHQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcCA9IGNhcFswXS5yZXBsYWNlKC9eIHs0fS9nbSwgJycpO1xuICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAnY29kZScsXG4gICAgICAgICAgY29kZUJsb2NrU3R5bGU6ICdpbmRlbnRlZCcsXG4gICAgICAgICAgdGV4dDogIXRoaXMub3B0aW9ucy5wZWRhbnRpY1xuICAgICAgICAgICAgPyBydHJpbShjYXAsICdcXG4nKVxuICAgICAgICAgICAgOiBjYXBcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBmZW5jZXNcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5mZW5jZXMuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdjb2RlJyxcbiAgICAgICAgbGFuZzogY2FwWzJdID8gY2FwWzJdLnRyaW0oKSA6IGNhcFsyXSxcbiAgICAgICAgdGV4dDogY2FwWzNdIHx8ICcnXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGhlYWRpbmdcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5oZWFkaW5nLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnaGVhZGluZycsXG4gICAgICAgIGRlcHRoOiBjYXBbMV0ubGVuZ3RoLFxuICAgICAgICB0ZXh0OiBjYXBbMl1cbiAgICAgIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gdGFibGUgbm8gbGVhZGluZyBwaXBlIChnZm0pXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMubnB0YWJsZS5leGVjKHNyYykpIHtcbiAgICAgIGl0ZW0gPSB7XG4gICAgICAgIHR5cGU6ICd0YWJsZScsXG4gICAgICAgIGhlYWRlcjogc3BsaXRDZWxscyhjYXBbMV0ucmVwbGFjZSgvXiAqfCAqXFx8ICokL2csICcnKSksXG4gICAgICAgIGFsaWduOiBjYXBbMl0ucmVwbGFjZSgvXiAqfFxcfCAqJC9nLCAnJykuc3BsaXQoLyAqXFx8ICovKSxcbiAgICAgICAgY2VsbHM6IGNhcFszXSA/IGNhcFszXS5yZXBsYWNlKC9cXG4kLywgJycpLnNwbGl0KCdcXG4nKSA6IFtdXG4gICAgICB9O1xuXG4gICAgICBpZiAoaXRlbS5oZWFkZXIubGVuZ3RoID09PSBpdGVtLmFsaWduLmxlbmd0aCkge1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpdGVtLmFsaWduLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKC9eICotKzogKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAncmlnaHQnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoL14gKjotKzogKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAnY2VudGVyJztcbiAgICAgICAgICB9IGVsc2UgaWYgKC9eICo6LSsgKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAnbGVmdCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpdGVtLmNlbGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaXRlbS5jZWxsc1tpXSA9IHNwbGl0Q2VsbHMoaXRlbS5jZWxsc1tpXSwgaXRlbS5oZWFkZXIubGVuZ3RoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudG9rZW5zLnB1c2goaXRlbSk7XG5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gaHJcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5oci5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2hyJ1xuICAgICAgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBibG9ja3F1b3RlXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuYmxvY2txdW90ZS5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG5cbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnYmxvY2txdW90ZV9zdGFydCdcbiAgICAgIH0pO1xuXG4gICAgICBjYXAgPSBjYXBbMF0ucmVwbGFjZSgvXiAqPiA/L2dtLCAnJyk7XG5cbiAgICAgIC8vIFBhc3MgYHRvcGAgdG8ga2VlcCB0aGUgY3VycmVudFxuICAgICAgLy8gXCJ0b3BsZXZlbFwiIHN0YXRlLiBUaGlzIGlzIGV4YWN0bHlcbiAgICAgIC8vIGhvdyBtYXJrZG93bi5wbCB3b3Jrcy5cbiAgICAgIHRoaXMudG9rZW4oY2FwLCB0b3ApO1xuXG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2Jsb2NrcXVvdGVfZW5kJ1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGxpc3RcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5saXN0LmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGJ1bGwgPSBjYXBbMl07XG4gICAgICBpc29yZGVyZWQgPSBidWxsLmxlbmd0aCA+IDE7XG5cbiAgICAgIGxpc3RTdGFydCA9IHtcbiAgICAgICAgdHlwZTogJ2xpc3Rfc3RhcnQnLFxuICAgICAgICBvcmRlcmVkOiBpc29yZGVyZWQsXG4gICAgICAgIHN0YXJ0OiBpc29yZGVyZWQgPyArYnVsbCA6ICcnLFxuICAgICAgICBsb29zZTogZmFsc2VcbiAgICAgIH07XG5cbiAgICAgIHRoaXMudG9rZW5zLnB1c2gobGlzdFN0YXJ0KTtcblxuICAgICAgLy8gR2V0IGVhY2ggdG9wLWxldmVsIGl0ZW0uXG4gICAgICBjYXAgPSBjYXBbMF0ubWF0Y2godGhpcy5ydWxlcy5pdGVtKTtcblxuICAgICAgbGlzdEl0ZW1zID0gW107XG4gICAgICBuZXh0ID0gZmFsc2U7XG4gICAgICBsID0gY2FwLmxlbmd0aDtcbiAgICAgIGkgPSAwO1xuXG4gICAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpdGVtID0gY2FwW2ldO1xuXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgbGlzdCBpdGVtJ3MgYnVsbGV0XG4gICAgICAgIC8vIHNvIGl0IGlzIHNlZW4gYXMgdGhlIG5leHQgdG9rZW4uXG4gICAgICAgIHNwYWNlID0gaXRlbS5sZW5ndGg7XG4gICAgICAgIGl0ZW0gPSBpdGVtLnJlcGxhY2UoL14gKihbKistXXxcXGQrXFwuKSAqLywgJycpO1xuXG4gICAgICAgIC8vIE91dGRlbnQgd2hhdGV2ZXIgdGhlXG4gICAgICAgIC8vIGxpc3QgaXRlbSBjb250YWlucy4gSGFja3kuXG4gICAgICAgIGlmICh+aXRlbS5pbmRleE9mKCdcXG4gJykpIHtcbiAgICAgICAgICBzcGFjZSAtPSBpdGVtLmxlbmd0aDtcbiAgICAgICAgICBpdGVtID0gIXRoaXMub3B0aW9ucy5wZWRhbnRpY1xuICAgICAgICAgICAgPyBpdGVtLnJlcGxhY2UobmV3IFJlZ0V4cCgnXiB7MSwnICsgc3BhY2UgKyAnfScsICdnbScpLCAnJylcbiAgICAgICAgICAgIDogaXRlbS5yZXBsYWNlKC9eIHsxLDR9L2dtLCAnJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZXRlcm1pbmUgd2hldGhlciB0aGUgbmV4dCBsaXN0IGl0ZW0gYmVsb25ncyBoZXJlLlxuICAgICAgICAvLyBCYWNrcGVkYWwgaWYgaXQgZG9lcyBub3QgYmVsb25nIGluIHRoaXMgbGlzdC5cbiAgICAgICAgaWYgKGkgIT09IGwgLSAxKSB7XG4gICAgICAgICAgYiA9IGJsb2NrLmJ1bGxldC5leGVjKGNhcFtpICsgMV0pWzBdO1xuICAgICAgICAgIGlmIChidWxsLmxlbmd0aCA+IDEgPyBiLmxlbmd0aCA9PT0gMVxuICAgICAgICAgICAgOiAoYi5sZW5ndGggPiAxIHx8ICh0aGlzLm9wdGlvbnMuc21hcnRMaXN0cyAmJiBiICE9PSBidWxsKSkpIHtcbiAgICAgICAgICAgIHNyYyA9IGNhcC5zbGljZShpICsgMSkuam9pbignXFxuJykgKyBzcmM7XG4gICAgICAgICAgICBpID0gbCAtIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIHdoZXRoZXIgaXRlbSBpcyBsb29zZSBvciBub3QuXG4gICAgICAgIC8vIFVzZTogLyhefFxcbikoPyEgKVteXFxuXStcXG5cXG4oPyFcXHMqJCkvXG4gICAgICAgIC8vIGZvciBkaXNjb3VudCBiZWhhdmlvci5cbiAgICAgICAgbG9vc2UgPSBuZXh0IHx8IC9cXG5cXG4oPyFcXHMqJCkvLnRlc3QoaXRlbSk7XG4gICAgICAgIGlmIChpICE9PSBsIC0gMSkge1xuICAgICAgICAgIG5leHQgPSBpdGVtLmNoYXJBdChpdGVtLmxlbmd0aCAtIDEpID09PSAnXFxuJztcbiAgICAgICAgICBpZiAoIWxvb3NlKSBsb29zZSA9IG5leHQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobG9vc2UpIHtcbiAgICAgICAgICBsaXN0U3RhcnQubG9vc2UgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIHRhc2sgbGlzdCBpdGVtc1xuICAgICAgICBpc3Rhc2sgPSAvXlxcW1sgeFhdXFxdIC8udGVzdChpdGVtKTtcbiAgICAgICAgaXNjaGVja2VkID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoaXN0YXNrKSB7XG4gICAgICAgICAgaXNjaGVja2VkID0gaXRlbVsxXSAhPT0gJyAnO1xuICAgICAgICAgIGl0ZW0gPSBpdGVtLnJlcGxhY2UoL15cXFtbIHhYXVxcXSArLywgJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgdCA9IHtcbiAgICAgICAgICB0eXBlOiAnbGlzdF9pdGVtX3N0YXJ0JyxcbiAgICAgICAgICB0YXNrOiBpc3Rhc2ssXG4gICAgICAgICAgY2hlY2tlZDogaXNjaGVja2VkLFxuICAgICAgICAgIGxvb3NlOiBsb29zZVxuICAgICAgICB9O1xuXG4gICAgICAgIGxpc3RJdGVtcy5wdXNoKHQpO1xuICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHQpO1xuXG4gICAgICAgIC8vIFJlY3Vyc2UuXG4gICAgICAgIHRoaXMudG9rZW4oaXRlbSwgZmFsc2UpO1xuXG4gICAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICAgIHR5cGU6ICdsaXN0X2l0ZW1fZW5kJ1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxpc3RTdGFydC5sb29zZSkge1xuICAgICAgICBsID0gbGlzdEl0ZW1zLmxlbmd0aDtcbiAgICAgICAgaSA9IDA7XG4gICAgICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgbGlzdEl0ZW1zW2ldLmxvb3NlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2xpc3RfZW5kJ1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGh0bWxcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5odG1sLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiB0aGlzLm9wdGlvbnMuc2FuaXRpemVcbiAgICAgICAgICA/ICdwYXJhZ3JhcGgnXG4gICAgICAgICAgOiAnaHRtbCcsXG4gICAgICAgIHByZTogIXRoaXMub3B0aW9ucy5zYW5pdGl6ZXJcbiAgICAgICAgICAmJiAoY2FwWzFdID09PSAncHJlJyB8fCBjYXBbMV0gPT09ICdzY3JpcHQnIHx8IGNhcFsxXSA9PT0gJ3N0eWxlJyksXG4gICAgICAgIHRleHQ6IHRoaXMub3B0aW9ucy5zYW5pdGl6ZSA/ICh0aGlzLm9wdGlvbnMuc2FuaXRpemVyID8gdGhpcy5vcHRpb25zLnNhbml0aXplcihjYXBbMF0pIDogZXNjYXBlKGNhcFswXSkpIDogY2FwWzBdXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGRlZlxuICAgIGlmICh0b3AgJiYgKGNhcCA9IHRoaXMucnVsZXMuZGVmLmV4ZWMoc3JjKSkpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBpZiAoY2FwWzNdKSBjYXBbM10gPSBjYXBbM10uc3Vic3RyaW5nKDEsIGNhcFszXS5sZW5ndGggLSAxKTtcbiAgICAgIHRhZyA9IGNhcFsxXS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccysvZywgJyAnKTtcbiAgICAgIGlmICghdGhpcy50b2tlbnMubGlua3NbdGFnXSkge1xuICAgICAgICB0aGlzLnRva2Vucy5saW5rc1t0YWddID0ge1xuICAgICAgICAgIGhyZWY6IGNhcFsyXSxcbiAgICAgICAgICB0aXRsZTogY2FwWzNdXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyB0YWJsZSAoZ2ZtKVxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLnRhYmxlLmV4ZWMoc3JjKSkge1xuICAgICAgaXRlbSA9IHtcbiAgICAgICAgdHlwZTogJ3RhYmxlJyxcbiAgICAgICAgaGVhZGVyOiBzcGxpdENlbGxzKGNhcFsxXS5yZXBsYWNlKC9eICp8ICpcXHwgKiQvZywgJycpKSxcbiAgICAgICAgYWxpZ246IGNhcFsyXS5yZXBsYWNlKC9eICp8XFx8ICokL2csICcnKS5zcGxpdCgvICpcXHwgKi8pLFxuICAgICAgICBjZWxsczogY2FwWzNdID8gY2FwWzNdLnJlcGxhY2UoL1xcbiQvLCAnJykuc3BsaXQoJ1xcbicpIDogW11cbiAgICAgIH07XG5cbiAgICAgIGlmIChpdGVtLmhlYWRlci5sZW5ndGggPT09IGl0ZW0uYWxpZ24ubGVuZ3RoKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGl0ZW0uYWxpZ24ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoL14gKi0rOiAqJC8udGVzdChpdGVtLmFsaWduW2ldKSkge1xuICAgICAgICAgICAgaXRlbS5hbGlnbltpXSA9ICdyaWdodCc7XG4gICAgICAgICAgfSBlbHNlIGlmICgvXiAqOi0rOiAqJC8udGVzdChpdGVtLmFsaWduW2ldKSkge1xuICAgICAgICAgICAgaXRlbS5hbGlnbltpXSA9ICdjZW50ZXInO1xuICAgICAgICAgIH0gZWxzZSBpZiAoL14gKjotKyAqJC8udGVzdChpdGVtLmFsaWduW2ldKSkge1xuICAgICAgICAgICAgaXRlbS5hbGlnbltpXSA9ICdsZWZ0JztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXRlbS5hbGlnbltpXSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGl0ZW0uY2VsbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpdGVtLmNlbGxzW2ldID0gc3BsaXRDZWxscyhcbiAgICAgICAgICAgIGl0ZW0uY2VsbHNbaV0ucmVwbGFjZSgvXiAqXFx8ICp8ICpcXHwgKiQvZywgJycpLFxuICAgICAgICAgICAgaXRlbS5oZWFkZXIubGVuZ3RoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudG9rZW5zLnB1c2goaXRlbSk7XG5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gbGhlYWRpbmdcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5saGVhZGluZy5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2hlYWRpbmcnLFxuICAgICAgICBkZXB0aDogY2FwWzJdLmNoYXJBdCgwKSA9PT0gJz0nID8gMSA6IDIsXG4gICAgICAgIHRleHQ6IGNhcFsxXVxuICAgICAgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyB0b3AtbGV2ZWwgcGFyYWdyYXBoXG4gICAgaWYgKHRvcCAmJiAoY2FwID0gdGhpcy5ydWxlcy5wYXJhZ3JhcGguZXhlYyhzcmMpKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAncGFyYWdyYXBoJyxcbiAgICAgICAgdGV4dDogY2FwWzFdLmNoYXJBdChjYXBbMV0ubGVuZ3RoIC0gMSkgPT09ICdcXG4nXG4gICAgICAgICAgPyBjYXBbMV0uc2xpY2UoMCwgLTEpXG4gICAgICAgICAgOiBjYXBbMV1cbiAgICAgIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gdGV4dFxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLnRleHQuZXhlYyhzcmMpKSB7XG4gICAgICAvLyBUb3AtbGV2ZWwgc2hvdWxkIG5ldmVyIHJlYWNoIGhlcmUuXG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgdGV4dDogY2FwWzBdXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChzcmMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW5maW5pdGUgbG9vcCBvbiBieXRlOiAnICsgc3JjLmNoYXJDb2RlQXQoMCkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzLnRva2Vucztcbn07XG5cbi8qKlxuICogSW5saW5lLUxldmVsIEdyYW1tYXJcbiAqL1xuXG52YXIgaW5saW5lID0ge1xuICBlc2NhcGU6IC9eXFxcXChbIVwiIyQlJicoKSorLFxcLS4vOjs8PT4/QFxcW1xcXVxcXFxeX2B7fH1+XSkvLFxuICBhdXRvbGluazogL148KHNjaGVtZTpbXlxcc1xceDAwLVxceDFmPD5dKnxlbWFpbCk+LyxcbiAgdXJsOiBub29wLFxuICB0YWc6ICdeY29tbWVudCdcbiAgICArICd8XjwvW2EtekEtWl1bXFxcXHc6LV0qXFxcXHMqPicgLy8gc2VsZi1jbG9zaW5nIHRhZ1xuICAgICsgJ3xePFthLXpBLVpdW1xcXFx3LV0qKD86YXR0cmlidXRlKSo/XFxcXHMqLz8+JyAvLyBvcGVuIHRhZ1xuICAgICsgJ3xePFxcXFw/W1xcXFxzXFxcXFNdKj9cXFxcPz4nIC8vIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24sIGUuZy4gPD9waHAgPz5cbiAgICArICd8XjwhW2EtekEtWl0rXFxcXHNbXFxcXHNcXFxcU10qPz4nIC8vIGRlY2xhcmF0aW9uLCBlLmcuIDwhRE9DVFlQRSBodG1sPlxuICAgICsgJ3xePCFcXFxcW0NEQVRBXFxcXFtbXFxcXHNcXFxcU10qP1xcXFxdXFxcXF0+JywgLy8gQ0RBVEEgc2VjdGlvblxuICBsaW5rOiAvXiE/XFxbKGxhYmVsKVxcXVxcKFxccyooaHJlZikoPzpcXHMrKHRpdGxlKSk/XFxzKlxcKS8sXG4gIHJlZmxpbms6IC9eIT9cXFsobGFiZWwpXFxdXFxbKD8hXFxzKlxcXSkoKD86XFxcXFtcXFtcXF1dP3xbXlxcW1xcXVxcXFxdKSspXFxdLyxcbiAgbm9saW5rOiAvXiE/XFxbKD8hXFxzKlxcXSkoKD86XFxbW15cXFtcXF1dKlxcXXxcXFxcW1xcW1xcXV18W15cXFtcXF1dKSopXFxdKD86XFxbXFxdKT8vLFxuICBzdHJvbmc6IC9eX18oW15cXHNfXSlfXyg/IV8pfF5cXCpcXCooW15cXHMqXSlcXCpcXCooPyFcXCopfF5fXyhbXlxcc11bXFxzXFxTXSo/W15cXHNdKV9fKD8hXyl8XlxcKlxcKihbXlxcc11bXFxzXFxTXSo/W15cXHNdKVxcKlxcKig/IVxcKikvLFxuICBlbTogL15fKFteXFxzX10pXyg/IV8pfF5cXCooW15cXHMqPFxcW10pXFwqKD8hXFwqKXxeXyhbXlxcczxdW1xcc1xcU10qP1teXFxzX10pXyg/IV98W15cXHNwdW5jdHVhdGlvbl0pfF5fKFteXFxzXzxdW1xcc1xcU10qP1teXFxzXSlfKD8hX3xbXlxcc3B1bmN0dWF0aW9uXSl8XlxcKihbXlxcczxcIl1bXFxzXFxTXSo/W15cXHNcXCpdKVxcKig/IVxcKnxbXlxcc3B1bmN0dWF0aW9uXSl8XlxcKihbXlxccypcIjxcXFtdW1xcc1xcU10qP1teXFxzXSlcXCooPyFcXCopLyxcbiAgY29kZTogL14oYCspKFteYF18W15gXVtcXHNcXFNdKj9bXmBdKVxcMSg/IWApLyxcbiAgYnI6IC9eKCB7Mix9fFxcXFwpXFxuKD8hXFxzKiQpLyxcbiAgZGVsOiBub29wLFxuICB0ZXh0OiAvXihgK3xbXmBdKSg/OltcXHNcXFNdKj8oPzooPz1bXFxcXDwhXFxbYCpdfFxcYl98JCl8W14gXSg/PSB7Mix9XFxuKSl8KD89IHsyLH1cXG4pKS9cbn07XG5cbi8vIGxpc3Qgb2YgcHVuY3R1YXRpb24gbWFya3MgZnJvbSBjb21tb24gbWFyayBzcGVjXG4vLyB3aXRob3V0IGAgYW5kIF0gdG8gd29ya2Fyb3VuZCBSdWxlIDE3IChpbmxpbmUgY29kZSBibG9ja3MvbGlua3MpXG5pbmxpbmUuX3B1bmN0dWF0aW9uID0gJyFcIiMkJSZcXCcoKSorLFxcXFwtLi86Ozw9Pj9AXFxcXFteX3t8fX4nO1xuaW5saW5lLmVtID0gZWRpdChpbmxpbmUuZW0pLnJlcGxhY2UoL3B1bmN0dWF0aW9uL2csIGlubGluZS5fcHVuY3R1YXRpb24pLmdldFJlZ2V4KCk7XG5cbmlubGluZS5fZXNjYXBlcyA9IC9cXFxcKFshXCIjJCUmJygpKissXFwtLi86Ozw9Pj9AXFxbXFxdXFxcXF5fYHt8fX5dKS9nO1xuXG5pbmxpbmUuX3NjaGVtZSA9IC9bYS16QS1aXVthLXpBLVowLTkrLi1dezEsMzF9LztcbmlubGluZS5fZW1haWwgPSAvW2EtekEtWjAtOS4hIyQlJicqKy89P15fYHt8fX4tXSsoQClbYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8oPzpcXC5bYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8pKyg/IVstX10pLztcbmlubGluZS5hdXRvbGluayA9IGVkaXQoaW5saW5lLmF1dG9saW5rKVxuICAucmVwbGFjZSgnc2NoZW1lJywgaW5saW5lLl9zY2hlbWUpXG4gIC5yZXBsYWNlKCdlbWFpbCcsIGlubGluZS5fZW1haWwpXG4gIC5nZXRSZWdleCgpO1xuXG5pbmxpbmUuX2F0dHJpYnV0ZSA9IC9cXHMrW2EtekEtWjpfXVtcXHcuOi1dKig/Olxccyo9XFxzKlwiW15cIl0qXCJ8XFxzKj1cXHMqJ1teJ10qJ3xcXHMqPVxccypbXlxcc1wiJz08PmBdKyk/LztcblxuaW5saW5lLnRhZyA9IGVkaXQoaW5saW5lLnRhZylcbiAgLnJlcGxhY2UoJ2NvbW1lbnQnLCBibG9jay5fY29tbWVudClcbiAgLnJlcGxhY2UoJ2F0dHJpYnV0ZScsIGlubGluZS5fYXR0cmlidXRlKVxuICAuZ2V0UmVnZXgoKTtcblxuaW5saW5lLl9sYWJlbCA9IC8oPzpcXFtbXlxcW1xcXV0qXFxdfFxcXFwufGBbXmBdKmB8W15cXFtcXF1cXFxcYF0pKj8vO1xuaW5saW5lLl9ocmVmID0gLzwoPzpcXFxcWzw+XT98W15cXHM8PlxcXFxdKSo+fFteXFxzXFx4MDAtXFx4MWZdKi87XG5pbmxpbmUuX3RpdGxlID0gL1wiKD86XFxcXFwiP3xbXlwiXFxcXF0pKlwifCcoPzpcXFxcJz98W14nXFxcXF0pKid8XFwoKD86XFxcXFxcKT98W14pXFxcXF0pKlxcKS87XG5cbmlubGluZS5saW5rID0gZWRpdChpbmxpbmUubGluaylcbiAgLnJlcGxhY2UoJ2xhYmVsJywgaW5saW5lLl9sYWJlbClcbiAgLnJlcGxhY2UoJ2hyZWYnLCBpbmxpbmUuX2hyZWYpXG4gIC5yZXBsYWNlKCd0aXRsZScsIGlubGluZS5fdGl0bGUpXG4gIC5nZXRSZWdleCgpO1xuXG5pbmxpbmUucmVmbGluayA9IGVkaXQoaW5saW5lLnJlZmxpbmspXG4gIC5yZXBsYWNlKCdsYWJlbCcsIGlubGluZS5fbGFiZWwpXG4gIC5nZXRSZWdleCgpO1xuXG4vKipcbiAqIE5vcm1hbCBJbmxpbmUgR3JhbW1hclxuICovXG5cbmlubGluZS5ub3JtYWwgPSBtZXJnZSh7fSwgaW5saW5lKTtcblxuLyoqXG4gKiBQZWRhbnRpYyBJbmxpbmUgR3JhbW1hclxuICovXG5cbmlubGluZS5wZWRhbnRpYyA9IG1lcmdlKHt9LCBpbmxpbmUubm9ybWFsLCB7XG4gIHN0cm9uZzogL15fXyg/PVxcUykoW1xcc1xcU10qP1xcUylfXyg/IV8pfF5cXCpcXCooPz1cXFMpKFtcXHNcXFNdKj9cXFMpXFwqXFwqKD8hXFwqKS8sXG4gIGVtOiAvXl8oPz1cXFMpKFtcXHNcXFNdKj9cXFMpXyg/IV8pfF5cXCooPz1cXFMpKFtcXHNcXFNdKj9cXFMpXFwqKD8hXFwqKS8sXG4gIGxpbms6IGVkaXQoL14hP1xcWyhsYWJlbClcXF1cXCgoLio/KVxcKS8pXG4gICAgLnJlcGxhY2UoJ2xhYmVsJywgaW5saW5lLl9sYWJlbClcbiAgICAuZ2V0UmVnZXgoKSxcbiAgcmVmbGluazogZWRpdCgvXiE/XFxbKGxhYmVsKVxcXVxccypcXFsoW15cXF1dKilcXF0vKVxuICAgIC5yZXBsYWNlKCdsYWJlbCcsIGlubGluZS5fbGFiZWwpXG4gICAgLmdldFJlZ2V4KClcbn0pO1xuXG4vKipcbiAqIEdGTSBJbmxpbmUgR3JhbW1hclxuICovXG5cbmlubGluZS5nZm0gPSBtZXJnZSh7fSwgaW5saW5lLm5vcm1hbCwge1xuICBlc2NhcGU6IGVkaXQoaW5saW5lLmVzY2FwZSkucmVwbGFjZSgnXSknLCAnfnxdKScpLmdldFJlZ2V4KCksXG4gIF9leHRlbmRlZF9lbWFpbDogL1tBLVphLXowLTkuXystXSsoQClbYS16QS1aMC05LV9dKyg/OlxcLlthLXpBLVowLTktX10qW2EtekEtWjAtOV0pKyg/IVstX10pLyxcbiAgdXJsOiAvXigoPzpmdHB8aHR0cHM/KTpcXC9cXC98d3d3XFwuKSg/OlthLXpBLVowLTlcXC1dK1xcLj8pK1teXFxzPF0qfF5lbWFpbC8sXG4gIF9iYWNrcGVkYWw6IC8oPzpbXj8hLiw6OypffigpJl0rfFxcKFteKV0qXFwpfCYoPyFbYS16QS1aMC05XSs7JCl8Wz8hLiw6OypffildKyg/ISQpKSsvLFxuICBkZWw6IC9efisoPz1cXFMpKFtcXHNcXFNdKj9cXFMpfisvLFxuICB0ZXh0OiAvXihgK3xbXmBdKSg/OltcXHNcXFNdKj8oPzooPz1bXFxcXDwhXFxbYCp+XXxcXGJffGh0dHBzPzpcXC9cXC98ZnRwOlxcL1xcL3x3d3dcXC58JCl8W14gXSg/PSB7Mix9XFxuKXxbXmEtekEtWjAtOS4hIyQlJicqK1xcLz0/X2B7XFx8fX4tXSg/PVthLXpBLVowLTkuISMkJSYnKitcXC89P19ge1xcfH1+LV0rQCkpfCg/PSB7Mix9XFxufFthLXpBLVowLTkuISMkJSYnKitcXC89P19ge1xcfH1+LV0rQCkpL1xufSk7XG5cbmlubGluZS5nZm0udXJsID0gZWRpdChpbmxpbmUuZ2ZtLnVybCwgJ2knKVxuICAucmVwbGFjZSgnZW1haWwnLCBpbmxpbmUuZ2ZtLl9leHRlbmRlZF9lbWFpbClcbiAgLmdldFJlZ2V4KCk7XG4vKipcbiAqIEdGTSArIExpbmUgQnJlYWtzIElubGluZSBHcmFtbWFyXG4gKi9cblxuaW5saW5lLmJyZWFrcyA9IG1lcmdlKHt9LCBpbmxpbmUuZ2ZtLCB7XG4gIGJyOiBlZGl0KGlubGluZS5icikucmVwbGFjZSgnezIsfScsICcqJykuZ2V0UmVnZXgoKSxcbiAgdGV4dDogZWRpdChpbmxpbmUuZ2ZtLnRleHQpXG4gICAgLnJlcGxhY2UoJ1xcXFxiXycsICdcXFxcYl98IHsyLH1cXFxcbicpXG4gICAgLnJlcGxhY2UoL1xcezIsXFx9L2csICcqJylcbiAgICAuZ2V0UmVnZXgoKVxufSk7XG5cbi8qKlxuICogSW5saW5lIExleGVyICYgQ29tcGlsZXJcbiAqL1xuXG5mdW5jdGlvbiBJbmxpbmVMZXhlcihsaW5rcywgb3B0aW9ucykge1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IG1hcmtlZC5kZWZhdWx0cztcbiAgdGhpcy5saW5rcyA9IGxpbmtzO1xuICB0aGlzLnJ1bGVzID0gaW5saW5lLm5vcm1hbDtcbiAgdGhpcy5yZW5kZXJlciA9IHRoaXMub3B0aW9ucy5yZW5kZXJlciB8fCBuZXcgUmVuZGVyZXIoKTtcbiAgdGhpcy5yZW5kZXJlci5vcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gIGlmICghdGhpcy5saW5rcykge1xuICAgIHRocm93IG5ldyBFcnJvcignVG9rZW5zIGFycmF5IHJlcXVpcmVzIGEgYGxpbmtzYCBwcm9wZXJ0eS4nKTtcbiAgfVxuXG4gIGlmICh0aGlzLm9wdGlvbnMucGVkYW50aWMpIHtcbiAgICB0aGlzLnJ1bGVzID0gaW5saW5lLnBlZGFudGljO1xuICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5nZm0pIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmJyZWFrcykge1xuICAgICAgdGhpcy5ydWxlcyA9IGlubGluZS5icmVha3M7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucnVsZXMgPSBpbmxpbmUuZ2ZtO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEV4cG9zZSBJbmxpbmUgUnVsZXNcbiAqL1xuXG5JbmxpbmVMZXhlci5ydWxlcyA9IGlubGluZTtcblxuLyoqXG4gKiBTdGF0aWMgTGV4aW5nL0NvbXBpbGluZyBNZXRob2RcbiAqL1xuXG5JbmxpbmVMZXhlci5vdXRwdXQgPSBmdW5jdGlvbihzcmMsIGxpbmtzLCBvcHRpb25zKSB7XG4gIHZhciBpbmxpbmUgPSBuZXcgSW5saW5lTGV4ZXIobGlua3MsIG9wdGlvbnMpO1xuICByZXR1cm4gaW5saW5lLm91dHB1dChzcmMpO1xufTtcblxuLyoqXG4gKiBMZXhpbmcvQ29tcGlsaW5nXG4gKi9cblxuSW5saW5lTGV4ZXIucHJvdG90eXBlLm91dHB1dCA9IGZ1bmN0aW9uKHNyYykge1xuICB2YXIgb3V0ID0gJycsXG4gICAgICBsaW5rLFxuICAgICAgdGV4dCxcbiAgICAgIGhyZWYsXG4gICAgICB0aXRsZSxcbiAgICAgIGNhcCxcbiAgICAgIHByZXZDYXBaZXJvO1xuXG4gIHdoaWxlIChzcmMpIHtcbiAgICAvLyBlc2NhcGVcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5lc2NhcGUuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgb3V0ICs9IGVzY2FwZShjYXBbMV0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gdGFnXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMudGFnLmV4ZWMoc3JjKSkge1xuICAgICAgaWYgKCF0aGlzLmluTGluayAmJiAvXjxhIC9pLnRlc3QoY2FwWzBdKSkge1xuICAgICAgICB0aGlzLmluTGluayA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaW5MaW5rICYmIC9ePFxcL2E+L2kudGVzdChjYXBbMF0pKSB7XG4gICAgICAgIHRoaXMuaW5MaW5rID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuaW5SYXdCbG9jayAmJiAvXjwocHJlfGNvZGV8a2JkfHNjcmlwdCkoXFxzfD4pL2kudGVzdChjYXBbMF0pKSB7XG4gICAgICAgIHRoaXMuaW5SYXdCbG9jayA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaW5SYXdCbG9jayAmJiAvXjxcXC8ocHJlfGNvZGV8a2JkfHNjcmlwdCkoXFxzfD4pL2kudGVzdChjYXBbMF0pKSB7XG4gICAgICAgIHRoaXMuaW5SYXdCbG9jayA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgb3V0ICs9IHRoaXMub3B0aW9ucy5zYW5pdGl6ZVxuICAgICAgICA/IHRoaXMub3B0aW9ucy5zYW5pdGl6ZXJcbiAgICAgICAgICA/IHRoaXMub3B0aW9ucy5zYW5pdGl6ZXIoY2FwWzBdKVxuICAgICAgICAgIDogZXNjYXBlKGNhcFswXSlcbiAgICAgICAgOiBjYXBbMF07XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBsaW5rXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMubGluay5leGVjKHNyYykpIHtcbiAgICAgIHZhciBsYXN0UGFyZW5JbmRleCA9IGZpbmRDbG9zaW5nQnJhY2tldChjYXBbMl0sICcoKScpO1xuICAgICAgaWYgKGxhc3RQYXJlbkluZGV4ID4gLTEpIHtcbiAgICAgICAgdmFyIGxpbmtMZW4gPSA0ICsgY2FwWzFdLmxlbmd0aCArIGxhc3RQYXJlbkluZGV4O1xuICAgICAgICBjYXBbMl0gPSBjYXBbMl0uc3Vic3RyaW5nKDAsIGxhc3RQYXJlbkluZGV4KTtcbiAgICAgICAgY2FwWzBdID0gY2FwWzBdLnN1YnN0cmluZygwLCBsaW5rTGVuKS50cmltKCk7XG4gICAgICAgIGNhcFszXSA9ICcnO1xuICAgICAgfVxuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMuaW5MaW5rID0gdHJ1ZTtcbiAgICAgIGhyZWYgPSBjYXBbMl07XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7XG4gICAgICAgIGxpbmsgPSAvXihbXidcIl0qW15cXHNdKVxccysoWydcIl0pKC4qKVxcMi8uZXhlYyhocmVmKTtcblxuICAgICAgICBpZiAobGluaykge1xuICAgICAgICAgIGhyZWYgPSBsaW5rWzFdO1xuICAgICAgICAgIHRpdGxlID0gbGlua1szXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aXRsZSA9ICcnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aXRsZSA9IGNhcFszXSA/IGNhcFszXS5zbGljZSgxLCAtMSkgOiAnJztcbiAgICAgIH1cbiAgICAgIGhyZWYgPSBocmVmLnRyaW0oKS5yZXBsYWNlKC9ePChbXFxzXFxTXSopPiQvLCAnJDEnKTtcbiAgICAgIG91dCArPSB0aGlzLm91dHB1dExpbmsoY2FwLCB7XG4gICAgICAgIGhyZWY6IElubGluZUxleGVyLmVzY2FwZXMoaHJlZiksXG4gICAgICAgIHRpdGxlOiBJbmxpbmVMZXhlci5lc2NhcGVzKHRpdGxlKVxuICAgICAgfSk7XG4gICAgICB0aGlzLmluTGluayA9IGZhbHNlO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gcmVmbGluaywgbm9saW5rXG4gICAgaWYgKChjYXAgPSB0aGlzLnJ1bGVzLnJlZmxpbmsuZXhlYyhzcmMpKVxuICAgICAgICB8fCAoY2FwID0gdGhpcy5ydWxlcy5ub2xpbmsuZXhlYyhzcmMpKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGxpbmsgPSAoY2FwWzJdIHx8IGNhcFsxXSkucmVwbGFjZSgvXFxzKy9nLCAnICcpO1xuICAgICAgbGluayA9IHRoaXMubGlua3NbbGluay50b0xvd2VyQ2FzZSgpXTtcbiAgICAgIGlmICghbGluayB8fCAhbGluay5ocmVmKSB7XG4gICAgICAgIG91dCArPSBjYXBbMF0uY2hhckF0KDApO1xuICAgICAgICBzcmMgPSBjYXBbMF0uc3Vic3RyaW5nKDEpICsgc3JjO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5MaW5rID0gdHJ1ZTtcbiAgICAgIG91dCArPSB0aGlzLm91dHB1dExpbmsoY2FwLCBsaW5rKTtcbiAgICAgIHRoaXMuaW5MaW5rID0gZmFsc2U7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBzdHJvbmdcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5zdHJvbmcuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIuc3Ryb25nKHRoaXMub3V0cHV0KGNhcFs0XSB8fCBjYXBbM10gfHwgY2FwWzJdIHx8IGNhcFsxXSkpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gZW1cbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5lbS5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5lbSh0aGlzLm91dHB1dChjYXBbNl0gfHwgY2FwWzVdIHx8IGNhcFs0XSB8fCBjYXBbM10gfHwgY2FwWzJdIHx8IGNhcFsxXSkpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gY29kZVxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmNvZGUuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIuY29kZXNwYW4oZXNjYXBlKGNhcFsyXS50cmltKCksIHRydWUpKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGJyXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuYnIuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIuYnIoKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGRlbCAoZ2ZtKVxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmRlbC5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5kZWwodGhpcy5vdXRwdXQoY2FwWzFdKSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBhdXRvbGlua1xuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmF1dG9saW5rLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGlmIChjYXBbMl0gPT09ICdAJykge1xuICAgICAgICB0ZXh0ID0gZXNjYXBlKHRoaXMubWFuZ2xlKGNhcFsxXSkpO1xuICAgICAgICBocmVmID0gJ21haWx0bzonICsgdGV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRleHQgPSBlc2NhcGUoY2FwWzFdKTtcbiAgICAgICAgaHJlZiA9IHRleHQ7XG4gICAgICB9XG4gICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5saW5rKGhyZWYsIG51bGwsIHRleHQpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gdXJsIChnZm0pXG4gICAgaWYgKCF0aGlzLmluTGluayAmJiAoY2FwID0gdGhpcy5ydWxlcy51cmwuZXhlYyhzcmMpKSkge1xuICAgICAgaWYgKGNhcFsyXSA9PT0gJ0AnKSB7XG4gICAgICAgIHRleHQgPSBlc2NhcGUoY2FwWzBdKTtcbiAgICAgICAgaHJlZiA9ICdtYWlsdG86JyArIHRleHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkbyBleHRlbmRlZCBhdXRvbGluayBwYXRoIHZhbGlkYXRpb25cbiAgICAgICAgZG8ge1xuICAgICAgICAgIHByZXZDYXBaZXJvID0gY2FwWzBdO1xuICAgICAgICAgIGNhcFswXSA9IHRoaXMucnVsZXMuX2JhY2twZWRhbC5leGVjKGNhcFswXSlbMF07XG4gICAgICAgIH0gd2hpbGUgKHByZXZDYXBaZXJvICE9PSBjYXBbMF0pO1xuICAgICAgICB0ZXh0ID0gZXNjYXBlKGNhcFswXSk7XG4gICAgICAgIGlmIChjYXBbMV0gPT09ICd3d3cuJykge1xuICAgICAgICAgIGhyZWYgPSAnaHR0cDovLycgKyB0ZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhyZWYgPSB0ZXh0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIubGluayhocmVmLCBudWxsLCB0ZXh0KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHRleHRcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy50ZXh0LmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGlmICh0aGlzLmluUmF3QmxvY2spIHtcbiAgICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIudGV4dCh0aGlzLm9wdGlvbnMuc2FuaXRpemUgPyAodGhpcy5vcHRpb25zLnNhbml0aXplciA/IHRoaXMub3B0aW9ucy5zYW5pdGl6ZXIoY2FwWzBdKSA6IGVzY2FwZShjYXBbMF0pKSA6IGNhcFswXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci50ZXh0KGVzY2FwZSh0aGlzLnNtYXJ0eXBhbnRzKGNhcFswXSkpKTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChzcmMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW5maW5pdGUgbG9vcCBvbiBieXRlOiAnICsgc3JjLmNoYXJDb2RlQXQoMCkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59O1xuXG5JbmxpbmVMZXhlci5lc2NhcGVzID0gZnVuY3Rpb24odGV4dCkge1xuICByZXR1cm4gdGV4dCA/IHRleHQucmVwbGFjZShJbmxpbmVMZXhlci5ydWxlcy5fZXNjYXBlcywgJyQxJykgOiB0ZXh0O1xufTtcblxuLyoqXG4gKiBDb21waWxlIExpbmtcbiAqL1xuXG5JbmxpbmVMZXhlci5wcm90b3R5cGUub3V0cHV0TGluayA9IGZ1bmN0aW9uKGNhcCwgbGluaykge1xuICB2YXIgaHJlZiA9IGxpbmsuaHJlZixcbiAgICAgIHRpdGxlID0gbGluay50aXRsZSA/IGVzY2FwZShsaW5rLnRpdGxlKSA6IG51bGw7XG5cbiAgcmV0dXJuIGNhcFswXS5jaGFyQXQoMCkgIT09ICchJ1xuICAgID8gdGhpcy5yZW5kZXJlci5saW5rKGhyZWYsIHRpdGxlLCB0aGlzLm91dHB1dChjYXBbMV0pKVxuICAgIDogdGhpcy5yZW5kZXJlci5pbWFnZShocmVmLCB0aXRsZSwgZXNjYXBlKGNhcFsxXSkpO1xufTtcblxuLyoqXG4gKiBTbWFydHlwYW50cyBUcmFuc2Zvcm1hdGlvbnNcbiAqL1xuXG5JbmxpbmVMZXhlci5wcm90b3R5cGUuc21hcnR5cGFudHMgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIGlmICghdGhpcy5vcHRpb25zLnNtYXJ0eXBhbnRzKSByZXR1cm4gdGV4dDtcbiAgcmV0dXJuIHRleHRcbiAgICAvLyBlbS1kYXNoZXNcbiAgICAucmVwbGFjZSgvLS0tL2csICdcXHUyMDE0JylcbiAgICAvLyBlbi1kYXNoZXNcbiAgICAucmVwbGFjZSgvLS0vZywgJ1xcdTIwMTMnKVxuICAgIC8vIG9wZW5pbmcgc2luZ2xlc1xuICAgIC5yZXBsYWNlKC8oXnxbLVxcdTIwMTQvKFxcW3tcIlxcc10pJy9nLCAnJDFcXHUyMDE4JylcbiAgICAvLyBjbG9zaW5nIHNpbmdsZXMgJiBhcG9zdHJvcGhlc1xuICAgIC5yZXBsYWNlKC8nL2csICdcXHUyMDE5JylcbiAgICAvLyBvcGVuaW5nIGRvdWJsZXNcbiAgICAucmVwbGFjZSgvKF58Wy1cXHUyMDE0LyhcXFt7XFx1MjAxOFxcc10pXCIvZywgJyQxXFx1MjAxYycpXG4gICAgLy8gY2xvc2luZyBkb3VibGVzXG4gICAgLnJlcGxhY2UoL1wiL2csICdcXHUyMDFkJylcbiAgICAvLyBlbGxpcHNlc1xuICAgIC5yZXBsYWNlKC9cXC57M30vZywgJ1xcdTIwMjYnKTtcbn07XG5cbi8qKlxuICogTWFuZ2xlIExpbmtzXG4gKi9cblxuSW5saW5lTGV4ZXIucHJvdG90eXBlLm1hbmdsZSA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgaWYgKCF0aGlzLm9wdGlvbnMubWFuZ2xlKSByZXR1cm4gdGV4dDtcbiAgdmFyIG91dCA9ICcnLFxuICAgICAgbCA9IHRleHQubGVuZ3RoLFxuICAgICAgaSA9IDAsXG4gICAgICBjaDtcblxuICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgIGNoID0gdGV4dC5jaGFyQ29kZUF0KGkpO1xuICAgIGlmIChNYXRoLnJhbmRvbSgpID4gMC41KSB7XG4gICAgICBjaCA9ICd4JyArIGNoLnRvU3RyaW5nKDE2KTtcbiAgICB9XG4gICAgb3V0ICs9ICcmIycgKyBjaCArICc7JztcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFJlbmRlcmVyXG4gKi9cblxuZnVuY3Rpb24gUmVuZGVyZXIob3B0aW9ucykge1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IG1hcmtlZC5kZWZhdWx0cztcbn1cblxuUmVuZGVyZXIucHJvdG90eXBlLmNvZGUgPSBmdW5jdGlvbihjb2RlLCBpbmZvc3RyaW5nLCBlc2NhcGVkKSB7XG4gIHZhciBsYW5nID0gKGluZm9zdHJpbmcgfHwgJycpLm1hdGNoKC9cXFMqLylbMF07XG4gIGlmICh0aGlzLm9wdGlvbnMuaGlnaGxpZ2h0KSB7XG4gICAgdmFyIG91dCA9IHRoaXMub3B0aW9ucy5oaWdobGlnaHQoY29kZSwgbGFuZyk7XG4gICAgaWYgKG91dCAhPSBudWxsICYmIG91dCAhPT0gY29kZSkge1xuICAgICAgZXNjYXBlZCA9IHRydWU7XG4gICAgICBjb2RlID0gb3V0O1xuICAgIH1cbiAgfVxuXG4gIGlmICghbGFuZykge1xuICAgIHJldHVybiAnPHByZT48Y29kZT4nXG4gICAgICArIChlc2NhcGVkID8gY29kZSA6IGVzY2FwZShjb2RlLCB0cnVlKSlcbiAgICAgICsgJzwvY29kZT48L3ByZT4nO1xuICB9XG5cbiAgcmV0dXJuICc8cHJlPjxjb2RlIGNsYXNzPVwiJ1xuICAgICsgdGhpcy5vcHRpb25zLmxhbmdQcmVmaXhcbiAgICArIGVzY2FwZShsYW5nLCB0cnVlKVxuICAgICsgJ1wiPidcbiAgICArIChlc2NhcGVkID8gY29kZSA6IGVzY2FwZShjb2RlLCB0cnVlKSlcbiAgICArICc8L2NvZGU+PC9wcmU+XFxuJztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5ibG9ja3F1b3RlID0gZnVuY3Rpb24ocXVvdGUpIHtcbiAgcmV0dXJuICc8YmxvY2txdW90ZT5cXG4nICsgcXVvdGUgKyAnPC9ibG9ja3F1b3RlPlxcbic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUuaHRtbCA9IGZ1bmN0aW9uKGh0bWwpIHtcbiAgcmV0dXJuIGh0bWw7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUuaGVhZGluZyA9IGZ1bmN0aW9uKHRleHQsIGxldmVsLCByYXcsIHNsdWdnZXIpIHtcbiAgaWYgKHRoaXMub3B0aW9ucy5oZWFkZXJJZHMpIHtcbiAgICByZXR1cm4gJzxoJ1xuICAgICAgKyBsZXZlbFxuICAgICAgKyAnIGlkPVwiJ1xuICAgICAgKyB0aGlzLm9wdGlvbnMuaGVhZGVyUHJlZml4XG4gICAgICArIHNsdWdnZXIuc2x1ZyhyYXcpXG4gICAgICArICdcIj4nXG4gICAgICArIHRleHRcbiAgICAgICsgJzwvaCdcbiAgICAgICsgbGV2ZWxcbiAgICAgICsgJz5cXG4nO1xuICB9XG4gIC8vIGlnbm9yZSBJRHNcbiAgcmV0dXJuICc8aCcgKyBsZXZlbCArICc+JyArIHRleHQgKyAnPC9oJyArIGxldmVsICsgJz5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmhyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm9wdGlvbnMueGh0bWwgPyAnPGhyLz5cXG4nIDogJzxocj5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmxpc3QgPSBmdW5jdGlvbihib2R5LCBvcmRlcmVkLCBzdGFydCkge1xuICB2YXIgdHlwZSA9IG9yZGVyZWQgPyAnb2wnIDogJ3VsJyxcbiAgICAgIHN0YXJ0YXR0ID0gKG9yZGVyZWQgJiYgc3RhcnQgIT09IDEpID8gKCcgc3RhcnQ9XCInICsgc3RhcnQgKyAnXCInKSA6ICcnO1xuICByZXR1cm4gJzwnICsgdHlwZSArIHN0YXJ0YXR0ICsgJz5cXG4nICsgYm9keSArICc8LycgKyB0eXBlICsgJz5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmxpc3RpdGVtID0gZnVuY3Rpb24odGV4dCkge1xuICByZXR1cm4gJzxsaT4nICsgdGV4dCArICc8L2xpPlxcbic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUuY2hlY2tib3ggPSBmdW5jdGlvbihjaGVja2VkKSB7XG4gIHJldHVybiAnPGlucHV0ICdcbiAgICArIChjaGVja2VkID8gJ2NoZWNrZWQ9XCJcIiAnIDogJycpXG4gICAgKyAnZGlzYWJsZWQ9XCJcIiB0eXBlPVwiY2hlY2tib3hcIidcbiAgICArICh0aGlzLm9wdGlvbnMueGh0bWwgPyAnIC8nIDogJycpXG4gICAgKyAnPiAnO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLnBhcmFncmFwaCA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuICc8cD4nICsgdGV4dCArICc8L3A+XFxuJztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS50YWJsZSA9IGZ1bmN0aW9uKGhlYWRlciwgYm9keSkge1xuICBpZiAoYm9keSkgYm9keSA9ICc8dGJvZHk+JyArIGJvZHkgKyAnPC90Ym9keT4nO1xuXG4gIHJldHVybiAnPHRhYmxlPlxcbidcbiAgICArICc8dGhlYWQ+XFxuJ1xuICAgICsgaGVhZGVyXG4gICAgKyAnPC90aGVhZD5cXG4nXG4gICAgKyBib2R5XG4gICAgKyAnPC90YWJsZT5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLnRhYmxlcm93ID0gZnVuY3Rpb24oY29udGVudCkge1xuICByZXR1cm4gJzx0cj5cXG4nICsgY29udGVudCArICc8L3RyPlxcbic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUudGFibGVjZWxsID0gZnVuY3Rpb24oY29udGVudCwgZmxhZ3MpIHtcbiAgdmFyIHR5cGUgPSBmbGFncy5oZWFkZXIgPyAndGgnIDogJ3RkJztcbiAgdmFyIHRhZyA9IGZsYWdzLmFsaWduXG4gICAgPyAnPCcgKyB0eXBlICsgJyBhbGlnbj1cIicgKyBmbGFncy5hbGlnbiArICdcIj4nXG4gICAgOiAnPCcgKyB0eXBlICsgJz4nO1xuICByZXR1cm4gdGFnICsgY29udGVudCArICc8LycgKyB0eXBlICsgJz5cXG4nO1xufTtcblxuLy8gc3BhbiBsZXZlbCByZW5kZXJlclxuUmVuZGVyZXIucHJvdG90eXBlLnN0cm9uZyA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuICc8c3Ryb25nPicgKyB0ZXh0ICsgJzwvc3Ryb25nPic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUuZW0gPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHJldHVybiAnPGVtPicgKyB0ZXh0ICsgJzwvZW0+Jztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5jb2Rlc3BhbiA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuICc8Y29kZT4nICsgdGV4dCArICc8L2NvZGU+Jztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5iciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5vcHRpb25zLnhodG1sID8gJzxici8+JyA6ICc8YnI+Jztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5kZWwgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHJldHVybiAnPGRlbD4nICsgdGV4dCArICc8L2RlbD4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmxpbmsgPSBmdW5jdGlvbihocmVmLCB0aXRsZSwgdGV4dCkge1xuICBocmVmID0gY2xlYW5VcmwodGhpcy5vcHRpb25zLnNhbml0aXplLCB0aGlzLm9wdGlvbnMuYmFzZVVybCwgaHJlZik7XG4gIGlmIChocmVmID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cbiAgdmFyIG91dCA9ICc8YSBocmVmPVwiJyArIGVzY2FwZShocmVmKSArICdcIic7XG4gIGlmICh0aXRsZSkge1xuICAgIG91dCArPSAnIHRpdGxlPVwiJyArIHRpdGxlICsgJ1wiJztcbiAgfVxuICBvdXQgKz0gJz4nICsgdGV4dCArICc8L2E+JztcbiAgcmV0dXJuIG91dDtcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5pbWFnZSA9IGZ1bmN0aW9uKGhyZWYsIHRpdGxlLCB0ZXh0KSB7XG4gIGhyZWYgPSBjbGVhblVybCh0aGlzLm9wdGlvbnMuc2FuaXRpemUsIHRoaXMub3B0aW9ucy5iYXNlVXJsLCBocmVmKTtcbiAgaWYgKGhyZWYgPT09IG51bGwpIHtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuXG4gIHZhciBvdXQgPSAnPGltZyBzcmM9XCInICsgaHJlZiArICdcIiBhbHQ9XCInICsgdGV4dCArICdcIic7XG4gIGlmICh0aXRsZSkge1xuICAgIG91dCArPSAnIHRpdGxlPVwiJyArIHRpdGxlICsgJ1wiJztcbiAgfVxuICBvdXQgKz0gdGhpcy5vcHRpb25zLnhodG1sID8gJy8+JyA6ICc+JztcbiAgcmV0dXJuIG91dDtcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS50ZXh0ID0gZnVuY3Rpb24odGV4dCkge1xuICByZXR1cm4gdGV4dDtcbn07XG5cbi8qKlxuICogVGV4dFJlbmRlcmVyXG4gKiByZXR1cm5zIG9ubHkgdGhlIHRleHR1YWwgcGFydCBvZiB0aGUgdG9rZW5cbiAqL1xuXG5mdW5jdGlvbiBUZXh0UmVuZGVyZXIoKSB7fVxuXG4vLyBubyBuZWVkIGZvciBibG9jayBsZXZlbCByZW5kZXJlcnNcblxuVGV4dFJlbmRlcmVyLnByb3RvdHlwZS5zdHJvbmcgPVxuVGV4dFJlbmRlcmVyLnByb3RvdHlwZS5lbSA9XG5UZXh0UmVuZGVyZXIucHJvdG90eXBlLmNvZGVzcGFuID1cblRleHRSZW5kZXJlci5wcm90b3R5cGUuZGVsID1cblRleHRSZW5kZXJlci5wcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuIHRleHQ7XG59O1xuXG5UZXh0UmVuZGVyZXIucHJvdG90eXBlLmxpbmsgPVxuVGV4dFJlbmRlcmVyLnByb3RvdHlwZS5pbWFnZSA9IGZ1bmN0aW9uKGhyZWYsIHRpdGxlLCB0ZXh0KSB7XG4gIHJldHVybiAnJyArIHRleHQ7XG59O1xuXG5UZXh0UmVuZGVyZXIucHJvdG90eXBlLmJyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnJztcbn07XG5cbi8qKlxuICogUGFyc2luZyAmIENvbXBpbGluZ1xuICovXG5cbmZ1bmN0aW9uIFBhcnNlcihvcHRpb25zKSB7XG4gIHRoaXMudG9rZW5zID0gW107XG4gIHRoaXMudG9rZW4gPSBudWxsO1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IG1hcmtlZC5kZWZhdWx0cztcbiAgdGhpcy5vcHRpb25zLnJlbmRlcmVyID0gdGhpcy5vcHRpb25zLnJlbmRlcmVyIHx8IG5ldyBSZW5kZXJlcigpO1xuICB0aGlzLnJlbmRlcmVyID0gdGhpcy5vcHRpb25zLnJlbmRlcmVyO1xuICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gIHRoaXMuc2x1Z2dlciA9IG5ldyBTbHVnZ2VyKCk7XG59XG5cbi8qKlxuICogU3RhdGljIFBhcnNlIE1ldGhvZFxuICovXG5cblBhcnNlci5wYXJzZSA9IGZ1bmN0aW9uKHNyYywgb3B0aW9ucykge1xuICB2YXIgcGFyc2VyID0gbmV3IFBhcnNlcihvcHRpb25zKTtcbiAgcmV0dXJuIHBhcnNlci5wYXJzZShzcmMpO1xufTtcblxuLyoqXG4gKiBQYXJzZSBMb29wXG4gKi9cblxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uKHNyYykge1xuICB0aGlzLmlubGluZSA9IG5ldyBJbmxpbmVMZXhlcihzcmMubGlua3MsIHRoaXMub3B0aW9ucyk7XG4gIC8vIHVzZSBhbiBJbmxpbmVMZXhlciB3aXRoIGEgVGV4dFJlbmRlcmVyIHRvIGV4dHJhY3QgcHVyZSB0ZXh0XG4gIHRoaXMuaW5saW5lVGV4dCA9IG5ldyBJbmxpbmVMZXhlcihcbiAgICBzcmMubGlua3MsXG4gICAgbWVyZ2Uoe30sIHRoaXMub3B0aW9ucywgeyByZW5kZXJlcjogbmV3IFRleHRSZW5kZXJlcigpIH0pXG4gICk7XG4gIHRoaXMudG9rZW5zID0gc3JjLnJldmVyc2UoKTtcblxuICB2YXIgb3V0ID0gJyc7XG4gIHdoaWxlICh0aGlzLm5leHQoKSkge1xuICAgIG91dCArPSB0aGlzLnRvaygpO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogTmV4dCBUb2tlblxuICovXG5cblBhcnNlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnRva2VuID0gdGhpcy50b2tlbnMucG9wKCk7XG4gIHJldHVybiB0aGlzLnRva2VuO1xufTtcblxuLyoqXG4gKiBQcmV2aWV3IE5leHQgVG9rZW5cbiAqL1xuXG5QYXJzZXIucHJvdG90eXBlLnBlZWsgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMudG9rZW5zW3RoaXMudG9rZW5zLmxlbmd0aCAtIDFdIHx8IDA7XG59O1xuXG4vKipcbiAqIFBhcnNlIFRleHQgVG9rZW5zXG4gKi9cblxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZVRleHQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGJvZHkgPSB0aGlzLnRva2VuLnRleHQ7XG5cbiAgd2hpbGUgKHRoaXMucGVlaygpLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgIGJvZHkgKz0gJ1xcbicgKyB0aGlzLm5leHQoKS50ZXh0O1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuaW5saW5lLm91dHB1dChib2R5KTtcbn07XG5cbi8qKlxuICogUGFyc2UgQ3VycmVudCBUb2tlblxuICovXG5cblBhcnNlci5wcm90b3R5cGUudG9rID0gZnVuY3Rpb24oKSB7XG4gIHN3aXRjaCAodGhpcy50b2tlbi50eXBlKSB7XG4gICAgY2FzZSAnc3BhY2UnOiB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGNhc2UgJ2hyJzoge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuaHIoKTtcbiAgICB9XG4gICAgY2FzZSAnaGVhZGluZyc6IHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmhlYWRpbmcoXG4gICAgICAgIHRoaXMuaW5saW5lLm91dHB1dCh0aGlzLnRva2VuLnRleHQpLFxuICAgICAgICB0aGlzLnRva2VuLmRlcHRoLFxuICAgICAgICB1bmVzY2FwZSh0aGlzLmlubGluZVRleHQub3V0cHV0KHRoaXMudG9rZW4udGV4dCkpLFxuICAgICAgICB0aGlzLnNsdWdnZXIpO1xuICAgIH1cbiAgICBjYXNlICdjb2RlJzoge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuY29kZSh0aGlzLnRva2VuLnRleHQsXG4gICAgICAgIHRoaXMudG9rZW4ubGFuZyxcbiAgICAgICAgdGhpcy50b2tlbi5lc2NhcGVkKTtcbiAgICB9XG4gICAgY2FzZSAndGFibGUnOiB7XG4gICAgICB2YXIgaGVhZGVyID0gJycsXG4gICAgICAgICAgYm9keSA9ICcnLFxuICAgICAgICAgIGksXG4gICAgICAgICAgcm93LFxuICAgICAgICAgIGNlbGwsXG4gICAgICAgICAgajtcblxuICAgICAgLy8gaGVhZGVyXG4gICAgICBjZWxsID0gJyc7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy50b2tlbi5oZWFkZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2VsbCArPSB0aGlzLnJlbmRlcmVyLnRhYmxlY2VsbChcbiAgICAgICAgICB0aGlzLmlubGluZS5vdXRwdXQodGhpcy50b2tlbi5oZWFkZXJbaV0pLFxuICAgICAgICAgIHsgaGVhZGVyOiB0cnVlLCBhbGlnbjogdGhpcy50b2tlbi5hbGlnbltpXSB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBoZWFkZXIgKz0gdGhpcy5yZW5kZXJlci50YWJsZXJvdyhjZWxsKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMudG9rZW4uY2VsbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcm93ID0gdGhpcy50b2tlbi5jZWxsc1tpXTtcblxuICAgICAgICBjZWxsID0gJyc7XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCByb3cubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBjZWxsICs9IHRoaXMucmVuZGVyZXIudGFibGVjZWxsKFxuICAgICAgICAgICAgdGhpcy5pbmxpbmUub3V0cHV0KHJvd1tqXSksXG4gICAgICAgICAgICB7IGhlYWRlcjogZmFsc2UsIGFsaWduOiB0aGlzLnRva2VuLmFsaWduW2pdIH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgYm9keSArPSB0aGlzLnJlbmRlcmVyLnRhYmxlcm93KGNlbGwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIudGFibGUoaGVhZGVyLCBib2R5KTtcbiAgICB9XG4gICAgY2FzZSAnYmxvY2txdW90ZV9zdGFydCc6IHtcbiAgICAgIGJvZHkgPSAnJztcblxuICAgICAgd2hpbGUgKHRoaXMubmV4dCgpLnR5cGUgIT09ICdibG9ja3F1b3RlX2VuZCcpIHtcbiAgICAgICAgYm9keSArPSB0aGlzLnRvaygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5ibG9ja3F1b3RlKGJvZHkpO1xuICAgIH1cbiAgICBjYXNlICdsaXN0X3N0YXJ0Jzoge1xuICAgICAgYm9keSA9ICcnO1xuICAgICAgdmFyIG9yZGVyZWQgPSB0aGlzLnRva2VuLm9yZGVyZWQsXG4gICAgICAgICAgc3RhcnQgPSB0aGlzLnRva2VuLnN0YXJ0O1xuXG4gICAgICB3aGlsZSAodGhpcy5uZXh0KCkudHlwZSAhPT0gJ2xpc3RfZW5kJykge1xuICAgICAgICBib2R5ICs9IHRoaXMudG9rKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmxpc3QoYm9keSwgb3JkZXJlZCwgc3RhcnQpO1xuICAgIH1cbiAgICBjYXNlICdsaXN0X2l0ZW1fc3RhcnQnOiB7XG4gICAgICBib2R5ID0gJyc7XG4gICAgICB2YXIgbG9vc2UgPSB0aGlzLnRva2VuLmxvb3NlO1xuICAgICAgdmFyIGNoZWNrZWQgPSB0aGlzLnRva2VuLmNoZWNrZWQ7XG4gICAgICB2YXIgdGFzayA9IHRoaXMudG9rZW4udGFzaztcblxuICAgICAgaWYgKHRoaXMudG9rZW4udGFzaykge1xuICAgICAgICBib2R5ICs9IHRoaXMucmVuZGVyZXIuY2hlY2tib3goY2hlY2tlZCk7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlICh0aGlzLm5leHQoKS50eXBlICE9PSAnbGlzdF9pdGVtX2VuZCcpIHtcbiAgICAgICAgYm9keSArPSAhbG9vc2UgJiYgdGhpcy50b2tlbi50eXBlID09PSAndGV4dCdcbiAgICAgICAgICA/IHRoaXMucGFyc2VUZXh0KClcbiAgICAgICAgICA6IHRoaXMudG9rKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5saXN0aXRlbShib2R5LCB0YXNrLCBjaGVja2VkKTtcbiAgICB9XG4gICAgY2FzZSAnaHRtbCc6IHtcbiAgICAgIC8vIFRPRE8gcGFyc2UgaW5saW5lIGNvbnRlbnQgaWYgcGFyYW1ldGVyIG1hcmtkb3duPTFcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmh0bWwodGhpcy50b2tlbi50ZXh0KTtcbiAgICB9XG4gICAgY2FzZSAncGFyYWdyYXBoJzoge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIucGFyYWdyYXBoKHRoaXMuaW5saW5lLm91dHB1dCh0aGlzLnRva2VuLnRleHQpKTtcbiAgICB9XG4gICAgY2FzZSAndGV4dCc6IHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLnBhcmFncmFwaCh0aGlzLnBhcnNlVGV4dCgpKTtcbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgdmFyIGVyck1zZyA9ICdUb2tlbiB3aXRoIFwiJyArIHRoaXMudG9rZW4udHlwZSArICdcIiB0eXBlIHdhcyBub3QgZm91bmQuJztcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2lsZW50KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVyck1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyTXNnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogU2x1Z2dlciBnZW5lcmF0ZXMgaGVhZGVyIGlkXG4gKi9cblxuZnVuY3Rpb24gU2x1Z2dlcigpIHtcbiAgdGhpcy5zZWVuID0ge307XG59XG5cbi8qKlxuICogQ29udmVydCBzdHJpbmcgdG8gdW5pcXVlIGlkXG4gKi9cblxuU2x1Z2dlci5wcm90b3R5cGUuc2x1ZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBzbHVnID0gdmFsdWVcbiAgICAudG9Mb3dlckNhc2UoKVxuICAgIC50cmltKClcbiAgICAucmVwbGFjZSgvW1xcdTIwMDAtXFx1MjA2RlxcdTJFMDAtXFx1MkU3RlxcXFwnIVwiIyQlJigpKissLi86Ozw9Pj9AW1xcXV5ge3x9fl0vZywgJycpXG4gICAgLnJlcGxhY2UoL1xccy9nLCAnLScpO1xuXG4gIGlmICh0aGlzLnNlZW4uaGFzT3duUHJvcGVydHkoc2x1ZykpIHtcbiAgICB2YXIgb3JpZ2luYWxTbHVnID0gc2x1ZztcbiAgICBkbyB7XG4gICAgICB0aGlzLnNlZW5bb3JpZ2luYWxTbHVnXSsrO1xuICAgICAgc2x1ZyA9IG9yaWdpbmFsU2x1ZyArICctJyArIHRoaXMuc2VlbltvcmlnaW5hbFNsdWddO1xuICAgIH0gd2hpbGUgKHRoaXMuc2Vlbi5oYXNPd25Qcm9wZXJ0eShzbHVnKSk7XG4gIH1cbiAgdGhpcy5zZWVuW3NsdWddID0gMDtcblxuICByZXR1cm4gc2x1Zztcbn07XG5cbi8qKlxuICogSGVscGVyc1xuICovXG5cbmZ1bmN0aW9uIGVzY2FwZShodG1sLCBlbmNvZGUpIHtcbiAgaWYgKGVuY29kZSkge1xuICAgIGlmIChlc2NhcGUuZXNjYXBlVGVzdC50ZXN0KGh0bWwpKSB7XG4gICAgICByZXR1cm4gaHRtbC5yZXBsYWNlKGVzY2FwZS5lc2NhcGVSZXBsYWNlLCBmdW5jdGlvbihjaCkgeyByZXR1cm4gZXNjYXBlLnJlcGxhY2VtZW50c1tjaF07IH0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZXNjYXBlLmVzY2FwZVRlc3ROb0VuY29kZS50ZXN0KGh0bWwpKSB7XG4gICAgICByZXR1cm4gaHRtbC5yZXBsYWNlKGVzY2FwZS5lc2NhcGVSZXBsYWNlTm9FbmNvZGUsIGZ1bmN0aW9uKGNoKSB7IHJldHVybiBlc2NhcGUucmVwbGFjZW1lbnRzW2NoXTsgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGh0bWw7XG59XG5cbmVzY2FwZS5lc2NhcGVUZXN0ID0gL1smPD5cIiddLztcbmVzY2FwZS5lc2NhcGVSZXBsYWNlID0gL1smPD5cIiddL2c7XG5lc2NhcGUucmVwbGFjZW1lbnRzID0ge1xuICAnJic6ICcmYW1wOycsXG4gICc8JzogJyZsdDsnLFxuICAnPic6ICcmZ3Q7JyxcbiAgJ1wiJzogJyZxdW90OycsXG4gIFwiJ1wiOiAnJiMzOTsnXG59O1xuXG5lc2NhcGUuZXNjYXBlVGVzdE5vRW5jb2RlID0gL1s8PlwiJ118Jig/ISM/XFx3KzspLztcbmVzY2FwZS5lc2NhcGVSZXBsYWNlTm9FbmNvZGUgPSAvWzw+XCInXXwmKD8hIz9cXHcrOykvZztcblxuZnVuY3Rpb24gdW5lc2NhcGUoaHRtbCkge1xuICAvLyBleHBsaWNpdGx5IG1hdGNoIGRlY2ltYWwsIGhleCwgYW5kIG5hbWVkIEhUTUwgZW50aXRpZXNcbiAgcmV0dXJuIGh0bWwucmVwbGFjZSgvJigjKD86XFxkKyl8KD86I3hbMC05QS1GYS1mXSspfCg/OlxcdyspKTs/L2lnLCBmdW5jdGlvbihfLCBuKSB7XG4gICAgbiA9IG4udG9Mb3dlckNhc2UoKTtcbiAgICBpZiAobiA9PT0gJ2NvbG9uJykgcmV0dXJuICc6JztcbiAgICBpZiAobi5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgICAgcmV0dXJuIG4uY2hhckF0KDEpID09PSAneCdcbiAgICAgICAgPyBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KG4uc3Vic3RyaW5nKDIpLCAxNikpXG4gICAgICAgIDogU3RyaW5nLmZyb21DaGFyQ29kZSgrbi5zdWJzdHJpbmcoMSkpO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBlZGl0KHJlZ2V4LCBvcHQpIHtcbiAgcmVnZXggPSByZWdleC5zb3VyY2UgfHwgcmVnZXg7XG4gIG9wdCA9IG9wdCB8fCAnJztcbiAgcmV0dXJuIHtcbiAgICByZXBsYWNlOiBmdW5jdGlvbihuYW1lLCB2YWwpIHtcbiAgICAgIHZhbCA9IHZhbC5zb3VyY2UgfHwgdmFsO1xuICAgICAgdmFsID0gdmFsLnJlcGxhY2UoLyhefFteXFxbXSlcXF4vZywgJyQxJyk7XG4gICAgICByZWdleCA9IHJlZ2V4LnJlcGxhY2UobmFtZSwgdmFsKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZ2V0UmVnZXg6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyBSZWdFeHAocmVnZXgsIG9wdCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjbGVhblVybChzYW5pdGl6ZSwgYmFzZSwgaHJlZikge1xuICBpZiAoc2FuaXRpemUpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIHByb3QgPSBkZWNvZGVVUklDb21wb25lbnQodW5lc2NhcGUoaHJlZikpXG4gICAgICAgIC5yZXBsYWNlKC9bXlxcdzpdL2csICcnKVxuICAgICAgICAudG9Mb3dlckNhc2UoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKHByb3QuaW5kZXhPZignamF2YXNjcmlwdDonKSA9PT0gMCB8fCBwcm90LmluZGV4T2YoJ3Zic2NyaXB0OicpID09PSAwIHx8IHByb3QuaW5kZXhPZignZGF0YTonKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIGlmIChiYXNlICYmICFvcmlnaW5JbmRlcGVuZGVudFVybC50ZXN0KGhyZWYpKSB7XG4gICAgaHJlZiA9IHJlc29sdmVVcmwoYmFzZSwgaHJlZik7XG4gIH1cbiAgdHJ5IHtcbiAgICBocmVmID0gZW5jb2RlVVJJKGhyZWYpLnJlcGxhY2UoLyUyNS9nLCAnJScpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGhyZWY7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVVcmwoYmFzZSwgaHJlZikge1xuICBpZiAoIWJhc2VVcmxzWycgJyArIGJhc2VdKSB7XG4gICAgLy8gd2UgY2FuIGlnbm9yZSBldmVyeXRoaW5nIGluIGJhc2UgYWZ0ZXIgdGhlIGxhc3Qgc2xhc2ggb2YgaXRzIHBhdGggY29tcG9uZW50LFxuICAgIC8vIGJ1dCB3ZSBtaWdodCBuZWVkIHRvIGFkZCBfdGhhdF9cbiAgICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNzZWN0aW9uLTNcbiAgICBpZiAoL15bXjpdKzpcXC8qW14vXSokLy50ZXN0KGJhc2UpKSB7XG4gICAgICBiYXNlVXJsc1snICcgKyBiYXNlXSA9IGJhc2UgKyAnLyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJhc2VVcmxzWycgJyArIGJhc2VdID0gcnRyaW0oYmFzZSwgJy8nLCB0cnVlKTtcbiAgICB9XG4gIH1cbiAgYmFzZSA9IGJhc2VVcmxzWycgJyArIGJhc2VdO1xuXG4gIGlmIChocmVmLnNsaWNlKDAsIDIpID09PSAnLy8nKSB7XG4gICAgcmV0dXJuIGJhc2UucmVwbGFjZSgvOltcXHNcXFNdKi8sICc6JykgKyBocmVmO1xuICB9IGVsc2UgaWYgKGhyZWYuY2hhckF0KDApID09PSAnLycpIHtcbiAgICByZXR1cm4gYmFzZS5yZXBsYWNlKC8oOlxcLypbXi9dKilbXFxzXFxTXSovLCAnJDEnKSArIGhyZWY7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2UgKyBocmVmO1xuICB9XG59XG52YXIgYmFzZVVybHMgPSB7fTtcbnZhciBvcmlnaW5JbmRlcGVuZGVudFVybCA9IC9eJHxeW2Etel1bYS16MC05Ky4tXSo6fF5bPyNdL2k7XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxubm9vcC5leGVjID0gbm9vcDtcblxuZnVuY3Rpb24gbWVyZ2Uob2JqKSB7XG4gIHZhciBpID0gMSxcbiAgICAgIHRhcmdldCxcbiAgICAgIGtleTtcblxuICBmb3IgKDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHRhcmdldCA9IGFyZ3VtZW50c1tpXTtcbiAgICBmb3IgKGtleSBpbiB0YXJnZXQpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBrZXkpKSB7XG4gICAgICAgIG9ialtrZXldID0gdGFyZ2V0W2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gc3BsaXRDZWxscyh0YWJsZVJvdywgY291bnQpIHtcbiAgLy8gZW5zdXJlIHRoYXQgZXZlcnkgY2VsbC1kZWxpbWl0aW5nIHBpcGUgaGFzIGEgc3BhY2VcbiAgLy8gYmVmb3JlIGl0IHRvIGRpc3Rpbmd1aXNoIGl0IGZyb20gYW4gZXNjYXBlZCBwaXBlXG4gIHZhciByb3cgPSB0YWJsZVJvdy5yZXBsYWNlKC9cXHwvZywgZnVuY3Rpb24obWF0Y2gsIG9mZnNldCwgc3RyKSB7XG4gICAgICAgIHZhciBlc2NhcGVkID0gZmFsc2UsXG4gICAgICAgICAgICBjdXJyID0gb2Zmc2V0O1xuICAgICAgICB3aGlsZSAoLS1jdXJyID49IDAgJiYgc3RyW2N1cnJdID09PSAnXFxcXCcpIGVzY2FwZWQgPSAhZXNjYXBlZDtcbiAgICAgICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgICAgICAvLyBvZGQgbnVtYmVyIG9mIHNsYXNoZXMgbWVhbnMgfCBpcyBlc2NhcGVkXG4gICAgICAgICAgLy8gc28gd2UgbGVhdmUgaXQgYWxvbmVcbiAgICAgICAgICByZXR1cm4gJ3wnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGFkZCBzcGFjZSBiZWZvcmUgdW5lc2NhcGVkIHxcbiAgICAgICAgICByZXR1cm4gJyB8JztcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICBjZWxscyA9IHJvdy5zcGxpdCgvIFxcfC8pLFxuICAgICAgaSA9IDA7XG5cbiAgaWYgKGNlbGxzLmxlbmd0aCA+IGNvdW50KSB7XG4gICAgY2VsbHMuc3BsaWNlKGNvdW50KTtcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoY2VsbHMubGVuZ3RoIDwgY291bnQpIGNlbGxzLnB1c2goJycpO1xuICB9XG5cbiAgZm9yICg7IGkgPCBjZWxscy5sZW5ndGg7IGkrKykge1xuICAgIC8vIGxlYWRpbmcgb3IgdHJhaWxpbmcgd2hpdGVzcGFjZSBpcyBpZ25vcmVkIHBlciB0aGUgZ2ZtIHNwZWNcbiAgICBjZWxsc1tpXSA9IGNlbGxzW2ldLnRyaW0oKS5yZXBsYWNlKC9cXFxcXFx8L2csICd8Jyk7XG4gIH1cbiAgcmV0dXJuIGNlbGxzO1xufVxuXG4vLyBSZW1vdmUgdHJhaWxpbmcgJ2Mncy4gRXF1aXZhbGVudCB0byBzdHIucmVwbGFjZSgvYyokLywgJycpLlxuLy8gL2MqJC8gaXMgdnVsbmVyYWJsZSB0byBSRURPUy5cbi8vIGludmVydDogUmVtb3ZlIHN1ZmZpeCBvZiBub24tYyBjaGFycyBpbnN0ZWFkLiBEZWZhdWx0IGZhbHNleS5cbmZ1bmN0aW9uIHJ0cmltKHN0ciwgYywgaW52ZXJ0KSB7XG4gIGlmIChzdHIubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgLy8gTGVuZ3RoIG9mIHN1ZmZpeCBtYXRjaGluZyB0aGUgaW52ZXJ0IGNvbmRpdGlvbi5cbiAgdmFyIHN1ZmZMZW4gPSAwO1xuXG4gIC8vIFN0ZXAgbGVmdCB1bnRpbCB3ZSBmYWlsIHRvIG1hdGNoIHRoZSBpbnZlcnQgY29uZGl0aW9uLlxuICB3aGlsZSAoc3VmZkxlbiA8IHN0ci5sZW5ndGgpIHtcbiAgICB2YXIgY3VyckNoYXIgPSBzdHIuY2hhckF0KHN0ci5sZW5ndGggLSBzdWZmTGVuIC0gMSk7XG4gICAgaWYgKGN1cnJDaGFyID09PSBjICYmICFpbnZlcnQpIHtcbiAgICAgIHN1ZmZMZW4rKztcbiAgICB9IGVsc2UgaWYgKGN1cnJDaGFyICE9PSBjICYmIGludmVydCkge1xuICAgICAgc3VmZkxlbisrO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyLnN1YnN0cigwLCBzdHIubGVuZ3RoIC0gc3VmZkxlbik7XG59XG5cbmZ1bmN0aW9uIGZpbmRDbG9zaW5nQnJhY2tldChzdHIsIGIpIHtcbiAgaWYgKHN0ci5pbmRleE9mKGJbMV0pID09PSAtMSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICB2YXIgbGV2ZWwgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHJbaV0gPT09ICdcXFxcJykge1xuICAgICAgaSsrO1xuICAgIH0gZWxzZSBpZiAoc3RyW2ldID09PSBiWzBdKSB7XG4gICAgICBsZXZlbCsrO1xuICAgIH0gZWxzZSBpZiAoc3RyW2ldID09PSBiWzFdKSB7XG4gICAgICBsZXZlbC0tO1xuICAgICAgaWYgKGxldmVsIDwgMCkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5mdW5jdGlvbiBjaGVja1Nhbml0aXplRGVwcmVjYXRpb24ob3B0KSB7XG4gIGlmIChvcHQgJiYgb3B0LnNhbml0aXplICYmICFvcHQuc2lsZW50KSB7XG4gICAgY29uc29sZS53YXJuKCdtYXJrZWQoKTogc2FuaXRpemUgYW5kIHNhbml0aXplciBwYXJhbWV0ZXJzIGFyZSBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMC43LjAsIHNob3VsZCBub3QgYmUgdXNlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuIFJlYWQgbW9yZSBoZXJlOiBodHRwczovL21hcmtlZC5qcy5vcmcvIy9VU0lOR19BRFZBTkNFRC5tZCNvcHRpb25zJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBNYXJrZWRcbiAqL1xuXG5mdW5jdGlvbiBtYXJrZWQoc3JjLCBvcHQsIGNhbGxiYWNrKSB7XG4gIC8vIHRocm93IGVycm9yIGluIGNhc2Ugb2Ygbm9uIHN0cmluZyBpbnB1dFxuICBpZiAodHlwZW9mIHNyYyA9PT0gJ3VuZGVmaW5lZCcgfHwgc3JjID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtYXJrZWQoKTogaW5wdXQgcGFyYW1ldGVyIGlzIHVuZGVmaW5lZCBvciBudWxsJyk7XG4gIH1cbiAgaWYgKHR5cGVvZiBzcmMgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtYXJrZWQoKTogaW5wdXQgcGFyYW1ldGVyIGlzIG9mIHR5cGUgJ1xuICAgICAgKyBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3JjKSArICcsIHN0cmluZyBleHBlY3RlZCcpO1xuICB9XG5cbiAgaWYgKGNhbGxiYWNrIHx8IHR5cGVvZiBvcHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjayA9IG9wdDtcbiAgICAgIG9wdCA9IG51bGw7XG4gICAgfVxuXG4gICAgb3B0ID0gbWVyZ2Uoe30sIG1hcmtlZC5kZWZhdWx0cywgb3B0IHx8IHt9KTtcbiAgICBjaGVja1Nhbml0aXplRGVwcmVjYXRpb24ob3B0KTtcblxuICAgIHZhciBoaWdobGlnaHQgPSBvcHQuaGlnaGxpZ2h0LFxuICAgICAgICB0b2tlbnMsXG4gICAgICAgIHBlbmRpbmcsXG4gICAgICAgIGkgPSAwO1xuXG4gICAgdHJ5IHtcbiAgICAgIHRva2VucyA9IExleGVyLmxleChzcmMsIG9wdCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKGUpO1xuICAgIH1cblxuICAgIHBlbmRpbmcgPSB0b2tlbnMubGVuZ3RoO1xuXG4gICAgdmFyIGRvbmUgPSBmdW5jdGlvbihlcnIpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgb3B0LmhpZ2hsaWdodCA9IGhpZ2hsaWdodDtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICB9XG5cbiAgICAgIHZhciBvdXQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIG91dCA9IFBhcnNlci5wYXJzZSh0b2tlbnMsIG9wdCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGVyciA9IGU7XG4gICAgICB9XG5cbiAgICAgIG9wdC5oaWdobGlnaHQgPSBoaWdobGlnaHQ7XG5cbiAgICAgIHJldHVybiBlcnJcbiAgICAgICAgPyBjYWxsYmFjayhlcnIpXG4gICAgICAgIDogY2FsbGJhY2sobnVsbCwgb3V0KTtcbiAgICB9O1xuXG4gICAgaWYgKCFoaWdobGlnaHQgfHwgaGlnaGxpZ2h0Lmxlbmd0aCA8IDMpIHtcbiAgICAgIHJldHVybiBkb25lKCk7XG4gICAgfVxuXG4gICAgZGVsZXRlIG9wdC5oaWdobGlnaHQ7XG5cbiAgICBpZiAoIXBlbmRpbmcpIHJldHVybiBkb25lKCk7XG5cbiAgICBmb3IgKDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgKGZ1bmN0aW9uKHRva2VuKSB7XG4gICAgICAgIGlmICh0b2tlbi50eXBlICE9PSAnY29kZScpIHtcbiAgICAgICAgICByZXR1cm4gLS1wZW5kaW5nIHx8IGRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGlnaGxpZ2h0KHRva2VuLnRleHQsIHRva2VuLmxhbmcsIGZ1bmN0aW9uKGVyciwgY29kZSkge1xuICAgICAgICAgIGlmIChlcnIpIHJldHVybiBkb25lKGVycik7XG4gICAgICAgICAgaWYgKGNvZGUgPT0gbnVsbCB8fCBjb2RlID09PSB0b2tlbi50ZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gLS1wZW5kaW5nIHx8IGRvbmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdG9rZW4udGV4dCA9IGNvZGU7XG4gICAgICAgICAgdG9rZW4uZXNjYXBlZCA9IHRydWU7XG4gICAgICAgICAgLS1wZW5kaW5nIHx8IGRvbmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSh0b2tlbnNbaV0pO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuICB0cnkge1xuICAgIGlmIChvcHQpIG9wdCA9IG1lcmdlKHt9LCBtYXJrZWQuZGVmYXVsdHMsIG9wdCk7XG4gICAgY2hlY2tTYW5pdGl6ZURlcHJlY2F0aW9uKG9wdCk7XG4gICAgcmV0dXJuIFBhcnNlci5wYXJzZShMZXhlci5sZXgoc3JjLCBvcHQpLCBvcHQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgZS5tZXNzYWdlICs9ICdcXG5QbGVhc2UgcmVwb3J0IHRoaXMgdG8gaHR0cHM6Ly9naXRodWIuY29tL21hcmtlZGpzL21hcmtlZC4nO1xuICAgIGlmICgob3B0IHx8IG1hcmtlZC5kZWZhdWx0cykuc2lsZW50KSB7XG4gICAgICByZXR1cm4gJzxwPkFuIGVycm9yIG9jY3VycmVkOjwvcD48cHJlPidcbiAgICAgICAgKyBlc2NhcGUoZS5tZXNzYWdlICsgJycsIHRydWUpXG4gICAgICAgICsgJzwvcHJlPic7XG4gICAgfVxuICAgIHRocm93IGU7XG4gIH1cbn1cblxuLyoqXG4gKiBPcHRpb25zXG4gKi9cblxubWFya2VkLm9wdGlvbnMgPVxubWFya2VkLnNldE9wdGlvbnMgPSBmdW5jdGlvbihvcHQpIHtcbiAgbWVyZ2UobWFya2VkLmRlZmF1bHRzLCBvcHQpO1xuICByZXR1cm4gbWFya2VkO1xufTtcblxubWFya2VkLmdldERlZmF1bHRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgYmFzZVVybDogbnVsbCxcbiAgICBicmVha3M6IGZhbHNlLFxuICAgIGdmbTogdHJ1ZSxcbiAgICBoZWFkZXJJZHM6IHRydWUsXG4gICAgaGVhZGVyUHJlZml4OiAnJyxcbiAgICBoaWdobGlnaHQ6IG51bGwsXG4gICAgbGFuZ1ByZWZpeDogJ2xhbmd1YWdlLScsXG4gICAgbWFuZ2xlOiB0cnVlLFxuICAgIHBlZGFudGljOiBmYWxzZSxcbiAgICByZW5kZXJlcjogbmV3IFJlbmRlcmVyKCksXG4gICAgc2FuaXRpemU6IGZhbHNlLFxuICAgIHNhbml0aXplcjogbnVsbCxcbiAgICBzaWxlbnQ6IGZhbHNlLFxuICAgIHNtYXJ0TGlzdHM6IGZhbHNlLFxuICAgIHNtYXJ0eXBhbnRzOiBmYWxzZSxcbiAgICB4aHRtbDogZmFsc2VcbiAgfTtcbn07XG5cbm1hcmtlZC5kZWZhdWx0cyA9IG1hcmtlZC5nZXREZWZhdWx0cygpO1xuXG4vKipcbiAqIEV4cG9zZVxuICovXG5cbm1hcmtlZC5QYXJzZXIgPSBQYXJzZXI7XG5tYXJrZWQucGFyc2VyID0gUGFyc2VyLnBhcnNlO1xuXG5tYXJrZWQuUmVuZGVyZXIgPSBSZW5kZXJlcjtcbm1hcmtlZC5UZXh0UmVuZGVyZXIgPSBUZXh0UmVuZGVyZXI7XG5cbm1hcmtlZC5MZXhlciA9IExleGVyO1xubWFya2VkLmxleGVyID0gTGV4ZXIubGV4O1xuXG5tYXJrZWQuSW5saW5lTGV4ZXIgPSBJbmxpbmVMZXhlcjtcbm1hcmtlZC5pbmxpbmVMZXhlciA9IElubGluZUxleGVyLm91dHB1dDtcblxubWFya2VkLlNsdWdnZXIgPSBTbHVnZ2VyO1xuXG5tYXJrZWQucGFyc2UgPSBtYXJrZWQ7XG5cbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBtYXJrZWQ7XG59IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBtYXJrZWQ7IH0pO1xufSBlbHNlIHtcbiAgcm9vdC5tYXJrZWQgPSBtYXJrZWQ7XG59XG59KSh0aGlzIHx8ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbCkpO1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuXG4vKipcbiAqIEBtb2R1bGUgbGl0LWh0bWxcbiAqL1xuXG5pbXBvcnQge1BhcnR9IGZyb20gJy4vcGFydC5qcyc7XG5cbmNvbnN0IGRpcmVjdGl2ZXMgPSBuZXcgV2Vha01hcDxvYmplY3QsIHRydWU+KCk7XG5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbmV4cG9ydCB0eXBlIERpcmVjdGl2ZUZhY3RvcnkgPSAoLi4uYXJnczogYW55W10pID0+IG9iamVjdDtcblxuZXhwb3J0IHR5cGUgRGlyZWN0aXZlRm4gPSAocGFydDogUGFydCkgPT4gdm9pZDtcblxuLyoqXG4gKiBCcmFuZHMgYSBmdW5jdGlvbiBhcyBhIGRpcmVjdGl2ZSBmYWN0b3J5IGZ1bmN0aW9uIHNvIHRoYXQgbGl0LWh0bWwgd2lsbCBjYWxsXG4gKiB0aGUgZnVuY3Rpb24gZHVyaW5nIHRlbXBsYXRlIHJlbmRlcmluZywgcmF0aGVyIHRoYW4gcGFzc2luZyBhcyBhIHZhbHVlLlxuICpcbiAqIEEgX2RpcmVjdGl2ZV8gaXMgYSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgUGFydCBhcyBhbiBhcmd1bWVudC4gSXQgaGFzIHRoZVxuICogc2lnbmF0dXJlOiBgKHBhcnQ6IFBhcnQpID0+IHZvaWRgLlxuICpcbiAqIEEgZGlyZWN0aXZlIF9mYWN0b3J5XyBpcyBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYXJndW1lbnRzIGZvciBkYXRhIGFuZFxuICogY29uZmlndXJhdGlvbiBhbmQgcmV0dXJucyBhIGRpcmVjdGl2ZS4gVXNlcnMgb2YgZGlyZWN0aXZlIHVzdWFsbHkgcmVmZXIgdG9cbiAqIHRoZSBkaXJlY3RpdmUgZmFjdG9yeSBhcyB0aGUgZGlyZWN0aXZlLiBGb3IgZXhhbXBsZSwgXCJUaGUgcmVwZWF0IGRpcmVjdGl2ZVwiLlxuICpcbiAqIFVzdWFsbHkgYSB0ZW1wbGF0ZSBhdXRob3Igd2lsbCBpbnZva2UgYSBkaXJlY3RpdmUgZmFjdG9yeSBpbiB0aGVpciB0ZW1wbGF0ZVxuICogd2l0aCByZWxldmFudCBhcmd1bWVudHMsIHdoaWNoIHdpbGwgdGhlbiByZXR1cm4gYSBkaXJlY3RpdmUgZnVuY3Rpb24uXG4gKlxuICogSGVyZSdzIGFuIGV4YW1wbGUgb2YgdXNpbmcgdGhlIGByZXBlYXQoKWAgZGlyZWN0aXZlIGZhY3RvcnkgdGhhdCB0YWtlcyBhblxuICogYXJyYXkgYW5kIGEgZnVuY3Rpb24gdG8gcmVuZGVyIGFuIGl0ZW06XG4gKlxuICogYGBganNcbiAqIGh0bWxgPHVsPjwke3JlcGVhdChpdGVtcywgKGl0ZW0pID0+IGh0bWxgPGxpPiR7aXRlbX08L2xpPmApfTwvdWw+YFxuICogYGBgXG4gKlxuICogV2hlbiBgcmVwZWF0YCBpcyBpbnZva2VkLCBpdCByZXR1cm5zIGEgZGlyZWN0aXZlIGZ1bmN0aW9uIHRoYXQgY2xvc2VzIG92ZXJcbiAqIGBpdGVtc2AgYW5kIHRoZSB0ZW1wbGF0ZSBmdW5jdGlvbi4gV2hlbiB0aGUgb3V0ZXIgdGVtcGxhdGUgaXMgcmVuZGVyZWQsIHRoZVxuICogcmV0dXJuIGRpcmVjdGl2ZSBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aCB0aGUgUGFydCBmb3IgdGhlIGV4cHJlc3Npb24uXG4gKiBgcmVwZWF0YCB0aGVuIHBlcmZvcm1zIGl0J3MgY3VzdG9tIGxvZ2ljIHRvIHJlbmRlciBtdWx0aXBsZSBpdGVtcy5cbiAqXG4gKiBAcGFyYW0gZiBUaGUgZGlyZWN0aXZlIGZhY3RvcnkgZnVuY3Rpb24uIE11c3QgYmUgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYVxuICogZnVuY3Rpb24gb2YgdGhlIHNpZ25hdHVyZSBgKHBhcnQ6IFBhcnQpID0+IHZvaWRgLiBUaGUgcmV0dXJuZWQgZnVuY3Rpb24gd2lsbFxuICogYmUgY2FsbGVkIHdpdGggdGhlIHBhcnQgb2JqZWN0LlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogaW1wb3J0IHtkaXJlY3RpdmUsIGh0bWx9IGZyb20gJ2xpdC1odG1sJztcbiAqXG4gKiBjb25zdCBpbW11dGFibGUgPSBkaXJlY3RpdmUoKHYpID0+IChwYXJ0KSA9PiB7XG4gKiAgIGlmIChwYXJ0LnZhbHVlICE9PSB2KSB7XG4gKiAgICAgcGFydC5zZXRWYWx1ZSh2KVxuICogICB9XG4gKiB9KTtcbiAqL1xuZXhwb3J0IGNvbnN0IGRpcmVjdGl2ZSA9IDxGIGV4dGVuZHMgRGlyZWN0aXZlRmFjdG9yeT4oZjogRik6IEYgPT5cbiAgICAoKC4uLmFyZ3M6IHVua25vd25bXSkgPT4ge1xuICAgICAgY29uc3QgZCA9IGYoLi4uYXJncyk7XG4gICAgICBkaXJlY3RpdmVzLnNldChkLCB0cnVlKTtcbiAgICAgIHJldHVybiBkO1xuICAgIH0pIGFzIEY7XG5cbmV4cG9ydCBjb25zdCBpc0RpcmVjdGl2ZSA9IChvOiB1bmtub3duKTogbyBpcyBEaXJlY3RpdmVGbiA9PiB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gJ2Z1bmN0aW9uJyAmJiBkaXJlY3RpdmVzLmhhcyhvKTtcbn07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5cbi8qKlxuICogQG1vZHVsZSBsaXQtaHRtbFxuICovXG5cbmludGVyZmFjZSBNYXliZVBvbHlmaWxsZWRDZSBleHRlbmRzIEN1c3RvbUVsZW1lbnRSZWdpc3RyeSB7XG4gIHJlYWRvbmx5IHBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2s/OiBvYmplY3Q7XG59XG5cbi8qKlxuICogVHJ1ZSBpZiB0aGUgY3VzdG9tIGVsZW1lbnRzIHBvbHlmaWxsIGlzIGluIHVzZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGlzQ0VQb2x5ZmlsbCA9IHdpbmRvdy5jdXN0b21FbGVtZW50cyAhPT0gdW5kZWZpbmVkICYmXG4gICAgKHdpbmRvdy5jdXN0b21FbGVtZW50cyBhcyBNYXliZVBvbHlmaWxsZWRDZSkucG9seWZpbGxXcmFwRmx1c2hDYWxsYmFjayAhPT1cbiAgICAgICAgdW5kZWZpbmVkO1xuXG4vKipcbiAqIFJlcGFyZW50cyBub2Rlcywgc3RhcnRpbmcgZnJvbSBgc3RhcnRgIChpbmNsdXNpdmUpIHRvIGBlbmRgIChleGNsdXNpdmUpLFxuICogaW50byBhbm90aGVyIGNvbnRhaW5lciAoY291bGQgYmUgdGhlIHNhbWUgY29udGFpbmVyKSwgYmVmb3JlIGBiZWZvcmVgLiBJZlxuICogYGJlZm9yZWAgaXMgbnVsbCwgaXQgYXBwZW5kcyB0aGUgbm9kZXMgdG8gdGhlIGNvbnRhaW5lci5cbiAqL1xuZXhwb3J0IGNvbnN0IHJlcGFyZW50Tm9kZXMgPVxuICAgIChjb250YWluZXI6IE5vZGUsXG4gICAgIHN0YXJ0OiBOb2RlfG51bGwsXG4gICAgIGVuZDogTm9kZXxudWxsID0gbnVsbCxcbiAgICAgYmVmb3JlOiBOb2RlfG51bGwgPSBudWxsKTogdm9pZCA9PiB7XG4gICAgICB3aGlsZSAoc3RhcnQgIT09IGVuZCkge1xuICAgICAgICBjb25zdCBuID0gc3RhcnQhLm5leHRTaWJsaW5nO1xuICAgICAgICBjb250YWluZXIuaW5zZXJ0QmVmb3JlKHN0YXJ0ISwgYmVmb3JlKTtcbiAgICAgICAgc3RhcnQgPSBuO1xuICAgICAgfVxuICAgIH07XG5cbi8qKlxuICogUmVtb3ZlcyBub2Rlcywgc3RhcnRpbmcgZnJvbSBgc3RhcnRgIChpbmNsdXNpdmUpIHRvIGBlbmRgIChleGNsdXNpdmUpLCBmcm9tXG4gKiBgY29udGFpbmVyYC5cbiAqL1xuZXhwb3J0IGNvbnN0IHJlbW92ZU5vZGVzID1cbiAgICAoY29udGFpbmVyOiBOb2RlLCBzdGFydDogTm9kZXxudWxsLCBlbmQ6IE5vZGV8bnVsbCA9IG51bGwpOiB2b2lkID0+IHtcbiAgICAgIHdoaWxlIChzdGFydCAhPT0gZW5kKSB7XG4gICAgICAgIGNvbnN0IG4gPSBzdGFydCEubmV4dFNpYmxpbmc7XG4gICAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChzdGFydCEpO1xuICAgICAgICBzdGFydCA9IG47XG4gICAgICB9XG4gICAgfTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxOCBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cblxuLyoqXG4gKiBAbW9kdWxlIGxpdC1odG1sXG4gKi9cblxuLyoqXG4gKiBUaGUgUGFydCBpbnRlcmZhY2UgcmVwcmVzZW50cyBhIGR5bmFtaWMgcGFydCBvZiBhIHRlbXBsYXRlIGluc3RhbmNlIHJlbmRlcmVkXG4gKiBieSBsaXQtaHRtbC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYXJ0IHtcbiAgcmVhZG9ubHkgdmFsdWU6IHVua25vd247XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGN1cnJlbnQgcGFydCB2YWx1ZSwgYnV0IGRvZXMgbm90IHdyaXRlIGl0IHRvIHRoZSBET00uXG4gICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdGhhdCB3aWxsIGJlIGNvbW1pdHRlZC5cbiAgICovXG4gIHNldFZhbHVlKHZhbHVlOiB1bmtub3duKTogdm9pZDtcblxuICAvKipcbiAgICogQ29tbWl0cyB0aGUgY3VycmVudCBwYXJ0IHZhbHVlLCBjYXVzaW5nIGl0IHRvIGFjdHVhbGx5IGJlIHdyaXR0ZW4gdG8gdGhlXG4gICAqIERPTS5cbiAgICpcbiAgICogRGlyZWN0aXZlcyBhcmUgcnVuIGF0IHRoZSBzdGFydCBvZiBgY29tbWl0YCwgc28gdGhhdCBpZiB0aGV5IGNhbGxcbiAgICogYHBhcnQuc2V0VmFsdWUoLi4uKWAgc3luY2hyb25vdXNseSB0aGF0IHZhbHVlIHdpbGwgYmUgdXNlZCBpbiB0aGUgY3VycmVudFxuICAgKiBjb21taXQsIGFuZCB0aGVyZSdzIG5vIG5lZWQgdG8gY2FsbCBgcGFydC5jb21taXQoKWAgd2l0aGluIHRoZSBkaXJlY3RpdmUuXG4gICAqIElmIGRpcmVjdGl2ZXMgc2V0IGEgcGFydCB2YWx1ZSBhc3luY2hyb25vdXNseSwgdGhlbiB0aGV5IG11c3QgY2FsbFxuICAgKiBgcGFydC5jb21taXQoKWAgbWFudWFsbHkuXG4gICAqL1xuICBjb21taXQoKTogdm9pZDtcbn1cblxuLyoqXG4gKiBBIHNlbnRpbmVsIHZhbHVlIHRoYXQgc2lnbmFscyB0aGF0IGEgdmFsdWUgd2FzIGhhbmRsZWQgYnkgYSBkaXJlY3RpdmUgYW5kXG4gKiBzaG91bGQgbm90IGJlIHdyaXR0ZW4gdG8gdGhlIERPTS5cbiAqL1xuZXhwb3J0IGNvbnN0IG5vQ2hhbmdlID0ge307XG5cbi8qKlxuICogQSBzZW50aW5lbCB2YWx1ZSB0aGF0IHNpZ25hbHMgYSBOb2RlUGFydCB0byBmdWxseSBjbGVhciBpdHMgY29udGVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IG5vdGhpbmcgPSB7fTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cblxuLyoqXG4gKiBAbW9kdWxlIGxpdC1odG1sXG4gKi9cblxuaW1wb3J0IHtUZW1wbGF0ZVJlc3VsdH0gZnJvbSAnLi90ZW1wbGF0ZS1yZXN1bHQuanMnO1xuXG4vKipcbiAqIEFuIGV4cHJlc3Npb24gbWFya2VyIHdpdGggZW1iZWRkZWQgdW5pcXVlIGtleSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aFxuICogcG9zc2libGUgdGV4dCBpbiB0ZW1wbGF0ZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBtYXJrZXIgPSBge3tsaXQtJHtTdHJpbmcoTWF0aC5yYW5kb20oKSkuc2xpY2UoMil9fX1gO1xuXG4vKipcbiAqIEFuIGV4cHJlc3Npb24gbWFya2VyIHVzZWQgdGV4dC1wb3NpdGlvbnMsIG11bHRpLWJpbmRpbmcgYXR0cmlidXRlcywgYW5kXG4gKiBhdHRyaWJ1dGVzIHdpdGggbWFya3VwLWxpa2UgdGV4dCB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBub2RlTWFya2VyID0gYDwhLS0ke21hcmtlcn0tLT5gO1xuXG5leHBvcnQgY29uc3QgbWFya2VyUmVnZXggPSBuZXcgUmVnRXhwKGAke21hcmtlcn18JHtub2RlTWFya2VyfWApO1xuXG4vKipcbiAqIFN1ZmZpeCBhcHBlbmRlZCB0byBhbGwgYm91bmQgYXR0cmlidXRlIG5hbWVzLlxuICovXG5leHBvcnQgY29uc3QgYm91bmRBdHRyaWJ1dGVTdWZmaXggPSAnJGxpdCQnO1xuXG4vKipcbiAqIEFuIHVwZGF0ZWFibGUgVGVtcGxhdGUgdGhhdCB0cmFja3MgdGhlIGxvY2F0aW9uIG9mIGR5bmFtaWMgcGFydHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZSB7XG4gIHJlYWRvbmx5IHBhcnRzOiBUZW1wbGF0ZVBhcnRbXSA9IFtdO1xuICByZWFkb25seSBlbGVtZW50OiBIVE1MVGVtcGxhdGVFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKHJlc3VsdDogVGVtcGxhdGVSZXN1bHQsIGVsZW1lbnQ6IEhUTUxUZW1wbGF0ZUVsZW1lbnQpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuXG4gICAgY29uc3Qgbm9kZXNUb1JlbW92ZTogTm9kZVtdID0gW107XG4gICAgY29uc3Qgc3RhY2s6IE5vZGVbXSA9IFtdO1xuICAgIC8vIEVkZ2UgbmVlZHMgYWxsIDQgcGFyYW1ldGVycyBwcmVzZW50OyBJRTExIG5lZWRzIDNyZCBwYXJhbWV0ZXIgdG8gYmUgbnVsbFxuICAgIGNvbnN0IHdhbGtlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoXG4gICAgICAgIGVsZW1lbnQuY29udGVudCxcbiAgICAgICAgMTMzIC8qIE5vZGVGaWx0ZXIuU0hPV197RUxFTUVOVHxDT01NRU5UfFRFWFR9ICovLFxuICAgICAgICBudWxsLFxuICAgICAgICBmYWxzZSk7XG4gICAgLy8gS2VlcHMgdHJhY2sgb2YgdGhlIGxhc3QgaW5kZXggYXNzb2NpYXRlZCB3aXRoIGEgcGFydC4gV2UgdHJ5IHRvIGRlbGV0ZVxuICAgIC8vIHVubmVjZXNzYXJ5IG5vZGVzLCBidXQgd2UgbmV2ZXIgd2FudCB0byBhc3NvY2lhdGUgdHdvIGRpZmZlcmVudCBwYXJ0c1xuICAgIC8vIHRvIHRoZSBzYW1lIGluZGV4LiBUaGV5IG11c3QgaGF2ZSBhIGNvbnN0YW50IG5vZGUgYmV0d2Vlbi5cbiAgICBsZXQgbGFzdFBhcnRJbmRleCA9IDA7XG4gICAgbGV0IGluZGV4ID0gLTE7XG4gICAgbGV0IHBhcnRJbmRleCA9IDA7XG4gICAgY29uc3Qge3N0cmluZ3MsIHZhbHVlczoge2xlbmd0aH19ID0gcmVzdWx0O1xuICAgIHdoaWxlIChwYXJ0SW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNvbnN0IG5vZGUgPSB3YWxrZXIubmV4dE5vZGUoKSBhcyBFbGVtZW50IHwgQ29tbWVudCB8IFRleHQgfCBudWxsO1xuICAgICAgaWYgKG5vZGUgPT09IG51bGwpIHtcbiAgICAgICAgLy8gV2UndmUgZXhoYXVzdGVkIHRoZSBjb250ZW50IGluc2lkZSBhIG5lc3RlZCB0ZW1wbGF0ZSBlbGVtZW50LlxuICAgICAgICAvLyBCZWNhdXNlIHdlIHN0aWxsIGhhdmUgcGFydHMgKHRoZSBvdXRlciBmb3ItbG9vcCksIHdlIGtub3c6XG4gICAgICAgIC8vIC0gVGhlcmUgaXMgYSB0ZW1wbGF0ZSBpbiB0aGUgc3RhY2tcbiAgICAgICAgLy8gLSBUaGUgd2Fsa2VyIHdpbGwgZmluZCBhIG5leHROb2RlIG91dHNpZGUgdGhlIHRlbXBsYXRlXG4gICAgICAgIHdhbGtlci5jdXJyZW50Tm9kZSA9IHN0YWNrLnBvcCgpITtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpbmRleCsrO1xuXG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSAvKiBOb2RlLkVMRU1FTlRfTk9ERSAqLykge1xuICAgICAgICBpZiAoKG5vZGUgYXMgRWxlbWVudCkuaGFzQXR0cmlidXRlcygpKSB7XG4gICAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IChub2RlIGFzIEVsZW1lbnQpLmF0dHJpYnV0ZXM7XG4gICAgICAgICAgY29uc3Qge2xlbmd0aH0gPSBhdHRyaWJ1dGVzO1xuICAgICAgICAgIC8vIFBlclxuICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9OYW1lZE5vZGVNYXAsXG4gICAgICAgICAgLy8gYXR0cmlidXRlcyBhcmUgbm90IGd1YXJhbnRlZWQgdG8gYmUgcmV0dXJuZWQgaW4gZG9jdW1lbnQgb3JkZXIuXG4gICAgICAgICAgLy8gSW4gcGFydGljdWxhciwgRWRnZS9JRSBjYW4gcmV0dXJuIHRoZW0gb3V0IG9mIG9yZGVyLCBzbyB3ZSBjYW5ub3RcbiAgICAgICAgICAvLyBhc3N1bWUgYSBjb3JyZXNwb25kZW5jZSBiZXR3ZWVuIHBhcnQgaW5kZXggYW5kIGF0dHJpYnV0ZSBpbmRleC5cbiAgICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlbmRzV2l0aChhdHRyaWJ1dGVzW2ldLm5hbWUsIGJvdW5kQXR0cmlidXRlU3VmZml4KSkge1xuICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICAgICAgICAgIC8vIEdldCB0aGUgdGVtcGxhdGUgbGl0ZXJhbCBzZWN0aW9uIGxlYWRpbmcgdXAgdG8gdGhlIGZpcnN0XG4gICAgICAgICAgICAvLyBleHByZXNzaW9uIGluIHRoaXMgYXR0cmlidXRlXG4gICAgICAgICAgICBjb25zdCBzdHJpbmdGb3JQYXJ0ID0gc3RyaW5nc1twYXJ0SW5kZXhdO1xuICAgICAgICAgICAgLy8gRmluZCB0aGUgYXR0cmlidXRlIG5hbWVcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBsYXN0QXR0cmlidXRlTmFtZVJlZ2V4LmV4ZWMoc3RyaW5nRm9yUGFydCkhWzJdO1xuICAgICAgICAgICAgLy8gRmluZCB0aGUgY29ycmVzcG9uZGluZyBhdHRyaWJ1dGVcbiAgICAgICAgICAgIC8vIEFsbCBib3VuZCBhdHRyaWJ1dGVzIGhhdmUgaGFkIGEgc3VmZml4IGFkZGVkIGluXG4gICAgICAgICAgICAvLyBUZW1wbGF0ZVJlc3VsdCNnZXRIVE1MIHRvIG9wdCBvdXQgb2Ygc3BlY2lhbCBhdHRyaWJ1dGVcbiAgICAgICAgICAgIC8vIGhhbmRsaW5nLiBUbyBsb29rIHVwIHRoZSBhdHRyaWJ1dGUgdmFsdWUgd2UgYWxzbyBuZWVkIHRvIGFkZFxuICAgICAgICAgICAgLy8gdGhlIHN1ZmZpeC5cbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZUxvb2t1cE5hbWUgPVxuICAgICAgICAgICAgICAgIG5hbWUudG9Mb3dlckNhc2UoKSArIGJvdW5kQXR0cmlidXRlU3VmZml4O1xuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlVmFsdWUgPVxuICAgICAgICAgICAgICAgIChub2RlIGFzIEVsZW1lbnQpLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVMb29rdXBOYW1lKSE7XG4gICAgICAgICAgICAobm9kZSBhcyBFbGVtZW50KS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlTG9va3VwTmFtZSk7XG4gICAgICAgICAgICBjb25zdCBzdGF0aWNzID0gYXR0cmlidXRlVmFsdWUuc3BsaXQobWFya2VyUmVnZXgpO1xuICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKHt0eXBlOiAnYXR0cmlidXRlJywgaW5kZXgsIG5hbWUsIHN0cmluZ3M6IHN0YXRpY3N9KTtcbiAgICAgICAgICAgIHBhcnRJbmRleCArPSBzdGF0aWNzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICgobm9kZSBhcyBFbGVtZW50KS50YWdOYW1lID09PSAnVEVNUExBVEUnKSB7XG4gICAgICAgICAgc3RhY2sucHVzaChub2RlKTtcbiAgICAgICAgICB3YWxrZXIuY3VycmVudE5vZGUgPSAobm9kZSBhcyBIVE1MVGVtcGxhdGVFbGVtZW50KS5jb250ZW50O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMgLyogTm9kZS5URVhUX05PREUgKi8pIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IChub2RlIGFzIFRleHQpLmRhdGE7XG4gICAgICAgIGlmIChkYXRhLmluZGV4T2YobWFya2VyKSA+PSAwKSB7XG4gICAgICAgICAgY29uc3QgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlITtcbiAgICAgICAgICBjb25zdCBzdHJpbmdzID0gZGF0YS5zcGxpdChtYXJrZXJSZWdleCk7XG4gICAgICAgICAgY29uc3QgbGFzdEluZGV4ID0gc3RyaW5ncy5sZW5ndGggLSAxO1xuICAgICAgICAgIC8vIEdlbmVyYXRlIGEgbmV3IHRleHQgbm9kZSBmb3IgZWFjaCBsaXRlcmFsIHNlY3Rpb25cbiAgICAgICAgICAvLyBUaGVzZSBub2RlcyBhcmUgYWxzbyB1c2VkIGFzIHRoZSBtYXJrZXJzIGZvciBub2RlIHBhcnRzXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXN0SW5kZXg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGluc2VydDogTm9kZTtcbiAgICAgICAgICAgIGxldCBzID0gc3RyaW5nc1tpXTtcbiAgICAgICAgICAgIGlmIChzID09PSAnJykge1xuICAgICAgICAgICAgICBpbnNlcnQgPSBjcmVhdGVNYXJrZXIoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gbGFzdEF0dHJpYnV0ZU5hbWVSZWdleC5leGVjKHMpO1xuICAgICAgICAgICAgICBpZiAobWF0Y2ggIT09IG51bGwgJiYgZW5kc1dpdGgobWF0Y2hbMl0sIGJvdW5kQXR0cmlidXRlU3VmZml4KSkge1xuICAgICAgICAgICAgICAgIHMgPSBzLnNsaWNlKDAsIG1hdGNoLmluZGV4KSArIG1hdGNoWzFdICtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMl0uc2xpY2UoMCwgLWJvdW5kQXR0cmlidXRlU3VmZml4Lmxlbmd0aCkgKyBtYXRjaFszXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpbnNlcnQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoaW5zZXJ0LCBub2RlKTtcbiAgICAgICAgICAgIHRoaXMucGFydHMucHVzaCh7dHlwZTogJ25vZGUnLCBpbmRleDogKytpbmRleH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIHRleHQsIHdlIG11c3QgaW5zZXJ0IGEgY29tbWVudCB0byBtYXJrIG91ciBwbGFjZS5cbiAgICAgICAgICAvLyBFbHNlLCB3ZSBjYW4gdHJ1c3QgaXQgd2lsbCBzdGljayBhcm91bmQgYWZ0ZXIgY2xvbmluZy5cbiAgICAgICAgICBpZiAoc3RyaW5nc1tsYXN0SW5kZXhdID09PSAnJykge1xuICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShjcmVhdGVNYXJrZXIoKSwgbm9kZSk7XG4gICAgICAgICAgICBub2Rlc1RvUmVtb3ZlLnB1c2gobm9kZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIChub2RlIGFzIFRleHQpLmRhdGEgPSBzdHJpbmdzW2xhc3RJbmRleF07XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFdlIGhhdmUgYSBwYXJ0IGZvciBlYWNoIG1hdGNoIGZvdW5kXG4gICAgICAgICAgcGFydEluZGV4ICs9IGxhc3RJbmRleDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09PSA4IC8qIE5vZGUuQ09NTUVOVF9OT0RFICovKSB7XG4gICAgICAgIGlmICgobm9kZSBhcyBDb21tZW50KS5kYXRhID09PSBtYXJrZXIpIHtcbiAgICAgICAgICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGUhO1xuICAgICAgICAgIC8vIEFkZCBhIG5ldyBtYXJrZXIgbm9kZSB0byBiZSB0aGUgc3RhcnROb2RlIG9mIHRoZSBQYXJ0IGlmIGFueSBvZlxuICAgICAgICAgIC8vIHRoZSBmb2xsb3dpbmcgYXJlIHRydWU6XG4gICAgICAgICAgLy8gICogV2UgZG9uJ3QgaGF2ZSBhIHByZXZpb3VzU2libGluZ1xuICAgICAgICAgIC8vICAqIFRoZSBwcmV2aW91c1NpYmxpbmcgaXMgYWxyZWFkeSB0aGUgc3RhcnQgb2YgYSBwcmV2aW91cyBwYXJ0XG4gICAgICAgICAgaWYgKG5vZGUucHJldmlvdXNTaWJsaW5nID09PSBudWxsIHx8IGluZGV4ID09PSBsYXN0UGFydEluZGV4KSB7XG4gICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShjcmVhdGVNYXJrZXIoKSwgbm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxhc3RQYXJ0SW5kZXggPSBpbmRleDtcbiAgICAgICAgICB0aGlzLnBhcnRzLnB1c2goe3R5cGU6ICdub2RlJywgaW5kZXh9KTtcbiAgICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgbmV4dFNpYmxpbmcsIGtlZXAgdGhpcyBub2RlIHNvIHdlIGhhdmUgYW4gZW5kLlxuICAgICAgICAgIC8vIEVsc2UsIHdlIGNhbiByZW1vdmUgaXQgdG8gc2F2ZSBmdXR1cmUgY29zdHMuXG4gICAgICAgICAgaWYgKG5vZGUubmV4dFNpYmxpbmcgPT09IG51bGwpIHtcbiAgICAgICAgICAgIChub2RlIGFzIENvbW1lbnQpLmRhdGEgPSAnJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9kZXNUb1JlbW92ZS5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgaW5kZXgtLTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGFydEluZGV4Kys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IGkgPSAtMTtcbiAgICAgICAgICB3aGlsZSAoKGkgPSAobm9kZSBhcyBDb21tZW50KS5kYXRhLmluZGV4T2YobWFya2VyLCBpICsgMSkpICE9PSAtMSkge1xuICAgICAgICAgICAgLy8gQ29tbWVudCBub2RlIGhhcyBhIGJpbmRpbmcgbWFya2VyIGluc2lkZSwgbWFrZSBhbiBpbmFjdGl2ZSBwYXJ0XG4gICAgICAgICAgICAvLyBUaGUgYmluZGluZyB3b24ndCB3b3JrLCBidXQgc3Vic2VxdWVudCBiaW5kaW5ncyB3aWxsXG4gICAgICAgICAgICAvLyBUT0RPIChqdXN0aW5mYWduYW5pKTogY29uc2lkZXIgd2hldGhlciBpdCdzIGV2ZW4gd29ydGggaXQgdG9cbiAgICAgICAgICAgIC8vIG1ha2UgYmluZGluZ3MgaW4gY29tbWVudHMgd29ya1xuICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKHt0eXBlOiAnbm9kZScsIGluZGV4OiAtMX0pO1xuICAgICAgICAgICAgcGFydEluZGV4Kys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIHRleHQgYmluZGluZyBub2RlcyBhZnRlciB0aGUgd2FsayB0byBub3QgZGlzdHVyYiB0aGUgVHJlZVdhbGtlclxuICAgIGZvciAoY29uc3QgbiBvZiBub2Rlc1RvUmVtb3ZlKSB7XG4gICAgICBuLnBhcmVudE5vZGUhLnJlbW92ZUNoaWxkKG4pO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCBlbmRzV2l0aCA9IChzdHI6IHN0cmluZywgc3VmZml4OiBzdHJpbmcpOiBib29sZWFuID0+IHtcbiAgY29uc3QgaW5kZXggPSBzdHIubGVuZ3RoIC0gc3VmZml4Lmxlbmd0aDtcbiAgcmV0dXJuIGluZGV4ID49IDAgJiYgc3RyLnNsaWNlKGluZGV4KSA9PT0gc3VmZml4O1xufTtcblxuLyoqXG4gKiBBIHBsYWNlaG9sZGVyIGZvciBhIGR5bmFtaWMgZXhwcmVzc2lvbiBpbiBhbiBIVE1MIHRlbXBsYXRlLlxuICpcbiAqIFRoZXJlIGFyZSB0d28gYnVpbHQtaW4gcGFydCB0eXBlczogQXR0cmlidXRlUGFydCBhbmQgTm9kZVBhcnQuIE5vZGVQYXJ0c1xuICogYWx3YXlzIHJlcHJlc2VudCBhIHNpbmdsZSBkeW5hbWljIGV4cHJlc3Npb24sIHdoaWxlIEF0dHJpYnV0ZVBhcnRzIG1heVxuICogcmVwcmVzZW50IGFzIG1hbnkgZXhwcmVzc2lvbnMgYXJlIGNvbnRhaW5lZCBpbiB0aGUgYXR0cmlidXRlLlxuICpcbiAqIEEgVGVtcGxhdGUncyBwYXJ0cyBhcmUgbXV0YWJsZSwgc28gcGFydHMgY2FuIGJlIHJlcGxhY2VkIG9yIG1vZGlmaWVkXG4gKiAocG9zc2libHkgdG8gaW1wbGVtZW50IGRpZmZlcmVudCB0ZW1wbGF0ZSBzZW1hbnRpY3MpLiBUaGUgY29udHJhY3QgaXMgdGhhdFxuICogcGFydHMgY2FuIG9ubHkgYmUgcmVwbGFjZWQsIG5vdCByZW1vdmVkLCBhZGRlZCBvciByZW9yZGVyZWQsIGFuZCBwYXJ0cyBtdXN0XG4gKiBhbHdheXMgY29uc3VtZSB0aGUgY29ycmVjdCBudW1iZXIgb2YgdmFsdWVzIGluIHRoZWlyIGB1cGRhdGUoKWAgbWV0aG9kLlxuICpcbiAqIFRPRE8oanVzdGluZmFnbmFuaSk6IFRoYXQgcmVxdWlyZW1lbnQgaXMgYSBsaXR0bGUgZnJhZ2lsZS4gQVxuICogVGVtcGxhdGVJbnN0YW5jZSBjb3VsZCBpbnN0ZWFkIGJlIG1vcmUgY2FyZWZ1bCBhYm91dCB3aGljaCB2YWx1ZXMgaXQgZ2l2ZXNcbiAqIHRvIFBhcnQudXBkYXRlKCkuXG4gKi9cbmV4cG9ydCB0eXBlIFRlbXBsYXRlUGFydCA9IHtcbiAgcmVhZG9ubHkgdHlwZTogJ25vZGUnLFxuICBpbmRleDogbnVtYmVyXG59fHtyZWFkb25seSB0eXBlOiAnYXR0cmlidXRlJywgaW5kZXg6IG51bWJlciwgcmVhZG9ubHkgbmFtZTogc3RyaW5nLCByZWFkb25seSBzdHJpbmdzOiBSZWFkb25seUFycmF5PHN0cmluZz59O1xuXG5leHBvcnQgY29uc3QgaXNUZW1wbGF0ZVBhcnRBY3RpdmUgPSAocGFydDogVGVtcGxhdGVQYXJ0KSA9PiBwYXJ0LmluZGV4ICE9PSAtMTtcblxuLy8gQWxsb3dzIGBkb2N1bWVudC5jcmVhdGVDb21tZW50KCcnKWAgdG8gYmUgcmVuYW1lZCBmb3IgYVxuLy8gc21hbGwgbWFudWFsIHNpemUtc2F2aW5ncy5cbmV4cG9ydCBjb25zdCBjcmVhdGVNYXJrZXIgPSAoKSA9PiBkb2N1bWVudC5jcmVhdGVDb21tZW50KCcnKTtcblxuLyoqXG4gKiBUaGlzIHJlZ2V4IGV4dHJhY3RzIHRoZSBhdHRyaWJ1dGUgbmFtZSBwcmVjZWRpbmcgYW4gYXR0cmlidXRlLXBvc2l0aW9uXG4gKiBleHByZXNzaW9uLiBJdCBkb2VzIHRoaXMgYnkgbWF0Y2hpbmcgdGhlIHN5bnRheCBhbGxvd2VkIGZvciBhdHRyaWJ1dGVzXG4gKiBhZ2FpbnN0IHRoZSBzdHJpbmcgbGl0ZXJhbCBkaXJlY3RseSBwcmVjZWRpbmcgdGhlIGV4cHJlc3Npb24sIGFzc3VtaW5nIHRoYXRcbiAqIHRoZSBleHByZXNzaW9uIGlzIGluIGFuIGF0dHJpYnV0ZS12YWx1ZSBwb3NpdGlvbi5cbiAqXG4gKiBTZWUgYXR0cmlidXRlcyBpbiB0aGUgSFRNTCBzcGVjOlxuICogaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L3N5bnRheC5odG1sI2VsZW1lbnRzLWF0dHJpYnV0ZXNcbiAqXG4gKiBcIiBcXHgwOVxceDBhXFx4MGNcXHgwZFwiIGFyZSBIVE1MIHNwYWNlIGNoYXJhY3RlcnM6XG4gKiBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvaW5mcmFzdHJ1Y3R1cmUuaHRtbCNzcGFjZS1jaGFyYWN0ZXJzXG4gKlxuICogXCJcXDAtXFx4MUZcXHg3Ri1cXHg5RlwiIGFyZSBVbmljb2RlIGNvbnRyb2wgY2hhcmFjdGVycywgd2hpY2ggaW5jbHVkZXMgZXZlcnlcbiAqIHNwYWNlIGNoYXJhY3RlciBleGNlcHQgXCIgXCIuXG4gKlxuICogU28gYW4gYXR0cmlidXRlIGlzOlxuICogICogVGhlIG5hbWU6IGFueSBjaGFyYWN0ZXIgZXhjZXB0IGEgY29udHJvbCBjaGFyYWN0ZXIsIHNwYWNlIGNoYXJhY3RlciwgKCcpLFxuICogICAgKFwiKSwgXCI+XCIsIFwiPVwiLCBvciBcIi9cIlxuICogICogRm9sbG93ZWQgYnkgemVybyBvciBtb3JlIHNwYWNlIGNoYXJhY3RlcnNcbiAqICAqIEZvbGxvd2VkIGJ5IFwiPVwiXG4gKiAgKiBGb2xsb3dlZCBieSB6ZXJvIG9yIG1vcmUgc3BhY2UgY2hhcmFjdGVyc1xuICogICogRm9sbG93ZWQgYnk6XG4gKiAgICAqIEFueSBjaGFyYWN0ZXIgZXhjZXB0IHNwYWNlLCAoJyksIChcIiksIFwiPFwiLCBcIj5cIiwgXCI9XCIsIChgKSwgb3JcbiAqICAgICogKFwiKSB0aGVuIGFueSBub24tKFwiKSwgb3JcbiAqICAgICogKCcpIHRoZW4gYW55IG5vbi0oJylcbiAqL1xuZXhwb3J0IGNvbnN0IGxhc3RBdHRyaWJ1dGVOYW1lUmVnZXggPVxuICAgIC8oWyBcXHgwOVxceDBhXFx4MGNcXHgwZF0pKFteXFwwLVxceDFGXFx4N0YtXFx4OUYgXCInPj0vXSspKFsgXFx4MDlcXHgwYVxceDBjXFx4MGRdKj1bIFxceDA5XFx4MGFcXHgwY1xceDBkXSooPzpbXiBcXHgwOVxceDBhXFx4MGNcXHgwZFwiJ2A8Pj1dKnxcIlteXCJdKnwnW14nXSopKSQvO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuXG4vKipcbiAqIEBtb2R1bGUgbGl0LWh0bWxcbiAqL1xuXG5pbXBvcnQge2lzQ0VQb2x5ZmlsbH0gZnJvbSAnLi9kb20uanMnO1xuaW1wb3J0IHtQYXJ0fSBmcm9tICcuL3BhcnQuanMnO1xuaW1wb3J0IHtSZW5kZXJPcHRpb25zfSBmcm9tICcuL3JlbmRlci1vcHRpb25zLmpzJztcbmltcG9ydCB7VGVtcGxhdGVQcm9jZXNzb3J9IGZyb20gJy4vdGVtcGxhdGUtcHJvY2Vzc29yLmpzJztcbmltcG9ydCB7aXNUZW1wbGF0ZVBhcnRBY3RpdmUsIFRlbXBsYXRlLCBUZW1wbGF0ZVBhcnR9IGZyb20gJy4vdGVtcGxhdGUuanMnO1xuXG4vKipcbiAqIEFuIGluc3RhbmNlIG9mIGEgYFRlbXBsYXRlYCB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byB0aGUgRE9NIGFuZCB1cGRhdGVkXG4gKiB3aXRoIG5ldyB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZUluc3RhbmNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBfX3BhcnRzOiBBcnJheTxQYXJ0fHVuZGVmaW5lZD4gPSBbXTtcbiAgcmVhZG9ubHkgcHJvY2Vzc29yOiBUZW1wbGF0ZVByb2Nlc3NvcjtcbiAgcmVhZG9ubHkgb3B0aW9uczogUmVuZGVyT3B0aW9ucztcbiAgcmVhZG9ubHkgdGVtcGxhdGU6IFRlbXBsYXRlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgdGVtcGxhdGU6IFRlbXBsYXRlLCBwcm9jZXNzb3I6IFRlbXBsYXRlUHJvY2Vzc29yLFxuICAgICAgb3B0aW9uczogUmVuZGVyT3B0aW9ucykge1xuICAgIHRoaXMudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICB0aGlzLnByb2Nlc3NvciA9IHByb2Nlc3NvcjtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgdXBkYXRlKHZhbHVlczogUmVhZG9ubHlBcnJheTx1bmtub3duPikge1xuICAgIGxldCBpID0gMDtcbiAgICBmb3IgKGNvbnN0IHBhcnQgb2YgdGhpcy5fX3BhcnRzKSB7XG4gICAgICBpZiAocGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBhcnQuc2V0VmFsdWUodmFsdWVzW2ldKTtcbiAgICAgIH1cbiAgICAgIGkrKztcbiAgICB9XG4gICAgZm9yIChjb25zdCBwYXJ0IG9mIHRoaXMuX19wYXJ0cykge1xuICAgICAgaWYgKHBhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwYXJ0LmNvbW1pdCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9jbG9uZSgpOiBEb2N1bWVudEZyYWdtZW50IHtcbiAgICAvLyBUaGVyZSBhcmUgYSBudW1iZXIgb2Ygc3RlcHMgaW4gdGhlIGxpZmVjeWNsZSBvZiBhIHRlbXBsYXRlIGluc3RhbmNlJ3NcbiAgICAvLyBET00gZnJhZ21lbnQ6XG4gICAgLy8gIDEuIENsb25lIC0gY3JlYXRlIHRoZSBpbnN0YW5jZSBmcmFnbWVudFxuICAgIC8vICAyLiBBZG9wdCAtIGFkb3B0IGludG8gdGhlIG1haW4gZG9jdW1lbnRcbiAgICAvLyAgMy4gUHJvY2VzcyAtIGZpbmQgcGFydCBtYXJrZXJzIGFuZCBjcmVhdGUgcGFydHNcbiAgICAvLyAgNC4gVXBncmFkZSAtIHVwZ3JhZGUgY3VzdG9tIGVsZW1lbnRzXG4gICAgLy8gIDUuIFVwZGF0ZSAtIHNldCBub2RlLCBhdHRyaWJ1dGUsIHByb3BlcnR5LCBldGMuLCB2YWx1ZXNcbiAgICAvLyAgNi4gQ29ubmVjdCAtIGNvbm5lY3QgdG8gdGhlIGRvY3VtZW50LiBPcHRpb25hbCBhbmQgb3V0c2lkZSBvZiB0aGlzXG4gICAgLy8gICAgIG1ldGhvZC5cbiAgICAvL1xuICAgIC8vIFdlIGhhdmUgYSBmZXcgY29uc3RyYWludHMgb24gdGhlIG9yZGVyaW5nIG9mIHRoZXNlIHN0ZXBzOlxuICAgIC8vICAqIFdlIG5lZWQgdG8gdXBncmFkZSBiZWZvcmUgdXBkYXRpbmcsIHNvIHRoYXQgcHJvcGVydHkgdmFsdWVzIHdpbGwgcGFzc1xuICAgIC8vICAgIHRocm91Z2ggYW55IHByb3BlcnR5IHNldHRlcnMuXG4gICAgLy8gICogV2Ugd291bGQgbGlrZSB0byBwcm9jZXNzIGJlZm9yZSB1cGdyYWRpbmcgc28gdGhhdCB3ZSdyZSBzdXJlIHRoYXQgdGhlXG4gICAgLy8gICAgY2xvbmVkIGZyYWdtZW50IGlzIGluZXJ0IGFuZCBub3QgZGlzdHVyYmVkIGJ5IHNlbGYtbW9kaWZ5aW5nIERPTS5cbiAgICAvLyAgKiBXZSB3YW50IGN1c3RvbSBlbGVtZW50cyB0byB1cGdyYWRlIGV2ZW4gaW4gZGlzY29ubmVjdGVkIGZyYWdtZW50cy5cbiAgICAvL1xuICAgIC8vIEdpdmVuIHRoZXNlIGNvbnN0cmFpbnRzLCB3aXRoIGZ1bGwgY3VzdG9tIGVsZW1lbnRzIHN1cHBvcnQgd2Ugd291bGRcbiAgICAvLyBwcmVmZXIgdGhlIG9yZGVyOiBDbG9uZSwgUHJvY2VzcywgQWRvcHQsIFVwZ3JhZGUsIFVwZGF0ZSwgQ29ubmVjdFxuICAgIC8vXG4gICAgLy8gQnV0IFNhZmFyaSBkb29lcyBub3QgaW1wbGVtZW50IEN1c3RvbUVsZW1lbnRSZWdpc3RyeSN1cGdyYWRlLCBzbyB3ZVxuICAgIC8vIGNhbiBub3QgaW1wbGVtZW50IHRoYXQgb3JkZXIgYW5kIHN0aWxsIGhhdmUgdXBncmFkZS1iZWZvcmUtdXBkYXRlIGFuZFxuICAgIC8vIHVwZ3JhZGUgZGlzY29ubmVjdGVkIGZyYWdtZW50cy4gU28gd2UgaW5zdGVhZCBzYWNyaWZpY2UgdGhlXG4gICAgLy8gcHJvY2Vzcy1iZWZvcmUtdXBncmFkZSBjb25zdHJhaW50LCBzaW5jZSBpbiBDdXN0b20gRWxlbWVudHMgdjEgZWxlbWVudHNcbiAgICAvLyBtdXN0IG5vdCBtb2RpZnkgdGhlaXIgbGlnaHQgRE9NIGluIHRoZSBjb25zdHJ1Y3Rvci4gV2Ugc3RpbGwgaGF2ZSBpc3N1ZXNcbiAgICAvLyB3aGVuIGNvLWV4aXN0aW5nIHdpdGggQ0V2MCBlbGVtZW50cyBsaWtlIFBvbHltZXIgMSwgYW5kIHdpdGggcG9seWZpbGxzXG4gICAgLy8gdGhhdCBkb24ndCBzdHJpY3RseSBhZGhlcmUgdG8gdGhlIG5vLW1vZGlmaWNhdGlvbiBydWxlIGJlY2F1c2Ugc2hhZG93XG4gICAgLy8gRE9NLCB3aGljaCBtYXkgYmUgY3JlYXRlZCBpbiB0aGUgY29uc3RydWN0b3IsIGlzIGVtdWxhdGVkIGJ5IGJlaW5nIHBsYWNlZFxuICAgIC8vIGluIHRoZSBsaWdodCBET00uXG4gICAgLy9cbiAgICAvLyBUaGUgcmVzdWx0aW5nIG9yZGVyIGlzIG9uIG5hdGl2ZSBpczogQ2xvbmUsIEFkb3B0LCBVcGdyYWRlLCBQcm9jZXNzLFxuICAgIC8vIFVwZGF0ZSwgQ29ubmVjdC4gZG9jdW1lbnQuaW1wb3J0Tm9kZSgpIHBlcmZvcm1zIENsb25lLCBBZG9wdCwgYW5kIFVwZ3JhZGVcbiAgICAvLyBpbiBvbmUgc3RlcC5cbiAgICAvL1xuICAgIC8vIFRoZSBDdXN0b20gRWxlbWVudHMgdjEgcG9seWZpbGwgc3VwcG9ydHMgdXBncmFkZSgpLCBzbyB0aGUgb3JkZXIgd2hlblxuICAgIC8vIHBvbHlmaWxsZWQgaXMgdGhlIG1vcmUgaWRlYWw6IENsb25lLCBQcm9jZXNzLCBBZG9wdCwgVXBncmFkZSwgVXBkYXRlLFxuICAgIC8vIENvbm5lY3QuXG5cbiAgICBjb25zdCBmcmFnbWVudCA9IGlzQ0VQb2x5ZmlsbCA/XG4gICAgICAgIHRoaXMudGVtcGxhdGUuZWxlbWVudC5jb250ZW50LmNsb25lTm9kZSh0cnVlKSBhcyBEb2N1bWVudEZyYWdtZW50IDpcbiAgICAgICAgZG9jdW1lbnQuaW1wb3J0Tm9kZSh0aGlzLnRlbXBsYXRlLmVsZW1lbnQuY29udGVudCwgdHJ1ZSk7XG5cbiAgICBjb25zdCBzdGFjazogTm9kZVtdID0gW107XG4gICAgY29uc3QgcGFydHMgPSB0aGlzLnRlbXBsYXRlLnBhcnRzO1xuICAgIC8vIEVkZ2UgbmVlZHMgYWxsIDQgcGFyYW1ldGVycyBwcmVzZW50OyBJRTExIG5lZWRzIDNyZCBwYXJhbWV0ZXIgdG8gYmUgbnVsbFxuICAgIGNvbnN0IHdhbGtlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoXG4gICAgICAgIGZyYWdtZW50LFxuICAgICAgICAxMzMgLyogTm9kZUZpbHRlci5TSE9XX3tFTEVNRU5UfENPTU1FTlR8VEVYVH0gKi8sXG4gICAgICAgIG51bGwsXG4gICAgICAgIGZhbHNlKTtcbiAgICBsZXQgcGFydEluZGV4ID0gMDtcbiAgICBsZXQgbm9kZUluZGV4ID0gMDtcbiAgICBsZXQgcGFydDogVGVtcGxhdGVQYXJ0O1xuICAgIGxldCBub2RlID0gd2Fsa2VyLm5leHROb2RlKCk7XG4gICAgLy8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgbm9kZXMgYW5kIHBhcnRzIG9mIGEgdGVtcGxhdGVcbiAgICB3aGlsZSAocGFydEluZGV4IDwgcGFydHMubGVuZ3RoKSB7XG4gICAgICBwYXJ0ID0gcGFydHNbcGFydEluZGV4XTtcbiAgICAgIGlmICghaXNUZW1wbGF0ZVBhcnRBY3RpdmUocGFydCkpIHtcbiAgICAgICAgdGhpcy5fX3BhcnRzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcGFydEluZGV4Kys7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBQcm9ncmVzcyB0aGUgdHJlZSB3YWxrZXIgdW50aWwgd2UgZmluZCBvdXIgbmV4dCBwYXJ0J3Mgbm9kZS5cbiAgICAgIC8vIE5vdGUgdGhhdCBtdWx0aXBsZSBwYXJ0cyBtYXkgc2hhcmUgdGhlIHNhbWUgbm9kZSAoYXR0cmlidXRlIHBhcnRzXG4gICAgICAvLyBvbiBhIHNpbmdsZSBlbGVtZW50KSwgc28gdGhpcyBsb29wIG1heSBub3QgcnVuIGF0IGFsbC5cbiAgICAgIHdoaWxlIChub2RlSW5kZXggPCBwYXJ0LmluZGV4KSB7XG4gICAgICAgIG5vZGVJbmRleCsrO1xuICAgICAgICBpZiAobm9kZSEubm9kZU5hbWUgPT09ICdURU1QTEFURScpIHtcbiAgICAgICAgICBzdGFjay5wdXNoKG5vZGUhKTtcbiAgICAgICAgICB3YWxrZXIuY3VycmVudE5vZGUgPSAobm9kZSBhcyBIVE1MVGVtcGxhdGVFbGVtZW50KS5jb250ZW50O1xuICAgICAgICB9XG4gICAgICAgIGlmICgobm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpKSA9PT0gbnVsbCkge1xuICAgICAgICAgIC8vIFdlJ3ZlIGV4aGF1c3RlZCB0aGUgY29udGVudCBpbnNpZGUgYSBuZXN0ZWQgdGVtcGxhdGUgZWxlbWVudC5cbiAgICAgICAgICAvLyBCZWNhdXNlIHdlIHN0aWxsIGhhdmUgcGFydHMgKHRoZSBvdXRlciBmb3ItbG9vcCksIHdlIGtub3c6XG4gICAgICAgICAgLy8gLSBUaGVyZSBpcyBhIHRlbXBsYXRlIGluIHRoZSBzdGFja1xuICAgICAgICAgIC8vIC0gVGhlIHdhbGtlciB3aWxsIGZpbmQgYSBuZXh0Tm9kZSBvdXRzaWRlIHRoZSB0ZW1wbGF0ZVxuICAgICAgICAgIHdhbGtlci5jdXJyZW50Tm9kZSA9IHN0YWNrLnBvcCgpITtcbiAgICAgICAgICBub2RlID0gd2Fsa2VyLm5leHROb2RlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gV2UndmUgYXJyaXZlZCBhdCBvdXIgcGFydCdzIG5vZGUuXG4gICAgICBpZiAocGFydC50eXBlID09PSAnbm9kZScpIHtcbiAgICAgICAgY29uc3QgcGFydCA9IHRoaXMucHJvY2Vzc29yLmhhbmRsZVRleHRFeHByZXNzaW9uKHRoaXMub3B0aW9ucyk7XG4gICAgICAgIHBhcnQuaW5zZXJ0QWZ0ZXJOb2RlKG5vZGUhLnByZXZpb3VzU2libGluZyEpO1xuICAgICAgICB0aGlzLl9fcGFydHMucHVzaChwYXJ0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX19wYXJ0cy5wdXNoKC4uLnRoaXMucHJvY2Vzc29yLmhhbmRsZUF0dHJpYnV0ZUV4cHJlc3Npb25zKFxuICAgICAgICAgICAgbm9kZSBhcyBFbGVtZW50LCBwYXJ0Lm5hbWUsIHBhcnQuc3RyaW5ncywgdGhpcy5vcHRpb25zKSk7XG4gICAgICB9XG4gICAgICBwYXJ0SW5kZXgrKztcbiAgICB9XG5cbiAgICBpZiAoaXNDRVBvbHlmaWxsKSB7XG4gICAgICBkb2N1bWVudC5hZG9wdE5vZGUoZnJhZ21lbnQpO1xuICAgICAgY3VzdG9tRWxlbWVudHMudXBncmFkZShmcmFnbWVudCk7XG4gICAgfVxuICAgIHJldHVybiBmcmFnbWVudDtcbiAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuXG4vKipcbiAqIEBtb2R1bGUgbGl0LWh0bWxcbiAqL1xuXG5pbXBvcnQge3JlcGFyZW50Tm9kZXN9IGZyb20gJy4vZG9tLmpzJztcbmltcG9ydCB7VGVtcGxhdGVQcm9jZXNzb3J9IGZyb20gJy4vdGVtcGxhdGUtcHJvY2Vzc29yLmpzJztcbmltcG9ydCB7Ym91bmRBdHRyaWJ1dGVTdWZmaXgsIGxhc3RBdHRyaWJ1dGVOYW1lUmVnZXgsIG1hcmtlciwgbm9kZU1hcmtlcn0gZnJvbSAnLi90ZW1wbGF0ZS5qcyc7XG5cbi8qKlxuICogVGhlIHJldHVybiB0eXBlIG9mIGBodG1sYCwgd2hpY2ggaG9sZHMgYSBUZW1wbGF0ZSBhbmQgdGhlIHZhbHVlcyBmcm9tXG4gKiBpbnRlcnBvbGF0ZWQgZXhwcmVzc2lvbnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZVJlc3VsdCB7XG4gIHJlYWRvbmx5IHN0cmluZ3M6IFRlbXBsYXRlU3RyaW5nc0FycmF5O1xuICByZWFkb25seSB2YWx1ZXM6IFJlYWRvbmx5QXJyYXk8dW5rbm93bj47XG4gIHJlYWRvbmx5IHR5cGU6IHN0cmluZztcbiAgcmVhZG9ubHkgcHJvY2Vzc29yOiBUZW1wbGF0ZVByb2Nlc3NvcjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIHN0cmluZ3M6IFRlbXBsYXRlU3RyaW5nc0FycmF5LCB2YWx1ZXM6IFJlYWRvbmx5QXJyYXk8dW5rbm93bj4sXG4gICAgICB0eXBlOiBzdHJpbmcsIHByb2Nlc3NvcjogVGVtcGxhdGVQcm9jZXNzb3IpIHtcbiAgICB0aGlzLnN0cmluZ3MgPSBzdHJpbmdzO1xuICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5wcm9jZXNzb3IgPSBwcm9jZXNzb3I7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyBvZiBIVE1MIHVzZWQgdG8gY3JlYXRlIGEgYDx0ZW1wbGF0ZT5gIGVsZW1lbnQuXG4gICAqL1xuICBnZXRIVE1MKCk6IHN0cmluZyB7XG4gICAgY29uc3QgbCA9IHRoaXMuc3RyaW5ncy5sZW5ndGggLSAxO1xuICAgIGxldCBodG1sID0gJyc7XG4gICAgbGV0IGlzQ29tbWVudEJpbmRpbmcgPSBmYWxzZTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICBjb25zdCBzID0gdGhpcy5zdHJpbmdzW2ldO1xuICAgICAgLy8gRm9yIGVhY2ggYmluZGluZyB3ZSB3YW50IHRvIGRldGVybWluZSB0aGUga2luZCBvZiBtYXJrZXIgdG8gaW5zZXJ0XG4gICAgICAvLyBpbnRvIHRoZSB0ZW1wbGF0ZSBzb3VyY2UgYmVmb3JlIGl0J3MgcGFyc2VkIGJ5IHRoZSBicm93c2VyJ3MgSFRNTFxuICAgICAgLy8gcGFyc2VyLiBUaGUgbWFya2VyIHR5cGUgaXMgYmFzZWQgb24gd2hldGhlciB0aGUgZXhwcmVzc2lvbiBpcyBpbiBhblxuICAgICAgLy8gYXR0cmlidXRlLCB0ZXh0LCBvciBjb21tZW50IHBvaXNpdGlvbi5cbiAgICAgIC8vICAgKiBGb3Igbm9kZS1wb3NpdGlvbiBiaW5kaW5ncyB3ZSBpbnNlcnQgYSBjb21tZW50IHdpdGggdGhlIG1hcmtlclxuICAgICAgLy8gICAgIHNlbnRpbmVsIGFzIGl0cyB0ZXh0IGNvbnRlbnQsIGxpa2UgPCEtLXt7bGl0LWd1aWR9fS0tPi5cbiAgICAgIC8vICAgKiBGb3IgYXR0cmlidXRlIGJpbmRpbmdzIHdlIGluc2VydCBqdXN0IHRoZSBtYXJrZXIgc2VudGluZWwgZm9yIHRoZVxuICAgICAgLy8gICAgIGZpcnN0IGJpbmRpbmcsIHNvIHRoYXQgd2Ugc3VwcG9ydCB1bnF1b3RlZCBhdHRyaWJ1dGUgYmluZGluZ3MuXG4gICAgICAvLyAgICAgU3Vic2VxdWVudCBiaW5kaW5ncyBjYW4gdXNlIGEgY29tbWVudCBtYXJrZXIgYmVjYXVzZSBtdWx0aS1iaW5kaW5nXG4gICAgICAvLyAgICAgYXR0cmlidXRlcyBtdXN0IGJlIHF1b3RlZC5cbiAgICAgIC8vICAgKiBGb3IgY29tbWVudCBiaW5kaW5ncyB3ZSBpbnNlcnQganVzdCB0aGUgbWFya2VyIHNlbnRpbmVsIHNvIHdlIGRvbid0XG4gICAgICAvLyAgICAgY2xvc2UgdGhlIGNvbW1lbnQuXG4gICAgICAvL1xuICAgICAgLy8gVGhlIGZvbGxvd2luZyBjb2RlIHNjYW5zIHRoZSB0ZW1wbGF0ZSBzb3VyY2UsIGJ1dCBpcyAqbm90KiBhbiBIVE1MXG4gICAgICAvLyBwYXJzZXIuIFdlIGRvbid0IG5lZWQgdG8gdHJhY2sgdGhlIHRyZWUgc3RydWN0dXJlIG9mIHRoZSBIVE1MLCBvbmx5XG4gICAgICAvLyB3aGV0aGVyIGEgYmluZGluZyBpcyBpbnNpZGUgYSBjb21tZW50LCBhbmQgaWYgbm90LCBpZiBpdCBhcHBlYXJzIHRvIGJlXG4gICAgICAvLyB0aGUgZmlyc3QgYmluZGluZyBpbiBhbiBhdHRyaWJ1dGUuXG4gICAgICBjb25zdCBjb21tZW50T3BlbiA9IHMubGFzdEluZGV4T2YoJzwhLS0nKTtcbiAgICAgIC8vIFdlJ3JlIGluIGNvbW1lbnQgcG9zaXRpb24gaWYgd2UgaGF2ZSBhIGNvbW1lbnQgb3BlbiB3aXRoIG5vIGZvbGxvd2luZ1xuICAgICAgLy8gY29tbWVudCBjbG9zZS4gQmVjYXVzZSA8LS0gY2FuIGFwcGVhciBpbiBhbiBhdHRyaWJ1dGUgdmFsdWUgdGhlcmUgY2FuXG4gICAgICAvLyBiZSBmYWxzZSBwb3NpdGl2ZXMuXG4gICAgICBpc0NvbW1lbnRCaW5kaW5nID0gKGNvbW1lbnRPcGVuID4gLTEgfHwgaXNDb21tZW50QmluZGluZykgJiZcbiAgICAgICAgICBzLmluZGV4T2YoJy0tPicsIGNvbW1lbnRPcGVuICsgMSkgPT09IC0xO1xuICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYW4gYXR0cmlidXRlLWxpa2Ugc2VxdWVuY2UgcHJlY2VlZGluZyB0aGVcbiAgICAgIC8vIGV4cHJlc3Npb24uIFRoaXMgY2FuIG1hdGNoIFwibmFtZT12YWx1ZVwiIGxpa2Ugc3RydWN0dXJlcyBpbiB0ZXh0LFxuICAgICAgLy8gY29tbWVudHMsIGFuZCBhdHRyaWJ1dGUgdmFsdWVzLCBzbyB0aGVyZSBjYW4gYmUgZmFsc2UtcG9zaXRpdmVzLlxuICAgICAgY29uc3QgYXR0cmlidXRlTWF0Y2ggPSBsYXN0QXR0cmlidXRlTmFtZVJlZ2V4LmV4ZWMocyk7XG4gICAgICBpZiAoYXR0cmlidXRlTWF0Y2ggPT09IG51bGwpIHtcbiAgICAgICAgLy8gV2UncmUgb25seSBpbiB0aGlzIGJyYW5jaCBpZiB3ZSBkb24ndCBoYXZlIGEgYXR0cmlidXRlLWxpa2VcbiAgICAgICAgLy8gcHJlY2VlZGluZyBzZXF1ZW5jZS4gRm9yIGNvbW1lbnRzLCB0aGlzIGd1YXJkcyBhZ2FpbnN0IHVudXN1YWxcbiAgICAgICAgLy8gYXR0cmlidXRlIHZhbHVlcyBsaWtlIDxkaXYgZm9vPVwiPCEtLSR7J2Jhcid9XCI+LiBDYXNlcyBsaWtlXG4gICAgICAgIC8vIDwhLS0gZm9vPSR7J2Jhcid9LS0+IGFyZSBoYW5kbGVkIGNvcnJlY3RseSBpbiB0aGUgYXR0cmlidXRlIGJyYW5jaFxuICAgICAgICAvLyBiZWxvdy5cbiAgICAgICAgaHRtbCArPSBzICsgKGlzQ29tbWVudEJpbmRpbmcgPyBtYXJrZXIgOiBub2RlTWFya2VyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBhdHRyaWJ1dGVzIHdlIHVzZSBqdXN0IGEgbWFya2VyIHNlbnRpbmVsLCBhbmQgYWxzbyBhcHBlbmQgYVxuICAgICAgICAvLyAkbGl0JCBzdWZmaXggdG8gdGhlIG5hbWUgdG8gb3B0LW91dCBvZiBhdHRyaWJ1dGUtc3BlY2lmaWMgcGFyc2luZ1xuICAgICAgICAvLyB0aGF0IElFIGFuZCBFZGdlIGRvIGZvciBzdHlsZSBhbmQgY2VydGFpbiBTVkcgYXR0cmlidXRlcy5cbiAgICAgICAgaHRtbCArPSBzLnN1YnN0cigwLCBhdHRyaWJ1dGVNYXRjaC5pbmRleCkgKyBhdHRyaWJ1dGVNYXRjaFsxXSArXG4gICAgICAgICAgICBhdHRyaWJ1dGVNYXRjaFsyXSArIGJvdW5kQXR0cmlidXRlU3VmZml4ICsgYXR0cmlidXRlTWF0Y2hbM10gK1xuICAgICAgICAgICAgbWFya2VyO1xuICAgICAgfVxuICAgIH1cbiAgICBodG1sICs9IHRoaXMuc3RyaW5nc1tsXTtcbiAgICByZXR1cm4gaHRtbDtcbiAgfVxuXG4gIGdldFRlbXBsYXRlRWxlbWVudCgpOiBIVE1MVGVtcGxhdGVFbGVtZW50IHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG4gICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gdGhpcy5nZXRIVE1MKCk7XG4gICAgcmV0dXJuIHRlbXBsYXRlO1xuICB9XG59XG5cbi8qKlxuICogQSBUZW1wbGF0ZVJlc3VsdCBmb3IgU1ZHIGZyYWdtZW50cy5cbiAqXG4gKiBUaGlzIGNsYXNzIHdyYXBzIEhUTUwgaW4gYW4gYDxzdmc+YCB0YWcgaW4gb3JkZXIgdG8gcGFyc2UgaXRzIGNvbnRlbnRzIGluIHRoZVxuICogU1ZHIG5hbWVzcGFjZSwgdGhlbiBtb2RpZmllcyB0aGUgdGVtcGxhdGUgdG8gcmVtb3ZlIHRoZSBgPHN2Zz5gIHRhZyBzbyB0aGF0XG4gKiBjbG9uZXMgb25seSBjb250YWluZXIgdGhlIG9yaWdpbmFsIGZyYWdtZW50LlxuICovXG5leHBvcnQgY2xhc3MgU1ZHVGVtcGxhdGVSZXN1bHQgZXh0ZW5kcyBUZW1wbGF0ZVJlc3VsdCB7XG4gIGdldEhUTUwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYDxzdmc+JHtzdXBlci5nZXRIVE1MKCl9PC9zdmc+YDtcbiAgfVxuXG4gIGdldFRlbXBsYXRlRWxlbWVudCgpOiBIVE1MVGVtcGxhdGVFbGVtZW50IHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IHN1cGVyLmdldFRlbXBsYXRlRWxlbWVudCgpO1xuICAgIGNvbnN0IGNvbnRlbnQgPSB0ZW1wbGF0ZS5jb250ZW50O1xuICAgIGNvbnN0IHN2Z0VsZW1lbnQgPSBjb250ZW50LmZpcnN0Q2hpbGQhO1xuICAgIGNvbnRlbnQucmVtb3ZlQ2hpbGQoc3ZnRWxlbWVudCk7XG4gICAgcmVwYXJlbnROb2Rlcyhjb250ZW50LCBzdmdFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuXG4vKipcbiAqIEBtb2R1bGUgbGl0LWh0bWxcbiAqL1xuXG5pbXBvcnQge2lzRGlyZWN0aXZlfSBmcm9tICcuL2RpcmVjdGl2ZS5qcyc7XG5pbXBvcnQge3JlbW92ZU5vZGVzfSBmcm9tICcuL2RvbS5qcyc7XG5pbXBvcnQge25vQ2hhbmdlLCBub3RoaW5nLCBQYXJ0fSBmcm9tICcuL3BhcnQuanMnO1xuaW1wb3J0IHtSZW5kZXJPcHRpb25zfSBmcm9tICcuL3JlbmRlci1vcHRpb25zLmpzJztcbmltcG9ydCB7VGVtcGxhdGVJbnN0YW5jZX0gZnJvbSAnLi90ZW1wbGF0ZS1pbnN0YW5jZS5qcyc7XG5pbXBvcnQge1RlbXBsYXRlUmVzdWx0fSBmcm9tICcuL3RlbXBsYXRlLXJlc3VsdC5qcyc7XG5pbXBvcnQge2NyZWF0ZU1hcmtlcn0gZnJvbSAnLi90ZW1wbGF0ZS5qcyc7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXR5cGVvZi1vcGVyYXRvclxuZXhwb3J0IHR5cGUgUHJpbWl0aXZlID0gbnVsbHx1bmRlZmluZWR8Ym9vbGVhbnxudW1iZXJ8c3RyaW5nfFN5bWJvbHxiaWdpbnQ7XG5leHBvcnQgY29uc3QgaXNQcmltaXRpdmUgPSAodmFsdWU6IHVua25vd24pOiB2YWx1ZSBpcyBQcmltaXRpdmUgPT4ge1xuICByZXR1cm4gKFxuICAgICAgdmFsdWUgPT09IG51bGwgfHxcbiAgICAgICEodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpKTtcbn07XG5leHBvcnQgY29uc3QgaXNJdGVyYWJsZSA9ICh2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIEl0ZXJhYmxlPHVua25vd24+ID0+IHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpIHx8XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gICAgICAhISh2YWx1ZSAmJiAodmFsdWUgYXMgYW55KVtTeW1ib2wuaXRlcmF0b3JdKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGF0dHJpYnV0ZSB2YWx1ZXMgdG8gdGhlIERPTSBmb3IgYSBncm91cCBvZiBBdHRyaWJ1dGVQYXJ0cyBib3VuZCB0byBhXG4gKiBzaW5nbGUgYXR0aWJ1dGUuIFRoZSB2YWx1ZSBpcyBvbmx5IHNldCBvbmNlIGV2ZW4gaWYgdGhlcmUgYXJlIG11bHRpcGxlIHBhcnRzXG4gKiBmb3IgYW4gYXR0cmlidXRlLlxuICovXG5leHBvcnQgY2xhc3MgQXR0cmlidXRlQ29tbWl0dGVyIHtcbiAgcmVhZG9ubHkgZWxlbWVudDogRWxlbWVudDtcbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICByZWFkb25seSBzdHJpbmdzOiBSZWFkb25seUFycmF5PHN0cmluZz47XG4gIHJlYWRvbmx5IHBhcnRzOiBSZWFkb25seUFycmF5PEF0dHJpYnV0ZVBhcnQ+O1xuICBkaXJ0eSA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IoZWxlbWVudDogRWxlbWVudCwgbmFtZTogc3RyaW5nLCBzdHJpbmdzOiBSZWFkb25seUFycmF5PHN0cmluZz4pIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5zdHJpbmdzID0gc3RyaW5ncztcbiAgICB0aGlzLnBhcnRzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJpbmdzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgKHRoaXMucGFydHMgYXMgQXR0cmlidXRlUGFydFtdKVtpXSA9IHRoaXMuX2NyZWF0ZVBhcnQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHNpbmdsZSBwYXJ0LiBPdmVycmlkZSB0aGlzIHRvIGNyZWF0ZSBhIGRpZmZlcm50IHR5cGUgb2YgcGFydC5cbiAgICovXG4gIHByb3RlY3RlZCBfY3JlYXRlUGFydCgpOiBBdHRyaWJ1dGVQYXJ0IHtcbiAgICByZXR1cm4gbmV3IEF0dHJpYnV0ZVBhcnQodGhpcyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgX2dldFZhbHVlKCk6IHVua25vd24ge1xuICAgIGNvbnN0IHN0cmluZ3MgPSB0aGlzLnN0cmluZ3M7XG4gICAgY29uc3QgbCA9IHN0cmluZ3MubGVuZ3RoIC0gMTtcbiAgICBsZXQgdGV4dCA9ICcnO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRleHQgKz0gc3RyaW5nc1tpXTtcbiAgICAgIGNvbnN0IHBhcnQgPSB0aGlzLnBhcnRzW2ldO1xuICAgICAgaWYgKHBhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCB2ID0gcGFydC52YWx1ZTtcbiAgICAgICAgaWYgKGlzUHJpbWl0aXZlKHYpIHx8ICFpc0l0ZXJhYmxlKHYpKSB7XG4gICAgICAgICAgdGV4dCArPSB0eXBlb2YgdiA9PT0gJ3N0cmluZycgPyB2IDogU3RyaW5nKHYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvciAoY29uc3QgdCBvZiB2KSB7XG4gICAgICAgICAgICB0ZXh0ICs9IHR5cGVvZiB0ID09PSAnc3RyaW5nJyA/IHQgOiBTdHJpbmcodCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGV4dCArPSBzdHJpbmdzW2xdO1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgY29tbWl0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmRpcnR5KSB7XG4gICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMubmFtZSwgdGhpcy5fZ2V0VmFsdWUoKSBhcyBzdHJpbmcpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEEgUGFydCB0aGF0IGNvbnRyb2xzIGFsbCBvciBwYXJ0IG9mIGFuIGF0dHJpYnV0ZSB2YWx1ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEF0dHJpYnV0ZVBhcnQgaW1wbGVtZW50cyBQYXJ0IHtcbiAgcmVhZG9ubHkgY29tbWl0dGVyOiBBdHRyaWJ1dGVDb21taXR0ZXI7XG4gIHZhbHVlOiB1bmtub3duID0gdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKGNvbW1pdHRlcjogQXR0cmlidXRlQ29tbWl0dGVyKSB7XG4gICAgdGhpcy5jb21taXR0ZXIgPSBjb21taXR0ZXI7XG4gIH1cblxuICBzZXRWYWx1ZSh2YWx1ZTogdW5rbm93bik6IHZvaWQge1xuICAgIGlmICh2YWx1ZSAhPT0gbm9DaGFuZ2UgJiYgKCFpc1ByaW1pdGl2ZSh2YWx1ZSkgfHwgdmFsdWUgIT09IHRoaXMudmFsdWUpKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAvLyBJZiB0aGUgdmFsdWUgaXMgYSBub3QgYSBkaXJlY3RpdmUsIGRpcnR5IHRoZSBjb21taXR0ZXIgc28gdGhhdCBpdCdsbFxuICAgICAgLy8gY2FsbCBzZXRBdHRyaWJ1dGUuIElmIHRoZSB2YWx1ZSBpcyBhIGRpcmVjdGl2ZSwgaXQnbGwgZGlydHkgdGhlXG4gICAgICAvLyBjb21taXR0ZXIgaWYgaXQgY2FsbHMgc2V0VmFsdWUoKS5cbiAgICAgIGlmICghaXNEaXJlY3RpdmUodmFsdWUpKSB7XG4gICAgICAgIHRoaXMuY29tbWl0dGVyLmRpcnR5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb21taXQoKSB7XG4gICAgd2hpbGUgKGlzRGlyZWN0aXZlKHRoaXMudmFsdWUpKSB7XG4gICAgICBjb25zdCBkaXJlY3RpdmUgPSB0aGlzLnZhbHVlO1xuICAgICAgdGhpcy52YWx1ZSA9IG5vQ2hhbmdlO1xuICAgICAgZGlyZWN0aXZlKHRoaXMpO1xuICAgIH1cbiAgICBpZiAodGhpcy52YWx1ZSA9PT0gbm9DaGFuZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5jb21taXR0ZXIuY29tbWl0KCk7XG4gIH1cbn1cblxuLyoqXG4gKiBBIFBhcnQgdGhhdCBjb250cm9scyBhIGxvY2F0aW9uIHdpdGhpbiBhIE5vZGUgdHJlZS4gTGlrZSBhIFJhbmdlLCBOb2RlUGFydFxuICogaGFzIHN0YXJ0IGFuZCBlbmQgbG9jYXRpb25zIGFuZCBjYW4gc2V0IGFuZCB1cGRhdGUgdGhlIE5vZGVzIGJldHdlZW4gdGhvc2VcbiAqIGxvY2F0aW9ucy5cbiAqXG4gKiBOb2RlUGFydHMgc3VwcG9ydCBzZXZlcmFsIHZhbHVlIHR5cGVzOiBwcmltaXRpdmVzLCBOb2RlcywgVGVtcGxhdGVSZXN1bHRzLFxuICogYXMgd2VsbCBhcyBhcnJheXMgYW5kIGl0ZXJhYmxlcyBvZiB0aG9zZSB0eXBlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIE5vZGVQYXJ0IGltcGxlbWVudHMgUGFydCB7XG4gIHJlYWRvbmx5IG9wdGlvbnM6IFJlbmRlck9wdGlvbnM7XG4gIHN0YXJ0Tm9kZSE6IE5vZGU7XG4gIGVuZE5vZGUhOiBOb2RlO1xuICB2YWx1ZTogdW5rbm93biA9IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBfX3BlbmRpbmdWYWx1ZTogdW5rbm93biA9IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBSZW5kZXJPcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBlbmRzIHRoaXMgcGFydCBpbnRvIGEgY29udGFpbmVyLlxuICAgKlxuICAgKiBUaGlzIHBhcnQgbXVzdCBiZSBlbXB0eSwgYXMgaXRzIGNvbnRlbnRzIGFyZSBub3QgYXV0b21hdGljYWxseSBtb3ZlZC5cbiAgICovXG4gIGFwcGVuZEludG8oY29udGFpbmVyOiBOb2RlKSB7XG4gICAgdGhpcy5zdGFydE5vZGUgPSBjb250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlTWFya2VyKCkpO1xuICAgIHRoaXMuZW5kTm9kZSA9IGNvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVNYXJrZXIoKSk7XG4gIH1cblxuICAvKipcbiAgICogSW5zZXJ0cyB0aGlzIHBhcnQgYWZ0ZXIgdGhlIGByZWZgIG5vZGUgKGJldHdlZW4gYHJlZmAgYW5kIGByZWZgJ3MgbmV4dFxuICAgKiBzaWJsaW5nKS4gQm90aCBgcmVmYCBhbmQgaXRzIG5leHQgc2libGluZyBtdXN0IGJlIHN0YXRpYywgdW5jaGFuZ2luZyBub2Rlc1xuICAgKiBzdWNoIGFzIHRob3NlIHRoYXQgYXBwZWFyIGluIGEgbGl0ZXJhbCBzZWN0aW9uIG9mIGEgdGVtcGxhdGUuXG4gICAqXG4gICAqIFRoaXMgcGFydCBtdXN0IGJlIGVtcHR5LCBhcyBpdHMgY29udGVudHMgYXJlIG5vdCBhdXRvbWF0aWNhbGx5IG1vdmVkLlxuICAgKi9cbiAgaW5zZXJ0QWZ0ZXJOb2RlKHJlZjogTm9kZSkge1xuICAgIHRoaXMuc3RhcnROb2RlID0gcmVmO1xuICAgIHRoaXMuZW5kTm9kZSA9IHJlZi5uZXh0U2libGluZyE7XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyB0aGlzIHBhcnQgaW50byBhIHBhcmVudCBwYXJ0LlxuICAgKlxuICAgKiBUaGlzIHBhcnQgbXVzdCBiZSBlbXB0eSwgYXMgaXRzIGNvbnRlbnRzIGFyZSBub3QgYXV0b21hdGljYWxseSBtb3ZlZC5cbiAgICovXG4gIGFwcGVuZEludG9QYXJ0KHBhcnQ6IE5vZGVQYXJ0KSB7XG4gICAgcGFydC5fX2luc2VydCh0aGlzLnN0YXJ0Tm9kZSA9IGNyZWF0ZU1hcmtlcigpKTtcbiAgICBwYXJ0Ll9faW5zZXJ0KHRoaXMuZW5kTm9kZSA9IGNyZWF0ZU1hcmtlcigpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnNlcnRzIHRoaXMgcGFydCBhZnRlciB0aGUgYHJlZmAgcGFydC5cbiAgICpcbiAgICogVGhpcyBwYXJ0IG11c3QgYmUgZW1wdHksIGFzIGl0cyBjb250ZW50cyBhcmUgbm90IGF1dG9tYXRpY2FsbHkgbW92ZWQuXG4gICAqL1xuICBpbnNlcnRBZnRlclBhcnQocmVmOiBOb2RlUGFydCkge1xuICAgIHJlZi5fX2luc2VydCh0aGlzLnN0YXJ0Tm9kZSA9IGNyZWF0ZU1hcmtlcigpKTtcbiAgICB0aGlzLmVuZE5vZGUgPSByZWYuZW5kTm9kZTtcbiAgICByZWYuZW5kTm9kZSA9IHRoaXMuc3RhcnROb2RlO1xuICB9XG5cbiAgc2V0VmFsdWUodmFsdWU6IHVua25vd24pOiB2b2lkIHtcbiAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gdmFsdWU7XG4gIH1cblxuICBjb21taXQoKSB7XG4gICAgd2hpbGUgKGlzRGlyZWN0aXZlKHRoaXMuX19wZW5kaW5nVmFsdWUpKSB7XG4gICAgICBjb25zdCBkaXJlY3RpdmUgPSB0aGlzLl9fcGVuZGluZ1ZhbHVlO1xuICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IG5vQ2hhbmdlO1xuICAgICAgZGlyZWN0aXZlKHRoaXMpO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX19wZW5kaW5nVmFsdWU7XG4gICAgaWYgKHZhbHVlID09PSBub0NoYW5nZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNQcmltaXRpdmUodmFsdWUpKSB7XG4gICAgICBpZiAodmFsdWUgIT09IHRoaXMudmFsdWUpIHtcbiAgICAgICAgdGhpcy5fX2NvbW1pdFRleHQodmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlc3VsdCkge1xuICAgICAgdGhpcy5fX2NvbW1pdFRlbXBsYXRlUmVzdWx0KHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgTm9kZSkge1xuICAgICAgdGhpcy5fX2NvbW1pdE5vZGUodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoaXNJdGVyYWJsZSh2YWx1ZSkpIHtcbiAgICAgIHRoaXMuX19jb21taXRJdGVyYWJsZSh2YWx1ZSk7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gbm90aGluZykge1xuICAgICAgdGhpcy52YWx1ZSA9IG5vdGhpbmc7XG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZhbGxiYWNrLCB3aWxsIHJlbmRlciB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uXG4gICAgICB0aGlzLl9fY29tbWl0VGV4dCh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfX2luc2VydChub2RlOiBOb2RlKSB7XG4gICAgdGhpcy5lbmROb2RlLnBhcmVudE5vZGUhLmluc2VydEJlZm9yZShub2RlLCB0aGlzLmVuZE5vZGUpO1xuICB9XG5cbiAgcHJpdmF0ZSBfX2NvbW1pdE5vZGUodmFsdWU6IE5vZGUpOiB2b2lkIHtcbiAgICBpZiAodGhpcy52YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5jbGVhcigpO1xuICAgIHRoaXMuX19pbnNlcnQodmFsdWUpO1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIHByaXZhdGUgX19jb21taXRUZXh0KHZhbHVlOiB1bmtub3duKTogdm9pZCB7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlLm5leHRTaWJsaW5nITtcbiAgICB2YWx1ZSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xuICAgIGlmIChub2RlID09PSB0aGlzLmVuZE5vZGUucHJldmlvdXNTaWJsaW5nICYmXG4gICAgICAgIG5vZGUubm9kZVR5cGUgPT09IDMgLyogTm9kZS5URVhUX05PREUgKi8pIHtcbiAgICAgIC8vIElmIHdlIG9ubHkgaGF2ZSBhIHNpbmdsZSB0ZXh0IG5vZGUgYmV0d2VlbiB0aGUgbWFya2Vycywgd2UgY2FuIGp1c3RcbiAgICAgIC8vIHNldCBpdHMgdmFsdWUsIHJhdGhlciB0aGFuIHJlcGxhY2luZyBpdC5cbiAgICAgIC8vIFRPRE8oanVzdGluZmFnbmFuaSk6IENhbiB3ZSBqdXN0IGNoZWNrIGlmIHRoaXMudmFsdWUgaXMgcHJpbWl0aXZlP1xuICAgICAgKG5vZGUgYXMgVGV4dCkuZGF0YSA9IHZhbHVlIGFzIHN0cmluZztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fX2NvbW1pdE5vZGUoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXG4gICAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHZhbHVlIDogU3RyaW5nKHZhbHVlKSkpO1xuICAgIH1cbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cblxuICBwcml2YXRlIF9fY29tbWl0VGVtcGxhdGVSZXN1bHQodmFsdWU6IFRlbXBsYXRlUmVzdWx0KTogdm9pZCB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSB0aGlzLm9wdGlvbnMudGVtcGxhdGVGYWN0b3J5KHZhbHVlKTtcbiAgICBpZiAodGhpcy52YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlSW5zdGFuY2UgJiZcbiAgICAgICAgdGhpcy52YWx1ZS50ZW1wbGF0ZSA9PT0gdGVtcGxhdGUpIHtcbiAgICAgIHRoaXMudmFsdWUudXBkYXRlKHZhbHVlLnZhbHVlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBwcm9wYWdhdGUgdGhlIHRlbXBsYXRlIHByb2Nlc3NvciBmcm9tIHRoZSBUZW1wbGF0ZVJlc3VsdFxuICAgICAgLy8gc28gdGhhdCB3ZSB1c2UgaXRzIHN5bnRheCBleHRlbnNpb24sIGV0Yy4gVGhlIHRlbXBsYXRlIGZhY3RvcnkgY29tZXNcbiAgICAgIC8vIGZyb20gdGhlIHJlbmRlciBmdW5jdGlvbiBvcHRpb25zIHNvIHRoYXQgaXQgY2FuIGNvbnRyb2wgdGVtcGxhdGVcbiAgICAgIC8vIGNhY2hpbmcgYW5kIHByZXByb2Nlc3NpbmcuXG4gICAgICBjb25zdCBpbnN0YW5jZSA9XG4gICAgICAgICAgbmV3IFRlbXBsYXRlSW5zdGFuY2UodGVtcGxhdGUsIHZhbHVlLnByb2Nlc3NvciwgdGhpcy5vcHRpb25zKTtcbiAgICAgIGNvbnN0IGZyYWdtZW50ID0gaW5zdGFuY2UuX2Nsb25lKCk7XG4gICAgICBpbnN0YW5jZS51cGRhdGUodmFsdWUudmFsdWVzKTtcbiAgICAgIHRoaXMuX19jb21taXROb2RlKGZyYWdtZW50KTtcbiAgICAgIHRoaXMudmFsdWUgPSBpbnN0YW5jZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9fY29tbWl0SXRlcmFibGUodmFsdWU6IEl0ZXJhYmxlPHVua25vd24+KTogdm9pZCB7XG4gICAgLy8gRm9yIGFuIEl0ZXJhYmxlLCB3ZSBjcmVhdGUgYSBuZXcgSW5zdGFuY2VQYXJ0IHBlciBpdGVtLCB0aGVuIHNldCBpdHNcbiAgICAvLyB2YWx1ZSB0byB0aGUgaXRlbS4gVGhpcyBpcyBhIGxpdHRsZSBiaXQgb2Ygb3ZlcmhlYWQgZm9yIGV2ZXJ5IGl0ZW0gaW5cbiAgICAvLyBhbiBJdGVyYWJsZSwgYnV0IGl0IGxldHMgdXMgcmVjdXJzZSBlYXNpbHkgYW5kIGVmZmljaWVudGx5IHVwZGF0ZSBBcnJheXNcbiAgICAvLyBvZiBUZW1wbGF0ZVJlc3VsdHMgdGhhdCB3aWxsIGJlIGNvbW1vbmx5IHJldHVybmVkIGZyb20gZXhwcmVzc2lvbnMgbGlrZTpcbiAgICAvLyBhcnJheS5tYXAoKGkpID0+IGh0bWxgJHtpfWApLCBieSByZXVzaW5nIGV4aXN0aW5nIFRlbXBsYXRlSW5zdGFuY2VzLlxuXG4gICAgLy8gSWYgX3ZhbHVlIGlzIGFuIGFycmF5LCB0aGVuIHRoZSBwcmV2aW91cyByZW5kZXIgd2FzIG9mIGFuXG4gICAgLy8gaXRlcmFibGUgYW5kIF92YWx1ZSB3aWxsIGNvbnRhaW4gdGhlIE5vZGVQYXJ0cyBmcm9tIHRoZSBwcmV2aW91c1xuICAgIC8vIHJlbmRlci4gSWYgX3ZhbHVlIGlzIG5vdCBhbiBhcnJheSwgY2xlYXIgdGhpcyBwYXJ0IGFuZCBtYWtlIGEgbmV3XG4gICAgLy8gYXJyYXkgZm9yIE5vZGVQYXJ0cy5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodGhpcy52YWx1ZSkpIHtcbiAgICAgIHRoaXMudmFsdWUgPSBbXTtcbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICB9XG5cbiAgICAvLyBMZXRzIHVzIGtlZXAgdHJhY2sgb2YgaG93IG1hbnkgaXRlbXMgd2Ugc3RhbXBlZCBzbyB3ZSBjYW4gY2xlYXIgbGVmdG92ZXJcbiAgICAvLyBpdGVtcyBmcm9tIGEgcHJldmlvdXMgcmVuZGVyXG4gICAgY29uc3QgaXRlbVBhcnRzID0gdGhpcy52YWx1ZSBhcyBOb2RlUGFydFtdO1xuICAgIGxldCBwYXJ0SW5kZXggPSAwO1xuICAgIGxldCBpdGVtUGFydDogTm9kZVBhcnR8dW5kZWZpbmVkO1xuXG4gICAgZm9yIChjb25zdCBpdGVtIG9mIHZhbHVlKSB7XG4gICAgICAvLyBUcnkgdG8gcmV1c2UgYW4gZXhpc3RpbmcgcGFydFxuICAgICAgaXRlbVBhcnQgPSBpdGVtUGFydHNbcGFydEluZGV4XTtcblxuICAgICAgLy8gSWYgbm8gZXhpc3RpbmcgcGFydCwgY3JlYXRlIGEgbmV3IG9uZVxuICAgICAgaWYgKGl0ZW1QYXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaXRlbVBhcnQgPSBuZXcgTm9kZVBhcnQodGhpcy5vcHRpb25zKTtcbiAgICAgICAgaXRlbVBhcnRzLnB1c2goaXRlbVBhcnQpO1xuICAgICAgICBpZiAocGFydEluZGV4ID09PSAwKSB7XG4gICAgICAgICAgaXRlbVBhcnQuYXBwZW5kSW50b1BhcnQodGhpcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVBhcnQuaW5zZXJ0QWZ0ZXJQYXJ0KGl0ZW1QYXJ0c1twYXJ0SW5kZXggLSAxXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGl0ZW1QYXJ0LnNldFZhbHVlKGl0ZW0pO1xuICAgICAgaXRlbVBhcnQuY29tbWl0KCk7XG4gICAgICBwYXJ0SW5kZXgrKztcbiAgICB9XG5cbiAgICBpZiAocGFydEluZGV4IDwgaXRlbVBhcnRzLmxlbmd0aCkge1xuICAgICAgLy8gVHJ1bmNhdGUgdGhlIHBhcnRzIGFycmF5IHNvIF92YWx1ZSByZWZsZWN0cyB0aGUgY3VycmVudCBzdGF0ZVxuICAgICAgaXRlbVBhcnRzLmxlbmd0aCA9IHBhcnRJbmRleDtcbiAgICAgIHRoaXMuY2xlYXIoaXRlbVBhcnQgJiYgaXRlbVBhcnQuZW5kTm9kZSk7XG4gICAgfVxuICB9XG5cbiAgY2xlYXIoc3RhcnROb2RlOiBOb2RlID0gdGhpcy5zdGFydE5vZGUpIHtcbiAgICByZW1vdmVOb2RlcyhcbiAgICAgICAgdGhpcy5zdGFydE5vZGUucGFyZW50Tm9kZSEsIHN0YXJ0Tm9kZS5uZXh0U2libGluZyEsIHRoaXMuZW5kTm9kZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIGEgYm9vbGVhbiBhdHRyaWJ1dGUsIHJvdWdobHkgYXMgZGVmaW5lZCBpbiB0aGUgSFRNTFxuICogc3BlY2lmaWNhdGlvbi5cbiAqXG4gKiBJZiB0aGUgdmFsdWUgaXMgdHJ1dGh5LCB0aGVuIHRoZSBhdHRyaWJ1dGUgaXMgcHJlc2VudCB3aXRoIGEgdmFsdWUgb2ZcbiAqICcnLiBJZiB0aGUgdmFsdWUgaXMgZmFsc2V5LCB0aGUgYXR0cmlidXRlIGlzIHJlbW92ZWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBCb29sZWFuQXR0cmlidXRlUGFydCBpbXBsZW1lbnRzIFBhcnQge1xuICByZWFkb25seSBlbGVtZW50OiBFbGVtZW50O1xuICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHN0cmluZ3M6IFJlYWRvbmx5QXJyYXk8c3RyaW5nPjtcbiAgdmFsdWU6IHVua25vd24gPSB1bmRlZmluZWQ7XG4gIHByaXZhdGUgX19wZW5kaW5nVmFsdWU6IHVua25vd24gPSB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IoZWxlbWVudDogRWxlbWVudCwgbmFtZTogc3RyaW5nLCBzdHJpbmdzOiBSZWFkb25seUFycmF5PHN0cmluZz4pIHtcbiAgICBpZiAoc3RyaW5ncy5sZW5ndGggIT09IDIgfHwgc3RyaW5nc1swXSAhPT0gJycgfHwgc3RyaW5nc1sxXSAhPT0gJycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnQm9vbGVhbiBhdHRyaWJ1dGVzIGNhbiBvbmx5IGNvbnRhaW4gYSBzaW5nbGUgZXhwcmVzc2lvbicpO1xuICAgIH1cbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5zdHJpbmdzID0gc3RyaW5ncztcbiAgfVxuXG4gIHNldFZhbHVlKHZhbHVlOiB1bmtub3duKTogdm9pZCB7XG4gICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgY29tbWl0KCkge1xuICAgIHdoaWxlIChpc0RpcmVjdGl2ZSh0aGlzLl9fcGVuZGluZ1ZhbHVlKSkge1xuICAgICAgY29uc3QgZGlyZWN0aXZlID0gdGhpcy5fX3BlbmRpbmdWYWx1ZTtcbiAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTtcbiAgICAgIGRpcmVjdGl2ZSh0aGlzKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX19wZW5kaW5nVmFsdWUgPT09IG5vQ2hhbmdlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gISF0aGlzLl9fcGVuZGluZ1ZhbHVlO1xuICAgIGlmICh0aGlzLnZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUodGhpcy5uYW1lLCAnJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHRoaXMubmFtZSk7XG4gICAgICB9XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTtcbiAgfVxufVxuXG4vKipcbiAqIFNldHMgYXR0cmlidXRlIHZhbHVlcyBmb3IgUHJvcGVydHlQYXJ0cywgc28gdGhhdCB0aGUgdmFsdWUgaXMgb25seSBzZXQgb25jZVxuICogZXZlbiBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgcGFydHMgZm9yIGEgcHJvcGVydHkuXG4gKlxuICogSWYgYW4gZXhwcmVzc2lvbiBjb250cm9scyB0aGUgd2hvbGUgcHJvcGVydHkgdmFsdWUsIHRoZW4gdGhlIHZhbHVlIGlzIHNpbXBseVxuICogYXNzaWduZWQgdG8gdGhlIHByb3BlcnR5IHVuZGVyIGNvbnRyb2wuIElmIHRoZXJlIGFyZSBzdHJpbmcgbGl0ZXJhbHMgb3JcbiAqIG11bHRpcGxlIGV4cHJlc3Npb25zLCB0aGVuIHRoZSBzdHJpbmdzIGFyZSBleHByZXNzaW9ucyBhcmUgaW50ZXJwb2xhdGVkIGludG9cbiAqIGEgc3RyaW5nIGZpcnN0LlxuICovXG5leHBvcnQgY2xhc3MgUHJvcGVydHlDb21taXR0ZXIgZXh0ZW5kcyBBdHRyaWJ1dGVDb21taXR0ZXIge1xuICByZWFkb25seSBzaW5nbGU6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoZWxlbWVudDogRWxlbWVudCwgbmFtZTogc3RyaW5nLCBzdHJpbmdzOiBSZWFkb25seUFycmF5PHN0cmluZz4pIHtcbiAgICBzdXBlcihlbGVtZW50LCBuYW1lLCBzdHJpbmdzKTtcbiAgICB0aGlzLnNpbmdsZSA9XG4gICAgICAgIChzdHJpbmdzLmxlbmd0aCA9PT0gMiAmJiBzdHJpbmdzWzBdID09PSAnJyAmJiBzdHJpbmdzWzFdID09PSAnJyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgX2NyZWF0ZVBhcnQoKTogUHJvcGVydHlQYXJ0IHtcbiAgICByZXR1cm4gbmV3IFByb3BlcnR5UGFydCh0aGlzKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfZ2V0VmFsdWUoKSB7XG4gICAgaWYgKHRoaXMuc2luZ2xlKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJ0c1swXS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLl9nZXRWYWx1ZSgpO1xuICB9XG5cbiAgY29tbWl0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmRpcnR5KSB7XG4gICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gICAgICAodGhpcy5lbGVtZW50IGFzIGFueSlbdGhpcy5uYW1lXSA9IHRoaXMuX2dldFZhbHVlKCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQcm9wZXJ0eVBhcnQgZXh0ZW5kcyBBdHRyaWJ1dGVQYXJ0IHt9XG5cbi8vIERldGVjdCBldmVudCBsaXN0ZW5lciBvcHRpb25zIHN1cHBvcnQuIElmIHRoZSBgY2FwdHVyZWAgcHJvcGVydHkgaXMgcmVhZFxuLy8gZnJvbSB0aGUgb3B0aW9ucyBvYmplY3QsIHRoZW4gb3B0aW9ucyBhcmUgc3VwcG9ydGVkLiBJZiBub3QsIHRoZW4gdGhlIHRocmlkXG4vLyBhcmd1bWVudCB0byBhZGQvcmVtb3ZlRXZlbnRMaXN0ZW5lciBpcyBpbnRlcnByZXRlZCBhcyB0aGUgYm9vbGVhbiBjYXB0dXJlXG4vLyB2YWx1ZSBzbyB3ZSBzaG91bGQgb25seSBwYXNzIHRoZSBgY2FwdHVyZWAgcHJvcGVydHkuXG5sZXQgZXZlbnRPcHRpb25zU3VwcG9ydGVkID0gZmFsc2U7XG5cbnRyeSB7XG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgZ2V0IGNhcHR1cmUoKSB7XG4gICAgICBldmVudE9wdGlvbnNTdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG9wdGlvbnMgYXMgYW55LCBvcHRpb25zKTtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGVzdCcsIG9wdGlvbnMgYXMgYW55LCBvcHRpb25zKTtcbn0gY2F0Y2ggKF9lKSB7XG59XG5cblxudHlwZSBFdmVudEhhbmRsZXJXaXRoT3B0aW9ucyA9XG4gICAgRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdCZQYXJ0aWFsPEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zPjtcbmV4cG9ydCBjbGFzcyBFdmVudFBhcnQgaW1wbGVtZW50cyBQYXJ0IHtcbiAgcmVhZG9ubHkgZWxlbWVudDogRWxlbWVudDtcbiAgcmVhZG9ubHkgZXZlbnROYW1lOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGV2ZW50Q29udGV4dD86IEV2ZW50VGFyZ2V0O1xuICB2YWx1ZTogdW5kZWZpbmVkfEV2ZW50SGFuZGxlcldpdGhPcHRpb25zID0gdW5kZWZpbmVkO1xuICBwcml2YXRlIF9fb3B0aW9ucz86IEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zO1xuICBwcml2YXRlIF9fcGVuZGluZ1ZhbHVlOiB1bmRlZmluZWR8RXZlbnRIYW5kbGVyV2l0aE9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gIHByaXZhdGUgcmVhZG9ubHkgX19ib3VuZEhhbmRsZUV2ZW50OiAoZXZlbnQ6IEV2ZW50KSA9PiB2b2lkO1xuXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnQsIGV2ZW50TmFtZTogc3RyaW5nLCBldmVudENvbnRleHQ/OiBFdmVudFRhcmdldCkge1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5ldmVudE5hbWUgPSBldmVudE5hbWU7XG4gICAgdGhpcy5ldmVudENvbnRleHQgPSBldmVudENvbnRleHQ7XG4gICAgdGhpcy5fX2JvdW5kSGFuZGxlRXZlbnQgPSAoZSkgPT4gdGhpcy5oYW5kbGVFdmVudChlKTtcbiAgfVxuXG4gIHNldFZhbHVlKHZhbHVlOiB1bmRlZmluZWR8RXZlbnRIYW5kbGVyV2l0aE9wdGlvbnMpOiB2b2lkIHtcbiAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gdmFsdWU7XG4gIH1cblxuICBjb21taXQoKSB7XG4gICAgd2hpbGUgKGlzRGlyZWN0aXZlKHRoaXMuX19wZW5kaW5nVmFsdWUpKSB7XG4gICAgICBjb25zdCBkaXJlY3RpdmUgPSB0aGlzLl9fcGVuZGluZ1ZhbHVlO1xuICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IG5vQ2hhbmdlIGFzIEV2ZW50SGFuZGxlcldpdGhPcHRpb25zO1xuICAgICAgZGlyZWN0aXZlKHRoaXMpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fX3BlbmRpbmdWYWx1ZSA9PT0gbm9DaGFuZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBuZXdMaXN0ZW5lciA9IHRoaXMuX19wZW5kaW5nVmFsdWU7XG4gICAgY29uc3Qgb2xkTGlzdGVuZXIgPSB0aGlzLnZhbHVlO1xuICAgIGNvbnN0IHNob3VsZFJlbW92ZUxpc3RlbmVyID0gbmV3TGlzdGVuZXIgPT0gbnVsbCB8fFxuICAgICAgICBvbGRMaXN0ZW5lciAhPSBudWxsICYmXG4gICAgICAgICAgICAobmV3TGlzdGVuZXIuY2FwdHVyZSAhPT0gb2xkTGlzdGVuZXIuY2FwdHVyZSB8fFxuICAgICAgICAgICAgIG5ld0xpc3RlbmVyLm9uY2UgIT09IG9sZExpc3RlbmVyLm9uY2UgfHxcbiAgICAgICAgICAgICBuZXdMaXN0ZW5lci5wYXNzaXZlICE9PSBvbGRMaXN0ZW5lci5wYXNzaXZlKTtcbiAgICBjb25zdCBzaG91bGRBZGRMaXN0ZW5lciA9XG4gICAgICAgIG5ld0xpc3RlbmVyICE9IG51bGwgJiYgKG9sZExpc3RlbmVyID09IG51bGwgfHwgc2hvdWxkUmVtb3ZlTGlzdGVuZXIpO1xuXG4gICAgaWYgKHNob3VsZFJlbW92ZUxpc3RlbmVyKSB7XG4gICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICB0aGlzLmV2ZW50TmFtZSwgdGhpcy5fX2JvdW5kSGFuZGxlRXZlbnQsIHRoaXMuX19vcHRpb25zKTtcbiAgICB9XG4gICAgaWYgKHNob3VsZEFkZExpc3RlbmVyKSB7XG4gICAgICB0aGlzLl9fb3B0aW9ucyA9IGdldE9wdGlvbnMobmV3TGlzdGVuZXIpO1xuICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgdGhpcy5ldmVudE5hbWUsIHRoaXMuX19ib3VuZEhhbmRsZUV2ZW50LCB0aGlzLl9fb3B0aW9ucyk7XG4gICAgfVxuICAgIHRoaXMudmFsdWUgPSBuZXdMaXN0ZW5lcjtcbiAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gbm9DaGFuZ2UgYXMgRXZlbnRIYW5kbGVyV2l0aE9wdGlvbnM7XG4gIH1cblxuICBoYW5kbGVFdmVudChldmVudDogRXZlbnQpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMudmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMudmFsdWUuY2FsbCh0aGlzLmV2ZW50Q29udGV4dCB8fCB0aGlzLmVsZW1lbnQsIGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgKHRoaXMudmFsdWUgYXMgRXZlbnRMaXN0ZW5lck9iamVjdCkuaGFuZGxlRXZlbnQoZXZlbnQpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBXZSBjb3B5IG9wdGlvbnMgYmVjYXVzZSBvZiB0aGUgaW5jb25zaXN0ZW50IGJlaGF2aW9yIG9mIGJyb3dzZXJzIHdoZW4gcmVhZGluZ1xuLy8gdGhlIHRoaXJkIGFyZ3VtZW50IG9mIGFkZC9yZW1vdmVFdmVudExpc3RlbmVyLiBJRTExIGRvZXNuJ3Qgc3VwcG9ydCBvcHRpb25zXG4vLyBhdCBhbGwuIENocm9tZSA0MSBvbmx5IHJlYWRzIGBjYXB0dXJlYCBpZiB0aGUgYXJndW1lbnQgaXMgYW4gb2JqZWN0LlxuY29uc3QgZ2V0T3B0aW9ucyA9IChvOiBBZGRFdmVudExpc3RlbmVyT3B0aW9uc3x1bmRlZmluZWQpID0+IG8gJiZcbiAgICAoZXZlbnRPcHRpb25zU3VwcG9ydGVkID9cbiAgICAgICAgIHtjYXB0dXJlOiBvLmNhcHR1cmUsIHBhc3NpdmU6IG8ucGFzc2l2ZSwgb25jZTogby5vbmNlfSA6XG4gICAgICAgICBvLmNhcHR1cmUgYXMgQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnMpO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuXG4vKipcbiAqIEBtb2R1bGUgbGl0LWh0bWxcbiAqL1xuXG5pbXBvcnQge1BhcnR9IGZyb20gJy4vcGFydC5qcyc7XG5pbXBvcnQge0F0dHJpYnV0ZUNvbW1pdHRlciwgQm9vbGVhbkF0dHJpYnV0ZVBhcnQsIEV2ZW50UGFydCwgTm9kZVBhcnQsIFByb3BlcnR5Q29tbWl0dGVyfSBmcm9tICcuL3BhcnRzLmpzJztcbmltcG9ydCB7UmVuZGVyT3B0aW9uc30gZnJvbSAnLi9yZW5kZXItb3B0aW9ucy5qcyc7XG5pbXBvcnQge1RlbXBsYXRlUHJvY2Vzc29yfSBmcm9tICcuL3RlbXBsYXRlLXByb2Nlc3Nvci5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBQYXJ0cyB3aGVuIGEgdGVtcGxhdGUgaXMgaW5zdGFudGlhdGVkLlxuICovXG5leHBvcnQgY2xhc3MgRGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yIGltcGxlbWVudHMgVGVtcGxhdGVQcm9jZXNzb3Ige1xuICAvKipcbiAgICogQ3JlYXRlIHBhcnRzIGZvciBhbiBhdHRyaWJ1dGUtcG9zaXRpb24gYmluZGluZywgZ2l2ZW4gdGhlIGV2ZW50LCBhdHRyaWJ1dGVcbiAgICogbmFtZSwgYW5kIHN0cmluZyBsaXRlcmFscy5cbiAgICpcbiAgICogQHBhcmFtIGVsZW1lbnQgVGhlIGVsZW1lbnQgY29udGFpbmluZyB0aGUgYmluZGluZ1xuICAgKiBAcGFyYW0gbmFtZSAgVGhlIGF0dHJpYnV0ZSBuYW1lXG4gICAqIEBwYXJhbSBzdHJpbmdzIFRoZSBzdHJpbmcgbGl0ZXJhbHMuIFRoZXJlIGFyZSBhbHdheXMgYXQgbGVhc3QgdHdvIHN0cmluZ3MsXG4gICAqICAgZXZlbnQgZm9yIGZ1bGx5LWNvbnRyb2xsZWQgYmluZGluZ3Mgd2l0aCBhIHNpbmdsZSBleHByZXNzaW9uLlxuICAgKi9cbiAgaGFuZGxlQXR0cmlidXRlRXhwcmVzc2lvbnMoXG4gICAgICBlbGVtZW50OiBFbGVtZW50LCBuYW1lOiBzdHJpbmcsIHN0cmluZ3M6IHN0cmluZ1tdLFxuICAgICAgb3B0aW9uczogUmVuZGVyT3B0aW9ucyk6IFJlYWRvbmx5QXJyYXk8UGFydD4ge1xuICAgIGNvbnN0IHByZWZpeCA9IG5hbWVbMF07XG4gICAgaWYgKHByZWZpeCA9PT0gJy4nKSB7XG4gICAgICBjb25zdCBjb21taXR0ZXIgPSBuZXcgUHJvcGVydHlDb21taXR0ZXIoZWxlbWVudCwgbmFtZS5zbGljZSgxKSwgc3RyaW5ncyk7XG4gICAgICByZXR1cm4gY29tbWl0dGVyLnBhcnRzO1xuICAgIH1cbiAgICBpZiAocHJlZml4ID09PSAnQCcpIHtcbiAgICAgIHJldHVybiBbbmV3IEV2ZW50UGFydChlbGVtZW50LCBuYW1lLnNsaWNlKDEpLCBvcHRpb25zLmV2ZW50Q29udGV4dCldO1xuICAgIH1cbiAgICBpZiAocHJlZml4ID09PSAnPycpIHtcbiAgICAgIHJldHVybiBbbmV3IEJvb2xlYW5BdHRyaWJ1dGVQYXJ0KGVsZW1lbnQsIG5hbWUuc2xpY2UoMSksIHN0cmluZ3MpXTtcbiAgICB9XG4gICAgY29uc3QgY29tbWl0dGVyID0gbmV3IEF0dHJpYnV0ZUNvbW1pdHRlcihlbGVtZW50LCBuYW1lLCBzdHJpbmdzKTtcbiAgICByZXR1cm4gY29tbWl0dGVyLnBhcnRzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgcGFydHMgZm9yIGEgdGV4dC1wb3NpdGlvbiBiaW5kaW5nLlxuICAgKiBAcGFyYW0gdGVtcGxhdGVGYWN0b3J5XG4gICAqL1xuICBoYW5kbGVUZXh0RXhwcmVzc2lvbihvcHRpb25zOiBSZW5kZXJPcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBOb2RlUGFydChvcHRpb25zKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yID0gbmV3IERlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvcigpO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuXG4vKipcbiAqIEBtb2R1bGUgbGl0LWh0bWxcbiAqL1xuXG5pbXBvcnQge1RlbXBsYXRlUmVzdWx0fSBmcm9tICcuL3RlbXBsYXRlLXJlc3VsdC5qcyc7XG5pbXBvcnQge21hcmtlciwgVGVtcGxhdGV9IGZyb20gJy4vdGVtcGxhdGUuanMnO1xuXG4vKipcbiAqIEEgZnVuY3Rpb24gdHlwZSB0aGF0IGNyZWF0ZXMgYSBUZW1wbGF0ZSBmcm9tIGEgVGVtcGxhdGVSZXN1bHQuXG4gKlxuICogVGhpcyBpcyBhIGhvb2sgaW50byB0aGUgdGVtcGxhdGUtY3JlYXRpb24gcHJvY2VzcyBmb3IgcmVuZGVyaW5nIHRoYXRcbiAqIHJlcXVpcmVzIHNvbWUgbW9kaWZpY2F0aW9uIG9mIHRlbXBsYXRlcyBiZWZvcmUgdGhleSdyZSB1c2VkLCBsaWtlIFNoYWR5Q1NTLFxuICogd2hpY2ggbXVzdCBhZGQgY2xhc3NlcyB0byBlbGVtZW50cyBhbmQgcmVtb3ZlIHN0eWxlcy5cbiAqXG4gKiBUZW1wbGF0ZXMgc2hvdWxkIGJlIGNhY2hlZCBhcyBhZ2dyZXNzaXZlbHkgYXMgcG9zc2libGUsIHNvIHRoYXQgbWFueVxuICogVGVtcGxhdGVSZXN1bHRzIHByb2R1Y2VkIGZyb20gdGhlIHNhbWUgZXhwcmVzc2lvbiBvbmx5IGRvIHRoZSB3b3JrIG9mXG4gKiBjcmVhdGluZyB0aGUgVGVtcGxhdGUgdGhlIGZpcnN0IHRpbWUuXG4gKlxuICogVGVtcGxhdGVzIGFyZSB1c3VhbGx5IGNhY2hlZCBieSBUZW1wbGF0ZVJlc3VsdC5zdHJpbmdzIGFuZFxuICogVGVtcGxhdGVSZXN1bHQudHlwZSwgYnV0IG1heSBiZSBjYWNoZWQgYnkgb3RoZXIga2V5cyBpZiB0aGlzIGZ1bmN0aW9uXG4gKiBtb2RpZmllcyB0aGUgdGVtcGxhdGUuXG4gKlxuICogTm90ZSB0aGF0IGN1cnJlbnRseSBUZW1wbGF0ZUZhY3RvcmllcyBtdXN0IG5vdCBhZGQsIHJlbW92ZSwgb3IgcmVvcmRlclxuICogZXhwcmVzc2lvbnMsIGJlY2F1c2UgdGhlcmUgaXMgbm8gd2F5IHRvIGRlc2NyaWJlIHN1Y2ggYSBtb2RpZmljYXRpb25cbiAqIHRvIHJlbmRlcigpIHNvIHRoYXQgdmFsdWVzIGFyZSBpbnRlcnBvbGF0ZWQgdG8gdGhlIGNvcnJlY3QgcGxhY2UgaW4gdGhlXG4gKiB0ZW1wbGF0ZSBpbnN0YW5jZXMuXG4gKi9cbmV4cG9ydCB0eXBlIFRlbXBsYXRlRmFjdG9yeSA9IChyZXN1bHQ6IFRlbXBsYXRlUmVzdWx0KSA9PiBUZW1wbGF0ZTtcblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBUZW1wbGF0ZUZhY3Rvcnkgd2hpY2ggY2FjaGVzIFRlbXBsYXRlcyBrZXllZCBvblxuICogcmVzdWx0LnR5cGUgYW5kIHJlc3VsdC5zdHJpbmdzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdGVtcGxhdGVGYWN0b3J5KHJlc3VsdDogVGVtcGxhdGVSZXN1bHQpIHtcbiAgbGV0IHRlbXBsYXRlQ2FjaGUgPSB0ZW1wbGF0ZUNhY2hlcy5nZXQocmVzdWx0LnR5cGUpO1xuICBpZiAodGVtcGxhdGVDYWNoZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGVtcGxhdGVDYWNoZSA9IHtcbiAgICAgIHN0cmluZ3NBcnJheTogbmV3IFdlYWtNYXA8VGVtcGxhdGVTdHJpbmdzQXJyYXksIFRlbXBsYXRlPigpLFxuICAgICAga2V5U3RyaW5nOiBuZXcgTWFwPHN0cmluZywgVGVtcGxhdGU+KClcbiAgICB9O1xuICAgIHRlbXBsYXRlQ2FjaGVzLnNldChyZXN1bHQudHlwZSwgdGVtcGxhdGVDYWNoZSk7XG4gIH1cblxuICBsZXQgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhY2hlLnN0cmluZ3NBcnJheS5nZXQocmVzdWx0LnN0cmluZ3MpO1xuICBpZiAodGVtcGxhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfVxuXG4gIC8vIElmIHRoZSBUZW1wbGF0ZVN0cmluZ3NBcnJheSBpcyBuZXcsIGdlbmVyYXRlIGEga2V5IGZyb20gdGhlIHN0cmluZ3NcbiAgLy8gVGhpcyBrZXkgaXMgc2hhcmVkIGJldHdlZW4gYWxsIHRlbXBsYXRlcyB3aXRoIGlkZW50aWNhbCBjb250ZW50XG4gIGNvbnN0IGtleSA9IHJlc3VsdC5zdHJpbmdzLmpvaW4obWFya2VyKTtcblxuICAvLyBDaGVjayBpZiB3ZSBhbHJlYWR5IGhhdmUgYSBUZW1wbGF0ZSBmb3IgdGhpcyBrZXlcbiAgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhY2hlLmtleVN0cmluZy5nZXQoa2V5KTtcbiAgaWYgKHRlbXBsYXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBJZiB3ZSBoYXZlIG5vdCBzZWVuIHRoaXMga2V5IGJlZm9yZSwgY3JlYXRlIGEgbmV3IFRlbXBsYXRlXG4gICAgdGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUocmVzdWx0LCByZXN1bHQuZ2V0VGVtcGxhdGVFbGVtZW50KCkpO1xuICAgIC8vIENhY2hlIHRoZSBUZW1wbGF0ZSBmb3IgdGhpcyBrZXlcbiAgICB0ZW1wbGF0ZUNhY2hlLmtleVN0cmluZy5zZXQoa2V5LCB0ZW1wbGF0ZSk7XG4gIH1cblxuICAvLyBDYWNoZSBhbGwgZnV0dXJlIHF1ZXJpZXMgZm9yIHRoaXMgVGVtcGxhdGVTdHJpbmdzQXJyYXlcbiAgdGVtcGxhdGVDYWNoZS5zdHJpbmdzQXJyYXkuc2V0KHJlc3VsdC5zdHJpbmdzLCB0ZW1wbGF0ZSk7XG4gIHJldHVybiB0ZW1wbGF0ZTtcbn1cblxuLyoqXG4gKiBUaGUgZmlyc3QgYXJndW1lbnQgdG8gSlMgdGVtcGxhdGUgdGFncyByZXRhaW4gaWRlbnRpdHkgYWNyb3NzIG11bHRpcGxlXG4gKiBjYWxscyB0byBhIHRhZyBmb3IgdGhlIHNhbWUgbGl0ZXJhbCwgc28gd2UgY2FuIGNhY2hlIHdvcmsgZG9uZSBwZXIgbGl0ZXJhbFxuICogaW4gYSBNYXAuXG4gKlxuICogU2FmYXJpIGN1cnJlbnRseSBoYXMgYSBidWcgd2hpY2ggb2NjYXNpb25hbGx5IGJyZWFrcyB0aGlzIGJlaGF2aW91ciwgc28gd2VcbiAqIG5lZWQgdG8gY2FjaGUgdGhlIFRlbXBsYXRlIGF0IHR3byBsZXZlbHMuIFdlIGZpcnN0IGNhY2hlIHRoZVxuICogVGVtcGxhdGVTdHJpbmdzQXJyYXksIGFuZCBpZiB0aGF0IGZhaWxzLCB3ZSBjYWNoZSBhIGtleSBjb25zdHJ1Y3RlZCBieVxuICogam9pbmluZyB0aGUgc3RyaW5ncyBhcnJheS5cbiAqL1xuZXhwb3J0IHR5cGUgdGVtcGxhdGVDYWNoZSA9IHtcbiAgcmVhZG9ubHkgc3RyaW5nc0FycmF5OiBXZWFrTWFwPFRlbXBsYXRlU3RyaW5nc0FycmF5LCBUZW1wbGF0ZT47IC8vXG4gIHJlYWRvbmx5IGtleVN0cmluZzogTWFwPHN0cmluZywgVGVtcGxhdGU+O1xufTtcblxuZXhwb3J0IGNvbnN0IHRlbXBsYXRlQ2FjaGVzID0gbmV3IE1hcDxzdHJpbmcsIHRlbXBsYXRlQ2FjaGU+KCk7XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5cbi8qKlxuICogQG1vZHVsZSBsaXQtaHRtbFxuICovXG5cbmltcG9ydCB7cmVtb3ZlTm9kZXN9IGZyb20gJy4vZG9tLmpzJztcbmltcG9ydCB7Tm9kZVBhcnR9IGZyb20gJy4vcGFydHMuanMnO1xuaW1wb3J0IHtSZW5kZXJPcHRpb25zfSBmcm9tICcuL3JlbmRlci1vcHRpb25zLmpzJztcbmltcG9ydCB7dGVtcGxhdGVGYWN0b3J5fSBmcm9tICcuL3RlbXBsYXRlLWZhY3RvcnkuanMnO1xuaW1wb3J0IHtUZW1wbGF0ZVJlc3VsdH0gZnJvbSAnLi90ZW1wbGF0ZS1yZXN1bHQuanMnO1xuXG5leHBvcnQgY29uc3QgcGFydHMgPSBuZXcgV2Vha01hcDxOb2RlLCBOb2RlUGFydD4oKTtcblxuLyoqXG4gKiBSZW5kZXJzIGEgdGVtcGxhdGUgdG8gYSBjb250YWluZXIuXG4gKlxuICogVG8gdXBkYXRlIGEgY29udGFpbmVyIHdpdGggbmV3IHZhbHVlcywgcmVldmFsdWF0ZSB0aGUgdGVtcGxhdGUgbGl0ZXJhbCBhbmRcbiAqIGNhbGwgYHJlbmRlcmAgd2l0aCB0aGUgbmV3IHJlc3VsdC5cbiAqXG4gKiBAcGFyYW0gcmVzdWx0IGEgVGVtcGxhdGVSZXN1bHQgY3JlYXRlZCBieSBldmFsdWF0aW5nIGEgdGVtcGxhdGUgdGFnIGxpa2VcbiAqICAgICBgaHRtbGAgb3IgYHN2Z2AuXG4gKiBAcGFyYW0gY29udGFpbmVyIEEgRE9NIHBhcmVudCB0byByZW5kZXIgdG8uIFRoZSBlbnRpcmUgY29udGVudHMgYXJlIGVpdGhlclxuICogICAgIHJlcGxhY2VkLCBvciBlZmZpY2llbnRseSB1cGRhdGVkIGlmIHRoZSBzYW1lIHJlc3VsdCB0eXBlIHdhcyBwcmV2aW91c1xuICogICAgIHJlbmRlcmVkIHRoZXJlLlxuICogQHBhcmFtIG9wdGlvbnMgUmVuZGVyT3B0aW9ucyBmb3IgdGhlIGVudGlyZSByZW5kZXIgdHJlZSByZW5kZXJlZCB0byB0aGlzXG4gKiAgICAgY29udGFpbmVyLiBSZW5kZXIgb3B0aW9ucyBtdXN0ICpub3QqIGNoYW5nZSBiZXR3ZWVuIHJlbmRlcnMgdG8gdGhlIHNhbWVcbiAqICAgICBjb250YWluZXIsIGFzIHRob3NlIGNoYW5nZXMgd2lsbCBub3QgZWZmZWN0IHByZXZpb3VzbHkgcmVuZGVyZWQgRE9NLlxuICovXG5leHBvcnQgY29uc3QgcmVuZGVyID1cbiAgICAocmVzdWx0OiBUZW1wbGF0ZVJlc3VsdCxcbiAgICAgY29udGFpbmVyOiBFbGVtZW50fERvY3VtZW50RnJhZ21lbnQsXG4gICAgIG9wdGlvbnM/OiBQYXJ0aWFsPFJlbmRlck9wdGlvbnM+KSA9PiB7XG4gICAgICBsZXQgcGFydCA9IHBhcnRzLmdldChjb250YWluZXIpO1xuICAgICAgaWYgKHBhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZW1vdmVOb2Rlcyhjb250YWluZXIsIGNvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgICAgICAgcGFydHMuc2V0KGNvbnRhaW5lciwgcGFydCA9IG5ldyBOb2RlUGFydCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVGYWN0b3J5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgcGFydC5hcHBlbmRJbnRvKGNvbnRhaW5lcik7XG4gICAgICB9XG4gICAgICBwYXJ0LnNldFZhbHVlKHJlc3VsdCk7XG4gICAgICBwYXJ0LmNvbW1pdCgpO1xuICAgIH07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5cbi8qKlxuICpcbiAqIE1haW4gbGl0LWh0bWwgbW9kdWxlLlxuICpcbiAqIE1haW4gZXhwb3J0czpcbiAqXG4gKiAtICBbW2h0bWxdXVxuICogLSAgW1tzdmddXVxuICogLSAgW1tyZW5kZXJdXVxuICpcbiAqIEBtb2R1bGUgbGl0LWh0bWxcbiAqIEBwcmVmZXJyZWRcbiAqL1xuXG4vKipcbiAqIERvIG5vdCByZW1vdmUgdGhpcyBjb21tZW50OyBpdCBrZWVwcyB0eXBlZG9jIGZyb20gbWlzcGxhY2luZyB0aGUgbW9kdWxlXG4gKiBkb2NzLlxuICovXG5pbXBvcnQge2RlZmF1bHRUZW1wbGF0ZVByb2Nlc3Nvcn0gZnJvbSAnLi9saWIvZGVmYXVsdC10ZW1wbGF0ZS1wcm9jZXNzb3IuanMnO1xuaW1wb3J0IHtTVkdUZW1wbGF0ZVJlc3VsdCwgVGVtcGxhdGVSZXN1bHR9IGZyb20gJy4vbGliL3RlbXBsYXRlLXJlc3VsdC5qcyc7XG5cbmV4cG9ydCB7RGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yLCBkZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3J9IGZyb20gJy4vbGliL2RlZmF1bHQtdGVtcGxhdGUtcHJvY2Vzc29yLmpzJztcbmV4cG9ydCB7ZGlyZWN0aXZlLCBEaXJlY3RpdmVGbiwgaXNEaXJlY3RpdmV9IGZyb20gJy4vbGliL2RpcmVjdGl2ZS5qcyc7XG4vLyBUT0RPKGp1c3RpbmZhZ25hbmkpOiByZW1vdmUgbGluZSB3aGVuIHdlIGdldCBOb2RlUGFydCBtb3ZpbmcgbWV0aG9kc1xuZXhwb3J0IHtyZW1vdmVOb2RlcywgcmVwYXJlbnROb2Rlc30gZnJvbSAnLi9saWIvZG9tLmpzJztcbmV4cG9ydCB7bm9DaGFuZ2UsIG5vdGhpbmcsIFBhcnR9IGZyb20gJy4vbGliL3BhcnQuanMnO1xuZXhwb3J0IHtBdHRyaWJ1dGVDb21taXR0ZXIsIEF0dHJpYnV0ZVBhcnQsIEJvb2xlYW5BdHRyaWJ1dGVQYXJ0LCBFdmVudFBhcnQsIGlzSXRlcmFibGUsIGlzUHJpbWl0aXZlLCBOb2RlUGFydCwgUHJvcGVydHlDb21taXR0ZXIsIFByb3BlcnR5UGFydH0gZnJvbSAnLi9saWIvcGFydHMuanMnO1xuZXhwb3J0IHtSZW5kZXJPcHRpb25zfSBmcm9tICcuL2xpYi9yZW5kZXItb3B0aW9ucy5qcyc7XG5leHBvcnQge3BhcnRzLCByZW5kZXJ9IGZyb20gJy4vbGliL3JlbmRlci5qcyc7XG5leHBvcnQge3RlbXBsYXRlQ2FjaGVzLCB0ZW1wbGF0ZUZhY3Rvcnl9IGZyb20gJy4vbGliL3RlbXBsYXRlLWZhY3RvcnkuanMnO1xuZXhwb3J0IHtUZW1wbGF0ZUluc3RhbmNlfSBmcm9tICcuL2xpYi90ZW1wbGF0ZS1pbnN0YW5jZS5qcyc7XG5leHBvcnQge1RlbXBsYXRlUHJvY2Vzc29yfSBmcm9tICcuL2xpYi90ZW1wbGF0ZS1wcm9jZXNzb3IuanMnO1xuZXhwb3J0IHtTVkdUZW1wbGF0ZVJlc3VsdCwgVGVtcGxhdGVSZXN1bHR9IGZyb20gJy4vbGliL3RlbXBsYXRlLXJlc3VsdC5qcyc7XG5leHBvcnQge2NyZWF0ZU1hcmtlciwgaXNUZW1wbGF0ZVBhcnRBY3RpdmUsIFRlbXBsYXRlfSBmcm9tICcuL2xpYi90ZW1wbGF0ZS5qcyc7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIFdpbmRvdyB7XG4gICAgbGl0SHRtbFZlcnNpb25zOiBzdHJpbmdbXTtcbiAgfVxufVxuXG4vLyBJTVBPUlRBTlQ6IGRvIG5vdCBjaGFuZ2UgdGhlIHByb3BlcnR5IG5hbWUgb3IgdGhlIGFzc2lnbm1lbnQgZXhwcmVzc2lvbi5cbi8vIFRoaXMgbGluZSB3aWxsIGJlIHVzZWQgaW4gcmVnZXhlcyB0byBzZWFyY2ggZm9yIGxpdC1odG1sIHVzYWdlLlxuLy8gVE9ETyhqdXN0aW5mYWduYW5pKTogaW5qZWN0IHZlcnNpb24gbnVtYmVyIGF0IGJ1aWxkIHRpbWVcbih3aW5kb3dbJ2xpdEh0bWxWZXJzaW9ucyddIHx8ICh3aW5kb3dbJ2xpdEh0bWxWZXJzaW9ucyddID0gW10pKS5wdXNoKCcxLjAuMCcpO1xuXG4vKipcbiAqIEludGVycHJldHMgYSB0ZW1wbGF0ZSBsaXRlcmFsIGFzIGFuIEhUTUwgdGVtcGxhdGUgdGhhdCBjYW4gZWZmaWNpZW50bHlcbiAqIHJlbmRlciB0byBhbmQgdXBkYXRlIGEgY29udGFpbmVyLlxuICovXG5leHBvcnQgY29uc3QgaHRtbCA9IChzdHJpbmdzOiBUZW1wbGF0ZVN0cmluZ3NBcnJheSwgLi4udmFsdWVzOiB1bmtub3duW10pID0+XG4gICAgbmV3IFRlbXBsYXRlUmVzdWx0KHN0cmluZ3MsIHZhbHVlcywgJ2h0bWwnLCBkZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3IpO1xuXG4vKipcbiAqIEludGVycHJldHMgYSB0ZW1wbGF0ZSBsaXRlcmFsIGFzIGFuIFNWRyB0ZW1wbGF0ZSB0aGF0IGNhbiBlZmZpY2llbnRseVxuICogcmVuZGVyIHRvIGFuZCB1cGRhdGUgYSBjb250YWluZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBzdmcgPSAoc3RyaW5nczogVGVtcGxhdGVTdHJpbmdzQXJyYXksIC4uLnZhbHVlczogdW5rbm93bltdKSA9PlxuICAgIG5ldyBTVkdUZW1wbGF0ZVJlc3VsdChzdHJpbmdzLCB2YWx1ZXMsICdzdmcnLCBkZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3IpO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuXG4vKipcbiAqIEBtb2R1bGUgc2hhZHktcmVuZGVyXG4gKi9cblxuaW1wb3J0IHtpc1RlbXBsYXRlUGFydEFjdGl2ZSwgVGVtcGxhdGUsIFRlbXBsYXRlUGFydH0gZnJvbSAnLi90ZW1wbGF0ZS5qcyc7XG5cbmNvbnN0IHdhbGtlck5vZGVGaWx0ZXIgPSAxMzMgLyogTm9kZUZpbHRlci5TSE9XX3tFTEVNRU5UfENPTU1FTlR8VEVYVH0gKi87XG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgbGlzdCBvZiBub2RlcyBmcm9tIGEgVGVtcGxhdGUgc2FmZWx5LiBJbiBhZGRpdGlvbiB0byByZW1vdmluZ1xuICogbm9kZXMgZnJvbSB0aGUgVGVtcGxhdGUsIHRoZSBUZW1wbGF0ZSBwYXJ0IGluZGljZXMgYXJlIHVwZGF0ZWQgdG8gbWF0Y2hcbiAqIHRoZSBtdXRhdGVkIFRlbXBsYXRlIERPTS5cbiAqXG4gKiBBcyB0aGUgdGVtcGxhdGUgaXMgd2Fsa2VkIHRoZSByZW1vdmFsIHN0YXRlIGlzIHRyYWNrZWQgYW5kXG4gKiBwYXJ0IGluZGljZXMgYXJlIGFkanVzdGVkIGFzIG5lZWRlZC5cbiAqXG4gKiBkaXZcbiAqICAgZGl2IzEgKHJlbW92ZSkgPC0tIHN0YXJ0IHJlbW92aW5nIChyZW1vdmluZyBub2RlIGlzIGRpdiMxKVxuICogICAgIGRpdlxuICogICAgICAgZGl2IzIgKHJlbW92ZSkgIDwtLSBjb250aW51ZSByZW1vdmluZyAocmVtb3Zpbmcgbm9kZSBpcyBzdGlsbCBkaXYjMSlcbiAqICAgICAgICAgZGl2XG4gKiBkaXYgPC0tIHN0b3AgcmVtb3Zpbmcgc2luY2UgcHJldmlvdXMgc2libGluZyBpcyB0aGUgcmVtb3Zpbmcgbm9kZSAoZGl2IzEsXG4gKiByZW1vdmVkIDQgbm9kZXMpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVOb2Rlc0Zyb21UZW1wbGF0ZShcbiAgICB0ZW1wbGF0ZTogVGVtcGxhdGUsIG5vZGVzVG9SZW1vdmU6IFNldDxOb2RlPikge1xuICBjb25zdCB7ZWxlbWVudDoge2NvbnRlbnR9LCBwYXJ0c30gPSB0ZW1wbGF0ZTtcbiAgY29uc3Qgd2Fsa2VyID1cbiAgICAgIGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoY29udGVudCwgd2Fsa2VyTm9kZUZpbHRlciwgbnVsbCwgZmFsc2UpO1xuICBsZXQgcGFydEluZGV4ID0gbmV4dEFjdGl2ZUluZGV4SW5UZW1wbGF0ZVBhcnRzKHBhcnRzKTtcbiAgbGV0IHBhcnQgPSBwYXJ0c1twYXJ0SW5kZXhdO1xuICBsZXQgbm9kZUluZGV4ID0gLTE7XG4gIGxldCByZW1vdmVDb3VudCA9IDA7XG4gIGNvbnN0IG5vZGVzVG9SZW1vdmVJblRlbXBsYXRlID0gW107XG4gIGxldCBjdXJyZW50UmVtb3ZpbmdOb2RlOiBOb2RlfG51bGwgPSBudWxsO1xuICB3aGlsZSAod2Fsa2VyLm5leHROb2RlKCkpIHtcbiAgICBub2RlSW5kZXgrKztcbiAgICBjb25zdCBub2RlID0gd2Fsa2VyLmN1cnJlbnROb2RlIGFzIEVsZW1lbnQ7XG4gICAgLy8gRW5kIHJlbW92YWwgaWYgc3RlcHBlZCBwYXN0IHRoZSByZW1vdmluZyBub2RlXG4gICAgaWYgKG5vZGUucHJldmlvdXNTaWJsaW5nID09PSBjdXJyZW50UmVtb3ZpbmdOb2RlKSB7XG4gICAgICBjdXJyZW50UmVtb3ZpbmdOb2RlID0gbnVsbDtcbiAgICB9XG4gICAgLy8gQSBub2RlIHRvIHJlbW92ZSB3YXMgZm91bmQgaW4gdGhlIHRlbXBsYXRlXG4gICAgaWYgKG5vZGVzVG9SZW1vdmUuaGFzKG5vZGUpKSB7XG4gICAgICBub2Rlc1RvUmVtb3ZlSW5UZW1wbGF0ZS5wdXNoKG5vZGUpO1xuICAgICAgLy8gVHJhY2sgbm9kZSB3ZSdyZSByZW1vdmluZ1xuICAgICAgaWYgKGN1cnJlbnRSZW1vdmluZ05vZGUgPT09IG51bGwpIHtcbiAgICAgICAgY3VycmVudFJlbW92aW5nTm9kZSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFdoZW4gcmVtb3ZpbmcsIGluY3JlbWVudCBjb3VudCBieSB3aGljaCB0byBhZGp1c3Qgc3Vic2VxdWVudCBwYXJ0IGluZGljZXNcbiAgICBpZiAoY3VycmVudFJlbW92aW5nTm9kZSAhPT0gbnVsbCkge1xuICAgICAgcmVtb3ZlQ291bnQrKztcbiAgICB9XG4gICAgd2hpbGUgKHBhcnQgIT09IHVuZGVmaW5lZCAmJiBwYXJ0LmluZGV4ID09PSBub2RlSW5kZXgpIHtcbiAgICAgIC8vIElmIHBhcnQgaXMgaW4gYSByZW1vdmVkIG5vZGUgZGVhY3RpdmF0ZSBpdCBieSBzZXR0aW5nIGluZGV4IHRvIC0xIG9yXG4gICAgICAvLyBhZGp1c3QgdGhlIGluZGV4IGFzIG5lZWRlZC5cbiAgICAgIHBhcnQuaW5kZXggPSBjdXJyZW50UmVtb3ZpbmdOb2RlICE9PSBudWxsID8gLTEgOiBwYXJ0LmluZGV4IC0gcmVtb3ZlQ291bnQ7XG4gICAgICAvLyBnbyB0byB0aGUgbmV4dCBhY3RpdmUgcGFydC5cbiAgICAgIHBhcnRJbmRleCA9IG5leHRBY3RpdmVJbmRleEluVGVtcGxhdGVQYXJ0cyhwYXJ0cywgcGFydEluZGV4KTtcbiAgICAgIHBhcnQgPSBwYXJ0c1twYXJ0SW5kZXhdO1xuICAgIH1cbiAgfVxuICBub2Rlc1RvUmVtb3ZlSW5UZW1wbGF0ZS5mb3JFYWNoKChuKSA9PiBuLnBhcmVudE5vZGUhLnJlbW92ZUNoaWxkKG4pKTtcbn1cblxuY29uc3QgY291bnROb2RlcyA9IChub2RlOiBOb2RlKSA9PiB7XG4gIGxldCBjb3VudCA9IChub2RlLm5vZGVUeXBlID09PSAxMSAvKiBOb2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUgKi8pID8gMCA6IDE7XG4gIGNvbnN0IHdhbGtlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIobm9kZSwgd2Fsa2VyTm9kZUZpbHRlciwgbnVsbCwgZmFsc2UpO1xuICB3aGlsZSAod2Fsa2VyLm5leHROb2RlKCkpIHtcbiAgICBjb3VudCsrO1xuICB9XG4gIHJldHVybiBjb3VudDtcbn07XG5cbmNvbnN0IG5leHRBY3RpdmVJbmRleEluVGVtcGxhdGVQYXJ0cyA9XG4gICAgKHBhcnRzOiBUZW1wbGF0ZVBhcnRbXSwgc3RhcnRJbmRleDogbnVtYmVyID0gLTEpID0+IHtcbiAgICAgIGZvciAobGV0IGkgPSBzdGFydEluZGV4ICsgMTsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHBhcnQgPSBwYXJ0c1tpXTtcbiAgICAgICAgaWYgKGlzVGVtcGxhdGVQYXJ0QWN0aXZlKHBhcnQpKSB7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuXG4vKipcbiAqIEluc2VydHMgdGhlIGdpdmVuIG5vZGUgaW50byB0aGUgVGVtcGxhdGUsIG9wdGlvbmFsbHkgYmVmb3JlIHRoZSBnaXZlblxuICogcmVmTm9kZS4gSW4gYWRkaXRpb24gdG8gaW5zZXJ0aW5nIHRoZSBub2RlIGludG8gdGhlIFRlbXBsYXRlLCB0aGUgVGVtcGxhdGVcbiAqIHBhcnQgaW5kaWNlcyBhcmUgdXBkYXRlZCB0byBtYXRjaCB0aGUgbXV0YXRlZCBUZW1wbGF0ZSBET00uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnNlcnROb2RlSW50b1RlbXBsYXRlKFxuICAgIHRlbXBsYXRlOiBUZW1wbGF0ZSwgbm9kZTogTm9kZSwgcmVmTm9kZTogTm9kZXxudWxsID0gbnVsbCkge1xuICBjb25zdCB7ZWxlbWVudDoge2NvbnRlbnR9LCBwYXJ0c30gPSB0ZW1wbGF0ZTtcbiAgLy8gSWYgdGhlcmUncyBubyByZWZOb2RlLCB0aGVuIHB1dCBub2RlIGF0IGVuZCBvZiB0ZW1wbGF0ZS5cbiAgLy8gTm8gcGFydCBpbmRpY2VzIG5lZWQgdG8gYmUgc2hpZnRlZCBpbiB0aGlzIGNhc2UuXG4gIGlmIChyZWZOb2RlID09PSBudWxsIHx8IHJlZk5vZGUgPT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHdhbGtlciA9XG4gICAgICBkb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKGNvbnRlbnQsIHdhbGtlck5vZGVGaWx0ZXIsIG51bGwsIGZhbHNlKTtcbiAgbGV0IHBhcnRJbmRleCA9IG5leHRBY3RpdmVJbmRleEluVGVtcGxhdGVQYXJ0cyhwYXJ0cyk7XG4gIGxldCBpbnNlcnRDb3VudCA9IDA7XG4gIGxldCB3YWxrZXJJbmRleCA9IC0xO1xuICB3aGlsZSAod2Fsa2VyLm5leHROb2RlKCkpIHtcbiAgICB3YWxrZXJJbmRleCsrO1xuICAgIGNvbnN0IHdhbGtlck5vZGUgPSB3YWxrZXIuY3VycmVudE5vZGUgYXMgRWxlbWVudDtcbiAgICBpZiAod2Fsa2VyTm9kZSA9PT0gcmVmTm9kZSkge1xuICAgICAgaW5zZXJ0Q291bnQgPSBjb3VudE5vZGVzKG5vZGUpO1xuICAgICAgcmVmTm9kZS5wYXJlbnROb2RlIS5pbnNlcnRCZWZvcmUobm9kZSwgcmVmTm9kZSk7XG4gICAgfVxuICAgIHdoaWxlIChwYXJ0SW5kZXggIT09IC0xICYmIHBhcnRzW3BhcnRJbmRleF0uaW5kZXggPT09IHdhbGtlckluZGV4KSB7XG4gICAgICAvLyBJZiB3ZSd2ZSBpbnNlcnRlZCB0aGUgbm9kZSwgc2ltcGx5IGFkanVzdCBhbGwgc3Vic2VxdWVudCBwYXJ0c1xuICAgICAgaWYgKGluc2VydENvdW50ID4gMCkge1xuICAgICAgICB3aGlsZSAocGFydEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIHBhcnRzW3BhcnRJbmRleF0uaW5kZXggKz0gaW5zZXJ0Q291bnQ7XG4gICAgICAgICAgcGFydEluZGV4ID0gbmV4dEFjdGl2ZUluZGV4SW5UZW1wbGF0ZVBhcnRzKHBhcnRzLCBwYXJ0SW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHBhcnRJbmRleCA9IG5leHRBY3RpdmVJbmRleEluVGVtcGxhdGVQYXJ0cyhwYXJ0cywgcGFydEluZGV4KTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cblxuLyoqXG4gKiBNb2R1bGUgdG8gYWRkIHNoYWR5IERPTS9zaGFkeSBDU1MgcG9seWZpbGwgc3VwcG9ydCB0byBsaXQtaHRtbCB0ZW1wbGF0ZVxuICogcmVuZGVyaW5nLiBTZWUgdGhlIFtbcmVuZGVyXV0gbWV0aG9kIGZvciBkZXRhaWxzLlxuICpcbiAqIEBtb2R1bGUgc2hhZHktcmVuZGVyXG4gKiBAcHJlZmVycmVkXG4gKi9cblxuLyoqXG4gKiBEbyBub3QgcmVtb3ZlIHRoaXMgY29tbWVudDsgaXQga2VlcHMgdHlwZWRvYyBmcm9tIG1pc3BsYWNpbmcgdGhlIG1vZHVsZVxuICogZG9jcy5cbiAqL1xuaW1wb3J0IHtyZW1vdmVOb2Rlc30gZnJvbSAnLi9kb20uanMnO1xuaW1wb3J0IHtpbnNlcnROb2RlSW50b1RlbXBsYXRlLCByZW1vdmVOb2Rlc0Zyb21UZW1wbGF0ZX0gZnJvbSAnLi9tb2RpZnktdGVtcGxhdGUuanMnO1xuaW1wb3J0IHtSZW5kZXJPcHRpb25zfSBmcm9tICcuL3JlbmRlci1vcHRpb25zLmpzJztcbmltcG9ydCB7cGFydHMsIHJlbmRlciBhcyBsaXRSZW5kZXJ9IGZyb20gJy4vcmVuZGVyLmpzJztcbmltcG9ydCB7dGVtcGxhdGVDYWNoZXN9IGZyb20gJy4vdGVtcGxhdGUtZmFjdG9yeS5qcyc7XG5pbXBvcnQge1RlbXBsYXRlSW5zdGFuY2V9IGZyb20gJy4vdGVtcGxhdGUtaW5zdGFuY2UuanMnO1xuaW1wb3J0IHtUZW1wbGF0ZVJlc3VsdH0gZnJvbSAnLi90ZW1wbGF0ZS1yZXN1bHQuanMnO1xuaW1wb3J0IHttYXJrZXIsIFRlbXBsYXRlfSBmcm9tICcuL3RlbXBsYXRlLmpzJztcblxuZXhwb3J0IHtodG1sLCBzdmcsIFRlbXBsYXRlUmVzdWx0fSBmcm9tICcuLi9saXQtaHRtbC5qcyc7XG5cbi8vIEdldCBhIGtleSB0byBsb29rdXAgaW4gYHRlbXBsYXRlQ2FjaGVzYC5cbmNvbnN0IGdldFRlbXBsYXRlQ2FjaGVLZXkgPSAodHlwZTogc3RyaW5nLCBzY29wZU5hbWU6IHN0cmluZykgPT5cbiAgICBgJHt0eXBlfS0tJHtzY29wZU5hbWV9YDtcblxubGV0IGNvbXBhdGlibGVTaGFkeUNTU1ZlcnNpb24gPSB0cnVlO1xuXG5pZiAodHlwZW9mIHdpbmRvdy5TaGFkeUNTUyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgY29tcGF0aWJsZVNoYWR5Q1NTVmVyc2lvbiA9IGZhbHNlO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93LlNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZURvbSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgY29uc29sZS53YXJuKFxuICAgICAgYEluY29tcGF0aWJsZSBTaGFkeUNTUyB2ZXJzaW9uIGRldGVjdGVkLiBgICtcbiAgICAgIGBQbGVhc2UgdXBkYXRlIHRvIGF0IGxlYXN0IEB3ZWJjb21wb25lbnRzL3dlYmNvbXBvbmVudHNqc0AyLjAuMiBhbmQgYCArXG4gICAgICBgQHdlYmNvbXBvbmVudHMvc2hhZHljc3NAMS4zLjEuYCk7XG4gIGNvbXBhdGlibGVTaGFkeUNTU1ZlcnNpb24gPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBUZW1wbGF0ZSBmYWN0b3J5IHdoaWNoIHNjb3BlcyB0ZW1wbGF0ZSBET00gdXNpbmcgU2hhZHlDU1MuXG4gKiBAcGFyYW0gc2NvcGVOYW1lIHtzdHJpbmd9XG4gKi9cbmNvbnN0IHNoYWR5VGVtcGxhdGVGYWN0b3J5ID0gKHNjb3BlTmFtZTogc3RyaW5nKSA9PlxuICAgIChyZXN1bHQ6IFRlbXBsYXRlUmVzdWx0KSA9PiB7XG4gICAgICBjb25zdCBjYWNoZUtleSA9IGdldFRlbXBsYXRlQ2FjaGVLZXkocmVzdWx0LnR5cGUsIHNjb3BlTmFtZSk7XG4gICAgICBsZXQgdGVtcGxhdGVDYWNoZSA9IHRlbXBsYXRlQ2FjaGVzLmdldChjYWNoZUtleSk7XG4gICAgICBpZiAodGVtcGxhdGVDYWNoZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRlbXBsYXRlQ2FjaGUgPSB7XG4gICAgICAgICAgc3RyaW5nc0FycmF5OiBuZXcgV2Vha01hcDxUZW1wbGF0ZVN0cmluZ3NBcnJheSwgVGVtcGxhdGU+KCksXG4gICAgICAgICAga2V5U3RyaW5nOiBuZXcgTWFwPHN0cmluZywgVGVtcGxhdGU+KClcbiAgICAgICAgfTtcbiAgICAgICAgdGVtcGxhdGVDYWNoZXMuc2V0KGNhY2hlS2V5LCB0ZW1wbGF0ZUNhY2hlKTtcbiAgICAgIH1cblxuICAgICAgbGV0IHRlbXBsYXRlID0gdGVtcGxhdGVDYWNoZS5zdHJpbmdzQXJyYXkuZ2V0KHJlc3VsdC5zdHJpbmdzKTtcbiAgICAgIGlmICh0ZW1wbGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qga2V5ID0gcmVzdWx0LnN0cmluZ3Muam9pbihtYXJrZXIpO1xuICAgICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhY2hlLmtleVN0cmluZy5nZXQoa2V5KTtcbiAgICAgIGlmICh0ZW1wbGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSByZXN1bHQuZ2V0VGVtcGxhdGVFbGVtZW50KCk7XG4gICAgICAgIGlmIChjb21wYXRpYmxlU2hhZHlDU1NWZXJzaW9uKSB7XG4gICAgICAgICAgd2luZG93LlNoYWR5Q1NTIS5wcmVwYXJlVGVtcGxhdGVEb20oZWxlbWVudCwgc2NvcGVOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICB0ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZShyZXN1bHQsIGVsZW1lbnQpO1xuICAgICAgICB0ZW1wbGF0ZUNhY2hlLmtleVN0cmluZy5zZXQoa2V5LCB0ZW1wbGF0ZSk7XG4gICAgICB9XG4gICAgICB0ZW1wbGF0ZUNhY2hlLnN0cmluZ3NBcnJheS5zZXQocmVzdWx0LnN0cmluZ3MsIHRlbXBsYXRlKTtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICB9O1xuXG5jb25zdCBURU1QTEFURV9UWVBFUyA9IFsnaHRtbCcsICdzdmcnXTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBzdHlsZSBlbGVtZW50cyBmcm9tIFRlbXBsYXRlcyBmb3IgdGhlIGdpdmVuIHNjb3BlTmFtZS5cbiAqL1xuY29uc3QgcmVtb3ZlU3R5bGVzRnJvbUxpdFRlbXBsYXRlcyA9IChzY29wZU5hbWU6IHN0cmluZykgPT4ge1xuICBURU1QTEFURV9UWVBFUy5mb3JFYWNoKCh0eXBlKSA9PiB7XG4gICAgY29uc3QgdGVtcGxhdGVzID0gdGVtcGxhdGVDYWNoZXMuZ2V0KGdldFRlbXBsYXRlQ2FjaGVLZXkodHlwZSwgc2NvcGVOYW1lKSk7XG4gICAgaWYgKHRlbXBsYXRlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0ZW1wbGF0ZXMua2V5U3RyaW5nLmZvckVhY2goKHRlbXBsYXRlKSA9PiB7XG4gICAgICAgIGNvbnN0IHtlbGVtZW50OiB7Y29udGVudH19ID0gdGVtcGxhdGU7XG4gICAgICAgIC8vIElFIDExIGRvZXNuJ3Qgc3VwcG9ydCB0aGUgaXRlcmFibGUgcGFyYW0gU2V0IGNvbnN0cnVjdG9yXG4gICAgICAgIGNvbnN0IHN0eWxlcyA9IG5ldyBTZXQ8RWxlbWVudD4oKTtcbiAgICAgICAgQXJyYXkuZnJvbShjb250ZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlJykpLmZvckVhY2goKHM6IEVsZW1lbnQpID0+IHtcbiAgICAgICAgICBzdHlsZXMuYWRkKHMpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmVtb3ZlTm9kZXNGcm9tVGVtcGxhdGUodGVtcGxhdGUsIHN0eWxlcyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufTtcblxuY29uc3Qgc2hhZHlSZW5kZXJTZXQgPSBuZXcgU2V0PHN0cmluZz4oKTtcblxuLyoqXG4gKiBGb3IgdGhlIGdpdmVuIHNjb3BlIG5hbWUsIGVuc3VyZXMgdGhhdCBTaGFkeUNTUyBzdHlsZSBzY29waW5nIGlzIHBlcmZvcm1lZC5cbiAqIFRoaXMgaXMgZG9uZSBqdXN0IG9uY2UgcGVyIHNjb3BlIG5hbWUgc28gdGhlIGZyYWdtZW50IGFuZCB0ZW1wbGF0ZSBjYW5ub3RcbiAqIGJlIG1vZGlmaWVkLlxuICogKDEpIGV4dHJhY3RzIHN0eWxlcyBmcm9tIHRoZSByZW5kZXJlZCBmcmFnbWVudCBhbmQgaGFuZHMgdGhlbSB0byBTaGFkeUNTU1xuICogdG8gYmUgc2NvcGVkIGFuZCBhcHBlbmRlZCB0byB0aGUgZG9jdW1lbnRcbiAqICgyKSByZW1vdmVzIHN0eWxlIGVsZW1lbnRzIGZyb20gYWxsIGxpdC1odG1sIFRlbXBsYXRlcyBmb3IgdGhpcyBzY29wZSBuYW1lLlxuICpcbiAqIE5vdGUsIDxzdHlsZT4gZWxlbWVudHMgY2FuIG9ubHkgYmUgcGxhY2VkIGludG8gdGVtcGxhdGVzIGZvciB0aGVcbiAqIGluaXRpYWwgcmVuZGVyaW5nIG9mIHRoZSBzY29wZS4gSWYgPHN0eWxlPiBlbGVtZW50cyBhcmUgaW5jbHVkZWQgaW4gdGVtcGxhdGVzXG4gKiBkeW5hbWljYWxseSByZW5kZXJlZCB0byB0aGUgc2NvcGUgKGFmdGVyIHRoZSBmaXJzdCBzY29wZSByZW5kZXIpLCB0aGV5IHdpbGxcbiAqIG5vdCBiZSBzY29wZWQgYW5kIHRoZSA8c3R5bGU+IHdpbGwgYmUgbGVmdCBpbiB0aGUgdGVtcGxhdGUgYW5kIHJlbmRlcmVkXG4gKiBvdXRwdXQuXG4gKi9cbmNvbnN0IHByZXBhcmVUZW1wbGF0ZVN0eWxlcyA9XG4gICAgKHJlbmRlcmVkRE9NOiBEb2N1bWVudEZyYWdtZW50LCB0ZW1wbGF0ZTogVGVtcGxhdGUsIHNjb3BlTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICBzaGFkeVJlbmRlclNldC5hZGQoc2NvcGVOYW1lKTtcbiAgICAgIC8vIE1vdmUgc3R5bGVzIG91dCBvZiByZW5kZXJlZCBET00gYW5kIHN0b3JlLlxuICAgICAgY29uc3Qgc3R5bGVzID0gcmVuZGVyZWRET00ucXVlcnlTZWxlY3RvckFsbCgnc3R5bGUnKTtcbiAgICAgIGNvbnN0IHtsZW5ndGh9ID0gc3R5bGVzO1xuICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIHN0eWxlcywgc2tpcCB1bm5lY2Vzc2FyeSB3b3JrXG4gICAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIEVuc3VyZSBwcmVwYXJlVGVtcGxhdGVTdHlsZXMgaXMgY2FsbGVkIHRvIHN1cHBvcnQgYWRkaW5nXG4gICAgICAgIC8vIHN0eWxlcyB2aWEgYHByZXBhcmVBZG9wdGVkQ3NzVGV4dGAgc2luY2UgdGhhdCByZXF1aXJlcyB0aGF0XG4gICAgICAgIC8vIGBwcmVwYXJlVGVtcGxhdGVTdHlsZXNgIGlzIGNhbGxlZC5cbiAgICAgICAgd2luZG93LlNoYWR5Q1NTIS5wcmVwYXJlVGVtcGxhdGVTdHlsZXModGVtcGxhdGUuZWxlbWVudCwgc2NvcGVOYW1lKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgY29uZGVuc2VkU3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgLy8gQ29sbGVjdCBzdHlsZXMgaW50byBhIHNpbmdsZSBzdHlsZS4gVGhpcyBoZWxwcyB1cyBtYWtlIHN1cmUgU2hhZHlDU1NcbiAgICAgIC8vIG1hbmlwdWxhdGlvbnMgd2lsbCBub3QgcHJldmVudCB1cyBmcm9tIGJlaW5nIGFibGUgdG8gZml4IHVwIHRlbXBsYXRlXG4gICAgICAvLyBwYXJ0IGluZGljZXMuXG4gICAgICAvLyBOT1RFOiBjb2xsZWN0aW5nIHN0eWxlcyBpcyBpbmVmZmljaWVudCBmb3IgYnJvd3NlcnMgYnV0IFNoYWR5Q1NTXG4gICAgICAvLyBjdXJyZW50bHkgZG9lcyB0aGlzIGFueXdheS4gV2hlbiBpdCBkb2VzIG5vdCwgdGhpcyBzaG91bGQgYmUgY2hhbmdlZC5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBzdHlsZXNbaV07XG4gICAgICAgIHN0eWxlLnBhcmVudE5vZGUhLnJlbW92ZUNoaWxkKHN0eWxlKTtcbiAgICAgICAgY29uZGVuc2VkU3R5bGUudGV4dENvbnRlbnQhICs9IHN0eWxlLnRleHRDb250ZW50O1xuICAgICAgfVxuICAgICAgLy8gUmVtb3ZlIHN0eWxlcyBmcm9tIG5lc3RlZCB0ZW1wbGF0ZXMgaW4gdGhpcyBzY29wZS5cbiAgICAgIHJlbW92ZVN0eWxlc0Zyb21MaXRUZW1wbGF0ZXMoc2NvcGVOYW1lKTtcbiAgICAgIC8vIEFuZCB0aGVuIHB1dCB0aGUgY29uZGVuc2VkIHN0eWxlIGludG8gdGhlIFwicm9vdFwiIHRlbXBsYXRlIHBhc3NlZCBpbiBhc1xuICAgICAgLy8gYHRlbXBsYXRlYC5cbiAgICAgIGNvbnN0IGNvbnRlbnQgPSB0ZW1wbGF0ZS5lbGVtZW50LmNvbnRlbnQ7XG4gICAgICBpbnNlcnROb2RlSW50b1RlbXBsYXRlKHRlbXBsYXRlLCBjb25kZW5zZWRTdHlsZSwgY29udGVudC5maXJzdENoaWxkKTtcbiAgICAgIC8vIE5vdGUsIGl0J3MgaW1wb3J0YW50IHRoYXQgU2hhZHlDU1MgZ2V0cyB0aGUgdGVtcGxhdGUgdGhhdCBgbGl0LWh0bWxgXG4gICAgICAvLyB3aWxsIGFjdHVhbGx5IHJlbmRlciBzbyB0aGF0IGl0IGNhbiB1cGRhdGUgdGhlIHN0eWxlIGluc2lkZSB3aGVuXG4gICAgICAvLyBuZWVkZWQgKGUuZy4gQGFwcGx5IG5hdGl2ZSBTaGFkb3cgRE9NIGNhc2UpLlxuICAgICAgd2luZG93LlNoYWR5Q1NTIS5wcmVwYXJlVGVtcGxhdGVTdHlsZXModGVtcGxhdGUuZWxlbWVudCwgc2NvcGVOYW1lKTtcbiAgICAgIGNvbnN0IHN0eWxlID0gY29udGVudC5xdWVyeVNlbGVjdG9yKCdzdHlsZScpO1xuICAgICAgaWYgKHdpbmRvdy5TaGFkeUNTUyEubmF0aXZlU2hhZG93ICYmIHN0eWxlICE9PSBudWxsKSB7XG4gICAgICAgIC8vIFdoZW4gaW4gbmF0aXZlIFNoYWRvdyBET00sIGVuc3VyZSB0aGUgc3R5bGUgY3JlYXRlZCBieSBTaGFkeUNTUyBpc1xuICAgICAgICAvLyBpbmNsdWRlZCBpbiBpbml0aWFsbHkgcmVuZGVyZWQgb3V0cHV0IChgcmVuZGVyZWRET01gKS5cbiAgICAgICAgcmVuZGVyZWRET00uaW5zZXJ0QmVmb3JlKHN0eWxlLmNsb25lTm9kZSh0cnVlKSwgcmVuZGVyZWRET00uZmlyc3RDaGlsZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBXaGVuIG5vIHN0eWxlIGlzIGxlZnQgaW4gdGhlIHRlbXBsYXRlLCBwYXJ0cyB3aWxsIGJlIGJyb2tlbiBhcyBhXG4gICAgICAgIC8vIHJlc3VsdC4gVG8gZml4IHRoaXMsIHdlIHB1dCBiYWNrIHRoZSBzdHlsZSBub2RlIFNoYWR5Q1NTIHJlbW92ZWRcbiAgICAgICAgLy8gYW5kIHRoZW4gdGVsbCBsaXQgdG8gcmVtb3ZlIHRoYXQgbm9kZSBmcm9tIHRoZSB0ZW1wbGF0ZS5cbiAgICAgICAgLy8gVGhlcmUgY2FuIGJlIG5vIHN0eWxlIGluIHRoZSB0ZW1wbGF0ZSBpbiAyIGNhc2VzICgxKSB3aGVuIFNoYWR5IERPTVxuICAgICAgICAvLyBpcyBpbiB1c2UsIFNoYWR5Q1NTIHJlbW92ZXMgYWxsIHN0eWxlcywgKDIpIHdoZW4gbmF0aXZlIFNoYWRvdyBET01cbiAgICAgICAgLy8gaXMgaW4gdXNlIFNoYWR5Q1NTIHJlbW92ZXMgdGhlIHN0eWxlIGlmIGl0IGNvbnRhaW5zIG5vIGNvbnRlbnQuXG4gICAgICAgIC8vIE5PVEUsIFNoYWR5Q1NTIGNyZWF0ZXMgaXRzIG93biBzdHlsZSBzbyB3ZSBjYW4gc2FmZWx5IGFkZC9yZW1vdmVcbiAgICAgICAgLy8gYGNvbmRlbnNlZFN0eWxlYCBoZXJlLlxuICAgICAgICBjb250ZW50Lmluc2VydEJlZm9yZShjb25kZW5zZWRTdHlsZSwgY29udGVudC5maXJzdENoaWxkKTtcbiAgICAgICAgY29uc3QgcmVtb3ZlcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgcmVtb3Zlcy5hZGQoY29uZGVuc2VkU3R5bGUpO1xuICAgICAgICByZW1vdmVOb2Rlc0Zyb21UZW1wbGF0ZSh0ZW1wbGF0ZSwgcmVtb3Zlcyk7XG4gICAgICB9XG4gICAgfTtcblxuZXhwb3J0IGludGVyZmFjZSBTaGFkeVJlbmRlck9wdGlvbnMgZXh0ZW5kcyBQYXJ0aWFsPFJlbmRlck9wdGlvbnM+IHtcbiAgc2NvcGVOYW1lOiBzdHJpbmc7XG59XG5cbi8qKlxuICogRXh0ZW5zaW9uIHRvIHRoZSBzdGFuZGFyZCBgcmVuZGVyYCBtZXRob2Qgd2hpY2ggc3VwcG9ydHMgcmVuZGVyaW5nXG4gKiB0byBTaGFkb3dSb290cyB3aGVuIHRoZSBTaGFkeURPTSAoaHR0cHM6Ly9naXRodWIuY29tL3dlYmNvbXBvbmVudHMvc2hhZHlkb20pXG4gKiBhbmQgU2hhZHlDU1MgKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJjb21wb25lbnRzL3NoYWR5Y3NzKSBwb2x5ZmlsbHMgYXJlIHVzZWRcbiAqIG9yIHdoZW4gdGhlIHdlYmNvbXBvbmVudHNqc1xuICogKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJjb21wb25lbnRzL3dlYmNvbXBvbmVudHNqcykgcG9seWZpbGwgaXMgdXNlZC5cbiAqXG4gKiBBZGRzIGEgYHNjb3BlTmFtZWAgb3B0aW9uIHdoaWNoIGlzIHVzZWQgdG8gc2NvcGUgZWxlbWVudCBET00gYW5kIHN0eWxlc2hlZXRzXG4gKiB3aGVuIG5hdGl2ZSBTaGFkb3dET00gaXMgdW5hdmFpbGFibGUuIFRoZSBgc2NvcGVOYW1lYCB3aWxsIGJlIGFkZGVkIHRvXG4gKiB0aGUgY2xhc3MgYXR0cmlidXRlIG9mIGFsbCByZW5kZXJlZCBET00uIEluIGFkZGl0aW9uLCBhbnkgc3R5bGUgZWxlbWVudHMgd2lsbFxuICogYmUgYXV0b21hdGljYWxseSByZS13cml0dGVuIHdpdGggdGhpcyBgc2NvcGVOYW1lYCBzZWxlY3RvciBhbmQgbW92ZWQgb3V0XG4gKiBvZiB0aGUgcmVuZGVyZWQgRE9NIGFuZCBpbnRvIHRoZSBkb2N1bWVudCBgPGhlYWQ+YC5cbiAqXG4gKiBJdCBpcyBjb21tb24gdG8gdXNlIHRoaXMgcmVuZGVyIG1ldGhvZCBpbiBjb25qdW5jdGlvbiB3aXRoIGEgY3VzdG9tIGVsZW1lbnRcbiAqIHdoaWNoIHJlbmRlcnMgYSBzaGFkb3dSb290LiBXaGVuIHRoaXMgaXMgZG9uZSwgdHlwaWNhbGx5IHRoZSBlbGVtZW50J3NcbiAqIGBsb2NhbE5hbWVgIHNob3VsZCBiZSB1c2VkIGFzIHRoZSBgc2NvcGVOYW1lYC5cbiAqXG4gKiBJbiBhZGRpdGlvbiB0byBET00gc2NvcGluZywgU2hhZHlDU1MgYWxzbyBzdXBwb3J0cyBhIGJhc2ljIHNoaW0gZm9yIGNzc1xuICogY3VzdG9tIHByb3BlcnRpZXMgKG5lZWRlZCBvbmx5IG9uIG9sZGVyIGJyb3dzZXJzIGxpa2UgSUUxMSkgYW5kIGEgc2hpbSBmb3JcbiAqIGEgZGVwcmVjYXRlZCBmZWF0dXJlIGNhbGxlZCBgQGFwcGx5YCB0aGF0IHN1cHBvcnRzIGFwcGx5aW5nIGEgc2V0IG9mIGNzc1xuICogY3VzdG9tIHByb3BlcnRpZXMgdG8gYSBnaXZlbiBsb2NhdGlvbi5cbiAqXG4gKiBVc2FnZSBjb25zaWRlcmF0aW9uczpcbiAqXG4gKiAqIFBhcnQgdmFsdWVzIGluIGA8c3R5bGU+YCBlbGVtZW50cyBhcmUgb25seSBhcHBsaWVkIHRoZSBmaXJzdCB0aW1lIGEgZ2l2ZW5cbiAqIGBzY29wZU5hbWVgIHJlbmRlcnMuIFN1YnNlcXVlbnQgY2hhbmdlcyB0byBwYXJ0cyBpbiBzdHlsZSBlbGVtZW50cyB3aWxsIGhhdmVcbiAqIG5vIGVmZmVjdC4gQmVjYXVzZSBvZiB0aGlzLCBwYXJ0cyBpbiBzdHlsZSBlbGVtZW50cyBzaG91bGQgb25seSBiZSB1c2VkIGZvclxuICogdmFsdWVzIHRoYXQgd2lsbCBuZXZlciBjaGFuZ2UsIGZvciBleGFtcGxlIHBhcnRzIHRoYXQgc2V0IHNjb3BlLXdpZGUgdGhlbWVcbiAqIHZhbHVlcyBvciBwYXJ0cyB3aGljaCByZW5kZXIgc2hhcmVkIHN0eWxlIGVsZW1lbnRzLlxuICpcbiAqICogTm90ZSwgZHVlIHRvIGEgbGltaXRhdGlvbiBvZiB0aGUgU2hhZHlET00gcG9seWZpbGwsIHJlbmRlcmluZyBpbiBhXG4gKiBjdXN0b20gZWxlbWVudCdzIGBjb25zdHJ1Y3RvcmAgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCByZW5kZXJpbmcgc2hvdWxkXG4gKiBlaXRoZXIgZG9uZSBhc3luY2hyb25vdXNseSwgZm9yIGV4YW1wbGUgYXQgbWljcm90YXNrIHRpbWluZyAoZm9yIGV4YW1wbGVcbiAqIGBQcm9taXNlLnJlc29sdmUoKWApLCBvciBiZSBkZWZlcnJlZCB1bnRpbCB0aGUgZmlyc3QgdGltZSB0aGUgZWxlbWVudCdzXG4gKiBgY29ubmVjdGVkQ2FsbGJhY2tgIHJ1bnMuXG4gKlxuICogVXNhZ2UgY29uc2lkZXJhdGlvbnMgd2hlbiB1c2luZyBzaGltbWVkIGN1c3RvbSBwcm9wZXJ0aWVzIG9yIGBAYXBwbHlgOlxuICpcbiAqICogV2hlbmV2ZXIgYW55IGR5bmFtaWMgY2hhbmdlcyBhcmUgbWFkZSB3aGljaCBhZmZlY3RcbiAqIGNzcyBjdXN0b20gcHJvcGVydGllcywgYFNoYWR5Q1NTLnN0eWxlRWxlbWVudChlbGVtZW50KWAgbXVzdCBiZSBjYWxsZWRcbiAqIHRvIHVwZGF0ZSB0aGUgZWxlbWVudC4gVGhlcmUgYXJlIHR3byBjYXNlcyB3aGVuIHRoaXMgaXMgbmVlZGVkOlxuICogKDEpIHRoZSBlbGVtZW50IGlzIGNvbm5lY3RlZCB0byBhIG5ldyBwYXJlbnQsICgyKSBhIGNsYXNzIGlzIGFkZGVkIHRvIHRoZVxuICogZWxlbWVudCB0aGF0IGNhdXNlcyBpdCB0byBtYXRjaCBkaWZmZXJlbnQgY3VzdG9tIHByb3BlcnRpZXMuXG4gKiBUbyBhZGRyZXNzIHRoZSBmaXJzdCBjYXNlIHdoZW4gcmVuZGVyaW5nIGEgY3VzdG9tIGVsZW1lbnQsIGBzdHlsZUVsZW1lbnRgXG4gKiBzaG91bGQgYmUgY2FsbGVkIGluIHRoZSBlbGVtZW50J3MgYGNvbm5lY3RlZENhbGxiYWNrYC5cbiAqXG4gKiAqIFNoaW1tZWQgY3VzdG9tIHByb3BlcnRpZXMgbWF5IG9ubHkgYmUgZGVmaW5lZCBlaXRoZXIgZm9yIGFuIGVudGlyZVxuICogc2hhZG93Um9vdCAoZm9yIGV4YW1wbGUsIGluIGEgYDpob3N0YCBydWxlKSBvciB2aWEgYSBydWxlIHRoYXQgZGlyZWN0bHlcbiAqIG1hdGNoZXMgYW4gZWxlbWVudCB3aXRoIGEgc2hhZG93Um9vdC4gSW4gb3RoZXIgd29yZHMsIGluc3RlYWQgb2YgZmxvd2luZyBmcm9tXG4gKiBwYXJlbnQgdG8gY2hpbGQgYXMgZG8gbmF0aXZlIGNzcyBjdXN0b20gcHJvcGVydGllcywgc2hpbW1lZCBjdXN0b20gcHJvcGVydGllc1xuICogZmxvdyBvbmx5IGZyb20gc2hhZG93Um9vdHMgdG8gbmVzdGVkIHNoYWRvd1Jvb3RzLlxuICpcbiAqICogV2hlbiB1c2luZyBgQGFwcGx5YCBtaXhpbmcgY3NzIHNob3J0aGFuZCBwcm9wZXJ0eSBuYW1lcyB3aXRoXG4gKiBub24tc2hvcnRoYW5kIG5hbWVzIChmb3IgZXhhbXBsZSBgYm9yZGVyYCBhbmQgYGJvcmRlci13aWR0aGApIGlzIG5vdFxuICogc3VwcG9ydGVkLlxuICovXG5leHBvcnQgY29uc3QgcmVuZGVyID1cbiAgICAocmVzdWx0OiBUZW1wbGF0ZVJlc3VsdCxcbiAgICAgY29udGFpbmVyOiBFbGVtZW50fERvY3VtZW50RnJhZ21lbnR8U2hhZG93Um9vdCxcbiAgICAgb3B0aW9uczogU2hhZHlSZW5kZXJPcHRpb25zKSA9PiB7XG4gICAgICBjb25zdCBzY29wZU5hbWUgPSBvcHRpb25zLnNjb3BlTmFtZTtcbiAgICAgIGNvbnN0IGhhc1JlbmRlcmVkID0gcGFydHMuaGFzKGNvbnRhaW5lcik7XG4gICAgICBjb25zdCBuZWVkc1Njb3BpbmcgPSBjb21wYXRpYmxlU2hhZHlDU1NWZXJzaW9uICYmXG4gICAgICAgICAgY29udGFpbmVyLm5vZGVUeXBlID09PSAxMSAvKiBOb2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUgKi8gJiZcbiAgICAgICAgICAhIShjb250YWluZXIgYXMgU2hhZG93Um9vdCkuaG9zdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlc3VsdDtcbiAgICAgIC8vIEhhbmRsZSBmaXJzdCByZW5kZXIgdG8gYSBzY29wZSBzcGVjaWFsbHkuLi5cbiAgICAgIGNvbnN0IGZpcnN0U2NvcGVSZW5kZXIgPSBuZWVkc1Njb3BpbmcgJiYgIXNoYWR5UmVuZGVyU2V0LmhhcyhzY29wZU5hbWUpO1xuICAgICAgLy8gT24gZmlyc3Qgc2NvcGUgcmVuZGVyLCByZW5kZXIgaW50byBhIGZyYWdtZW50OyB0aGlzIGNhbm5vdCBiZSBhIHNpbmdsZVxuICAgICAgLy8gZnJhZ21lbnQgdGhhdCBpcyByZXVzZWQgc2luY2UgbmVzdGVkIHJlbmRlcnMgY2FuIG9jY3VyIHN5bmNocm9ub3VzbHkuXG4gICAgICBjb25zdCByZW5kZXJDb250YWluZXIgPVxuICAgICAgICAgIGZpcnN0U2NvcGVSZW5kZXIgPyBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkgOiBjb250YWluZXI7XG4gICAgICBsaXRSZW5kZXIoXG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgIHJlbmRlckNvbnRhaW5lcixcbiAgICAgICAgICB7dGVtcGxhdGVGYWN0b3J5OiBzaGFkeVRlbXBsYXRlRmFjdG9yeShzY29wZU5hbWUpLCAuLi5vcHRpb25zfSBhc1xuICAgICAgICAgICAgICBSZW5kZXJPcHRpb25zKTtcbiAgICAgIC8vIFdoZW4gcGVyZm9ybWluZyBmaXJzdCBzY29wZSByZW5kZXIsXG4gICAgICAvLyAoMSkgV2UndmUgcmVuZGVyZWQgaW50byBhIGZyYWdtZW50IHNvIHRoYXQgdGhlcmUncyBhIGNoYW5jZSB0b1xuICAgICAgLy8gYHByZXBhcmVUZW1wbGF0ZVN0eWxlc2AgYmVmb3JlIHN1Yi1lbGVtZW50cyBoaXQgdGhlIERPTVxuICAgICAgLy8gKHdoaWNoIG1pZ2h0IGNhdXNlIHRoZW0gdG8gcmVuZGVyIGJhc2VkIG9uIGEgY29tbW9uIHBhdHRlcm4gb2ZcbiAgICAgIC8vIHJlbmRlcmluZyBpbiBhIGN1c3RvbSBlbGVtZW50J3MgYGNvbm5lY3RlZENhbGxiYWNrYCk7XG4gICAgICAvLyAoMikgU2NvcGUgdGhlIHRlbXBsYXRlIHdpdGggU2hhZHlDU1Mgb25lIHRpbWUgb25seSBmb3IgdGhpcyBzY29wZS5cbiAgICAgIC8vICgzKSBSZW5kZXIgdGhlIGZyYWdtZW50IGludG8gdGhlIGNvbnRhaW5lciBhbmQgbWFrZSBzdXJlIHRoZVxuICAgICAgLy8gY29udGFpbmVyIGtub3dzIGl0cyBgcGFydGAgaXMgdGhlIG9uZSB3ZSBqdXN0IHJlbmRlcmVkLiBUaGlzIGVuc3VyZXNcbiAgICAgIC8vIERPTSB3aWxsIGJlIHJlLXVzZWQgb24gc3Vic2VxdWVudCByZW5kZXJzLlxuICAgICAgaWYgKGZpcnN0U2NvcGVSZW5kZXIpIHtcbiAgICAgICAgY29uc3QgcGFydCA9IHBhcnRzLmdldChyZW5kZXJDb250YWluZXIpITtcbiAgICAgICAgcGFydHMuZGVsZXRlKHJlbmRlckNvbnRhaW5lcik7XG4gICAgICAgIGlmIChwYXJ0LnZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVJbnN0YW5jZSkge1xuICAgICAgICAgIHByZXBhcmVUZW1wbGF0ZVN0eWxlcyhcbiAgICAgICAgICAgICAgcmVuZGVyQ29udGFpbmVyIGFzIERvY3VtZW50RnJhZ21lbnQsXG4gICAgICAgICAgICAgIHBhcnQudmFsdWUudGVtcGxhdGUsXG4gICAgICAgICAgICAgIHNjb3BlTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVtb3ZlTm9kZXMoY29udGFpbmVyLCBjb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChyZW5kZXJDb250YWluZXIpO1xuICAgICAgICBwYXJ0cy5zZXQoY29udGFpbmVyLCBwYXJ0KTtcbiAgICAgIH1cbiAgICAgIC8vIEFmdGVyIGVsZW1lbnRzIGhhdmUgaGl0IHRoZSBET00sIHVwZGF0ZSBzdHlsaW5nIGlmIHRoaXMgaXMgdGhlXG4gICAgICAvLyBpbml0aWFsIHJlbmRlciB0byB0aGlzIGNvbnRhaW5lci5cbiAgICAgIC8vIFRoaXMgaXMgbmVlZGVkIHdoZW5ldmVyIGR5bmFtaWMgY2hhbmdlcyBhcmUgbWFkZSBzbyBpdCB3b3VsZCBiZVxuICAgICAgLy8gc2FmZXN0IHRvIGRvIGV2ZXJ5IHJlbmRlcjsgaG93ZXZlciwgdGhpcyB3b3VsZCByZWdyZXNzIHBlcmZvcm1hbmNlXG4gICAgICAvLyBzbyB3ZSBsZWF2ZSBpdCB1cCB0byB0aGUgdXNlciB0byBjYWxsIGBTaGFkeUNTU1Muc3R5bGVFbGVtZW50YFxuICAgICAgLy8gZm9yIGR5bmFtaWMgY2hhbmdlcy5cbiAgICAgIGlmICghaGFzUmVuZGVyZWQgJiYgbmVlZHNTY29waW5nKSB7XG4gICAgICAgIHdpbmRvdy5TaGFkeUNTUyEuc3R5bGVFbGVtZW50KChjb250YWluZXIgYXMgU2hhZG93Um9vdCkuaG9zdCk7XG4gICAgICB9XG4gICAgfTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cblxuLyoqXG4gKiBXaGVuIHVzaW5nIENsb3N1cmUgQ29tcGlsZXIsIEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkocHJvcGVydHksIG9iamVjdCkgaXNcbiAqIHJlcGxhY2VkIGF0IGNvbXBpbGUgdGltZSBieSB0aGUgbXVuZ2VkIG5hbWUgZm9yIG9iamVjdFtwcm9wZXJ0eV0uIFdlIGNhbm5vdFxuICogYWxpYXMgdGhpcyBmdW5jdGlvbiwgc28gd2UgaGF2ZSB0byB1c2UgYSBzbWFsbCBzaGltIHRoYXQgaGFzIHRoZSBzYW1lXG4gKiBiZWhhdmlvciB3aGVuIG5vdCBjb21waWxpbmcuXG4gKi9cbndpbmRvdy5KU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5ID1cbiAgICA8UCBleHRlbmRzIFByb3BlcnR5S2V5Pihwcm9wOiBQLCBfb2JqOiB1bmtub3duKTogUCA9PiBwcm9wO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIHZhciBKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5OiA8UCBleHRlbmRzIFByb3BlcnR5S2V5PihcbiAgICAgIHByb3A6IFAsIF9vYmo6IHVua25vd24pID0+IFA7XG5cbiAgaW50ZXJmYWNlIFdpbmRvdyB7XG4gICAgSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eTogdHlwZW9mIEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHk7XG4gIH1cbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBwcm9wZXJ0eSB2YWx1ZXMgdG8gYW5kIGZyb20gYXR0cmlidXRlIHZhbHVlcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb21wbGV4QXR0cmlidXRlQ29udmVydGVyPFR5cGUgPSB1bmtub3duLCBUeXBlSGludCA9IHVua25vd24+IHtcbiAgLyoqXG4gICAqIEZ1bmN0aW9uIGNhbGxlZCB0byBjb252ZXJ0IGFuIGF0dHJpYnV0ZSB2YWx1ZSB0byBhIHByb3BlcnR5XG4gICAqIHZhbHVlLlxuICAgKi9cbiAgZnJvbUF0dHJpYnV0ZT8odmFsdWU6IHN0cmluZ3xudWxsLCB0eXBlPzogVHlwZUhpbnQpOiBUeXBlO1xuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiBjYWxsZWQgdG8gY29udmVydCBhIHByb3BlcnR5IHZhbHVlIHRvIGFuIGF0dHJpYnV0ZVxuICAgKiB2YWx1ZS5cbiAgICpcbiAgICogSXQgcmV0dXJucyB1bmtub3duIGluc3RlYWQgb2Ygc3RyaW5nLCB0byBiZSBjb21wYXRpYmxlIHdpdGhcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvdHJ1c3RlZC10eXBlcyAoYW5kIHNpbWlsYXIgZWZmb3J0cykuXG4gICAqL1xuICB0b0F0dHJpYnV0ZT8odmFsdWU6IFR5cGUsIHR5cGU/OiBUeXBlSGludCk6IHVua25vd247XG59XG5cbnR5cGUgQXR0cmlidXRlQ29udmVydGVyPFR5cGUgPSB1bmtub3duLCBUeXBlSGludCA9IHVua25vd24+ID1cbiAgICBDb21wbGV4QXR0cmlidXRlQ29udmVydGVyPFR5cGU+fCgodmFsdWU6IHN0cmluZywgdHlwZT86IFR5cGVIaW50KSA9PiBUeXBlKTtcblxuLyoqXG4gKiBEZWZpbmVzIG9wdGlvbnMgZm9yIGEgcHJvcGVydHkgYWNjZXNzb3IuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUHJvcGVydHlEZWNsYXJhdGlvbjxUeXBlID0gdW5rbm93biwgVHlwZUhpbnQgPSB1bmtub3duPiB7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgaG93IGFuZCB3aGV0aGVyIHRoZSBwcm9wZXJ0eSBiZWNvbWVzIGFuIG9ic2VydmVkIGF0dHJpYnV0ZS5cbiAgICogSWYgdGhlIHZhbHVlIGlzIGBmYWxzZWAsIHRoZSBwcm9wZXJ0eSBpcyBub3QgYWRkZWQgdG8gYG9ic2VydmVkQXR0cmlidXRlc2AuXG4gICAqIElmIHRydWUgb3IgYWJzZW50LCB0aGUgbG93ZXJjYXNlZCBwcm9wZXJ0eSBuYW1lIGlzIG9ic2VydmVkIChlLmcuIGBmb29CYXJgXG4gICAqIGJlY29tZXMgYGZvb2JhcmApLiBJZiBhIHN0cmluZywgdGhlIHN0cmluZyB2YWx1ZSBpcyBvYnNlcnZlZCAoZS5nXG4gICAqIGBhdHRyaWJ1dGU6ICdmb28tYmFyJ2ApLlxuICAgKi9cbiAgcmVhZG9ubHkgYXR0cmlidXRlPzogYm9vbGVhbnxzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB0aGUgdHlwZSBvZiB0aGUgcHJvcGVydHkuIFRoaXMgaXMgdXNlZCBvbmx5IGFzIGEgaGludCBmb3IgdGhlXG4gICAqIGBjb252ZXJ0ZXJgIHRvIGRldGVybWluZSBob3cgdG8gY29udmVydCB0aGUgYXR0cmlidXRlXG4gICAqIHRvL2Zyb20gYSBwcm9wZXJ0eS5cbiAgICovXG4gIHJlYWRvbmx5IHR5cGU/OiBUeXBlSGludDtcblxuICAvKipcbiAgICogSW5kaWNhdGVzIGhvdyB0byBjb252ZXJ0IHRoZSBhdHRyaWJ1dGUgdG8vZnJvbSBhIHByb3BlcnR5LiBJZiB0aGlzIHZhbHVlXG4gICAqIGlzIGEgZnVuY3Rpb24sIGl0IGlzIHVzZWQgdG8gY29udmVydCB0aGUgYXR0cmlidXRlIHZhbHVlIGEgdGhlIHByb3BlcnR5XG4gICAqIHZhbHVlLiBJZiBpdCdzIGFuIG9iamVjdCwgaXQgY2FuIGhhdmUga2V5cyBmb3IgYGZyb21BdHRyaWJ1dGVgIGFuZFxuICAgKiBgdG9BdHRyaWJ1dGVgLiBJZiBubyBgdG9BdHRyaWJ1dGVgIGZ1bmN0aW9uIGlzIHByb3ZpZGVkIGFuZFxuICAgKiBgcmVmbGVjdGAgaXMgc2V0IHRvIGB0cnVlYCwgdGhlIHByb3BlcnR5IHZhbHVlIGlzIHNldCBkaXJlY3RseSB0byB0aGVcbiAgICogYXR0cmlidXRlLiBBIGRlZmF1bHQgYGNvbnZlcnRlcmAgaXMgdXNlZCBpZiBub25lIGlzIHByb3ZpZGVkOyBpdCBzdXBwb3J0c1xuICAgKiBgQm9vbGVhbmAsIGBTdHJpbmdgLCBgTnVtYmVyYCwgYE9iamVjdGAsIGFuZCBgQXJyYXlgLiBOb3RlLFxuICAgKiB3aGVuIGEgcHJvcGVydHkgY2hhbmdlcyBhbmQgdGhlIGNvbnZlcnRlciBpcyB1c2VkIHRvIHVwZGF0ZSB0aGUgYXR0cmlidXRlLFxuICAgKiB0aGUgcHJvcGVydHkgaXMgbmV2ZXIgdXBkYXRlZCBhZ2FpbiBhcyBhIHJlc3VsdCBvZiB0aGUgYXR0cmlidXRlIGNoYW5naW5nLFxuICAgKiBhbmQgdmljZSB2ZXJzYS5cbiAgICovXG4gIHJlYWRvbmx5IGNvbnZlcnRlcj86IEF0dHJpYnV0ZUNvbnZlcnRlcjxUeXBlLCBUeXBlSGludD47XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyBpZiB0aGUgcHJvcGVydHkgc2hvdWxkIHJlZmxlY3QgdG8gYW4gYXR0cmlidXRlLlxuICAgKiBJZiBgdHJ1ZWAsIHdoZW4gdGhlIHByb3BlcnR5IGlzIHNldCwgdGhlIGF0dHJpYnV0ZSBpcyBzZXQgdXNpbmcgdGhlXG4gICAqIGF0dHJpYnV0ZSBuYW1lIGRldGVybWluZWQgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBmb3IgdGhlIGBhdHRyaWJ1dGVgXG4gICAqIHByb3BlcnR5IG9wdGlvbiBhbmQgdGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSBjb252ZXJ0ZWQgdXNpbmcgdGhlIHJ1bGVzXG4gICAqIGZyb20gdGhlIGBjb252ZXJ0ZXJgIHByb3BlcnR5IG9wdGlvbi5cbiAgICovXG4gIHJlYWRvbmx5IHJlZmxlY3Q/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBBIGZ1bmN0aW9uIHRoYXQgaW5kaWNhdGVzIGlmIGEgcHJvcGVydHkgc2hvdWxkIGJlIGNvbnNpZGVyZWQgY2hhbmdlZCB3aGVuXG4gICAqIGl0IGlzIHNldC4gVGhlIGZ1bmN0aW9uIHNob3VsZCB0YWtlIHRoZSBgbmV3VmFsdWVgIGFuZCBgb2xkVmFsdWVgIGFuZFxuICAgKiByZXR1cm4gYHRydWVgIGlmIGFuIHVwZGF0ZSBzaG91bGQgYmUgcmVxdWVzdGVkLlxuICAgKi9cbiAgaGFzQ2hhbmdlZD8odmFsdWU6IFR5cGUsIG9sZFZhbHVlOiBUeXBlKTogYm9vbGVhbjtcblxuICAvKipcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgYW4gYWNjZXNzb3Igd2lsbCBiZSBjcmVhdGVkIGZvciB0aGlzIHByb3BlcnR5LiBCeVxuICAgKiBkZWZhdWx0LCBhbiBhY2Nlc3NvciB3aWxsIGJlIGdlbmVyYXRlZCBmb3IgdGhpcyBwcm9wZXJ0eSB0aGF0IHJlcXVlc3RzIGFuXG4gICAqIHVwZGF0ZSB3aGVuIHNldC4gSWYgdGhpcyBmbGFnIGlzIGB0cnVlYCwgbm8gYWNjZXNzb3Igd2lsbCBiZSBjcmVhdGVkLCBhbmRcbiAgICogaXQgd2lsbCBiZSB0aGUgdXNlcidzIHJlc3BvbnNpYmlsaXR5IHRvIGNhbGxcbiAgICogYHRoaXMucmVxdWVzdFVwZGF0ZShwcm9wZXJ0eU5hbWUsIG9sZFZhbHVlKWAgdG8gcmVxdWVzdCBhbiB1cGRhdGUgd2hlblxuICAgKiB0aGUgcHJvcGVydHkgY2hhbmdlcy5cbiAgICovXG4gIHJlYWRvbmx5IG5vQWNjZXNzb3I/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIE1hcCBvZiBwcm9wZXJ0aWVzIHRvIFByb3BlcnR5RGVjbGFyYXRpb24gb3B0aW9ucy4gRm9yIGVhY2ggcHJvcGVydHkgYW5cbiAqIGFjY2Vzc29yIGlzIG1hZGUsIGFuZCB0aGUgcHJvcGVydHkgaXMgcHJvY2Vzc2VkIGFjY29yZGluZyB0byB0aGVcbiAqIFByb3BlcnR5RGVjbGFyYXRpb24gb3B0aW9ucy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQcm9wZXJ0eURlY2xhcmF0aW9ucyB7XG4gIHJlYWRvbmx5IFtrZXk6IHN0cmluZ106IFByb3BlcnR5RGVjbGFyYXRpb247XG59XG5cbnR5cGUgUHJvcGVydHlEZWNsYXJhdGlvbk1hcCA9IE1hcDxQcm9wZXJ0eUtleSwgUHJvcGVydHlEZWNsYXJhdGlvbj47XG5cbnR5cGUgQXR0cmlidXRlTWFwID0gTWFwPHN0cmluZywgUHJvcGVydHlLZXk+O1xuXG5leHBvcnQgdHlwZSBQcm9wZXJ0eVZhbHVlcyA9IE1hcDxQcm9wZXJ0eUtleSwgdW5rbm93bj47XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0Q29udmVydGVyOiBDb21wbGV4QXR0cmlidXRlQ29udmVydGVyID0ge1xuXG4gIHRvQXR0cmlidXRlKHZhbHVlOiB1bmtub3duLCB0eXBlPzogdW5rbm93bik6IHVua25vd24ge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBCb29sZWFuOlxuICAgICAgICByZXR1cm4gdmFsdWUgPyAnJyA6IG51bGw7XG4gICAgICBjYXNlIE9iamVjdDpcbiAgICAgIGNhc2UgQXJyYXk6XG4gICAgICAgIC8vIGlmIHRoZSB2YWx1ZSBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAgcGFzcyB0aGlzIHRocm91Z2hcbiAgICAgICAgLy8gdG8gYWxsb3cgcmVtb3Zpbmcvbm8gY2hhbmdlIGJlaGF2aW9yLlxuICAgICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHZhbHVlIDogSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG5cbiAgZnJvbUF0dHJpYnV0ZSh2YWx1ZTogc3RyaW5nfG51bGwsIHR5cGU/OiB1bmtub3duKSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIEJvb2xlYW46XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbDtcbiAgICAgIGNhc2UgTnVtYmVyOlxuICAgICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgPyBudWxsIDogTnVtYmVyKHZhbHVlKTtcbiAgICAgIGNhc2UgT2JqZWN0OlxuICAgICAgY2FzZSBBcnJheTpcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodmFsdWUhKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGFzQ2hhbmdlZCB7XG4gICh2YWx1ZTogdW5rbm93biwgb2xkOiB1bmtub3duKTogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBDaGFuZ2UgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBkaWZmZXJlbnQgZnJvbSBgb2xkVmFsdWVgLlxuICogVGhpcyBtZXRob2QgaXMgdXNlZCBhcyB0aGUgZGVmYXVsdCBmb3IgYSBwcm9wZXJ0eSdzIGBoYXNDaGFuZ2VkYCBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IG5vdEVxdWFsOiBIYXNDaGFuZ2VkID0gKHZhbHVlOiB1bmtub3duLCBvbGQ6IHVua25vd24pOiBib29sZWFuID0+IHtcbiAgLy8gVGhpcyBlbnN1cmVzIChvbGQ9PU5hTiwgdmFsdWU9PU5hTikgYWx3YXlzIHJldHVybnMgZmFsc2VcbiAgcmV0dXJuIG9sZCAhPT0gdmFsdWUgJiYgKG9sZCA9PT0gb2xkIHx8IHZhbHVlID09PSB2YWx1ZSk7XG59O1xuXG5jb25zdCBkZWZhdWx0UHJvcGVydHlEZWNsYXJhdGlvbjogUHJvcGVydHlEZWNsYXJhdGlvbiA9IHtcbiAgYXR0cmlidXRlOiB0cnVlLFxuICB0eXBlOiBTdHJpbmcsXG4gIGNvbnZlcnRlcjogZGVmYXVsdENvbnZlcnRlcixcbiAgcmVmbGVjdDogZmFsc2UsXG4gIGhhc0NoYW5nZWQ6IG5vdEVxdWFsXG59O1xuXG5jb25zdCBtaWNyb3Rhc2tQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHRydWUpO1xuXG5jb25zdCBTVEFURV9IQVNfVVBEQVRFRCA9IDE7XG5jb25zdCBTVEFURV9VUERBVEVfUkVRVUVTVEVEID0gMSA8PCAyO1xuY29uc3QgU1RBVEVfSVNfUkVGTEVDVElOR19UT19BVFRSSUJVVEUgPSAxIDw8IDM7XG5jb25zdCBTVEFURV9JU19SRUZMRUNUSU5HX1RPX1BST1BFUlRZID0gMSA8PCA0O1xuY29uc3QgU1RBVEVfSEFTX0NPTk5FQ1RFRCA9IDEgPDwgNTtcbnR5cGUgVXBkYXRlU3RhdGUgPSB0eXBlb2YgU1RBVEVfSEFTX1VQREFURUR8dHlwZW9mIFNUQVRFX1VQREFURV9SRVFVRVNURUR8XG4gICAgdHlwZW9mIFNUQVRFX0lTX1JFRkxFQ1RJTkdfVE9fQVRUUklCVVRFfFxuICAgIHR5cGVvZiBTVEFURV9JU19SRUZMRUNUSU5HX1RPX1BST1BFUlRZfHR5cGVvZiBTVEFURV9IQVNfQ09OTkVDVEVEO1xuXG4vKipcbiAqIEJhc2UgZWxlbWVudCBjbGFzcyB3aGljaCBtYW5hZ2VzIGVsZW1lbnQgcHJvcGVydGllcyBhbmQgYXR0cmlidXRlcy4gV2hlblxuICogcHJvcGVydGllcyBjaGFuZ2UsIHRoZSBgdXBkYXRlYCBtZXRob2QgaXMgYXN5bmNocm9ub3VzbHkgY2FsbGVkLiBUaGlzIG1ldGhvZFxuICogc2hvdWxkIGJlIHN1cHBsaWVkIGJ5IHN1YmNsYXNzZXJzIHRvIHJlbmRlciB1cGRhdGVzIGFzIGRlc2lyZWQuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBVcGRhdGluZ0VsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIC8qXG4gICAqIER1ZSB0byBjbG9zdXJlIGNvbXBpbGVyIEVTNiBjb21waWxhdGlvbiBidWdzLCBAbm9jb2xsYXBzZSBpcyByZXF1aXJlZCBvblxuICAgKiBhbGwgc3RhdGljIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMgd2l0aCBpbml0aWFsaXplcnMuICBSZWZlcmVuY2U6XG4gICAqIC0gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWNvbXBpbGVyL2lzc3Vlcy8xNzc2XG4gICAqL1xuXG4gIC8qKlxuICAgKiBNYXBzIGF0dHJpYnV0ZSBuYW1lcyB0byBwcm9wZXJ0aWVzOyBmb3IgZXhhbXBsZSBgZm9vYmFyYCBhdHRyaWJ1dGUgdG9cbiAgICogYGZvb0JhcmAgcHJvcGVydHkuIENyZWF0ZWQgbGF6aWx5IG9uIHVzZXIgc3ViY2xhc3NlcyB3aGVuIGZpbmFsaXppbmcgdGhlXG4gICAqIGNsYXNzLlxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgX2F0dHJpYnV0ZVRvUHJvcGVydHlNYXA6IEF0dHJpYnV0ZU1hcDtcblxuICAvKipcbiAgICogTWFya3MgY2xhc3MgYXMgaGF2aW5nIGZpbmlzaGVkIGNyZWF0aW5nIHByb3BlcnRpZXMuXG4gICAqL1xuICBwcm90ZWN0ZWQgc3RhdGljIGZpbmFsaXplZCA9IHRydWU7XG5cbiAgLyoqXG4gICAqIE1lbW9pemVkIGxpc3Qgb2YgYWxsIGNsYXNzIHByb3BlcnRpZXMsIGluY2x1ZGluZyBhbnkgc3VwZXJjbGFzcyBwcm9wZXJ0aWVzLlxuICAgKiBDcmVhdGVkIGxhemlseSBvbiB1c2VyIHN1YmNsYXNzZXMgd2hlbiBmaW5hbGl6aW5nIHRoZSBjbGFzcy5cbiAgICovXG4gIHByaXZhdGUgc3RhdGljIF9jbGFzc1Byb3BlcnRpZXM/OiBQcm9wZXJ0eURlY2xhcmF0aW9uTWFwO1xuXG4gIC8qKlxuICAgKiBVc2VyLXN1cHBsaWVkIG9iamVjdCB0aGF0IG1hcHMgcHJvcGVydHkgbmFtZXMgdG8gYFByb3BlcnR5RGVjbGFyYXRpb25gXG4gICAqIG9iamVjdHMgY29udGFpbmluZyBvcHRpb25zIGZvciBjb25maWd1cmluZyB0aGUgcHJvcGVydHkuXG4gICAqL1xuICBzdGF0aWMgcHJvcGVydGllczogUHJvcGVydHlEZWNsYXJhdGlvbnM7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsaXN0IG9mIGF0dHJpYnV0ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcmVnaXN0ZXJlZCBwcm9wZXJ0aWVzLlxuICAgKiBAbm9jb2xsYXBzZVxuICAgKi9cbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XG4gICAgLy8gbm90ZTogcGlnZ3kgYmFja2luZyBvbiB0aGlzIHRvIGVuc3VyZSB3ZSdyZSBmaW5hbGl6ZWQuXG4gICAgdGhpcy5maW5hbGl6ZSgpO1xuICAgIGNvbnN0IGF0dHJpYnV0ZXM6IHN0cmluZ1tdID0gW107XG4gICAgLy8gVXNlIGZvckVhY2ggc28gdGhpcyB3b3JrcyBldmVuIGlmIGZvci9vZiBsb29wcyBhcmUgY29tcGlsZWQgdG8gZm9yIGxvb3BzXG4gICAgLy8gZXhwZWN0aW5nIGFycmF5c1xuICAgIHRoaXMuX2NsYXNzUHJvcGVydGllcyEuZm9yRWFjaCgodiwgcCkgPT4ge1xuICAgICAgY29uc3QgYXR0ciA9IHRoaXMuX2F0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eShwLCB2KTtcbiAgICAgIGlmIChhdHRyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fYXR0cmlidXRlVG9Qcm9wZXJ0eU1hcC5zZXQoYXR0ciwgcCk7XG4gICAgICAgIGF0dHJpYnV0ZXMucHVzaChhdHRyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gYXR0cmlidXRlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBFbnN1cmVzIHRoZSBwcml2YXRlIGBfY2xhc3NQcm9wZXJ0aWVzYCBwcm9wZXJ0eSBtZXRhZGF0YSBpcyBjcmVhdGVkLlxuICAgKiBJbiBhZGRpdGlvbiB0byBgZmluYWxpemVgIHRoaXMgaXMgYWxzbyBjYWxsZWQgaW4gYGNyZWF0ZVByb3BlcnR5YCB0b1xuICAgKiBlbnN1cmUgdGhlIGBAcHJvcGVydHlgIGRlY29yYXRvciBjYW4gYWRkIHByb3BlcnR5IG1ldGFkYXRhLlxuICAgKi9cbiAgLyoqIEBub2NvbGxhcHNlICovXG4gIHByaXZhdGUgc3RhdGljIF9lbnN1cmVDbGFzc1Byb3BlcnRpZXMoKSB7XG4gICAgLy8gZW5zdXJlIHByaXZhdGUgc3RvcmFnZSBmb3IgcHJvcGVydHkgZGVjbGFyYXRpb25zLlxuICAgIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eShcbiAgICAgICAgICAgIEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ19jbGFzc1Byb3BlcnRpZXMnLCB0aGlzKSkpIHtcbiAgICAgIHRoaXMuX2NsYXNzUHJvcGVydGllcyA9IG5ldyBNYXAoKTtcbiAgICAgIC8vIE5PVEU6IFdvcmthcm91bmQgSUUxMSBub3Qgc3VwcG9ydGluZyBNYXAgY29uc3RydWN0b3IgYXJndW1lbnQuXG4gICAgICBjb25zdCBzdXBlclByb3BlcnRpZXM6IFByb3BlcnR5RGVjbGFyYXRpb25NYXAgPVxuICAgICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fY2xhc3NQcm9wZXJ0aWVzO1xuICAgICAgaWYgKHN1cGVyUHJvcGVydGllcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN1cGVyUHJvcGVydGllcy5mb3JFYWNoKFxuICAgICAgICAgICAgKHY6IFByb3BlcnR5RGVjbGFyYXRpb24sIGs6IFByb3BlcnR5S2V5KSA9PlxuICAgICAgICAgICAgICAgIHRoaXMuX2NsYXNzUHJvcGVydGllcyEuc2V0KGssIHYpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHByb3BlcnR5IGFjY2Vzc29yIG9uIHRoZSBlbGVtZW50IHByb3RvdHlwZSBpZiBvbmUgZG9lcyBub3QgZXhpc3QuXG4gICAqIFRoZSBwcm9wZXJ0eSBzZXR0ZXIgY2FsbHMgdGhlIHByb3BlcnR5J3MgYGhhc0NoYW5nZWRgIHByb3BlcnR5IG9wdGlvblxuICAgKiBvciB1c2VzIGEgc3RyaWN0IGlkZW50aXR5IGNoZWNrIHRvIGRldGVybWluZSB3aGV0aGVyIG9yIG5vdCB0byByZXF1ZXN0XG4gICAqIGFuIHVwZGF0ZS5cbiAgICogQG5vY29sbGFwc2VcbiAgICovXG4gIHN0YXRpYyBjcmVhdGVQcm9wZXJ0eShcbiAgICAgIG5hbWU6IFByb3BlcnR5S2V5LFxuICAgICAgb3B0aW9uczogUHJvcGVydHlEZWNsYXJhdGlvbiA9IGRlZmF1bHRQcm9wZXJ0eURlY2xhcmF0aW9uKSB7XG4gICAgLy8gTm90ZSwgc2luY2UgdGhpcyBjYW4gYmUgY2FsbGVkIGJ5IHRoZSBgQHByb3BlcnR5YCBkZWNvcmF0b3Igd2hpY2hcbiAgICAvLyBpcyBjYWxsZWQgYmVmb3JlIGBmaW5hbGl6ZWAsIHdlIGVuc3VyZSBzdG9yYWdlIGV4aXN0cyBmb3IgcHJvcGVydHlcbiAgICAvLyBtZXRhZGF0YS5cbiAgICB0aGlzLl9lbnN1cmVDbGFzc1Byb3BlcnRpZXMoKTtcbiAgICB0aGlzLl9jbGFzc1Byb3BlcnRpZXMhLnNldChuYW1lLCBvcHRpb25zKTtcbiAgICAvLyBEbyBub3QgZ2VuZXJhdGUgYW4gYWNjZXNzb3IgaWYgdGhlIHByb3RvdHlwZSBhbHJlYWR5IGhhcyBvbmUsIHNpbmNlXG4gICAgLy8gaXQgd291bGQgYmUgbG9zdCBvdGhlcndpc2UgYW5kIHRoYXQgd291bGQgbmV2ZXIgYmUgdGhlIHVzZXIncyBpbnRlbnRpb247XG4gICAgLy8gSW5zdGVhZCwgd2UgZXhwZWN0IHVzZXJzIHRvIGNhbGwgYHJlcXVlc3RVcGRhdGVgIHRoZW1zZWx2ZXMgZnJvbVxuICAgIC8vIHVzZXItZGVmaW5lZCBhY2Nlc3NvcnMuIE5vdGUgdGhhdCBpZiB0aGUgc3VwZXIgaGFzIGFuIGFjY2Vzc29yIHdlIHdpbGxcbiAgICAvLyBzdGlsbCBvdmVyd3JpdGUgaXRcbiAgICBpZiAob3B0aW9ucy5ub0FjY2Vzc29yIHx8IHRoaXMucHJvdG90eXBlLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGtleSA9IHR5cGVvZiBuYW1lID09PSAnc3ltYm9sJyA/IFN5bWJvbCgpIDogYF9fJHtuYW1lfWA7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMucHJvdG90eXBlLCBuYW1lLCB7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55IG5vIHN5bWJvbCBpbiBpbmRleFxuICAgICAgZ2V0KCk6IGFueSB7XG4gICAgICAgIHJldHVybiB0aGlzW2tleV07XG4gICAgICB9LFxuICAgICAgc2V0KHRoaXM6IFVwZGF0aW5nRWxlbWVudCwgdmFsdWU6IHVua25vd24pIHtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSBubyBzeW1ib2wgaW4gaW5kZXhcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSAodGhpcyBhcyBhbnkpW25hbWVdO1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55IG5vIHN5bWJvbCBpbiBpbmRleFxuICAgICAgICAodGhpcyBhcyBhbnkpW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fcmVxdWVzdFVwZGF0ZShuYW1lLCBvbGRWYWx1ZSk7XG4gICAgICB9LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgcHJvcGVydHkgYWNjZXNzb3JzIGZvciByZWdpc3RlcmVkIHByb3BlcnRpZXMgYW5kIGVuc3VyZXNcbiAgICogYW55IHN1cGVyY2xhc3NlcyBhcmUgYWxzbyBmaW5hbGl6ZWQuXG4gICAqIEBub2NvbGxhcHNlXG4gICAqL1xuICBwcm90ZWN0ZWQgc3RhdGljIGZpbmFsaXplKCkge1xuICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ2ZpbmFsaXplZCcsIHRoaXMpKSAmJlxuICAgICAgICB0aGlzLmZpbmFsaXplZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBmaW5hbGl6ZSBhbnkgc3VwZXJjbGFzc2VzXG4gICAgY29uc3Qgc3VwZXJDdG9yID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpO1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDdG9yLmZpbmFsaXplID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBzdXBlckN0b3IuZmluYWxpemUoKTtcbiAgICB9XG4gICAgdGhpcy5maW5hbGl6ZWQgPSB0cnVlO1xuICAgIHRoaXMuX2Vuc3VyZUNsYXNzUHJvcGVydGllcygpO1xuICAgIC8vIGluaXRpYWxpemUgTWFwIHBvcHVsYXRlZCBpbiBvYnNlcnZlZEF0dHJpYnV0ZXNcbiAgICB0aGlzLl9hdHRyaWJ1dGVUb1Byb3BlcnR5TWFwID0gbmV3IE1hcCgpO1xuICAgIC8vIG1ha2UgYW55IHByb3BlcnRpZXNcbiAgICAvLyBOb3RlLCBvbmx5IHByb2Nlc3MgXCJvd25cIiBwcm9wZXJ0aWVzIHNpbmNlIHRoaXMgZWxlbWVudCB3aWxsIGluaGVyaXRcbiAgICAvLyBhbnkgcHJvcGVydGllcyBkZWZpbmVkIG9uIHRoZSBzdXBlckNsYXNzLCBhbmQgZmluYWxpemF0aW9uIGVuc3VyZXNcbiAgICAvLyB0aGUgZW50aXJlIHByb3RvdHlwZSBjaGFpbiBpcyBmaW5hbGl6ZWQuXG4gICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgncHJvcGVydGllcycsIHRoaXMpKSkge1xuICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLnByb3BlcnRpZXM7XG4gICAgICAvLyBzdXBwb3J0IHN5bWJvbHMgaW4gcHJvcGVydGllcyAoSUUxMSBkb2VzIG5vdCBzdXBwb3J0IHRoaXMpXG4gICAgICBjb25zdCBwcm9wS2V5cyA9IFtcbiAgICAgICAgLi4uT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocHJvcHMpLFxuICAgICAgICAuLi4odHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpID9cbiAgICAgICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocHJvcHMpIDpcbiAgICAgICAgICAgIFtdXG4gICAgICBdO1xuICAgICAgLy8gVGhpcyBmb3Ivb2YgaXMgb2sgYmVjYXVzZSBwcm9wS2V5cyBpcyBhbiBhcnJheVxuICAgICAgZm9yIChjb25zdCBwIG9mIHByb3BLZXlzKSB7XG4gICAgICAgIC8vIG5vdGUsIHVzZSBvZiBgYW55YCBpcyBkdWUgdG8gVHlwZVNyaXB0IGxhY2sgb2Ygc3VwcG9ydCBmb3Igc3ltYm9sIGluXG4gICAgICAgIC8vIGluZGV4IHR5cGVzXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgbm8gc3ltYm9sIGluIGluZGV4XG4gICAgICAgIHRoaXMuY3JlYXRlUHJvcGVydHkocCwgKHByb3BzIGFzIGFueSlbcF0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBuYW1lIGZvciB0aGUgZ2l2ZW4gYXR0cmlidXRlIGBuYW1lYC5cbiAgICogQG5vY29sbGFwc2VcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIF9hdHRyaWJ1dGVOYW1lRm9yUHJvcGVydHkoXG4gICAgICBuYW1lOiBQcm9wZXJ0eUtleSwgb3B0aW9uczogUHJvcGVydHlEZWNsYXJhdGlvbikge1xuICAgIGNvbnN0IGF0dHJpYnV0ZSA9IG9wdGlvbnMuYXR0cmlidXRlO1xuICAgIHJldHVybiBhdHRyaWJ1dGUgPT09IGZhbHNlID9cbiAgICAgICAgdW5kZWZpbmVkIDpcbiAgICAgICAgKHR5cGVvZiBhdHRyaWJ1dGUgPT09ICdzdHJpbmcnID9cbiAgICAgICAgICAgICBhdHRyaWJ1dGUgOlxuICAgICAgICAgICAgICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOiB1bmRlZmluZWQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgYSBwcm9wZXJ0eSBzaG91bGQgcmVxdWVzdCBhbiB1cGRhdGUuXG4gICAqIENhbGxlZCB3aGVuIGEgcHJvcGVydHkgdmFsdWUgaXMgc2V0IGFuZCB1c2VzIHRoZSBgaGFzQ2hhbmdlZGBcbiAgICogb3B0aW9uIGZvciB0aGUgcHJvcGVydHkgaWYgcHJlc2VudCBvciBhIHN0cmljdCBpZGVudGl0eSBjaGVjay5cbiAgICogQG5vY29sbGFwc2VcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIF92YWx1ZUhhc0NoYW5nZWQoXG4gICAgICB2YWx1ZTogdW5rbm93biwgb2xkOiB1bmtub3duLCBoYXNDaGFuZ2VkOiBIYXNDaGFuZ2VkID0gbm90RXF1YWwpIHtcbiAgICByZXR1cm4gaGFzQ2hhbmdlZCh2YWx1ZSwgb2xkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZSBmb3IgdGhlIGdpdmVuIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICogQ2FsbGVkIHZpYSB0aGUgYGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFja2AgYW5kIHVzZXMgdGhlIHByb3BlcnR5J3NcbiAgICogYGNvbnZlcnRlcmAgb3IgYGNvbnZlcnRlci5mcm9tQXR0cmlidXRlYCBwcm9wZXJ0eSBvcHRpb24uXG4gICAqIEBub2NvbGxhcHNlXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBfcHJvcGVydHlWYWx1ZUZyb21BdHRyaWJ1dGUoXG4gICAgICB2YWx1ZTogc3RyaW5nfG51bGwsIG9wdGlvbnM6IFByb3BlcnR5RGVjbGFyYXRpb24pIHtcbiAgICBjb25zdCB0eXBlID0gb3B0aW9ucy50eXBlO1xuICAgIGNvbnN0IGNvbnZlcnRlciA9IG9wdGlvbnMuY29udmVydGVyIHx8IGRlZmF1bHRDb252ZXJ0ZXI7XG4gICAgY29uc3QgZnJvbUF0dHJpYnV0ZSA9XG4gICAgICAgICh0eXBlb2YgY29udmVydGVyID09PSAnZnVuY3Rpb24nID8gY29udmVydGVyIDogY29udmVydGVyLmZyb21BdHRyaWJ1dGUpO1xuICAgIHJldHVybiBmcm9tQXR0cmlidXRlID8gZnJvbUF0dHJpYnV0ZSh2YWx1ZSwgdHlwZSkgOiB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhdHRyaWJ1dGUgdmFsdWUgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eSB2YWx1ZS4gSWYgdGhpc1xuICAgKiByZXR1cm5zIHVuZGVmaW5lZCwgdGhlIHByb3BlcnR5IHdpbGwgKm5vdCogYmUgcmVmbGVjdGVkIHRvIGFuIGF0dHJpYnV0ZS5cbiAgICogSWYgdGhpcyByZXR1cm5zIG51bGwsIHRoZSBhdHRyaWJ1dGUgd2lsbCBiZSByZW1vdmVkLCBvdGhlcndpc2UgdGhlXG4gICAqIGF0dHJpYnV0ZSB3aWxsIGJlIHNldCB0byB0aGUgdmFsdWUuXG4gICAqIFRoaXMgdXNlcyB0aGUgcHJvcGVydHkncyBgcmVmbGVjdGAgYW5kIGB0eXBlLnRvQXR0cmlidXRlYCBwcm9wZXJ0eSBvcHRpb25zLlxuICAgKiBAbm9jb2xsYXBzZVxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgX3Byb3BlcnR5VmFsdWVUb0F0dHJpYnV0ZShcbiAgICAgIHZhbHVlOiB1bmtub3duLCBvcHRpb25zOiBQcm9wZXJ0eURlY2xhcmF0aW9uKSB7XG4gICAgaWYgKG9wdGlvbnMucmVmbGVjdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHR5cGUgPSBvcHRpb25zLnR5cGU7XG4gICAgY29uc3QgY29udmVydGVyID0gb3B0aW9ucy5jb252ZXJ0ZXI7XG4gICAgY29uc3QgdG9BdHRyaWJ1dGUgPVxuICAgICAgICBjb252ZXJ0ZXIgJiYgKGNvbnZlcnRlciBhcyBDb21wbGV4QXR0cmlidXRlQ29udmVydGVyKS50b0F0dHJpYnV0ZSB8fFxuICAgICAgICBkZWZhdWx0Q29udmVydGVyLnRvQXR0cmlidXRlO1xuICAgIHJldHVybiB0b0F0dHJpYnV0ZSEodmFsdWUsIHR5cGUpO1xuICB9XG5cbiAgcHJpdmF0ZSBfdXBkYXRlU3RhdGU6IFVwZGF0ZVN0YXRlID0gMDtcbiAgcHJpdmF0ZSBfaW5zdGFuY2VQcm9wZXJ0aWVzOiBQcm9wZXJ0eVZhbHVlc3x1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gIHByaXZhdGUgX3VwZGF0ZVByb21pc2U6IFByb21pc2U8dW5rbm93bj4gPSBtaWNyb3Rhc2tQcm9taXNlO1xuICBwcml2YXRlIF9oYXNDb25uZWN0ZWRSZXNvbHZlcjogKCgpID0+IHZvaWQpfHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogTWFwIHdpdGgga2V5cyBmb3IgYW55IHByb3BlcnRpZXMgdGhhdCBoYXZlIGNoYW5nZWQgc2luY2UgdGhlIGxhc3RcbiAgICogdXBkYXRlIGN5Y2xlIHdpdGggcHJldmlvdXMgdmFsdWVzLlxuICAgKi9cbiAgcHJpdmF0ZSBfY2hhbmdlZFByb3BlcnRpZXM6IFByb3BlcnR5VmFsdWVzID0gbmV3IE1hcCgpO1xuXG4gIC8qKlxuICAgKiBNYXAgd2l0aCBrZXlzIG9mIHByb3BlcnRpZXMgdGhhdCBzaG91bGQgYmUgcmVmbGVjdGVkIHdoZW4gdXBkYXRlZC5cbiAgICovXG4gIHByaXZhdGUgX3JlZmxlY3RpbmdQcm9wZXJ0aWVzOiBNYXA8UHJvcGVydHlLZXksIFByb3BlcnR5RGVjbGFyYXRpb24+fFxuICAgICAgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5pbml0aWFsaXplKCk7XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgZWxlbWVudCBpbml0aWFsaXphdGlvbi4gQnkgZGVmYXVsdCBjYXB0dXJlcyBhbnkgcHJlLXNldCB2YWx1ZXMgZm9yXG4gICAqIHJlZ2lzdGVyZWQgcHJvcGVydGllcy5cbiAgICovXG4gIHByb3RlY3RlZCBpbml0aWFsaXplKCkge1xuICAgIHRoaXMuX3NhdmVJbnN0YW5jZVByb3BlcnRpZXMoKTtcbiAgICAvLyBlbnN1cmVzIGZpcnN0IHVwZGF0ZSB3aWxsIGJlIGNhdWdodCBieSBhbiBlYXJseSBhY2Nlc3Mgb2YgYHVwZGF0ZUNvbXBsZXRlYFxuICAgIHRoaXMuX3JlcXVlc3RVcGRhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXhlcyBhbnkgcHJvcGVydGllcyBzZXQgb24gdGhlIGluc3RhbmNlIGJlZm9yZSB1cGdyYWRlIHRpbWUuXG4gICAqIE90aGVyd2lzZSB0aGVzZSB3b3VsZCBzaGFkb3cgdGhlIGFjY2Vzc29yIGFuZCBicmVhayB0aGVzZSBwcm9wZXJ0aWVzLlxuICAgKiBUaGUgcHJvcGVydGllcyBhcmUgc3RvcmVkIGluIGEgTWFwIHdoaWNoIGlzIHBsYXllZCBiYWNrIGFmdGVyIHRoZVxuICAgKiBjb25zdHJ1Y3RvciBydW5zLiBOb3RlLCBvbiB2ZXJ5IG9sZCB2ZXJzaW9ucyBvZiBTYWZhcmkgKDw9OSkgb3IgQ2hyb21lXG4gICAqICg8PTQxKSwgcHJvcGVydGllcyBjcmVhdGVkIGZvciBuYXRpdmUgcGxhdGZvcm0gcHJvcGVydGllcyBsaWtlIChgaWRgIG9yXG4gICAqIGBuYW1lYCkgbWF5IG5vdCBoYXZlIGRlZmF1bHQgdmFsdWVzIHNldCBpbiB0aGUgZWxlbWVudCBjb25zdHJ1Y3Rvci4gT25cbiAgICogdGhlc2UgYnJvd3NlcnMgbmF0aXZlIHByb3BlcnRpZXMgYXBwZWFyIG9uIGluc3RhbmNlcyBhbmQgdGhlcmVmb3JlIHRoZWlyXG4gICAqIGRlZmF1bHQgdmFsdWUgd2lsbCBvdmVyd3JpdGUgYW55IGVsZW1lbnQgZGVmYXVsdCAoZS5nLiBpZiB0aGUgZWxlbWVudCBzZXRzXG4gICAqIHRoaXMuaWQgPSAnaWQnIGluIHRoZSBjb25zdHJ1Y3RvciwgdGhlICdpZCcgd2lsbCBiZWNvbWUgJycgc2luY2UgdGhpcyBpc1xuICAgKiB0aGUgbmF0aXZlIHBsYXRmb3JtIGRlZmF1bHQpLlxuICAgKi9cbiAgcHJpdmF0ZSBfc2F2ZUluc3RhbmNlUHJvcGVydGllcygpIHtcbiAgICAvLyBVc2UgZm9yRWFjaCBzbyB0aGlzIHdvcmtzIGV2ZW4gaWYgZm9yL29mIGxvb3BzIGFyZSBjb21waWxlZCB0byBmb3IgbG9vcHNcbiAgICAvLyBleHBlY3RpbmcgYXJyYXlzXG4gICAgKHRoaXMuY29uc3RydWN0b3IgYXMgdHlwZW9mIFVwZGF0aW5nRWxlbWVudClcbiAgICAgICAgLl9jbGFzc1Byb3BlcnRpZXMhLmZvckVhY2goKF92LCBwKSA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkocCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpc1twIGFzIGtleW9mIHRoaXNdO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXNbcCBhcyBrZXlvZiB0aGlzXTtcbiAgICAgICAgICAgIGlmICghdGhpcy5faW5zdGFuY2VQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlUHJvcGVydGllcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlUHJvcGVydGllcy5zZXQocCwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQXBwbGllcyBwcmV2aW91c2x5IHNhdmVkIGluc3RhbmNlIHByb3BlcnRpZXMuXG4gICAqL1xuICBwcml2YXRlIF9hcHBseUluc3RhbmNlUHJvcGVydGllcygpIHtcbiAgICAvLyBVc2UgZm9yRWFjaCBzbyB0aGlzIHdvcmtzIGV2ZW4gaWYgZm9yL29mIGxvb3BzIGFyZSBjb21waWxlZCB0byBmb3IgbG9vcHNcbiAgICAvLyBleHBlY3RpbmcgYXJyYXlzXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgIHRoaXMuX2luc3RhbmNlUHJvcGVydGllcyEuZm9yRWFjaCgodiwgcCkgPT4gKHRoaXMgYXMgYW55KVtwXSA9IHYpO1xuICAgIHRoaXMuX2luc3RhbmNlUHJvcGVydGllcyA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gdGhpcy5fdXBkYXRlU3RhdGUgfCBTVEFURV9IQVNfQ09OTkVDVEVEO1xuICAgIC8vIEVuc3VyZSBmaXJzdCBjb25uZWN0aW9uIGNvbXBsZXRlcyBhbiB1cGRhdGUuIFVwZGF0ZXMgY2Fubm90IGNvbXBsZXRlIGJlZm9yZVxuICAgIC8vIGNvbm5lY3Rpb24gYW5kIGlmIG9uZSBpcyBwZW5kaW5nIGNvbm5lY3Rpb24gdGhlIGBfaGFzQ29ubmVjdGlvblJlc29sdmVyYFxuICAgIC8vIHdpbGwgZXhpc3QuIElmIHNvLCByZXNvbHZlIGl0IHRvIGNvbXBsZXRlIHRoZSB1cGRhdGUsIG90aGVyd2lzZVxuICAgIC8vIHJlcXVlc3RVcGRhdGUuXG4gICAgaWYgKHRoaXMuX2hhc0Nvbm5lY3RlZFJlc29sdmVyKSB7XG4gICAgICB0aGlzLl9oYXNDb25uZWN0ZWRSZXNvbHZlcigpO1xuICAgICAgdGhpcy5faGFzQ29ubmVjdGVkUmVzb2x2ZXIgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFsbG93cyBmb3IgYHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKClgIGluIGV4dGVuc2lvbnMgd2hpbGVcbiAgICogcmVzZXJ2aW5nIHRoZSBwb3NzaWJpbGl0eSBvZiBtYWtpbmcgbm9uLWJyZWFraW5nIGZlYXR1cmUgYWRkaXRpb25zXG4gICAqIHdoZW4gZGlzY29ubmVjdGluZyBhdCBzb21lIHBvaW50IGluIHRoZSBmdXR1cmUuXG4gICAqL1xuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgfVxuXG4gIC8qKlxuICAgKiBTeW5jaHJvbml6ZXMgcHJvcGVydHkgdmFsdWVzIHdoZW4gYXR0cmlidXRlcyBjaGFuZ2UuXG4gICAqL1xuICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZTogc3RyaW5nLCBvbGQ6IHN0cmluZ3xudWxsLCB2YWx1ZTogc3RyaW5nfG51bGwpIHtcbiAgICBpZiAob2xkICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fYXR0cmlidXRlVG9Qcm9wZXJ0eShuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfcHJvcGVydHlUb0F0dHJpYnV0ZShcbiAgICAgIG5hbWU6IFByb3BlcnR5S2V5LCB2YWx1ZTogdW5rbm93bixcbiAgICAgIG9wdGlvbnM6IFByb3BlcnR5RGVjbGFyYXRpb24gPSBkZWZhdWx0UHJvcGVydHlEZWNsYXJhdGlvbikge1xuICAgIGNvbnN0IGN0b3IgPSAodGhpcy5jb25zdHJ1Y3RvciBhcyB0eXBlb2YgVXBkYXRpbmdFbGVtZW50KTtcbiAgICBjb25zdCBhdHRyID0gY3Rvci5fYXR0cmlidXRlTmFtZUZvclByb3BlcnR5KG5hbWUsIG9wdGlvbnMpO1xuICAgIGlmIChhdHRyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IGF0dHJWYWx1ZSA9IGN0b3IuX3Byb3BlcnR5VmFsdWVUb0F0dHJpYnV0ZSh2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICAvLyBhbiB1bmRlZmluZWQgdmFsdWUgZG9lcyBub3QgY2hhbmdlIHRoZSBhdHRyaWJ1dGUuXG4gICAgICBpZiAoYXR0clZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gVHJhY2sgaWYgdGhlIHByb3BlcnR5IGlzIGJlaW5nIHJlZmxlY3RlZCB0byBhdm9pZFxuICAgICAgLy8gc2V0dGluZyB0aGUgcHJvcGVydHkgYWdhaW4gdmlhIGBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tgLiBOb3RlOlxuICAgICAgLy8gMS4gdGhpcyB0YWtlcyBhZHZhbnRhZ2Ugb2YgdGhlIGZhY3QgdGhhdCB0aGUgY2FsbGJhY2sgaXMgc3luY2hyb25vdXMuXG4gICAgICAvLyAyLiB3aWxsIGJlaGF2ZSBpbmNvcnJlY3RseSBpZiBtdWx0aXBsZSBhdHRyaWJ1dGVzIGFyZSBpbiB0aGUgcmVhY3Rpb25cbiAgICAgIC8vIHN0YWNrIGF0IHRpbWUgb2YgY2FsbGluZy4gSG93ZXZlciwgc2luY2Ugd2UgcHJvY2VzcyBhdHRyaWJ1dGVzXG4gICAgICAvLyBpbiBgdXBkYXRlYCB0aGlzIHNob3VsZCBub3QgYmUgcG9zc2libGUgKG9yIGFuIGV4dHJlbWUgY29ybmVyIGNhc2VcbiAgICAgIC8vIHRoYXQgd2UnZCBsaWtlIHRvIGRpc2NvdmVyKS5cbiAgICAgIC8vIG1hcmsgc3RhdGUgcmVmbGVjdGluZ1xuICAgICAgdGhpcy5fdXBkYXRlU3RhdGUgPSB0aGlzLl91cGRhdGVTdGF0ZSB8IFNUQVRFX0lTX1JFRkxFQ1RJTkdfVE9fQVRUUklCVVRFO1xuICAgICAgaWYgKGF0dHJWYWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKGF0dHIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoYXR0ciwgYXR0clZhbHVlIGFzIHN0cmluZyk7XG4gICAgICB9XG4gICAgICAvLyBtYXJrIHN0YXRlIG5vdCByZWZsZWN0aW5nXG4gICAgICB0aGlzLl91cGRhdGVTdGF0ZSA9IHRoaXMuX3VwZGF0ZVN0YXRlICYgflNUQVRFX0lTX1JFRkxFQ1RJTkdfVE9fQVRUUklCVVRFO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2F0dHJpYnV0ZVRvUHJvcGVydHkobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nfG51bGwpIHtcbiAgICAvLyBVc2UgdHJhY2tpbmcgaW5mbyB0byBhdm9pZCBkZXNlcmlhbGl6aW5nIGF0dHJpYnV0ZSB2YWx1ZSBpZiBpdCB3YXNcbiAgICAvLyBqdXN0IHNldCBmcm9tIGEgcHJvcGVydHkgc2V0dGVyLlxuICAgIGlmICh0aGlzLl91cGRhdGVTdGF0ZSAmIFNUQVRFX0lTX1JFRkxFQ1RJTkdfVE9fQVRUUklCVVRFKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGN0b3IgPSAodGhpcy5jb25zdHJ1Y3RvciBhcyB0eXBlb2YgVXBkYXRpbmdFbGVtZW50KTtcbiAgICBjb25zdCBwcm9wTmFtZSA9IGN0b3IuX2F0dHJpYnV0ZVRvUHJvcGVydHlNYXAuZ2V0KG5hbWUpO1xuICAgIGlmIChwcm9wTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBvcHRpb25zID1cbiAgICAgICAgICBjdG9yLl9jbGFzc1Byb3BlcnRpZXMhLmdldChwcm9wTmFtZSkgfHwgZGVmYXVsdFByb3BlcnR5RGVjbGFyYXRpb247XG4gICAgICAvLyBtYXJrIHN0YXRlIHJlZmxlY3RpbmdcbiAgICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gdGhpcy5fdXBkYXRlU3RhdGUgfCBTVEFURV9JU19SRUZMRUNUSU5HX1RPX1BST1BFUlRZO1xuICAgICAgdGhpc1twcm9wTmFtZSBhcyBrZXlvZiB0aGlzXSA9XG4gICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgICAgICAgIGN0b3IuX3Byb3BlcnR5VmFsdWVGcm9tQXR0cmlidXRlKHZhbHVlLCBvcHRpb25zKSBhcyBhbnk7XG4gICAgICAvLyBtYXJrIHN0YXRlIG5vdCByZWZsZWN0aW5nXG4gICAgICB0aGlzLl91cGRhdGVTdGF0ZSA9IHRoaXMuX3VwZGF0ZVN0YXRlICYgflNUQVRFX0lTX1JFRkxFQ1RJTkdfVE9fUFJPUEVSVFk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgcHJpdmF0ZSB2ZXJzaW9uIG9mIGByZXF1ZXN0VXBkYXRlYCBkb2VzIG5vdCBhY2Nlc3Mgb3IgcmV0dXJuIHRoZVxuICAgKiBgdXBkYXRlQ29tcGxldGVgIHByb21pc2UuIFRoaXMgcHJvbWlzZSBjYW4gYmUgb3ZlcnJpZGRlbiBhbmQgaXMgdGhlcmVmb3JlXG4gICAqIG5vdCBmcmVlIHRvIGFjY2Vzcy5cbiAgICovXG4gIHByaXZhdGUgX3JlcXVlc3RVcGRhdGUobmFtZT86IFByb3BlcnR5S2V5LCBvbGRWYWx1ZT86IHVua25vd24pIHtcbiAgICBsZXQgc2hvdWxkUmVxdWVzdFVwZGF0ZSA9IHRydWU7XG4gICAgLy8gSWYgd2UgaGF2ZSBhIHByb3BlcnR5IGtleSwgcGVyZm9ybSBwcm9wZXJ0eSB1cGRhdGUgc3RlcHMuXG4gICAgaWYgKG5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgY3RvciA9IHRoaXMuY29uc3RydWN0b3IgYXMgdHlwZW9mIFVwZGF0aW5nRWxlbWVudDtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPVxuICAgICAgICAgIGN0b3IuX2NsYXNzUHJvcGVydGllcyEuZ2V0KG5hbWUpIHx8IGRlZmF1bHRQcm9wZXJ0eURlY2xhcmF0aW9uO1xuICAgICAgaWYgKGN0b3IuX3ZhbHVlSGFzQ2hhbmdlZChcbiAgICAgICAgICAgICAgdGhpc1tuYW1lIGFzIGtleW9mIHRoaXNdLCBvbGRWYWx1ZSwgb3B0aW9ucy5oYXNDaGFuZ2VkKSkge1xuICAgICAgICBpZiAoIXRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzLmhhcyhuYW1lKSkge1xuICAgICAgICAgIHRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzLnNldChuYW1lLCBvbGRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWRkIHRvIHJlZmxlY3RpbmcgcHJvcGVydGllcyBzZXQuXG4gICAgICAgIC8vIE5vdGUsIGl0J3MgaW1wb3J0YW50IHRoYXQgZXZlcnkgY2hhbmdlIGhhcyBhIGNoYW5jZSB0byBhZGQgdGhlXG4gICAgICAgIC8vIHByb3BlcnR5IHRvIGBfcmVmbGVjdGluZ1Byb3BlcnRpZXNgLiBUaGlzIGVuc3VyZXMgc2V0dGluZ1xuICAgICAgICAvLyBhdHRyaWJ1dGUgKyBwcm9wZXJ0eSByZWZsZWN0cyBjb3JyZWN0bHkuXG4gICAgICAgIGlmIChvcHRpb25zLnJlZmxlY3QgPT09IHRydWUgJiZcbiAgICAgICAgICAgICEodGhpcy5fdXBkYXRlU3RhdGUgJiBTVEFURV9JU19SRUZMRUNUSU5HX1RPX1BST1BFUlRZKSkge1xuICAgICAgICAgIGlmICh0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMuc2V0KG5hbWUsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBYm9ydCB0aGUgcmVxdWVzdCBpZiB0aGUgcHJvcGVydHkgc2hvdWxkIG5vdCBiZSBjb25zaWRlcmVkIGNoYW5nZWQuXG4gICAgICAgIHNob3VsZFJlcXVlc3RVcGRhdGUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCF0aGlzLl9oYXNSZXF1ZXN0ZWRVcGRhdGUgJiYgc2hvdWxkUmVxdWVzdFVwZGF0ZSkge1xuICAgICAgdGhpcy5fZW5xdWV1ZVVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0cyBhbiB1cGRhdGUgd2hpY2ggaXMgcHJvY2Vzc2VkIGFzeW5jaHJvbm91c2x5LiBUaGlzIHNob3VsZFxuICAgKiBiZSBjYWxsZWQgd2hlbiBhbiBlbGVtZW50IHNob3VsZCB1cGRhdGUgYmFzZWQgb24gc29tZSBzdGF0ZSBub3QgdHJpZ2dlcmVkXG4gICAqIGJ5IHNldHRpbmcgYSBwcm9wZXJ0eS4gSW4gdGhpcyBjYXNlLCBwYXNzIG5vIGFyZ3VtZW50cy4gSXQgc2hvdWxkIGFsc28gYmVcbiAgICogY2FsbGVkIHdoZW4gbWFudWFsbHkgaW1wbGVtZW50aW5nIGEgcHJvcGVydHkgc2V0dGVyLiBJbiB0aGlzIGNhc2UsIHBhc3MgdGhlXG4gICAqIHByb3BlcnR5IGBuYW1lYCBhbmQgYG9sZFZhbHVlYCB0byBlbnN1cmUgdGhhdCBhbnkgY29uZmlndXJlZCBwcm9wZXJ0eVxuICAgKiBvcHRpb25zIGFyZSBob25vcmVkLiBSZXR1cm5zIHRoZSBgdXBkYXRlQ29tcGxldGVgIFByb21pc2Ugd2hpY2ggaXMgcmVzb2x2ZWRcbiAgICogd2hlbiB0aGUgdXBkYXRlIGNvbXBsZXRlcy5cbiAgICpcbiAgICogQHBhcmFtIG5hbWUge1Byb3BlcnR5S2V5fSAob3B0aW9uYWwpIG5hbWUgb2YgcmVxdWVzdGluZyBwcm9wZXJ0eVxuICAgKiBAcGFyYW0gb2xkVmFsdWUge2FueX0gKG9wdGlvbmFsKSBvbGQgdmFsdWUgb2YgcmVxdWVzdGluZyBwcm9wZXJ0eVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2hlbiB0aGUgdXBkYXRlIGNvbXBsZXRlcy5cbiAgICovXG4gIHJlcXVlc3RVcGRhdGUobmFtZT86IFByb3BlcnR5S2V5LCBvbGRWYWx1ZT86IHVua25vd24pIHtcbiAgICB0aGlzLl9yZXF1ZXN0VXBkYXRlKG5hbWUsIG9sZFZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVDb21wbGV0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHVwIHRoZSBlbGVtZW50IHRvIGFzeW5jaHJvbm91c2x5IHVwZGF0ZS5cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgX2VucXVldWVVcGRhdGUoKSB7XG4gICAgLy8gTWFyayBzdGF0ZSB1cGRhdGluZy4uLlxuICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gdGhpcy5fdXBkYXRlU3RhdGUgfCBTVEFURV9VUERBVEVfUkVRVUVTVEVEO1xuICAgIGxldCByZXNvbHZlITogKHI6IGJvb2xlYW4pID0+IHZvaWQ7XG4gICAgbGV0IHJlamVjdCE6IChlOiBFcnJvcikgPT4gdm9pZDtcbiAgICBjb25zdCBwcmV2aW91c1VwZGF0ZVByb21pc2UgPSB0aGlzLl91cGRhdGVQcm9taXNlO1xuICAgIHRoaXMuX3VwZGF0ZVByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzLCByZWopID0+IHtcbiAgICAgIHJlc29sdmUgPSByZXM7XG4gICAgICByZWplY3QgPSByZWo7XG4gICAgfSk7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEVuc3VyZSBhbnkgcHJldmlvdXMgdXBkYXRlIGhhcyByZXNvbHZlZCBiZWZvcmUgdXBkYXRpbmcuXG4gICAgICAvLyBUaGlzIGBhd2FpdGAgYWxzbyBlbnN1cmVzIHRoYXQgcHJvcGVydHkgY2hhbmdlcyBhcmUgYmF0Y2hlZC5cbiAgICAgIGF3YWl0IHByZXZpb3VzVXBkYXRlUHJvbWlzZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJZ25vcmUgYW55IHByZXZpb3VzIGVycm9ycy4gV2Ugb25seSBjYXJlIHRoYXQgdGhlIHByZXZpb3VzIGN5Y2xlIGlzXG4gICAgICAvLyBkb25lLiBBbnkgZXJyb3Igc2hvdWxkIGhhdmUgYmVlbiBoYW5kbGVkIGluIHRoZSBwcmV2aW91cyB1cGRhdGUuXG4gICAgfVxuICAgIC8vIE1ha2Ugc3VyZSB0aGUgZWxlbWVudCBoYXMgY29ubmVjdGVkIGJlZm9yZSB1cGRhdGluZy5cbiAgICBpZiAoIXRoaXMuX2hhc0Nvbm5lY3RlZCkge1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlcykgPT4gdGhpcy5faGFzQ29ubmVjdGVkUmVzb2x2ZXIgPSByZXMpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5wZXJmb3JtVXBkYXRlKCk7XG4gICAgICAvLyBJZiBgcGVyZm9ybVVwZGF0ZWAgcmV0dXJucyBhIFByb21pc2UsIHdlIGF3YWl0IGl0LiBUaGlzIGlzIGRvbmUgdG9cbiAgICAgIC8vIGVuYWJsZSBjb29yZGluYXRpbmcgdXBkYXRlcyB3aXRoIGEgc2NoZWR1bGVyLiBOb3RlLCB0aGUgcmVzdWx0IGlzXG4gICAgICAvLyBjaGVja2VkIHRvIGF2b2lkIGRlbGF5aW5nIGFuIGFkZGl0aW9uYWwgbWljcm90YXNrIHVubGVzcyB3ZSBuZWVkIHRvLlxuICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgIGF3YWl0IHJlc3VsdDtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZWplY3QoZSk7XG4gICAgfVxuICAgIHJlc29sdmUoIXRoaXMuX2hhc1JlcXVlc3RlZFVwZGF0ZSk7XG4gIH1cblxuICBwcml2YXRlIGdldCBfaGFzQ29ubmVjdGVkKCkge1xuICAgIHJldHVybiAodGhpcy5fdXBkYXRlU3RhdGUgJiBTVEFURV9IQVNfQ09OTkVDVEVEKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0IF9oYXNSZXF1ZXN0ZWRVcGRhdGUoKSB7XG4gICAgcmV0dXJuICh0aGlzLl91cGRhdGVTdGF0ZSAmIFNUQVRFX1VQREFURV9SRVFVRVNURUQpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldCBoYXNVcGRhdGVkKCkge1xuICAgIHJldHVybiAodGhpcy5fdXBkYXRlU3RhdGUgJiBTVEFURV9IQVNfVVBEQVRFRCk7XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgYW4gZWxlbWVudCB1cGRhdGUuIE5vdGUsIGlmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZHVyaW5nIHRoZVxuICAgKiB1cGRhdGUsIGBmaXJzdFVwZGF0ZWRgIGFuZCBgdXBkYXRlZGAgd2lsbCBub3QgYmUgY2FsbGVkLlxuICAgKlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGNoYW5nZSB0aGUgdGltaW5nIG9mIHVwZGF0ZXMuIElmIHRoaXNcbiAgICogbWV0aG9kIGlzIG92ZXJyaWRkZW4sIGBzdXBlci5wZXJmb3JtVXBkYXRlKClgIG11c3QgYmUgY2FsbGVkLlxuICAgKlxuICAgKiBGb3IgaW5zdGFuY2UsIHRvIHNjaGVkdWxlIHVwZGF0ZXMgdG8gb2NjdXIganVzdCBiZWZvcmUgdGhlIG5leHQgZnJhbWU6XG4gICAqXG4gICAqIGBgYFxuICAgKiBwcm90ZWN0ZWQgYXN5bmMgcGVyZm9ybVVwZGF0ZSgpOiBQcm9taXNlPHVua25vd24+IHtcbiAgICogICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHJlc29sdmUoKSkpO1xuICAgKiAgIHN1cGVyLnBlcmZvcm1VcGRhdGUoKTtcbiAgICogfVxuICAgKiBgYGBcbiAgICovXG4gIHByb3RlY3RlZCBwZXJmb3JtVXBkYXRlKCk6IHZvaWR8UHJvbWlzZTx1bmtub3duPiB7XG4gICAgLy8gTWl4aW4gaW5zdGFuY2UgcHJvcGVydGllcyBvbmNlLCBpZiB0aGV5IGV4aXN0LlxuICAgIGlmICh0aGlzLl9pbnN0YW5jZVByb3BlcnRpZXMpIHtcbiAgICAgIHRoaXMuX2FwcGx5SW5zdGFuY2VQcm9wZXJ0aWVzKCk7XG4gICAgfVxuICAgIGxldCBzaG91bGRVcGRhdGUgPSBmYWxzZTtcbiAgICBjb25zdCBjaGFuZ2VkUHJvcGVydGllcyA9IHRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzO1xuICAgIHRyeSB7XG4gICAgICBzaG91bGRVcGRhdGUgPSB0aGlzLnNob3VsZFVwZGF0ZShjaGFuZ2VkUHJvcGVydGllcyk7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlKSB7XG4gICAgICAgIHRoaXMudXBkYXRlKGNoYW5nZWRQcm9wZXJ0aWVzKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBQcmV2ZW50IGBmaXJzdFVwZGF0ZWRgIGFuZCBgdXBkYXRlZGAgZnJvbSBydW5uaW5nIHdoZW4gdGhlcmUncyBhblxuICAgICAgLy8gdXBkYXRlIGV4Y2VwdGlvbi5cbiAgICAgIHNob3VsZFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgdGhyb3cgZTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgLy8gRW5zdXJlIGVsZW1lbnQgY2FuIGFjY2VwdCBhZGRpdGlvbmFsIHVwZGF0ZXMgYWZ0ZXIgYW4gZXhjZXB0aW9uLlxuICAgICAgdGhpcy5fbWFya1VwZGF0ZWQoKTtcbiAgICB9XG4gICAgaWYgKHNob3VsZFVwZGF0ZSkge1xuICAgICAgaWYgKCEodGhpcy5fdXBkYXRlU3RhdGUgJiBTVEFURV9IQVNfVVBEQVRFRCkpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlU3RhdGUgPSB0aGlzLl91cGRhdGVTdGF0ZSB8IFNUQVRFX0hBU19VUERBVEVEO1xuICAgICAgICB0aGlzLmZpcnN0VXBkYXRlZChjaGFuZ2VkUHJvcGVydGllcyk7XG4gICAgICB9XG4gICAgICB0aGlzLnVwZGF0ZWQoY2hhbmdlZFByb3BlcnRpZXMpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX21hcmtVcGRhdGVkKCkge1xuICAgIHRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gdGhpcy5fdXBkYXRlU3RhdGUgJiB+U1RBVEVfVVBEQVRFX1JFUVVFU1RFRDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGVsZW1lbnQgaGFzIGNvbXBsZXRlZCB1cGRhdGluZy5cbiAgICogVGhlIFByb21pc2UgdmFsdWUgaXMgYSBib29sZWFuIHRoYXQgaXMgYHRydWVgIGlmIHRoZSBlbGVtZW50IGNvbXBsZXRlZCB0aGVcbiAgICogdXBkYXRlIHdpdGhvdXQgdHJpZ2dlcmluZyBhbm90aGVyIHVwZGF0ZS4gVGhlIFByb21pc2UgcmVzdWx0IGlzIGBmYWxzZWAgaWZcbiAgICogYSBwcm9wZXJ0eSB3YXMgc2V0IGluc2lkZSBgdXBkYXRlZCgpYC4gSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGFuXG4gICAqIGV4Y2VwdGlvbiB3YXMgdGhyb3duIGR1cmluZyB0aGUgdXBkYXRlLiBUaGlzIGdldHRlciBjYW4gYmUgaW1wbGVtZW50ZWQgdG9cbiAgICogYXdhaXQgYWRkaXRpb25hbCBzdGF0ZS4gRm9yIGV4YW1wbGUsIGl0IGlzIHNvbWV0aW1lcyB1c2VmdWwgdG8gYXdhaXQgYVxuICAgKiByZW5kZXJlZCBlbGVtZW50IGJlZm9yZSBmdWxmaWxsaW5nIHRoaXMgUHJvbWlzZS4gVG8gZG8gdGhpcywgZmlyc3QgYXdhaXRcbiAgICogYHN1cGVyLnVwZGF0ZUNvbXBsZXRlYCB0aGVuIGFueSBzdWJzZXF1ZW50IHN0YXRlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgcmV0dXJucyBhIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgaWYgdGhlXG4gICAqIHVwZGF0ZSByZXNvbHZlZCB3aXRob3V0IHRyaWdnZXJpbmcgYW5vdGhlciB1cGRhdGUuXG4gICAqL1xuICBnZXQgdXBkYXRlQ29tcGxldGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3VwZGF0ZVByb21pc2U7XG4gIH1cblxuICAvKipcbiAgICogQ29udHJvbHMgd2hldGhlciBvciBub3QgYHVwZGF0ZWAgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIHRoZSBlbGVtZW50IHJlcXVlc3RzXG4gICAqIGFuIHVwZGF0ZS4gQnkgZGVmYXVsdCwgdGhpcyBtZXRob2QgYWx3YXlzIHJldHVybnMgYHRydWVgLCBidXQgdGhpcyBjYW4gYmVcbiAgICogY3VzdG9taXplZCB0byBjb250cm9sIHdoZW4gdG8gdXBkYXRlLlxuICAgKlxuICAgKiAqIEBwYXJhbSBfY2hhbmdlZFByb3BlcnRpZXMgTWFwIG9mIGNoYW5nZWQgcHJvcGVydGllcyB3aXRoIG9sZCB2YWx1ZXNcbiAgICovXG4gIHByb3RlY3RlZCBzaG91bGRVcGRhdGUoX2NoYW5nZWRQcm9wZXJ0aWVzOiBQcm9wZXJ0eVZhbHVlcyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGVsZW1lbnQuIFRoaXMgbWV0aG9kIHJlZmxlY3RzIHByb3BlcnR5IHZhbHVlcyB0byBhdHRyaWJ1dGVzLlxuICAgKiBJdCBjYW4gYmUgb3ZlcnJpZGRlbiB0byByZW5kZXIgYW5kIGtlZXAgdXBkYXRlZCBlbGVtZW50IERPTS5cbiAgICogU2V0dGluZyBwcm9wZXJ0aWVzIGluc2lkZSB0aGlzIG1ldGhvZCB3aWxsICpub3QqIHRyaWdnZXJcbiAgICogYW5vdGhlciB1cGRhdGUuXG4gICAqXG4gICAqICogQHBhcmFtIF9jaGFuZ2VkUHJvcGVydGllcyBNYXAgb2YgY2hhbmdlZCBwcm9wZXJ0aWVzIHdpdGggb2xkIHZhbHVlc1xuICAgKi9cbiAgcHJvdGVjdGVkIHVwZGF0ZShfY2hhbmdlZFByb3BlcnRpZXM6IFByb3BlcnR5VmFsdWVzKSB7XG4gICAgaWYgKHRoaXMuX3JlZmxlY3RpbmdQcm9wZXJ0aWVzICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgdGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMuc2l6ZSA+IDApIHtcbiAgICAgIC8vIFVzZSBmb3JFYWNoIHNvIHRoaXMgd29ya3MgZXZlbiBpZiBmb3Ivb2YgbG9vcHMgYXJlIGNvbXBpbGVkIHRvIGZvclxuICAgICAgLy8gbG9vcHMgZXhwZWN0aW5nIGFycmF5c1xuICAgICAgdGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMuZm9yRWFjaChcbiAgICAgICAgICAodiwgaykgPT4gdGhpcy5fcHJvcGVydHlUb0F0dHJpYnV0ZShrLCB0aGlzW2sgYXMga2V5b2YgdGhpc10sIHYpKTtcbiAgICAgIHRoaXMuX3JlZmxlY3RpbmdQcm9wZXJ0aWVzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW5ldmVyIHRoZSBlbGVtZW50IGlzIHVwZGF0ZWQuIEltcGxlbWVudCB0byBwZXJmb3JtXG4gICAqIHBvc3QtdXBkYXRpbmcgdGFza3MgdmlhIERPTSBBUElzLCBmb3IgZXhhbXBsZSwgZm9jdXNpbmcgYW4gZWxlbWVudC5cbiAgICpcbiAgICogU2V0dGluZyBwcm9wZXJ0aWVzIGluc2lkZSB0aGlzIG1ldGhvZCB3aWxsIHRyaWdnZXIgdGhlIGVsZW1lbnQgdG8gdXBkYXRlXG4gICAqIGFnYWluIGFmdGVyIHRoaXMgdXBkYXRlIGN5Y2xlIGNvbXBsZXRlcy5cbiAgICpcbiAgICogKiBAcGFyYW0gX2NoYW5nZWRQcm9wZXJ0aWVzIE1hcCBvZiBjaGFuZ2VkIHByb3BlcnRpZXMgd2l0aCBvbGQgdmFsdWVzXG4gICAqL1xuICBwcm90ZWN0ZWQgdXBkYXRlZChfY2hhbmdlZFByb3BlcnRpZXM6IFByb3BlcnR5VmFsdWVzKSB7XG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBlbGVtZW50IGlzIGZpcnN0IHVwZGF0ZWQuIEltcGxlbWVudCB0byBwZXJmb3JtIG9uZSB0aW1lXG4gICAqIHdvcmsgb24gdGhlIGVsZW1lbnQgYWZ0ZXIgdXBkYXRlLlxuICAgKlxuICAgKiBTZXR0aW5nIHByb3BlcnRpZXMgaW5zaWRlIHRoaXMgbWV0aG9kIHdpbGwgdHJpZ2dlciB0aGUgZWxlbWVudCB0byB1cGRhdGVcbiAgICogYWdhaW4gYWZ0ZXIgdGhpcyB1cGRhdGUgY3ljbGUgY29tcGxldGVzLlxuICAgKlxuICAgKiAqIEBwYXJhbSBfY2hhbmdlZFByb3BlcnRpZXMgTWFwIG9mIGNoYW5nZWQgcHJvcGVydGllcyB3aXRoIG9sZCB2YWx1ZXNcbiAgICovXG4gIHByb3RlY3RlZCBmaXJzdFVwZGF0ZWQoX2NoYW5nZWRQcm9wZXJ0aWVzOiBQcm9wZXJ0eVZhbHVlcykge1xuICB9XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5cbmltcG9ydCB7TGl0RWxlbWVudH0gZnJvbSAnLi4vbGl0LWVsZW1lbnQuanMnO1xuXG5pbXBvcnQge1Byb3BlcnR5RGVjbGFyYXRpb24sIFVwZGF0aW5nRWxlbWVudH0gZnJvbSAnLi91cGRhdGluZy1lbGVtZW50LmpzJztcblxuZXhwb3J0IHR5cGUgQ29uc3RydWN0b3I8VD4gPSB7XG4gIG5ldyAoLi4uYXJnczogdW5rbm93bltdKTogVFxufTtcblxuLy8gRnJvbSB0aGUgVEMzOSBEZWNvcmF0b3JzIHByb3Bvc2FsXG5pbnRlcmZhY2UgQ2xhc3NEZXNjcmlwdG9yIHtcbiAga2luZDogJ2NsYXNzJztcbiAgZWxlbWVudHM6IENsYXNzRWxlbWVudFtdO1xuICBmaW5pc2hlcj86IDxUPihjbGF6ejogQ29uc3RydWN0b3I8VD4pID0+IHVuZGVmaW5lZCB8IENvbnN0cnVjdG9yPFQ+O1xufVxuXG4vLyBGcm9tIHRoZSBUQzM5IERlY29yYXRvcnMgcHJvcG9zYWxcbmludGVyZmFjZSBDbGFzc0VsZW1lbnQge1xuICBraW5kOiAnZmllbGQnfCdtZXRob2QnO1xuICBrZXk6IFByb3BlcnR5S2V5O1xuICBwbGFjZW1lbnQ6ICdzdGF0aWMnfCdwcm90b3R5cGUnfCdvd24nO1xuICBpbml0aWFsaXplcj86IEZ1bmN0aW9uO1xuICBleHRyYXM/OiBDbGFzc0VsZW1lbnRbXTtcbiAgZmluaXNoZXI/OiA8VD4oY2xheno6IENvbnN0cnVjdG9yPFQ+KSA9PiB1bmRlZmluZWQgfCBDb25zdHJ1Y3RvcjxUPjtcbiAgZGVzY3JpcHRvcj86IFByb3BlcnR5RGVzY3JpcHRvcjtcbn1cblxuY29uc3QgbGVnYWN5Q3VzdG9tRWxlbWVudCA9XG4gICAgKHRhZ05hbWU6IHN0cmluZywgY2xheno6IENvbnN0cnVjdG9yPEhUTUxFbGVtZW50PikgPT4ge1xuICAgICAgd2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSh0YWdOYW1lLCBjbGF6eik7XG4gICAgICAvLyBDYXN0IGFzIGFueSBiZWNhdXNlIFRTIGRvZXNuJ3QgcmVjb2duaXplIHRoZSByZXR1cm4gdHlwZSBhcyBiZWluZyBhXG4gICAgICAvLyBzdWJ0eXBlIG9mIHRoZSBkZWNvcmF0ZWQgY2xhc3Mgd2hlbiBjbGF6eiBpcyB0eXBlZCBhc1xuICAgICAgLy8gYENvbnN0cnVjdG9yPEhUTUxFbGVtZW50PmAgZm9yIHNvbWUgcmVhc29uLlxuICAgICAgLy8gYENvbnN0cnVjdG9yPEhUTUxFbGVtZW50PmAgaXMgaGVscGZ1bCB0byBtYWtlIHN1cmUgdGhlIGRlY29yYXRvciBpc1xuICAgICAgLy8gYXBwbGllZCB0byBlbGVtZW50cyBob3dldmVyLlxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgICAgcmV0dXJuIGNsYXp6IGFzIGFueTtcbiAgICB9O1xuXG5jb25zdCBzdGFuZGFyZEN1c3RvbUVsZW1lbnQgPVxuICAgICh0YWdOYW1lOiBzdHJpbmcsIGRlc2NyaXB0b3I6IENsYXNzRGVzY3JpcHRvcikgPT4ge1xuICAgICAgY29uc3Qge2tpbmQsIGVsZW1lbnRzfSA9IGRlc2NyaXB0b3I7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBraW5kLFxuICAgICAgICBlbGVtZW50cyxcbiAgICAgICAgLy8gVGhpcyBjYWxsYmFjayBpcyBjYWxsZWQgb25jZSB0aGUgY2xhc3MgaXMgb3RoZXJ3aXNlIGZ1bGx5IGRlZmluZWRcbiAgICAgICAgZmluaXNoZXIoY2xheno6IENvbnN0cnVjdG9yPEhUTUxFbGVtZW50Pikge1xuICAgICAgICAgIHdpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUodGFnTmFtZSwgY2xhenopO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG5cbi8qKlxuICogQ2xhc3MgZGVjb3JhdG9yIGZhY3RvcnkgdGhhdCBkZWZpbmVzIHRoZSBkZWNvcmF0ZWQgY2xhc3MgYXMgYSBjdXN0b20gZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gdGFnTmFtZSB0aGUgbmFtZSBvZiB0aGUgY3VzdG9tIGVsZW1lbnQgdG8gZGVmaW5lXG4gKi9cbmV4cG9ydCBjb25zdCBjdXN0b21FbGVtZW50ID0gKHRhZ05hbWU6IHN0cmluZykgPT5cbiAgICAoY2xhc3NPckRlc2NyaXB0b3I6IENvbnN0cnVjdG9yPEhUTUxFbGVtZW50PnxDbGFzc0Rlc2NyaXB0b3IpID0+XG4gICAgICAgICh0eXBlb2YgY2xhc3NPckRlc2NyaXB0b3IgPT09ICdmdW5jdGlvbicpID9cbiAgICBsZWdhY3lDdXN0b21FbGVtZW50KHRhZ05hbWUsIGNsYXNzT3JEZXNjcmlwdG9yKSA6XG4gICAgc3RhbmRhcmRDdXN0b21FbGVtZW50KHRhZ05hbWUsIGNsYXNzT3JEZXNjcmlwdG9yKTtcblxuY29uc3Qgc3RhbmRhcmRQcm9wZXJ0eSA9XG4gICAgKG9wdGlvbnM6IFByb3BlcnR5RGVjbGFyYXRpb24sIGVsZW1lbnQ6IENsYXNzRWxlbWVudCkgPT4ge1xuICAgICAgLy8gV2hlbiBkZWNvcmF0aW5nIGFuIGFjY2Vzc29yLCBwYXNzIGl0IHRocm91Z2ggYW5kIGFkZCBwcm9wZXJ0eSBtZXRhZGF0YS5cbiAgICAgIC8vIE5vdGUsIHRoZSBgaGFzT3duUHJvcGVydHlgIGNoZWNrIGluIGBjcmVhdGVQcm9wZXJ0eWAgZW5zdXJlcyB3ZSBkb24ndFxuICAgICAgLy8gc3RvbXAgb3ZlciB0aGUgdXNlcidzIGFjY2Vzc29yLlxuICAgICAgaWYgKGVsZW1lbnQua2luZCA9PT0gJ21ldGhvZCcgJiYgZWxlbWVudC5kZXNjcmlwdG9yICYmXG4gICAgICAgICAgISgndmFsdWUnIGluIGVsZW1lbnQuZGVzY3JpcHRvcikpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5lbGVtZW50LFxuICAgICAgICAgIGZpbmlzaGVyKGNsYXp6OiB0eXBlb2YgVXBkYXRpbmdFbGVtZW50KSB7XG4gICAgICAgICAgICBjbGF6ei5jcmVhdGVQcm9wZXJ0eShlbGVtZW50LmtleSwgb3B0aW9ucyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY3JlYXRlUHJvcGVydHkoKSB0YWtlcyBjYXJlIG9mIGRlZmluaW5nIHRoZSBwcm9wZXJ0eSwgYnV0IHdlIHN0aWxsXG4gICAgICAgIC8vIG11c3QgcmV0dXJuIHNvbWUga2luZCBvZiBkZXNjcmlwdG9yLCBzbyByZXR1cm4gYSBkZXNjcmlwdG9yIGZvciBhblxuICAgICAgICAvLyB1bnVzZWQgcHJvdG90eXBlIGZpZWxkLiBUaGUgZmluaXNoZXIgY2FsbHMgY3JlYXRlUHJvcGVydHkoKS5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBraW5kOiAnZmllbGQnLFxuICAgICAgICAgIGtleTogU3ltYm9sKCksXG4gICAgICAgICAgcGxhY2VtZW50OiAnb3duJyxcbiAgICAgICAgICBkZXNjcmlwdG9yOiB7fSxcbiAgICAgICAgICAvLyBXaGVuIEBiYWJlbC9wbHVnaW4tcHJvcG9zYWwtZGVjb3JhdG9ycyBpbXBsZW1lbnRzIGluaXRpYWxpemVycyxcbiAgICAgICAgICAvLyBkbyB0aGlzIGluc3RlYWQgb2YgdGhlIGluaXRpYWxpemVyIGJlbG93LiBTZWU6XG4gICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2JhYmVsL2JhYmVsL2lzc3Vlcy85MjYwIGV4dHJhczogW1xuICAgICAgICAgIC8vICAge1xuICAgICAgICAgIC8vICAgICBraW5kOiAnaW5pdGlhbGl6ZXInLFxuICAgICAgICAgIC8vICAgICBwbGFjZW1lbnQ6ICdvd24nLFxuICAgICAgICAgIC8vICAgICBpbml0aWFsaXplcjogZGVzY3JpcHRvci5pbml0aWFsaXplcixcbiAgICAgICAgICAvLyAgIH1cbiAgICAgICAgICAvLyBdLFxuICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgZGVjb3JhdG9yXG4gICAgICAgICAgaW5pdGlhbGl6ZXIodGhpczogYW55KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnQuaW5pdGlhbGl6ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgdGhpc1tlbGVtZW50LmtleV0gPSBlbGVtZW50LmluaXRpYWxpemVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmaW5pc2hlcihjbGF6ejogdHlwZW9mIFVwZGF0aW5nRWxlbWVudCkge1xuICAgICAgICAgICAgY2xhenouY3JlYXRlUHJvcGVydHkoZWxlbWVudC5rZXksIG9wdGlvbnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG5jb25zdCBsZWdhY3lQcm9wZXJ0eSA9XG4gICAgKG9wdGlvbnM6IFByb3BlcnR5RGVjbGFyYXRpb24sIHByb3RvOiBPYmplY3QsIG5hbWU6IFByb3BlcnR5S2V5KSA9PiB7XG4gICAgICAocHJvdG8uY29uc3RydWN0b3IgYXMgdHlwZW9mIFVwZGF0aW5nRWxlbWVudClcbiAgICAgICAgICAuY3JlYXRlUHJvcGVydHkobmFtZSwgb3B0aW9ucyk7XG4gICAgfTtcblxuLyoqXG4gKiBBIHByb3BlcnR5IGRlY29yYXRvciB3aGljaCBjcmVhdGVzIGEgTGl0RWxlbWVudCBwcm9wZXJ0eSB3aGljaCByZWZsZWN0cyBhXG4gKiBjb3JyZXNwb25kaW5nIGF0dHJpYnV0ZSB2YWx1ZS4gQSBgUHJvcGVydHlEZWNsYXJhdGlvbmAgbWF5IG9wdGlvbmFsbHkgYmVcbiAqIHN1cHBsaWVkIHRvIGNvbmZpZ3VyZSBwcm9wZXJ0eSBmZWF0dXJlcy5cbiAqXG4gKiBARXhwb3J0RGVjb3JhdGVkSXRlbXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3BlcnR5KG9wdGlvbnM/OiBQcm9wZXJ0eURlY2xhcmF0aW9uKSB7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgZGVjb3JhdG9yXG4gIHJldHVybiAocHJvdG9PckRlc2NyaXB0b3I6IE9iamVjdHxDbGFzc0VsZW1lbnQsIG5hbWU/OiBQcm9wZXJ0eUtleSk6IGFueSA9PlxuICAgICAgICAgICAgIChuYW1lICE9PSB1bmRlZmluZWQpID9cbiAgICAgIGxlZ2FjeVByb3BlcnR5KG9wdGlvbnMhLCBwcm90b09yRGVzY3JpcHRvciBhcyBPYmplY3QsIG5hbWUpIDpcbiAgICAgIHN0YW5kYXJkUHJvcGVydHkob3B0aW9ucyEsIHByb3RvT3JEZXNjcmlwdG9yIGFzIENsYXNzRWxlbWVudCk7XG59XG5cbi8qKlxuICogQSBwcm9wZXJ0eSBkZWNvcmF0b3IgdGhhdCBjb252ZXJ0cyBhIGNsYXNzIHByb3BlcnR5IGludG8gYSBnZXR0ZXIgdGhhdFxuICogZXhlY3V0ZXMgYSBxdWVyeVNlbGVjdG9yIG9uIHRoZSBlbGVtZW50J3MgcmVuZGVyUm9vdC5cbiAqXG4gKiBARXhwb3J0RGVjb3JhdGVkSXRlbXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5KHNlbGVjdG9yOiBzdHJpbmcpIHtcbiAgcmV0dXJuIChwcm90b09yRGVzY3JpcHRvcjogT2JqZWN0fENsYXNzRWxlbWVudCxcbiAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55IGRlY29yYXRvclxuICAgICAgICAgIG5hbWU/OiBQcm9wZXJ0eUtleSk6IGFueSA9PiB7XG4gICAgY29uc3QgZGVzY3JpcHRvciA9IHtcbiAgICAgIGdldCh0aGlzOiBMaXRFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlclJvb3QucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICB9LFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB9O1xuICAgIHJldHVybiAobmFtZSAhPT0gdW5kZWZpbmVkKSA/XG4gICAgICAgIGxlZ2FjeVF1ZXJ5KGRlc2NyaXB0b3IsIHByb3RvT3JEZXNjcmlwdG9yIGFzIE9iamVjdCwgbmFtZSkgOlxuICAgICAgICBzdGFuZGFyZFF1ZXJ5KGRlc2NyaXB0b3IsIHByb3RvT3JEZXNjcmlwdG9yIGFzIENsYXNzRWxlbWVudCk7XG4gIH07XG59XG5cbi8qKlxuICogQSBwcm9wZXJ0eSBkZWNvcmF0b3IgdGhhdCBjb252ZXJ0cyBhIGNsYXNzIHByb3BlcnR5IGludG8gYSBnZXR0ZXJcbiAqIHRoYXQgZXhlY3V0ZXMgYSBxdWVyeVNlbGVjdG9yQWxsIG9uIHRoZSBlbGVtZW50J3MgcmVuZGVyUm9vdC5cbiAqXG4gKiBARXhwb3J0RGVjb3JhdGVkSXRlbXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5QWxsKHNlbGVjdG9yOiBzdHJpbmcpIHtcbiAgcmV0dXJuIChwcm90b09yRGVzY3JpcHRvcjogT2JqZWN0fENsYXNzRWxlbWVudCxcbiAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55IGRlY29yYXRvclxuICAgICAgICAgIG5hbWU/OiBQcm9wZXJ0eUtleSk6IGFueSA9PiB7XG4gICAgY29uc3QgZGVzY3JpcHRvciA9IHtcbiAgICAgIGdldCh0aGlzOiBMaXRFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlclJvb3QucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICB9LFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB9O1xuICAgIHJldHVybiAobmFtZSAhPT0gdW5kZWZpbmVkKSA/XG4gICAgICAgIGxlZ2FjeVF1ZXJ5KGRlc2NyaXB0b3IsIHByb3RvT3JEZXNjcmlwdG9yIGFzIE9iamVjdCwgbmFtZSkgOlxuICAgICAgICBzdGFuZGFyZFF1ZXJ5KGRlc2NyaXB0b3IsIHByb3RvT3JEZXNjcmlwdG9yIGFzIENsYXNzRWxlbWVudCk7XG4gIH07XG59XG5cbmNvbnN0IGxlZ2FjeVF1ZXJ5ID1cbiAgICAoZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yLCBwcm90bzogT2JqZWN0LCBuYW1lOiBQcm9wZXJ0eUtleSkgPT4ge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCBuYW1lLCBkZXNjcmlwdG9yKTtcbiAgICB9O1xuXG5jb25zdCBzdGFuZGFyZFF1ZXJ5ID0gKGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvciwgZWxlbWVudDogQ2xhc3NFbGVtZW50KSA9PlxuICAgICh7XG4gICAgICBraW5kOiAnbWV0aG9kJyxcbiAgICAgIHBsYWNlbWVudDogJ3Byb3RvdHlwZScsXG4gICAgICBrZXk6IGVsZW1lbnQua2V5LFxuICAgICAgZGVzY3JpcHRvcixcbiAgICB9KTtcblxuY29uc3Qgc3RhbmRhcmRFdmVudE9wdGlvbnMgPVxuICAgIChvcHRpb25zOiBBZGRFdmVudExpc3RlbmVyT3B0aW9ucywgZWxlbWVudDogQ2xhc3NFbGVtZW50KSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5lbGVtZW50LFxuICAgICAgICBmaW5pc2hlcihjbGF6ejogdHlwZW9mIFVwZGF0aW5nRWxlbWVudCkge1xuICAgICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICAgIGNsYXp6LnByb3RvdHlwZVtlbGVtZW50LmtleSBhcyBrZXlvZiBVcGRhdGluZ0VsZW1lbnRdLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuXG5jb25zdCBsZWdhY3lFdmVudE9wdGlvbnMgPVxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgbGVnYWN5IGRlY29yYXRvclxuICAgIChvcHRpb25zOiBBZGRFdmVudExpc3RlbmVyT3B0aW9ucywgcHJvdG86IGFueSwgbmFtZTogUHJvcGVydHlLZXkpID0+IHtcbiAgICAgIE9iamVjdC5hc3NpZ24ocHJvdG9bbmFtZV0sIG9wdGlvbnMpO1xuICAgIH07XG5cbi8qKlxuICogQWRkcyBldmVudCBsaXN0ZW5lciBvcHRpb25zIHRvIGEgbWV0aG9kIHVzZWQgYXMgYW4gZXZlbnQgbGlzdGVuZXIgaW4gYVxuICogbGl0LWh0bWwgdGVtcGxhdGUuXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgQW4gb2JqZWN0IHRoYXQgc3BlY2lmaXMgZXZlbnQgbGlzdGVuZXIgb3B0aW9ucyBhcyBhY2NlcHRlZCBieVxuICogYEV2ZW50VGFyZ2V0I2FkZEV2ZW50TGlzdGVuZXJgIGFuZCBgRXZlbnRUYXJnZXQjcmVtb3ZlRXZlbnRMaXN0ZW5lcmAuXG4gKlxuICogQ3VycmVudCBicm93c2VycyBzdXBwb3J0IHRoZSBgY2FwdHVyZWAsIGBwYXNzaXZlYCwgYW5kIGBvbmNlYCBvcHRpb25zLiBTZWU6XG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRXZlbnRUYXJnZXQvYWRkRXZlbnRMaXN0ZW5lciNQYXJhbWV0ZXJzXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgY2xhc3MgTXlFbGVtZW50IHtcbiAqXG4gKiAgICAgICBjbGlja2VkID0gZmFsc2U7XG4gKlxuICogICAgICAgcmVuZGVyKCkge1xuICogICAgICAgICByZXR1cm4gaHRtbGA8ZGl2IEBjbGljaz0ke3RoaXMuX29uQ2xpY2t9YD48YnV0dG9uPjwvYnV0dG9uPjwvZGl2PmA7XG4gKiAgICAgICB9XG4gKlxuICogICAgICAgQGV2ZW50T3B0aW9ucyh7Y2FwdHVyZTogdHJ1ZX0pXG4gKiAgICAgICBfb25DbGljayhlKSB7XG4gKiAgICAgICAgIHRoaXMuY2xpY2tlZCA9IHRydWU7XG4gKiAgICAgICB9XG4gKiAgICAgfVxuICovXG5leHBvcnQgY29uc3QgZXZlbnRPcHRpb25zID0gKG9wdGlvbnM6IEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zKSA9PlxuICAgIC8vIFJldHVybiB2YWx1ZSB0eXBlZCBhcyBhbnkgdG8gcHJldmVudCBUeXBlU2NyaXB0IGZyb20gY29tcGxhaW5pbmcgdGhhdFxuICAgIC8vIHN0YW5kYXJkIGRlY29yYXRvciBmdW5jdGlvbiBzaWduYXR1cmUgZG9lcyBub3QgbWF0Y2ggVHlwZVNjcmlwdCBkZWNvcmF0b3JcbiAgICAvLyBzaWduYXR1cmVcbiAgICAvLyBUT0RPKGtzY2hhYWYpOiB1bmNsZWFyIHdoeSBpdCB3YXMgb25seSBmYWlsaW5nIG9uIHRoaXMgZGVjb3JhdG9yIGFuZCBub3RcbiAgICAvLyB0aGUgb3RoZXJzXG4gICAgKChwcm90b09yRGVzY3JpcHRvcjogT2JqZWN0fENsYXNzRWxlbWVudCwgbmFtZT86IHN0cmluZykgPT5cbiAgICAgICAgIChuYW1lICE9PSB1bmRlZmluZWQpID9cbiAgICAgICAgIGxlZ2FjeUV2ZW50T3B0aW9ucyhvcHRpb25zLCBwcm90b09yRGVzY3JpcHRvciBhcyBPYmplY3QsIG5hbWUpIDpcbiAgICAgICAgIHN0YW5kYXJkRXZlbnRPcHRpb25zKG9wdGlvbnMsIHByb3RvT3JEZXNjcmlwdG9yIGFzIENsYXNzRWxlbWVudCkpIGFzXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgZGVjb3JhdG9yXG4gICAgICAgIGFueTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxOSBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbmh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG5odHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlXG5mb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhc1xucGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudFxuZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5leHBvcnQgY29uc3Qgc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzID1cbiAgICAoJ2Fkb3B0ZWRTdHlsZVNoZWV0cycgaW4gRG9jdW1lbnQucHJvdG90eXBlKSAmJlxuICAgICgncmVwbGFjZScgaW4gQ1NTU3R5bGVTaGVldC5wcm90b3R5cGUpO1xuXG5jb25zdCBjb25zdHJ1Y3Rpb25Ub2tlbiA9IFN5bWJvbCgpO1xuXG5leHBvcnQgY2xhc3MgQ1NTUmVzdWx0IHtcbiAgX3N0eWxlU2hlZXQ/OiBDU1NTdHlsZVNoZWV0fG51bGw7XG5cbiAgcmVhZG9ubHkgY3NzVGV4dDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGNzc1RleHQ6IHN0cmluZywgc2FmZVRva2VuOiBzeW1ib2wpIHtcbiAgICBpZiAoc2FmZVRva2VuICE9PSBjb25zdHJ1Y3Rpb25Ub2tlbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdDU1NSZXN1bHQgaXMgbm90IGNvbnN0cnVjdGFibGUuIFVzZSBgdW5zYWZlQ1NTYCBvciBgY3NzYCBpbnN0ZWFkLicpO1xuICAgIH1cbiAgICB0aGlzLmNzc1RleHQgPSBjc3NUZXh0O1xuICB9XG5cbiAgLy8gTm90ZSwgdGhpcyBpcyBhIGdldHRlciBzbyB0aGF0IGl0J3MgbGF6eS4gSW4gcHJhY3RpY2UsIHRoaXMgbWVhbnNcbiAgLy8gc3R5bGVzaGVldHMgYXJlIG5vdCBjcmVhdGVkIHVudGlsIHRoZSBmaXJzdCBlbGVtZW50IGluc3RhbmNlIGlzIG1hZGUuXG4gIGdldCBzdHlsZVNoZWV0KCk6IENTU1N0eWxlU2hlZXR8bnVsbCB7XG4gICAgaWYgKHRoaXMuX3N0eWxlU2hlZXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gTm90ZSwgaWYgYGFkb3B0ZWRTdHlsZVNoZWV0c2AgaXMgc3VwcG9ydGVkIHRoZW4gd2UgYXNzdW1lIENTU1N0eWxlU2hlZXRcbiAgICAgIC8vIGlzIGNvbnN0cnVjdGFibGUuXG4gICAgICBpZiAoc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzKSB7XG4gICAgICAgIHRoaXMuX3N0eWxlU2hlZXQgPSBuZXcgQ1NTU3R5bGVTaGVldCgpO1xuICAgICAgICB0aGlzLl9zdHlsZVNoZWV0LnJlcGxhY2VTeW5jKHRoaXMuY3NzVGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zdHlsZVNoZWV0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3N0eWxlU2hlZXQ7XG4gIH1cblxuICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNzc1RleHQ7XG4gIH1cbn1cblxuLyoqXG4gKiBXcmFwIGEgdmFsdWUgZm9yIGludGVycG9sYXRpb24gaW4gYSBjc3MgdGFnZ2VkIHRlbXBsYXRlIGxpdGVyYWwuXG4gKlxuICogVGhpcyBpcyB1bnNhZmUgYmVjYXVzZSB1bnRydXN0ZWQgQ1NTIHRleHQgY2FuIGJlIHVzZWQgdG8gcGhvbmUgaG9tZVxuICogb3IgZXhmaWx0cmF0ZSBkYXRhIHRvIGFuIGF0dGFja2VyIGNvbnRyb2xsZWQgc2l0ZS4gVGFrZSBjYXJlIHRvIG9ubHkgdXNlXG4gKiB0aGlzIHdpdGggdHJ1c3RlZCBpbnB1dC5cbiAqL1xuZXhwb3J0IGNvbnN0IHVuc2FmZUNTUyA9ICh2YWx1ZTogdW5rbm93bikgPT4ge1xuICByZXR1cm4gbmV3IENTU1Jlc3VsdChTdHJpbmcodmFsdWUpLCBjb25zdHJ1Y3Rpb25Ub2tlbik7XG59O1xuXG5jb25zdCB0ZXh0RnJvbUNTU1Jlc3VsdCA9ICh2YWx1ZTogQ1NTUmVzdWx0KSA9PiB7XG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIENTU1Jlc3VsdCkge1xuICAgIHJldHVybiB2YWx1ZS5jc3NUZXh0O1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFZhbHVlIHBhc3NlZCB0byAnY3NzJyBmdW5jdGlvbiBtdXN0IGJlIGEgJ2NzcycgZnVuY3Rpb24gcmVzdWx0OiAke1xuICAgICAgICAgICAgdmFsdWV9LiBVc2UgJ3Vuc2FmZUNTUycgdG8gcGFzcyBub24tbGl0ZXJhbCB2YWx1ZXMsIGJ1dFxuICAgICAgICAgICAgdGFrZSBjYXJlIHRvIGVuc3VyZSBwYWdlIHNlY3VyaXR5LmApO1xuICB9XG59O1xuXG4vKipcbiAqIFRlbXBsYXRlIHRhZyB3aGljaCB3aGljaCBjYW4gYmUgdXNlZCB3aXRoIExpdEVsZW1lbnQncyBgc3R5bGVgIHByb3BlcnR5IHRvXG4gKiBzZXQgZWxlbWVudCBzdHlsZXMuIEZvciBzZWN1cml0eSByZWFzb25zLCBvbmx5IGxpdGVyYWwgc3RyaW5nIHZhbHVlcyBtYXkgYmVcbiAqIHVzZWQuIFRvIGluY29ycG9yYXRlIG5vbi1saXRlcmFsIHZhbHVlcyBgdW5zYWZlQ1NTYCBtYXkgYmUgdXNlZCBpbnNpZGUgYVxuICogdGVtcGxhdGUgc3RyaW5nIHBhcnQuXG4gKi9cbmV4cG9ydCBjb25zdCBjc3MgPSAoc3RyaW5nczogVGVtcGxhdGVTdHJpbmdzQXJyYXksIC4uLnZhbHVlczogQ1NTUmVzdWx0W10pID0+IHtcbiAgY29uc3QgY3NzVGV4dCA9IHZhbHVlcy5yZWR1Y2UoXG4gICAgICAoYWNjLCB2LCBpZHgpID0+IGFjYyArIHRleHRGcm9tQ1NTUmVzdWx0KHYpICsgc3RyaW5nc1tpZHggKyAxXSxcbiAgICAgIHN0cmluZ3NbMF0pO1xuICByZXR1cm4gbmV3IENTU1Jlc3VsdChjc3NUZXh0LCBjb25zdHJ1Y3Rpb25Ub2tlbik7XG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuaW1wb3J0IHtUZW1wbGF0ZVJlc3VsdH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHtyZW5kZXJ9IGZyb20gJ2xpdC1odG1sL2xpYi9zaGFkeS1yZW5kZXIuanMnO1xuXG5pbXBvcnQge1Byb3BlcnR5VmFsdWVzLCBVcGRhdGluZ0VsZW1lbnR9IGZyb20gJy4vbGliL3VwZGF0aW5nLWVsZW1lbnQuanMnO1xuXG5leHBvcnQgKiBmcm9tICcuL2xpYi91cGRhdGluZy1lbGVtZW50LmpzJztcbmV4cG9ydCAqIGZyb20gJy4vbGliL2RlY29yYXRvcnMuanMnO1xuZXhwb3J0IHtodG1sLCBzdmcsIFRlbXBsYXRlUmVzdWx0LCBTVkdUZW1wbGF0ZVJlc3VsdH0gZnJvbSAnbGl0LWh0bWwvbGl0LWh0bWwuanMnO1xuaW1wb3J0IHtzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMsIENTU1Jlc3VsdH0gZnJvbSAnLi9saWIvY3NzLXRhZy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2xpYi9jc3MtdGFnLmpzJztcblxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICBsaXRFbGVtZW50VmVyc2lvbnM6IHN0cmluZ1tdO1xuICB9XG59XG5cbi8vIElNUE9SVEFOVDogZG8gbm90IGNoYW5nZSB0aGUgcHJvcGVydHkgbmFtZSBvciB0aGUgYXNzaWdubWVudCBleHByZXNzaW9uLlxuLy8gVGhpcyBsaW5lIHdpbGwgYmUgdXNlZCBpbiByZWdleGVzIHRvIHNlYXJjaCBmb3IgTGl0RWxlbWVudCB1c2FnZS5cbi8vIFRPRE8oanVzdGluZmFnbmFuaSk6IGluamVjdCB2ZXJzaW9uIG51bWJlciBhdCBidWlsZCB0aW1lXG4od2luZG93WydsaXRFbGVtZW50VmVyc2lvbnMnXSB8fCAod2luZG93WydsaXRFbGVtZW50VmVyc2lvbnMnXSA9IFtdKSlcbiAgICAucHVzaCgnMi4wLjEnKTtcblxuZXhwb3J0IGludGVyZmFjZSBDU1NSZXN1bHRBcnJheSBleHRlbmRzIEFycmF5PENTU1Jlc3VsdHxDU1NSZXN1bHRBcnJheT4ge31cblxuLyoqXG4gKiBNaW5pbWFsIGltcGxlbWVudGF0aW9uIG9mIEFycmF5LnByb3RvdHlwZS5mbGF0XG4gKiBAcGFyYW0gYXJyIHRoZSBhcnJheSB0byBmbGF0dGVuXG4gKiBAcGFyYW0gcmVzdWx0IHRoZSBhY2N1bWxhdGVkIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhcnJheUZsYXQoXG4gICAgc3R5bGVzOiBDU1NSZXN1bHRBcnJheSwgcmVzdWx0OiBDU1NSZXN1bHRbXSA9IFtdKTogQ1NTUmVzdWx0W10ge1xuICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gc3R5bGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdmFsdWUgPSBzdHlsZXNbaV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBhcnJheUZsYXQodmFsdWUsIHJlc3VsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqIERlZXBseSBmbGF0dGVucyBzdHlsZXMgYXJyYXkuIFVzZXMgbmF0aXZlIGZsYXQgaWYgYXZhaWxhYmxlLiAqL1xuY29uc3QgZmxhdHRlblN0eWxlcyA9IChzdHlsZXM6IENTU1Jlc3VsdEFycmF5KTogQ1NTUmVzdWx0W10gPT5cbiAgICBzdHlsZXMuZmxhdCA/IHN0eWxlcy5mbGF0KEluZmluaXR5KSA6IGFycmF5RmxhdChzdHlsZXMpO1xuXG5leHBvcnQgY2xhc3MgTGl0RWxlbWVudCBleHRlbmRzIFVwZGF0aW5nRWxlbWVudCB7XG4gIC8qKlxuICAgKiBFbnN1cmUgdGhpcyBjbGFzcyBpcyBtYXJrZWQgYXMgYGZpbmFsaXplZGAgYXMgYW4gb3B0aW1pemF0aW9uIGVuc3VyaW5nXG4gICAqIGl0IHdpbGwgbm90IG5lZWRsZXNzbHkgdHJ5IHRvIGBmaW5hbGl6ZWAuXG4gICAqL1xuICBwcm90ZWN0ZWQgc3RhdGljIGZpbmFsaXplZCA9IHRydWU7XG5cbiAgLyoqXG4gICAqIFJlbmRlciBtZXRob2QgdXNlZCB0byByZW5kZXIgdGhlIGxpdC1odG1sIFRlbXBsYXRlUmVzdWx0IHRvIHRoZSBlbGVtZW50J3NcbiAgICogRE9NLlxuICAgKiBAcGFyYW0ge1RlbXBsYXRlUmVzdWx0fSBUZW1wbGF0ZSB0byByZW5kZXIuXG4gICAqIEBwYXJhbSB7RWxlbWVudHxEb2N1bWVudEZyYWdtZW50fSBOb2RlIGludG8gd2hpY2ggdG8gcmVuZGVyLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gRWxlbWVudCBuYW1lLlxuICAgKiBAbm9jb2xsYXBzZVxuICAgKi9cbiAgc3RhdGljIHJlbmRlciA9IHJlbmRlcjtcblxuICAvKipcbiAgICogQXJyYXkgb2Ygc3R5bGVzIHRvIGFwcGx5IHRvIHRoZSBlbGVtZW50LiBUaGUgc3R5bGVzIHNob3VsZCBiZSBkZWZpbmVkXG4gICAqIHVzaW5nIHRoZSBgY3NzYCB0YWcgZnVuY3Rpb24uXG4gICAqL1xuICBzdGF0aWMgc3R5bGVzPzogQ1NTUmVzdWx0fENTU1Jlc3VsdEFycmF5O1xuXG4gIHByaXZhdGUgc3RhdGljIF9zdHlsZXM6IENTU1Jlc3VsdFtdfHVuZGVmaW5lZDtcblxuICAvKiogQG5vY29sbGFwc2UgKi9cbiAgcHJvdGVjdGVkIHN0YXRpYyBmaW5hbGl6ZSgpIHtcbiAgICBzdXBlci5maW5hbGl6ZSgpO1xuICAgIC8vIFByZXBhcmUgc3R5bGluZyB0aGF0IGlzIHN0YW1wZWQgYXQgZmlyc3QgcmVuZGVyIHRpbWUuIFN0eWxpbmdcbiAgICAvLyBpcyBidWlsdCBmcm9tIHVzZXIgcHJvdmlkZWQgYHN0eWxlc2Agb3IgaXMgaW5oZXJpdGVkIGZyb20gdGhlIHN1cGVyY2xhc3MuXG4gICAgdGhpcy5fc3R5bGVzID1cbiAgICAgICAgdGhpcy5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdzdHlsZXMnLCB0aGlzKSkgP1xuICAgICAgICB0aGlzLl9nZXRVbmlxdWVTdHlsZXMoKSA6XG4gICAgICAgIHRoaXMuX3N0eWxlcyB8fCBbXTtcbiAgfVxuXG4gIC8qKiBAbm9jb2xsYXBzZSAqL1xuICBwcml2YXRlIHN0YXRpYyBfZ2V0VW5pcXVlU3R5bGVzKCk6IENTU1Jlc3VsdFtdIHtcbiAgICAvLyBUYWtlIGNhcmUgbm90IHRvIGNhbGwgYHRoaXMuc3R5bGVzYCBtdWx0aXBsZSB0aW1lcyBzaW5jZSB0aGlzIGdlbmVyYXRlc1xuICAgIC8vIG5ldyBDU1NSZXN1bHRzIGVhY2ggdGltZS5cbiAgICAvLyBUT0RPKHNvcnZlbGwpOiBTaW5jZSB3ZSBkbyBub3QgY2FjaGUgQ1NTUmVzdWx0cyBieSBpbnB1dCwgYW55XG4gICAgLy8gc2hhcmVkIHN0eWxlcyB3aWxsIGdlbmVyYXRlIG5ldyBzdHlsZXNoZWV0IG9iamVjdHMsIHdoaWNoIGlzIHdhc3RlZnVsLlxuICAgIC8vIFRoaXMgc2hvdWxkIGJlIGFkZHJlc3NlZCB3aGVuIGEgYnJvd3NlciBzaGlwcyBjb25zdHJ1Y3RhYmxlXG4gICAgLy8gc3R5bGVzaGVldHMuXG4gICAgY29uc3QgdXNlclN0eWxlcyA9IHRoaXMuc3R5bGVzO1xuICAgIGNvbnN0IHN0eWxlczogQ1NTUmVzdWx0W10gPSBbXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh1c2VyU3R5bGVzKSkge1xuICAgICAgY29uc3QgZmxhdFN0eWxlcyA9IGZsYXR0ZW5TdHlsZXModXNlclN0eWxlcyk7XG4gICAgICAvLyBBcyBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiB0byBhdm9pZCBkdXBsaWNhdGVkIHN0eWxpbmcgdGhhdCBjYW5cbiAgICAgIC8vIG9jY3VyIGVzcGVjaWFsbHkgd2hlbiBjb21wb3NpbmcgdmlhIHN1YmNsYXNzaW5nLCBkZS1kdXBsaWNhdGUgc3R5bGVzXG4gICAgICAvLyBwcmVzZXJ2aW5nIHRoZSBsYXN0IGl0ZW0gaW4gdGhlIGxpc3QuIFRoZSBsYXN0IGl0ZW0gaXMga2VwdCB0b1xuICAgICAgLy8gdHJ5IHRvIHByZXNlcnZlIGNhc2NhZGUgb3JkZXIgd2l0aCB0aGUgYXNzdW1wdGlvbiB0aGF0IGl0J3MgbW9zdFxuICAgICAgLy8gaW1wb3J0YW50IHRoYXQgbGFzdCBhZGRlZCBzdHlsZXMgb3ZlcnJpZGUgcHJldmlvdXMgc3R5bGVzLlxuICAgICAgY29uc3Qgc3R5bGVTZXQgPSBmbGF0U3R5bGVzLnJlZHVjZVJpZ2h0KChzZXQsIHMpID0+IHtcbiAgICAgICAgc2V0LmFkZChzKTtcbiAgICAgICAgLy8gb24gSUUgc2V0LmFkZCBkb2VzIG5vdCByZXR1cm4gdGhlIHNldC5cbiAgICAgICAgcmV0dXJuIHNldDtcbiAgICAgIH0sIG5ldyBTZXQ8Q1NTUmVzdWx0PigpKTtcbiAgICAgIC8vIEFycmF5LmZyb20gZG9lcyBub3Qgd29yayBvbiBTZXQgaW4gSUVcbiAgICAgIHN0eWxlU2V0LmZvckVhY2goKHYpID0+IHN0eWxlcy51bnNoaWZ0KHYpKTtcbiAgICB9IGVsc2UgaWYgKHVzZXJTdHlsZXMpIHtcbiAgICAgIHN0eWxlcy5wdXNoKHVzZXJTdHlsZXMpO1xuICAgIH1cbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG5cbiAgcHJpdmF0ZSBfbmVlZHNTaGltQWRvcHRlZFN0eWxlU2hlZXRzPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogTm9kZSBvciBTaGFkb3dSb290IGludG8gd2hpY2ggZWxlbWVudCBET00gc2hvdWxkIGJlIHJlbmRlcmVkLiBEZWZhdWx0c1xuICAgKiB0byBhbiBvcGVuIHNoYWRvd1Jvb3QuXG4gICAqL1xuICByZWFkb25seSByZW5kZXJSb290ITogRWxlbWVudHxEb2N1bWVudEZyYWdtZW50O1xuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBlbGVtZW50IGluaXRpYWxpemF0aW9uLiBCeSBkZWZhdWx0IHRoaXMgY2FsbHMgYGNyZWF0ZVJlbmRlclJvb3RgXG4gICAqIHRvIGNyZWF0ZSB0aGUgZWxlbWVudCBgcmVuZGVyUm9vdGAgbm9kZSBhbmQgY2FwdHVyZXMgYW55IHByZS1zZXQgdmFsdWVzIGZvclxuICAgKiByZWdpc3RlcmVkIHByb3BlcnRpZXMuXG4gICAqL1xuICBwcm90ZWN0ZWQgaW5pdGlhbGl6ZSgpIHtcbiAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gICAgKHRoaXMgYXMge3JlbmRlclJvb3Q6IEVsZW1lbnQgfCBEb2N1bWVudEZyYWdtZW50fSkucmVuZGVyUm9vdCA9XG4gICAgICAgIHRoaXMuY3JlYXRlUmVuZGVyUm9vdCgpO1xuICAgIC8vIE5vdGUsIGlmIHJlbmRlclJvb3QgaXMgbm90IGEgc2hhZG93Um9vdCwgc3R5bGVzIHdvdWxkL2NvdWxkIGFwcGx5IHRvIHRoZVxuICAgIC8vIGVsZW1lbnQncyBnZXRSb290Tm9kZSgpLiBXaGlsZSB0aGlzIGNvdWxkIGJlIGRvbmUsIHdlJ3JlIGNob29zaW5nIG5vdCB0b1xuICAgIC8vIHN1cHBvcnQgdGhpcyBub3cgc2luY2UgaXQgd291bGQgcmVxdWlyZSBkaWZmZXJlbnQgbG9naWMgYXJvdW5kIGRlLWR1cGluZy5cbiAgICBpZiAod2luZG93LlNoYWRvd1Jvb3QgJiYgdGhpcy5yZW5kZXJSb290IGluc3RhbmNlb2Ygd2luZG93LlNoYWRvd1Jvb3QpIHtcbiAgICAgIHRoaXMuYWRvcHRTdHlsZXMoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbm9kZSBpbnRvIHdoaWNoIHRoZSBlbGVtZW50IHNob3VsZCByZW5kZXIgYW5kIGJ5IGRlZmF1bHRcbiAgICogY3JlYXRlcyBhbmQgcmV0dXJucyBhbiBvcGVuIHNoYWRvd1Jvb3QuIEltcGxlbWVudCB0byBjdXN0b21pemUgd2hlcmUgdGhlXG4gICAqIGVsZW1lbnQncyBET00gaXMgcmVuZGVyZWQuIEZvciBleGFtcGxlLCB0byByZW5kZXIgaW50byB0aGUgZWxlbWVudCdzXG4gICAqIGNoaWxkTm9kZXMsIHJldHVybiBgdGhpc2AuXG4gICAqIEByZXR1cm5zIHtFbGVtZW50fERvY3VtZW50RnJhZ21lbnR9IFJldHVybnMgYSBub2RlIGludG8gd2hpY2ggdG8gcmVuZGVyLlxuICAgKi9cbiAgcHJvdGVjdGVkIGNyZWF0ZVJlbmRlclJvb3QoKTogRWxlbWVudHxTaGFkb3dSb290IHtcbiAgICByZXR1cm4gdGhpcy5hdHRhY2hTaGFkb3coe21vZGU6ICdvcGVuJ30pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgc3R5bGluZyB0byB0aGUgZWxlbWVudCBzaGFkb3dSb290IHVzaW5nIHRoZSBgc3RhdGljIGdldCBzdHlsZXNgXG4gICAqIHByb3BlcnR5LiBTdHlsaW5nIHdpbGwgYXBwbHkgdXNpbmcgYHNoYWRvd1Jvb3QuYWRvcHRlZFN0eWxlU2hlZXRzYCB3aGVyZVxuICAgKiBhdmFpbGFibGUgYW5kIHdpbGwgZmFsbGJhY2sgb3RoZXJ3aXNlLiBXaGVuIFNoYWRvdyBET00gaXMgcG9seWZpbGxlZCxcbiAgICogU2hhZHlDU1Mgc2NvcGVzIHN0eWxlcyBhbmQgYWRkcyB0aGVtIHRvIHRoZSBkb2N1bWVudC4gV2hlbiBTaGFkb3cgRE9NXG4gICAqIGlzIGF2YWlsYWJsZSBidXQgYGFkb3B0ZWRTdHlsZVNoZWV0c2AgaXMgbm90LCBzdHlsZXMgYXJlIGFwcGVuZGVkIHRvIHRoZVxuICAgKiBlbmQgb2YgdGhlIGBzaGFkb3dSb290YCB0byBbbWltaWMgc3BlY1xuICAgKiBiZWhhdmlvcl0oaHR0cHM6Ly93aWNnLmdpdGh1Yi5pby9jb25zdHJ1Y3Qtc3R5bGVzaGVldHMvI3VzaW5nLWNvbnN0cnVjdGVkLXN0eWxlc2hlZXRzKS5cbiAgICovXG4gIHByb3RlY3RlZCBhZG9wdFN0eWxlcygpIHtcbiAgICBjb25zdCBzdHlsZXMgPSAodGhpcy5jb25zdHJ1Y3RvciBhcyB0eXBlb2YgTGl0RWxlbWVudCkuX3N0eWxlcyE7XG4gICAgaWYgKHN0eWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gVGhlcmUgYXJlIHRocmVlIHNlcGFyYXRlIGNhc2VzIGhlcmUgYmFzZWQgb24gU2hhZG93IERPTSBzdXBwb3J0LlxuICAgIC8vICgxKSBzaGFkb3dSb290IHBvbHlmaWxsZWQ6IHVzZSBTaGFkeUNTU1xuICAgIC8vICgyKSBzaGFkb3dSb290LmFkb3B0ZWRTdHlsZVNoZWV0cyBhdmFpbGFibGU6IHVzZSBpdC5cbiAgICAvLyAoMykgc2hhZG93Um9vdC5hZG9wdGVkU3R5bGVTaGVldHMgcG9seWZpbGxlZDogYXBwZW5kIHN0eWxlcyBhZnRlclxuICAgIC8vIHJlbmRlcmluZ1xuICAgIGlmICh3aW5kb3cuU2hhZHlDU1MgIT09IHVuZGVmaW5lZCAmJiAhd2luZG93LlNoYWR5Q1NTLm5hdGl2ZVNoYWRvdykge1xuICAgICAgd2luZG93LlNoYWR5Q1NTLlNjb3BpbmdTaGltLnByZXBhcmVBZG9wdGVkQ3NzVGV4dChcbiAgICAgICAgICBzdHlsZXMubWFwKChzKSA9PiBzLmNzc1RleHQpLCB0aGlzLmxvY2FsTmFtZSk7XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMpIHtcbiAgICAgICh0aGlzLnJlbmRlclJvb3QgYXMgU2hhZG93Um9vdCkuYWRvcHRlZFN0eWxlU2hlZXRzID1cbiAgICAgICAgICBzdHlsZXMubWFwKChzKSA9PiBzLnN0eWxlU2hlZXQhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhpcyBtdXN0IGJlIGRvbmUgYWZ0ZXIgcmVuZGVyaW5nIHNvIHRoZSBhY3R1YWwgc3R5bGUgaW5zZXJ0aW9uIGlzIGRvbmVcbiAgICAgIC8vIGluIGB1cGRhdGVgLlxuICAgICAgdGhpcy5fbmVlZHNTaGltQWRvcHRlZFN0eWxlU2hlZXRzID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIC8vIE5vdGUsIGZpcnN0IHVwZGF0ZS9yZW5kZXIgaGFuZGxlcyBzdHlsZUVsZW1lbnQgc28gd2Ugb25seSBjYWxsIHRoaXMgaWZcbiAgICAvLyBjb25uZWN0ZWQgYWZ0ZXIgZmlyc3QgdXBkYXRlLlxuICAgIGlmICh0aGlzLmhhc1VwZGF0ZWQgJiYgd2luZG93LlNoYWR5Q1NTICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdpbmRvdy5TaGFkeUNTUy5zdHlsZUVsZW1lbnQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGVsZW1lbnQuIFRoaXMgbWV0aG9kIHJlZmxlY3RzIHByb3BlcnR5IHZhbHVlcyB0byBhdHRyaWJ1dGVzXG4gICAqIGFuZCBjYWxscyBgcmVuZGVyYCB0byByZW5kZXIgRE9NIHZpYSBsaXQtaHRtbC4gU2V0dGluZyBwcm9wZXJ0aWVzIGluc2lkZVxuICAgKiB0aGlzIG1ldGhvZCB3aWxsICpub3QqIHRyaWdnZXIgYW5vdGhlciB1cGRhdGUuXG4gICAqICogQHBhcmFtIF9jaGFuZ2VkUHJvcGVydGllcyBNYXAgb2YgY2hhbmdlZCBwcm9wZXJ0aWVzIHdpdGggb2xkIHZhbHVlc1xuICAgKi9cbiAgcHJvdGVjdGVkIHVwZGF0ZShjaGFuZ2VkUHJvcGVydGllczogUHJvcGVydHlWYWx1ZXMpIHtcbiAgICBzdXBlci51cGRhdGUoY2hhbmdlZFByb3BlcnRpZXMpO1xuICAgIGNvbnN0IHRlbXBsYXRlUmVzdWx0ID0gdGhpcy5yZW5kZXIoKSBhcyB1bmtub3duO1xuICAgIGlmICh0ZW1wbGF0ZVJlc3VsdCBpbnN0YW5jZW9mIFRlbXBsYXRlUmVzdWx0KSB7XG4gICAgICAodGhpcy5jb25zdHJ1Y3RvciBhcyB0eXBlb2YgTGl0RWxlbWVudClcbiAgICAgICAgICAucmVuZGVyKFxuICAgICAgICAgICAgICB0ZW1wbGF0ZVJlc3VsdCxcbiAgICAgICAgICAgICAgdGhpcy5yZW5kZXJSb290LFxuICAgICAgICAgICAgICB7c2NvcGVOYW1lOiB0aGlzLmxvY2FsTmFtZSwgZXZlbnRDb250ZXh0OiB0aGlzfSk7XG4gICAgfVxuICAgIC8vIFdoZW4gbmF0aXZlIFNoYWRvdyBET00gaXMgdXNlZCBidXQgYWRvcHRlZFN0eWxlcyBhcmUgbm90IHN1cHBvcnRlZCxcbiAgICAvLyBpbnNlcnQgc3R5bGluZyBhZnRlciByZW5kZXJpbmcgdG8gZW5zdXJlIGFkb3B0ZWRTdHlsZXMgaGF2ZSBoaWdoZXN0XG4gICAgLy8gcHJpb3JpdHkuXG4gICAgaWYgKHRoaXMuX25lZWRzU2hpbUFkb3B0ZWRTdHlsZVNoZWV0cykge1xuICAgICAgdGhpcy5fbmVlZHNTaGltQWRvcHRlZFN0eWxlU2hlZXRzID0gZmFsc2U7XG4gICAgICAodGhpcy5jb25zdHJ1Y3RvciBhcyB0eXBlb2YgTGl0RWxlbWVudCkuX3N0eWxlcyEuZm9yRWFjaCgocykgPT4ge1xuICAgICAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gcy5jc3NUZXh0O1xuICAgICAgICB0aGlzLnJlbmRlclJvb3QuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgb24gZWFjaCB1cGRhdGUgdG8gcGVyZm9ybSByZW5kZXJpbmcgdGFza3MuIFRoaXMgbWV0aG9kIG11c3QgcmV0dXJuXG4gICAqIGEgbGl0LWh0bWwgVGVtcGxhdGVSZXN1bHQuIFNldHRpbmcgcHJvcGVydGllcyBpbnNpZGUgdGhpcyBtZXRob2Qgd2lsbCAqbm90KlxuICAgKiB0cmlnZ2VyIHRoZSBlbGVtZW50IHRvIHVwZGF0ZS5cbiAgICovXG4gIHByb3RlY3RlZCByZW5kZXIoKTogVGVtcGxhdGVSZXN1bHR8dm9pZCB7XG4gIH1cbn1cbiIsImltcG9ydCBheGlvcywgeyBBeGlvc1Jlc3BvbnNlLCBDYW5jZWxUb2tlbiwgQXhpb3NSZXF1ZXN0Q29uZmlnIH0gZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgaHRtbCwgVGVtcGxhdGVSZXN1bHQgfSBmcm9tICdsaXQtaHRtbCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXNzZXQge1xuICAgIGtleT86IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIEFzc2V0UGFnZSB7XG4gICAgYXNzZXRzOiBBc3NldFtdO1xuICAgIG5leHQ6IHN0cmluZztcbn1cblxuLyoqIEdldCB0aGUgdmFsdWUgZm9yIGEgbmFtZWQgY29va2llICovXG5leHBvcnQgY29uc3QgZ2V0Q29va2llID0gKG5hbWU6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgZm9yIChjb25zdCBjb29raWUgb2YgZG9jdW1lbnQuY29va2llLnNwbGl0KCc7JykpIHtcbiAgICAgICAgY29uc3QgaWR4ID0gY29va2llLmluZGV4T2YoJz0nKTtcbiAgICAgICAgbGV0IGtleSA9IGNvb2tpZS5zdWJzdHIoMCwgaWR4KTtcbiAgICAgICAgbGV0IHZhbHVlID0gY29va2llLnN1YnN0cihpZHggKyAxKTtcblxuICAgICAgICAvLyBubyBzcGFjZXMgYWxsb3dlZFxuICAgICAgICBrZXkgPSBrZXkudHJpbSgpO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnRyaW0oKTtcblxuICAgICAgICBpZiAoa2V5ID09PSBuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnQgdHlwZSBDbGFzc01hcCA9IHtcbiAgICBbY2xhc3NOYW1lOiBzdHJpbmddOiBib29sZWFuXG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Q2xhc3NlcyA9IChtYXA6IENsYXNzTWFwKTogc3RyaW5nID0+IHtcbiAgICBjb25zdCBjbGFzc05hbWVzOiBzdHJpbmdbXSA9IFtdO1xuICAgIE9iamVjdC5rZXlzKG1hcCkuZm9yRWFjaCgoY2xhc3NOYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKG1hcFtjbGFzc05hbWVdKSB7XG4gICAgICAgICAgICBjbGFzc05hbWVzLnB1c2goY2xhc3NOYW1lKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgbGV0IHJlc3VsdCA9IGNsYXNzTmFtZXMuam9pbignICcpO1xuICAgIGlmIChyZXN1bHQudHJpbSgpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmVzdWx0ID0gJyAnICsgcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEFzc2V0UGFnZSA9ICh1cmw6IHN0cmluZyk6IFByb21pc2U8QXNzZXRQYWdlPiA9PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPEFzc2V0UGFnZT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBnZXRVcmwodXJsKVxuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlOiBBeGlvc1Jlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0czogcmVzcG9uc2UuZGF0YS5yZXN1bHRzLFxuICAgICAgICAgICAgICAgICAgICBuZXh0OiByZXNwb25zZS5kYXRhLm5leHRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4gcmVqZWN0KGVycm9yKSk7XG4gICAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0QXNzZXRzID0gYXN5bmMgKHVybDogc3RyaW5nKTogUHJvbWlzZTxBc3NldFtdPiA9PiB7XG4gICAgaWYgKCF1cmwpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPEFzc2V0W10+KChyZXNvbHZlLCByZWplY3QpID0+IHJlc29sdmUoW10pKTtcbiAgICB9XG5cbiAgICBsZXQgYXNzZXRzOiBBc3NldFtdID0gW107XG4gICAgbGV0IHBhZ2VVcmwgPSB1cmw7XG4gICAgd2hpbGUgKHBhZ2VVcmwpIHtcbiAgICAgICAgY29uc3QgYXNzZXRQYWdlID0gYXdhaXQgZ2V0QXNzZXRQYWdlKHBhZ2VVcmwpO1xuICAgICAgICBhc3NldHMgPSBhc3NldHMuY29uY2F0KGFzc2V0UGFnZS5hc3NldHMpO1xuICAgICAgICBwYWdlVXJsID0gYXNzZXRQYWdlLm5leHQ7XG4gICAgfVxuICAgIHJldHVybiBhc3NldHM7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0VXJsID0gKFxuICAgIHVybDogc3RyaW5nLFxuICAgIGNhbmNlbFRva2VuOiBDYW5jZWxUb2tlbiA9IG51bGxcbik6IFByb21pc2U8QXhpb3NSZXNwb25zZT4gPT4ge1xuICAgIGNvbnN0IGNzcmYgPSBnZXRDb29raWUoJ2NzcmZ0b2tlbicpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSBjc3JmID8geyAnWC1DU1JGVG9rZW4nOiBjc3JmIH0gOiB7fTtcbiAgICBjb25zdCBjb25maWc6IEF4aW9zUmVxdWVzdENvbmZpZyA9IHsgaGVhZGVycyB9O1xuICAgIGlmIChjYW5jZWxUb2tlbikge1xuICAgICAgICBjb25maWcuY2FuY2VsVG9rZW4gPSBjYW5jZWxUb2tlbjtcbiAgICB9XG4gICAgcmV0dXJuIGF4aW9zLmdldCh1cmwsIGNvbmZpZyk7XG59O1xuXG5leHBvcnQgY29uc3QgcG9zdFVybCA9ICh1cmw6IHN0cmluZywgcGF5bG9hZDogYW55KTogUHJvbWlzZTxBeGlvc1Jlc3BvbnNlPiA9PiB7XG4gICAgY29uc3QgY3NyZiA9IGdldENvb2tpZSgnY3NyZnRva2VuJyk7XG4gICAgY29uc3QgaGVhZGVycyA9IGNzcmYgPyB7ICdYLUNTUkZUb2tlbic6IGNzcmYgfSA6IHt9O1xuICAgIHJldHVybiBheGlvcy5wb3N0KHVybCwgcGF5bG9hZCwgeyBoZWFkZXJzIH0pO1xufTtcblxuLyoqXG4gKi9cbmV4cG9ydCBjb25zdCByZW5kZXJJZiA9IChwcmVkaWNhdGU6IGJvb2xlYW4gfCBhbnkpID0+IChcbiAgICB0aGVuOiAoKSA9PiBUZW1wbGF0ZVJlc3VsdCxcbiAgICBvdGhlcndpc2U/OiAoKSA9PiBUZW1wbGF0ZVJlc3VsdFxuKSA9PiB7XG4gICAgcmV0dXJuIHByZWRpY2F0ZSA/IHRoZW4oKSA6IG90aGVyd2lzZSA/IG90aGVyd2lzZSgpIDogaHRtbGBgO1xufTtcblxuZXhwb3J0IGNvbnN0IGhleFRvUmdiID0gKGhleDogc3RyaW5nKTogeyByOiBudW1iZXIsIGc6IG51bWJlciwgYjogbnVtYmVyIH0gPT4ge1xuICAgIHZhciByZXN1bHQgPSAvXiM/KFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pJC9pLmV4ZWMoaGV4KTtcbiAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgID8ge1xuICAgICAgICAgICAgICByOiBwYXJzZUludChyZXN1bHRbMV0sIDE2KSxcbiAgICAgICAgICAgICAgZzogcGFyc2VJbnQocmVzdWx0WzJdLCAxNiksXG4gICAgICAgICAgICAgIGI6IHBhcnNlSW50KHJlc3VsdFszXSwgMTYpXG4gICAgICAgICAgfVxuICAgICAgICA6IG51bGw7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0RWxlbWVudE9mZnNldCA9IChcbiAgICBlbGU6IEhUTUxFbGVtZW50XG4pOiB7XG4gICAgdG9wOiBudW1iZXIsXG4gICAgbGVmdDogbnVtYmVyLFxuICAgIGJvdHRvbTogbnVtYmVyLFxuICAgIHJpZ2h0OiBudW1iZXIsXG4gICAgd2lkdGg6IG51bWJlcixcbiAgICBoZWlnaHQ6IG51bWJlclxufSA9PiB7XG4gICAgY29uc3QgcmVjdCA9IGVsZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCBzY3JvbGxMZWZ0ID1cbiAgICAgICAgd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0O1xuICAgIGNvbnN0IHNjcm9sbFRvcCA9IHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogcmVjdC50b3AgKyBzY3JvbGxUb3AsXG4gICAgICAgIGxlZnQ6IHJlY3QubGVmdCArIHNjcm9sbExlZnQsXG4gICAgICAgIGJvdHRvbTogcmVjdC50b3AgKyByZWN0LmhlaWdodCxcbiAgICAgICAgcmlnaHQ6IHJlY3QubGVmdCArIHJlY3Qud2lkdGgsXG4gICAgICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgICAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0XG4gICAgfTtcbn07XG4iLCJpbXBvcnQgeyBBeGlvc1Jlc3BvbnNlIH0gZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgY3NzLCBjdXN0b21FbGVtZW50LCBodG1sLCBMaXRFbGVtZW50LCBwcm9wZXJ0eSwgVGVtcGxhdGVSZXN1bHQgfSBmcm9tICdsaXQtZWxlbWVudCc7XG5pbXBvcnQgeyBGZWF0dXJlUHJvcGVydGllcyB9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgZ2V0VXJsLCBwb3N0VXJsIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IGF1dG9zaXplIGZyb20gJ2F1dG9zaXplJztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vYnV0dG9uL0J1dHRvbic7XG5cblxuQGN1c3RvbUVsZW1lbnQoXCJhbGlhcy1lZGl0b3JcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFsaWFzRWRpdG9yIGV4dGVuZHMgTGl0RWxlbWVudCB7XG5cbiAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgcmV0dXJuIGNzc2BcblxuICAgICAgOmhvc3Qge1xuICAgICAgICBsaW5lLWhlaWdodDogbm9ybWFsO1xuICAgICAgfVxuXG4gICAgICB0ZXh0YXJlYSB7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICAgICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1jb2xvci1ib3JkZXJzKTtcbiAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgY29sb3I6IHZhcigtLWNvbG9yLXRleHQpO1xuICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgIHJlc2l6ZTogbm9uZTtcbiAgICAgIH1cblxuICAgICAgdGV4dGFyZWE6Zm9jdXMge1xuICAgICAgICBib3gtc2hhZG93OiBub25lO1xuICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgfVxuXG4gICAgICAjbGVmdC1jb2x1bW4ge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICAgICAgICB3aWR0aDogMzAwcHg7XG4gICAgICAgIHotaW5kZXg6IDEwMDtcbiAgICAgIH1cblxuICAgICAgLnNlYXJjaCB7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5mZWF0dXJlIHtcbiAgICAgICAgcGFkZGluZzogNHB4IDE0cHg7XG4gICAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgIH1cblxuICAgICAgLmxldmVsLTAge1xuICAgICAgICBtYXJnaW4tbGVmdDogMHB4O1xuICAgICAgfVxuXG4gICAgICAubGV2ZWwtMSB7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiA1cHg7XG4gICAgICAgIGZvbnQtc2l6ZTogOTUlO1xuICAgICAgfVxuXG4gICAgICAubGV2ZWwtMiB7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICAgICAgICBmb250LXNpemU6IDkwJTtcbiAgICAgIH1cblxuICAgICAgLmxldmVsLTMge1xuICAgICAgICBtYXJnaW4tbGVmdDogMTVweDtcbiAgICAgICAgZm9udC1zaXplOiA4NSU7XG4gICAgICB9XG5cbiAgICAgIC5mZWF0dXJlLW5hbWUge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICB9XG5cbiAgICAgIC5jbGlja2FibGUge1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgY29sb3I6IHZhcigtLWNvbG9yLWxpbmstcHJpbWFyeSk7XG4gICAgICB9XG5cbiAgICAgIC5jbGlja2FibGUuc2Vjb25kYXJ5IHtcbiAgICAgICAgY29sb3I6IHZhcigtLWNvbG9yLWxpbmstc2Vjb25kYXJ5KTtcbiAgICAgIH1cblxuICAgICAgLmNsaWNrYWJsZTpob3ZlciB7XG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICAgICAgICBjb2xvcjogdmFyKC0tY29sb3ItbGluay1wcmltYXJ5LWhvdmVyKTtcbiAgICAgIH1cblxuICAgICAgLmZlYXR1cmU6aG92ZXIgLnNob3dvbmhvdmVyIHtcbiAgICAgICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcbiAgICAgIH1cblxuICAgICAgLnNob3dvbmhvdmVyIHtcbiAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICAgICAgfVxuXG4gICAgICAuYWxpYXNlcyB7XG4gICAgICAgIGNvbG9yOiAjYmJiO1xuICAgICAgICBmb250LXNpemU6IDgwJTtcbiAgICAgICAgZGlzcGxheTogaW5saW5lO1xuICAgICAgICBtYXJnaW4tbGVmdDogNXB4O1xuICAgICAgfVxuXG4gICAgICBycC1sYWJlbCB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogM3B4O1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAzcHg7XG4gICAgICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7XG4gICAgICB9XG5cbiAgICAgIC5zZWxlY3RlZCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIHBhZGRpbmc6IDE1cHg7XG4gICAgICB9XG5cbiAgICAgIC5zZWxlY3RlZCAubmFtZSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICAgICAgcGFkZGluZzogNXB4O1xuICAgICAgfVxuXG4gICAgICAuc2VsZWN0ZWQgLmhlbHAge1xuICAgICAgICBwYWRkaW5nOiA1cHggMnB4O1xuICAgICAgICBmb250LXNpemU6IDExcHg7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1jb2xvci1zZWNvbmRhcnktbGlnaHQpO1xuICAgICAgfVxuXG4gICAgICAjcmlnaHQtY29sdW1uIHtcbiAgICAgICAgdmVydGljYWwtYWxpZ246IHRvcDtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDIwcHg7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIH1cblxuICAgICAgbGVhZmxldC1tYXAge1xuICAgICAgICBoZWlnaHQ6IDI1MHB4O1xuICAgICAgICB3aWR0aDogNDUwcHg7XG4gICAgICAgIGJvcmRlcjogMHB4IHNvbGlkICM5OTk7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICAgIH1cblxuICAgICAgLmVkaXQge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMHB4O1xuICAgICAgfVxuXG4gICBgO1xuICB9XG5cbiAgQHByb3BlcnR5KHt0eXBlOiBBcnJheSwgYXR0cmlidXRlOiBmYWxzZX0pXG4gIHBhdGg6IEZlYXR1cmVQcm9wZXJ0aWVzW10gPSBbXTtcblxuICBAcHJvcGVydHkoKVxuICBlbmRwb2ludDogc3RyaW5nO1xuXG4gIEBwcm9wZXJ0eSgpXG4gIG9zbUlkOiBzdHJpbmc7XG5cbiAgQHByb3BlcnR5KHt0eXBlOiBPYmplY3R9KVxuICBob3ZlcmVkOiBGZWF0dXJlUHJvcGVydGllcztcblxuICBAcHJvcGVydHkoe3R5cGU6IE9iamVjdH0pXG4gIGVkaXRGZWF0dXJlOiBGZWF0dXJlUHJvcGVydGllc1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZWQoY2hhbmdlZFByb3BlcnRpZXM6IE1hcDxzdHJpbmcsIGFueT4pIHtcblxuICAgIGlmIChjaGFuZ2VkUHJvcGVydGllcy5oYXMoXCJvc21JZFwiKSkge1xuICAgICAgLy8gZ29pbmcgdXAgdGhlIHRyZWUgZG9lc24ndCByZXF1aXJlIGEgZmV0Y2hcbiAgICAgIGNvbnN0IG5ld1BhdGggPSBbXTtcbiAgICAgIGZvciAobGV0IGZlYXR1cmUgb2YgdGhpcy5wYXRoKSB7XG4gICAgICAgIG5ld1BhdGgucHVzaChmZWF0dXJlKTtcbiAgICAgICAgaWYgKGZlYXR1cmUub3NtX2lkID09PSB0aGlzLm9zbUlkKSB7XG4gICAgICAgICAgdGhpcy5wYXRoID0gWy4uLm5ld1BhdGhdO1xuICAgICAgICAgIHRoaXMuaGlkZUFsaWFzRGlhbG9nKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZmV0Y2hGZWF0dXJlKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBmZXRjaEZlYXR1cmUoKSB7XG4gICAgZ2V0VXJsKHRoaXMuZ2V0RW5kcG9pbnQoKSArIFwiYm91bmRhcmllcy9cIiArIHRoaXMub3NtSWQgKyBcIi9cIikudGhlbigocmVzcG9uc2U6IEF4aW9zUmVzcG9uc2UpID0+IHtcbiAgICAgIHRoaXMucGF0aCA9IHJlc3BvbnNlLmRhdGEgYXMgRmVhdHVyZVByb3BlcnRpZXNbXTtcbiAgICAgIHRoaXMuaGlkZUFsaWFzRGlhbG9nKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKlxuICAgTWFrZXMgc3VyZSBvdXIgdGV4dGFyZWEgZ3Jvd3Mgd2l0aCB1c1xuICAgKi9cbiAgcHJpdmF0ZSBmaXJlVGV4dGFyZWFBdXRvc2l6ZSgpOiB2b2lkIHtcbiAgICB3aW5kb3cuc2V0VGltZW91dCgoKT0+e1xuICAgICAgYXV0b3NpemUodGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJ3RleHRhcmVhJykpO1xuICAgICAgYXV0b3NpemUudXBkYXRlKHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCd0ZXh0YXJlYScpKTtcbiAgICB9LCAwKTtcbiAgfVxuICBcbiAgcHJpdmF0ZSBoYW5kbGVNYXBDbGlja2VkKGZlYXR1cmU6IEZlYXR1cmVQcm9wZXJ0aWVzKTogdm9pZCB7XG4gICAgdGhpcy5ob3ZlcmVkID0gbnVsbDtcbiAgICBpZiAoIWZlYXR1cmUgfHwgZmVhdHVyZS5vc21faWQgIT09IHRoaXMub3NtSWQpIHtcbiAgICAgIHRoaXMub3NtSWQgPSBmZWF0dXJlLm9zbV9pZDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZVBsYWNlQ2xpY2tlZChmZWF0dXJlOiBGZWF0dXJlUHJvcGVydGllcykge1xuICAgIHRoaXMub3NtSWQgPSBmZWF0dXJlLm9zbV9pZDtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlU2VhcmNoU2VsZWN0aW9uKGV2dDogQ3VzdG9tRXZlbnQpIHtcbiAgICBjb25zdCBzZWxlY3Rpb24gPSBldnQuZGV0YWlsLnNlbGVjdGVkIGFzIEZlYXR1cmVQcm9wZXJ0aWVzO1xuICAgIHRoaXMuc2hvd0FsaWFzRGlhbG9nKHNlbGVjdGlvbik7XG4gIH1cblxuICBwcml2YXRlIHJlbmRlckZlYXR1cmUoZmVhdHVyZTogRmVhdHVyZVByb3BlcnRpZXMsIHJlbWFpbmluZ1BhdGg6IEZlYXR1cmVQcm9wZXJ0aWVzW10pOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgY29uc3Qgc2VsZWN0ZWRGZWF0dXJlID0gdGhpcy5wYXRoW3RoaXMucGF0aC5sZW5ndGggLSAxXTtcbiAgICBjb25zdCBjbGlja2FibGUgPSAoKGZlYXR1cmUuaGFzX2NoaWxkcmVuIHx8IGZlYXR1cmUubGV2ZWwgPT09IDAgKSYmIGZlYXR1cmUgIT09IHNlbGVjdGVkRmVhdHVyZSk7XG4gICAgY29uc3QgcmVuZGVyZWRGZWF0dXJlID0gaHRtbGBcbiAgICAgIDxkaXYgY2xhc3M9XCJmZWF0dXJlXCI+XG4gICAgICAgIDxkaXYgXG4gICAgICAgICAgQG1vdXNlb3Zlcj0keygpID0+IHsgaWYgKGZlYXR1cmUubGV2ZWwgPiAwKSB7IHRoaXMuaG92ZXJlZCA9IGZlYXR1cmUgfX19XG4gICAgICAgICAgQG1vdXNlb3V0PSR7KCkgPT4geyB0aGlzLmhvdmVyZWQgPSBudWxsIH19XG4gICAgICAgICAgY2xhc3M9XCJsZXZlbC0ke2ZlYXR1cmUubGV2ZWx9XCJcbiAgICAgICAgPlxuXG4gXG5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZlYXR1cmUtbmFtZSAkeyBjbGlja2FibGUgPyAnY2xpY2thYmxlJyA6ICcnfVwiIFxuICAgICAgICAgIEBjbGljaz0keygpID0+IHsgaWYgKGNsaWNrYWJsZSkge3RoaXMuaGFuZGxlUGxhY2VDbGlja2VkKGZlYXR1cmUpIH19fT5cbiAgICAgICAgICAke2ZlYXR1cmUubmFtZX1cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cImFsaWFzZXNcIj5cbiAgICAgICAgICAke2ZlYXR1cmUuYWxpYXNlcy5zcGxpdCgnXFxuJykubWFwKChhbGlhczogc3RyaW5nKT0+YWxpYXMudHJpbSgpLmxlbmd0aCA+IDAgPyBodG1sYFxuICAgICAgICAgICAgPHJwLWxhYmVsIGNsYXNzPVwiYWxpYXNcIiBAY2xpY2s9JHsoKT0+e3RoaXMuc2hvd0FsaWFzRGlhbG9nKGZlYXR1cmUpO319IGxpZ2h0IGNsaWNrYWJsZT4ke2FsaWFzfTwvcnAtbGFiZWw+XG4gICAgICAgICAgYDogbnVsbCl9XG5cbiAgICAgICAgICAke2ZlYXR1cmUubGV2ZWwgPiAwID8gaHRtbGBcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZWRpdCBjbGlja2FibGUgc2hvd29uaG92ZXJcIiBAY2xpY2s9JHsoZXZ0OiBNb3VzZUV2ZW50KT0+IHsgdGhpcy5zaG93QWxpYXNEaWFsb2coZmVhdHVyZSk7IGV2dC5wcmV2ZW50RGVmYXVsdCgpOyBldnQuc3RvcFByb3BhZ2F0aW9uKCl9fT5cbiAgICAgICAgICAgIDxycC1pY29uIG5hbWU9XCJyZWdpc3RlclwiIHNpemU9XCIxMlwiPjwvcnAtaWNvbj5cbiAgICAgICAgICA8L2Rpdj5gOiAnJ31cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgIDwvZGl2PlxuICAgICAgICBcbiAgICAgIDwvZGl2PlxuICAgICAgYDtcblxuICAgIGNvbnN0IHJlbmRlcmVkQ2hpbGRyZW4gPSAoZmVhdHVyZS5jaGlsZHJlbiB8fCBbXSkubWFwKChjaGlsZDogRmVhdHVyZVByb3BlcnRpZXMpPT4ge1xuICAgIFxuICAgICAgaWYgKHJlbWFpbmluZ1BhdGgubGVuZ3RoID4gMCAmJiAocmVtYWluaW5nUGF0aFswXS5vc21faWQgPT09IGNoaWxkLm9zbV9pZCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyRmVhdHVyZShyZW1haW5pbmdQYXRoWzBdLCByZW1haW5pbmdQYXRoLnNsaWNlKDEpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlbWFpbmluZ1BhdGgubGVuZ3RoID09PSAwIHx8IHJlbWFpbmluZ1BhdGhbMF0uY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlckZlYXR1cmUoY2hpbGQsIHJlbWFpbmluZ1BhdGgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBcbiAgICB9KTtcblxuICAgIHJldHVybiBodG1sYFxuICAgICAgJHtyZW5kZXJlZEZlYXR1cmV9XG4gICAgICAke3JlbmRlcmVkQ2hpbGRyZW59XG4gICAgYFxuICB9XG5cbiAgcHVibGljIHNob3dBbGlhc0RpYWxvZyhmZWF0dXJlOiBGZWF0dXJlUHJvcGVydGllcykge1xuICAgIHRoaXMuZWRpdEZlYXR1cmUgPSBmZWF0dXJlO1xuICAgIGNvbnN0IGFsaWFzRGlhbG9nID0gdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwiYWxpYXMtZGlhbG9nXCIpO1xuICAgIGlmIChhbGlhc0RpYWxvZyl7XG4gICAgICB0aGlzLmZpcmVUZXh0YXJlYUF1dG9zaXplKCk7XG4gICAgICBhbGlhc0RpYWxvZy5zZXRBdHRyaWJ1dGUoJ29wZW4nLCAnJyk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGhpZGVBbGlhc0RpYWxvZygpIHtcbiAgICBjb25zdCBhbGlhc0RpYWxvZyA9IHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcImFsaWFzLWRpYWxvZ1wiKTtcbiAgICBpZiAoYWxpYXNEaWFsb2cpIHtcbiAgICAgIGFsaWFzRGlhbG9nLnJlbW92ZUF0dHJpYnV0ZShcIm9wZW5cIik7XG4gICAgfVxuXG4gICAgdGhpcy5yZXF1ZXN0VXBkYXRlKCk7XG4gIH1cblxuICBwcml2YXRlIGdldEVuZHBvaW50KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZW5kcG9pbnQgKyAoIXRoaXMuZW5kcG9pbnQuZW5kc1dpdGgoJy8nKSA/ICcvJyA6ICcnKTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlRGlhbG9nQ2xpY2soZXZ0OiBDdXN0b21FdmVudCkge1xuICAgIGNvbnN0IGJ1dHRvbiA9IGV2dC5kZXRhaWwuYnV0dG9uO1xuICAgIGlmIChidXR0b24ubmFtZSA9PT0gXCJTYXZlXCIpIHtcbiAgICAgIGJ1dHRvbi5zZXRQcm9ncmVzcyh0cnVlKTtcbiAgICAgIGNvbnN0IHRleHRhcmVhID0gdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKHRoaXMuZWRpdEZlYXR1cmUub3NtX2lkKSBhcyBIVE1MVGV4dEFyZWFFbGVtZW50O1xuICAgICAgY29uc3QgYWxpYXNlcyA9IHRleHRhcmVhLnZhbHVlO1xuICAgICAgY29uc3QgcGF5bG9hZCA9IHsgXCJvc21faWRcIjogIHRoaXMuZWRpdEZlYXR1cmUub3NtX2lkLCBhbGlhc2VzIH07XG4gICAgICBwb3N0VXJsKHRoaXMuZ2V0RW5kcG9pbnQoKSArIFwiYm91bmRhcmllcy9cIiArICB0aGlzLmVkaXRGZWF0dXJlLm9zbV9pZCArIFwiL1wiLCBwYXlsb2FkKS50aGVuKChyZXNwb25zZTogQXhpb3NSZXNwb25zZSkgPT4ge1xuICAgICAgICB0aGlzLmZldGNoRmVhdHVyZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYoYnV0dG9uLm5hbWUgPT09IFwiQ2FuY2VsXCIpIHtcbiAgICAgIHRoaXMuaGlkZUFsaWFzRGlhbG9nKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZW5kZXJPcHRpb25EZXRhaWwob3B0aW9uOiBGZWF0dXJlUHJvcGVydGllcywgc2VsZWN0ZWQ6IGJvb2xlYW4pOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgY29uc3Qgc3R5bGUgPSBodG1sYFxuICAgICAgPHN0eWxlPlxuICAgICAgICBycC1sYWJlbCB7XG4gICAgICAgICAgbWFyZ2luLXRvcDogM3B4O1xuICAgICAgICAgIG1hcmdpbi1yaWdodDogM3B4O1xuICAgICAgICB9XG4gICAgICA8L3N0eWxlPlxuICAgIGA7XG5cbiAgICBjb25zdCBhbGlhc0xpc3QgPSBvcHRpb24uYWxpYXNlcy5zcGxpdCgnXFxuJyk7XG4gICAgY29uc3QgYWxpYXNlcyA9IGFsaWFzTGlzdC5tYXAoKGFsaWFzOiBzdHJpbmcpPT5hbGlhcy50cmltKCkubGVuZ3RoID4gMCA/IGh0bWxgPHJwLWxhYmVsIGNsYXNzPVwiYWxpYXNcIiBkYXJrPiR7YWxpYXN9PC9ycC1sYWJlbD5gOiBudWxsKTtcbiAgICByZXR1cm4gaHRtbGAke3N0eWxlfTxkaXYgY2xhc3M9XCJwYXRoXCI+JHtvcHRpb24ucGF0aC5yZXBsYWNlKC8+L2dpLCBcIuKAo1wiKX08L2Rpdj48ZGl2IGNsYXNzPVwiYWxpYXNlc1wiPiR7YWxpYXNlc308L2Rpdj5gOyAgICBcbiAgfVxuXG4gIHB1YmxpYyByZW5kZXIoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgIGlmICh0aGlzLnBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gaHRtbGBgO1xuICAgIH1cblxuICAgIC8vIGlmIHdlIGFyZSBhIGxlYWYsIGhhdmUgb3VyIG1hcCBzaG93IHRoZSBsZXZlbCBhYm92ZVxuICAgIGNvbnN0IHNlbGVjdGVkRmVhdHVyZSA9IHRoaXMucGF0aFt0aGlzLnBhdGgubGVuZ3RoIC0gMV07XG4gICAgY29uc3QgbWFwRmVhdHVyZSA9IHNlbGVjdGVkRmVhdHVyZS5jaGlsZHJlbi5sZW5ndGggPT09IDAgPyB0aGlzLnBhdGhbdGhpcy5wYXRoLmxlbmd0aCAtIDJdIDogc2VsZWN0ZWRGZWF0dXJlO1xuICAgIFxuICAgIGNvbnN0IGVkaXRGZWF0dXJlSWQgPSB0aGlzLmVkaXRGZWF0dXJlID8gdGhpcy5lZGl0RmVhdHVyZS5vc21faWQgOiBudWxsO1xuICAgIGNvbnN0IGVkaXRGZWF0dXJlTmFtZSA9IHRoaXMuZWRpdEZlYXR1cmUgPyB0aGlzLmVkaXRGZWF0dXJlLm5hbWUgOiBudWxsO1xuICAgIGNvbnN0IGVkaXRGZWF0dXJlQWxpYXNlcyA9IHRoaXMuZWRpdEZlYXR1cmUgPyB0aGlzLmVkaXRGZWF0dXJlLmFsaWFzZXMgOiBudWxsO1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPGRpdiBpZD1cImxlZnQtY29sdW1uXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJzZWFyY2hcIj5cbiAgICAgICAgICA8cnAtc2VsZWN0IFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJTZWFyY2hcIiBcbiAgICAgICAgICAgIGVuZHBvaW50PVwiJHt0aGlzLmdldEVuZHBvaW50KCl9Ym91bmRhcmllcy8ke3RoaXMucGF0aFswXS5vc21faWR9Lz9xPVwiXG4gICAgICAgICAgICAucmVuZGVyT3B0aW9uRGV0YWlsPSR7dGhpcy5yZW5kZXJPcHRpb25EZXRhaWx9XG4gICAgICAgICAgICBAcnAtc2VsZWN0aW9uPSR7dGhpcy5oYW5kbGVTZWFyY2hTZWxlY3Rpb24uYmluZCh0aGlzKX1cbiAgICAgICAgICA+PC9ycC1zZWxlY3Q+XG4gICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZlYXR1cmUtdHJlZVwiPlxuICAgICAgICAgICR7dGhpcy5yZW5kZXJGZWF0dXJlKHRoaXMucGF0aFswXSwgdGhpcy5wYXRoLnNsaWNlKDEpKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBpZD1cInJpZ2h0LWNvbHVtblwiPlxuICAgICAgICA8bGVhZmxldC1tYXAgXG4gICAgICAgICAgZW5kcG9pbnQ9JHt0aGlzLmdldEVuZHBvaW50KCl9XG4gICAgICAgICAgLmZlYXR1cmU9JHttYXBGZWF0dXJlfVxuICAgICAgICAgIC5vc21JZD0ke21hcEZlYXR1cmUub3NtX2lkfVxuICAgICAgICAgIC5ob3ZlcmVkPSR7dGhpcy5ob3ZlcmVkfVxuICAgICAgICAgIC5vbkZlYXR1cmVDbGlja2VkPSR7dGhpcy5oYW5kbGVNYXBDbGlja2VkLmJpbmQodGhpcyl9PlxuICAgICAgICA8L2xlYWZsZXQtbWFwPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxycC1kaWFsb2cgaWQ9XCJhbGlhcy1kaWFsb2dcIiBcbiAgICAgICAgdGl0bGU9XCJBbGlhc2VzIGZvciAke2VkaXRGZWF0dXJlTmFtZX1cIiBcbiAgICAgICAgcHJpbWFyeUJ1dHRvbk5hbWU9XCJTYXZlXCJcbiAgICAgICAgQHJwLWJ1dHRvbi1jbGlja2VkPSR7dGhpcy5oYW5kbGVEaWFsb2dDbGljay5iaW5kKHRoaXMpfT5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwic2VsZWN0ZWRcIj5cbiAgICAgICAgICA8dGV4dGFyZWEgaWQ9XCIke2VkaXRGZWF0dXJlSWR9XCIgLnZhbHVlPSR7ZWRpdEZlYXR1cmVBbGlhc2VzfT48L3RleHRhcmVhPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJoZWxwXCI+XG4gICAgICAgICAgICBFbnRlciBvdGhlciBhbGlhc2VzIGZvciAke2VkaXRGZWF0dXJlTmFtZX0sIG9uZSBwZXIgbGluZVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvcnAtZGlhbG9nPiAgICAgICAgICAgICBcblxuICAgIGA7XG4gIH1cbn0iLCJpbXBvcnQgeyBMaXRFbGVtZW50LCBUZW1wbGF0ZVJlc3VsdCwgaHRtbCwgY3NzLCBjdXN0b21FbGVtZW50LCBwcm9wZXJ0eSB9IGZyb20gJ2xpdC1lbGVtZW50JztcbmltcG9ydCB7IGdldENsYXNzZXMgfSBmcm9tICcuLi91dGlscyc7XG5cbkBjdXN0b21FbGVtZW50KFwicnAtYnV0dG9uXCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCdXR0b24gZXh0ZW5kcyBMaXRFbGVtZW50IHtcblxuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gY3NzYFxuICAgICAgLmJ1dHRvbiB7XG4gICAgICAgIGJhY2tncm91bmQ6IGJsdWU7XG4gICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgYm9yZGVyLXJhZGl1czogdmFyKC0tY3VydmF0dXJlKTtcbiAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgIH1cblxuICAgICAgLmJ1dHRvbjpmb2N1cyB7XG4gICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICAgIH1cblxuICAgICAgLmJ1dHRvbjpmb2N1cyAubWFza3tcbiAgICAgICAgYmFja2dyb3VuZDogcmdiKDAsMCwwLC4xKTtcbiAgICAgICAgYm94LXNoYWRvdzogMCAwIDBweCAycHggdmFyKC0tY29sb3ItYnV0dG9uLXByaW1hcnkpO1xuICAgICAgfVxuXG4gICAgICAuYnV0dG9uLnNlY29uZGFyeTpmb2N1cyAubWFza3tcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tY29sb3ItYnV0dG9uLXNlY29uZGFyeSk7XG4gICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgICAgICBib3gtc2hhZG93OiAwIDAgMHB4IDJweCB2YXIoLS1jb2xvci1idXR0b24tc2Vjb25kYXJ5KTtcbiAgICAgIH1cblxuICAgICAgLm1hc2sge1xuICAgICAgICBwYWRkaW5nOiA1cHggMTBweDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogdmFyKC0tY3VydmF0dXJlKTtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgIC5wcmltYXJ5IHtcbiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tY29sb3ItYnV0dG9uLXByaW1hcnkpO1xuICAgICAgICBjb2xvcjogdmFyKC0tY29sb3ItYnV0dG9uLXByaW1hcnktdGV4dCk7XG4gICAgICB9XG5cbiAgICAgIC5zZWNvbmRhcnkge1xuICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgICAgY29sb3I6IHZhcigtLWNvbG9yLWJ1dHRvbi1zZWNvbmRhcnkpO1xuICAgICAgfVxuXG4gICAgICAuc2Vjb25kYXJ5OmhvdmVyIC5tYXNre1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1jb2xvci1idXR0b24tc2Vjb25kYXJ5KTtcbiAgICAgIH1cblxuICAgICAgLmJ1dHRvbi5wcm9ncmVzc3tcbiAgICAgICAgYmFja2dyb3VuZDogI2RkZDtcbiAgICAgIH1cblxuICAgICAgLmJ1dHRvbi5wcm9ncmVzczpmb2N1cyAubWFzayB7XG4gICAgICAgIGJveC1zaGFkb3c6IDAgMCAwcHggMnB4IHZhcigtLWNvbG9yLWJ1dHRvbi1zZWNvbmRhcnkpO1xuICAgICAgfVxuXG4gICAgICAubWFzazpob3ZlciB7XG4gICAgICAgIGJhY2tncm91bmQ6IHJnYigwLDAsMCwuMSk7XG4gICAgICB9XG5cbiAgICAgIC5zZWNvbmRhcnkgLm1hc2s6aG92ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgIH1cblxuICBgO1xuICB9XG5cbiAgQHByb3BlcnR5KHt0eXBlOiBCb29sZWFufSlcbiAgcHJpbWFyeTogYm9vbGVhbjtcblxuICBAcHJvcGVydHkoe3R5cGU6IEJvb2xlYW59KVxuICBzZWNvbmRhcnk6IGJvb2xlYW47XG5cbiAgQHByb3BlcnR5KClcbiAgbmFtZTogc3RyaW5nO1xuXG4gIEBwcm9wZXJ0eSgpXG4gIGluUHJvZ2Vzc05hbWU6IHN0cmluZztcblxuICBAcHJvcGVydHkoe3R5cGU6IEJvb2xlYW59KVxuICBpc1Byb2dyZXNzOiBib29sZWFuO1xuXG4gIHB1YmxpYyBzZXRQcm9ncmVzcyhwcm9ncmVzczogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuaXNQcm9ncmVzcyA9IHByb2dyZXNzO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVLZXlVcChldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGlmIChldmVudC5rZXkgPT09IFwiRW50ZXJcIikge1xuICAgICAgdGhpcy5jbGljaygpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZW5kZXIoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJidXR0b24gXG4gICAgICAgICAgJHtnZXRDbGFzc2VzKHsgXG4gICAgICAgICAgXCJwcm9ncmVzc1wiOiB0aGlzLmlzUHJvZ3Jlc3MsXG4gICAgICAgICAgXCJwcmltYXJ5XCI6IHRoaXMucHJpbWFyeSxcbiAgICAgICAgICBcInNlY29uZGFyeVwiOiB0aGlzLnNlY29uZGFyeVxuICAgICAgICAgIH0pfVwiXG4gICAgICAgICAgdGFiaW5kZXg9XCIwXCJcbiAgICAgICAgICBAa2V5dXA9JHt0aGlzLmhhbmRsZUtleVVwfVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm1hc2tcIj5cbiAgICAgICAgICAgICR7dGhpcy5pc1Byb2dyZXNzID8gdGhpcy5pblByb2dlc3NOYW1lIHx8IHRoaXMubmFtZSA6IHRoaXMubmFtZX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICBgO1xuICB9XG59IiwiZXhwb3J0IGludGVyZmFjZSBGZWF0dXJlUHJvcGVydGllcyB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIG9zbV9pZDogc3RyaW5nO1xuICAgIGxldmVsOiBudW1iZXI7XG4gICAgY2hpbGRyZW4/OiBGZWF0dXJlUHJvcGVydGllc1tdO1xuICAgIGhhc19jaGlsZHJlbj86IGJvb2xlYW47XG4gICAgYWxpYXNlcz86IHN0cmluZztcbiAgICBwYXJlbnRfb3NtX2lkPzogc3RyaW5nO1xuICAgIGlkPzogbnVtYmVyO1xuICAgIHBhdGg/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBlbnVtIEN1c3RvbUV2ZW50VHlwZSB7XG4gICAgQ2FuY2VsZWQgPSAncnAtY2FuY2VsZWQnLFxuICAgIEN1cnNvckNoYW5nZWQgPSAncnAtY3Vyc29yLWNoYW5nZWQnLFxuICAgIFNlbGVjdGlvbiA9ICdycC1zZWxlY3Rpb24nLFxuICAgIEJ1dHRvbkNsaWNrZWQgPSAncnAtYnV0dG9uLWNsaWNrZWQnXG59IiwiaW1wb3J0IHsgTGl0RWxlbWVudCB9IGZyb20gJ2xpdC1lbGVtZW50JztcbmltcG9ydCB7IEN1c3RvbUV2ZW50VHlwZSB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXZlbnRIYW5kbGVyIHtcbiAgZXZlbnQ6IHN0cmluZztcbiAgbWV0aG9kOiBFdmVudExpc3RlbmVyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSYXBpZEVsZW1lbnQgZXh0ZW5kcyBMaXRFbGVtZW50IHtcblxuICBwdWJsaWMgZ2V0RXZlbnRIYW5kbGVycygpOiBFdmVudEhhbmRsZXJbXSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICBmb3IgKGNvbnN0IGhhbmRsZXIgb2YgdGhpcy5nZXRFdmVudEhhbmRsZXJzKCkpIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoaGFuZGxlci5ldmVudCwgaGFuZGxlci5tZXRob2QuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9XG5cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgZm9yIChjb25zdCBoYW5kbGVyIG9mIHRoaXMuZ2V0RXZlbnRIYW5kbGVycygpKSB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGhhbmRsZXIuZXZlbnQsIGhhbmRsZXIubWV0aG9kKTtcbiAgICB9XG4gICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgfVxuXG4gIHB1YmxpYyBmaXJlRXZlbnQodHlwZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCh0eXBlLCB7XG4gICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgY29tcG9zZWQ6IHRydWVcbiAgfSkpXG4gIH1cblxuICBwdWJsaWMgZmlyZUN1c3RvbUV2ZW50KHR5cGU6IEN1c3RvbUV2ZW50VHlwZSwgZGV0YWlsOiBhbnkgPSB7fSk6IHZvaWQge1xuICAgIGNvbnN0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KHR5cGUsIHtcbiAgICAgICAgZGV0YWlsLFxuICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICBjb21wb3NlZDogdHJ1ZVxuICAgIH0pO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gIH07XG59IiwiaW1wb3J0IHsgY3VzdG9tRWxlbWVudCwgcHJvcGVydHkgfSBmcm9tICdsaXQtZWxlbWVudC9saWIvZGVjb3JhdG9ycyc7XG5pbXBvcnQgeyBMaXRFbGVtZW50LCBUZW1wbGF0ZVJlc3VsdCwgaHRtbCwgY3NzIH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi9idXR0b24vQnV0dG9uJztcbmltcG9ydCBSYXBpZEVsZW1lbnQgZnJvbSAnLi4vUmFwaWRFbGVtZW50JztcbmltcG9ydCB7IEN1c3RvbUV2ZW50VHlwZSB9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuXG5AY3VzdG9tRWxlbWVudChcInJwLWRpYWxvZ1wiKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGlhbG9nIGV4dGVuZHMgUmFwaWRFbGVtZW50IHtcblxuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gY3NzYFxuXG4gICAgICAubWFzayB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIC41KTtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgIHRvcDowcHg7XG4gICAgICAgIGxlZnQ6MHB4O1xuICAgICAgICB0cmFuc2l0aW9uOiBhbGwgZWFzZS1pbiAyNTBtcztcbiAgICAgIH1cblxuICAgICAgLmRpYWxvZyB7XG4gICAgICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgICAgIHdpZHRoOiA1MDBweDtcbiAgICAgICAgbWFyZ2luOiAwcHggYXV0bzsgXG4gICAgICAgIHRvcDogLTIwMHB4O1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIHRyYW5zaXRpb246IHRvcCBlYXNlLWluLW91dCAyMDBtcztcbiAgICAgICAgYm9yZGVyLXJhZGl1czogdmFyKC0tY3VydmF0dXJlKTsgXG4gICAgICAgIGJveC1zaGFkb3c6IDBweCAwcHggMHB4IDRweCByZ2JhKDAsMCwwLC4wNCk7XG4gICAgICB9XG5cbiAgICAgIC5tYXNrLm9wZW4ge1xuICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xuICAgICAgfVxuXG4gICAgICAudGl0bGUge1xuICAgICAgICBwYWRkaW5nOiAxMHB4IDIwcHg7XG4gICAgICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICAgICAgY29sb3I6IHZhcigtLWNvbG9yLXRleHQtbGlnaHQpO1xuICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1jb2xvci1wcmltYXJ5LWRhcmspO1xuICAgICAgfVxuXG4gICAgICAuZm9vdGVyIHtcbiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tY29sb3ItcHJpbWFyeS1saWdodCk7XG4gICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZmxvdzogcm93LXJldmVyc2U7XG4gICAgICB9XG5cbiAgICAgIHJwLWJ1dHRvbiB7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiA1cHg7XG4gICAgICB9XG4gIGA7XG4gIH1cblxuXG4gIEBwcm9wZXJ0eSh7dHlwZSA6IEJvb2xlYW59KVxuICBvcGVuOiBib29sZWFuO1xuXG4gIEBwcm9wZXJ0eSgpXG4gIHRpdGxlOiBzdHJpbmc7XG5cbiAgQHByb3BlcnR5KClcbiAgYm9keTogc3RyaW5nO1xuXG4gIEBwcm9wZXJ0eSgpXG4gIHByaW1hcnlCdXR0b25OYW1lOiBzdHJpbmcgPSBcIk9rXCI7XG5cbiAgQHByb3BlcnR5KHt0eXBlOiBTdHJpbmd9KVxuICBjYW5jZWxCdXR0b25OYW1lOiBzdHJpbmcgPSBcIkNhbmNlbFwiO1xuXG4gIEBwcm9wZXJ0eSgpXG4gIGluUHJvZ3Jlc3NOYW1lOiBzdHJpbmcgPSBcIlNhdmluZ1wiO1xuXG4gIEBwcm9wZXJ0eSh7YXR0cmlidXRlOiBmYWxzZX0pXG4gIG9uQnV0dG9uQ2xpY2tlZDogKGJ1dHRvbjogQnV0dG9uKSA9PiB2b2lkO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZWQoY2hhbmdlZFByb3BlcnRpZXM6IE1hcDxzdHJpbmcsIGFueT4pIHtcbiAgICBpZiAoY2hhbmdlZFByb3BlcnRpZXMuaGFzKFwib3BlblwiKSkge1xuICAgICAgLy8gbWFrZSBzdXJlIG91ciBidXR0b25zIGFyZW4ndCBpbiBwcm9ncmVzcyBvbiBzaG93XG4gICAgICBpZiAodGhpcy5vcGVuKSB7XG4gICAgICAgIHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yQWxsKFwicnAtYnV0dG9uXCIpLmZvckVhY2goKGJ1dHRvbjogQnV0dG9uKT0+YnV0dG9uLnNldFByb2dyZXNzKGZhbHNlKSk7XG4gICAgICAgIGNvbnN0IGlucHV0cyA9IHRoaXMucXVlcnlTZWxlY3RvckFsbChcInRleHRhcmVhLGlucHV0XCIpO1xuICAgICAgICBpZiAoaW5wdXRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgICAgKGlucHV0c1swXSBhcyBhbnkpLmZvY3VzKCk7ICAgICAgICAgICAgXG4gICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBoYW5kbGVDbGljayhldnQ6IE1vdXNlRXZlbnQpIHtcbiAgICBjb25zdCBidXR0b24gPSBldnQuY3VycmVudFRhcmdldCBhcyBCdXR0b247XG4gICAgaWYgKCFidXR0b24uaXNQcm9ncmVzcykge1xuICAgICAgdGhpcy5maXJlQ3VzdG9tRXZlbnQoQ3VzdG9tRXZlbnRUeXBlLkJ1dHRvbkNsaWNrZWQsIHtidXR0b259KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldERvY3VtZW50SGVpZ2h0KCk6IG51bWJlciB7XG4gICAgY29uc3QgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gICAgY29uc3QgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICByZXR1cm4gTWF0aC5tYXgoYm9keS5zY3JvbGxIZWlnaHQsIGJvZHkub2Zmc2V0SGVpZ2h0LCBodG1sLmNsaWVudEhlaWdodCwgaHRtbC5zY3JvbGxIZWlnaHQsIGh0bWwub2Zmc2V0SGVpZ2h0KTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlS2V5VXAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBpZiAoZXZlbnQua2V5ID09PSBcIkVzY2FwZVwiKSB7XG4gICAgICAvLyBmaW5kIG91ciBjYW5jZWwgYnV0dG9uIGFuZCBjbGljayBpdFxuICAgICAgdGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3JBbGwoXCJycC1idXR0b25cIikuZm9yRWFjaChcbiAgICAgICAgKGJ1dHRvbjogQnV0dG9uKT0+eyBpZiAoYnV0dG9uLm5hbWUgPT09IHRoaXMuY2FuY2VsQnV0dG9uTmFtZSkge2J1dHRvbi5jbGljaygpfX1cbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcmVuZGVyKCk6IFRlbXBsYXRlUmVzdWx0IHtcblxuICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuZ2V0RG9jdW1lbnRIZWlnaHQoKTtcblxuICAgIHJldHVybiBodG1sYFxuICAgICAgICA8c3R5bGU+XG4gICAgICAgICAgLm1hc2sge1xuICAgICAgICAgICAgaGVpZ2h0OiAke2hlaWdodCArIDEwMH1weDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLm1hc2sub3BlbiA+IC5kaWFsb2cge1xuICAgICAgICAgICAgdG9wOiAxMDBweDtcbiAgICAgICAgICB9XG4gICAgICAgIDwvc3R5bGU+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtYXNrICR7dGhpcy5vcGVuID8gJ29wZW4nIDogJyd9XCI+XG4gICAgICAgICAgPGRpdiBAa2V5dXA9JHt0aGlzLmhhbmRsZUtleVVwfSBjbGFzcz1cImRpYWxvZ1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhlYWRlclwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGl0bGVcIj4ke3RoaXMudGl0bGV9PC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJib2R5XCIgQGtleXByZXNzPSR7dGhpcy5oYW5kbGVLZXlVcH0+JHt0aGlzLmJvZHkgPyB0aGlzLmJvZHkgOiBodG1sYDxzbG90Pjwvc2xvdD5gfTwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvb3RlclwiPlxuICAgICAgICAgICAgICA8cnAtYnV0dG9uIEBjbGljaz0ke3RoaXMuaGFuZGxlQ2xpY2t9IG5hbWU9JHt0aGlzLnByaW1hcnlCdXR0b25OYW1lfSBpblByb2dlc3NOYW1lPSR7dGhpcy5pblByb2dyZXNzTmFtZX0gcHJpbWFyeT59PC9ycC1idXR0b24+XG4gICAgICAgICAgICAgIDxycC1idXR0b24gQGNsaWNrPSR7dGhpcy5oYW5kbGVDbGlja30gbmFtZT0ke3RoaXMuY2FuY2VsQnV0dG9uTmFtZX0gc2Vjb25kYXJ5PjwvcnAtYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+ICAgICAgXG4gICAgICAgIDwvZGl2PlxuXG4gICAgYDtcbiAgfVxufSIsImltcG9ydCB7IGN1c3RvbUVsZW1lbnQsIFRlbXBsYXRlUmVzdWx0LCBodG1sLCBjc3MsIHByb3BlcnR5IH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuaW1wb3J0IFJhcGlkRWxlbWVudCBmcm9tICcuLi9SYXBpZEVsZW1lbnQnO1xuXG5AY3VzdG9tRWxlbWVudChcInJwLXRleHRpbnB1dFwiKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGV4dElucHV0IGV4dGVuZHMgUmFwaWRFbGVtZW50IHtcbiAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgcmV0dXJuIGNzc2BcbiAgICAgIFxuICAgICAgLmlucHV0LWNvbnRhaW5lciB7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1jb2xvci13aWRnZXQtYmcpO1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1jb2xvci13aWRnZXQtYm9yZGVyKTtcbiAgICAgICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICAgICAgdHJhbnNpdGlvbjogYWxsIGVhc2UtaW4tb3V0IDIwMG1zO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgICAgICBhbGlnbi1pdGVtczogc3RyZXRjaDtcbiAgICAgIH1cblxuICAgICAgLmlucHV0LWNvbnRhaW5lcjpmb2N1cy13aXRoaW4ge1xuICAgICAgICBib3JkZXItY29sb3I6IHZhcigtLWNvbG9yLXdpZGdldC1ib3JkZXIpO1xuICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1jb2xvci13aWRnZXQtYmctZm9jdXNlZCk7XG4gICAgICAgIGJveC1zaGFkb3c6IHZhcigtLWNvbG9yLXdpZGdldC1zaGFkb3ctZm9jdXNlZCkgMXB4IDFweCA2cHggMHB4IGluc2V0O1xuICAgICAgfVxuXG4gICAgICAuaW5wdXQtY29udGFpbmVyOmhvdmVyIHtcbiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tY29sb3Itd2lkZ2V0LWJnLWZvY3VzZWQpO1xuICAgICAgfVxuXG4gICAgICB0ZXh0YXJlYSB7XG4gICAgICAgIGhlaWdodDogODUlO1xuICAgICAgfVxuXG4gICAgICAudGV4dGlucHV0IHtcbiAgICAgICAgcGFkZGluZzogOHB4O1xuICAgICAgICBib3JkZXI6IDBweCBzb2xpZCByZWQ7XG4gICAgICAgIGZsZXg6IDE7XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgYmFja2dyb3VuZDogbm9uZTtcbiAgICAgICAgY29sb3I6IHZhcigtLWNvbG9yLXRleHQpO1xuICAgICAgICBmb250LXNpemU6IDEzcHg7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgcmVzaXplOiBub25lO1xuICAgICAgfVxuXG4gICAgICAudGV4dGlucHV0OmZvY3VzIHtcbiAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgY3Vyc29yOiB0ZXh0O1xuICAgICAgfVxuXG4gICAgICAudGV4dGlucHV0OjpwbGFjZWhvbGRlciB7XG4gICAgICAgIGNvbG9yOiByZ2JhKDAsMCwwLC4xNSk7XG4gICAgICB9XG5cbiAgICBgXG4gIH1cblxuICBAcHJvcGVydHkoe3R5cGU6IEJvb2xlYW59KVxuICB0ZXh0YXJlYTogYm9vbGVhbjtcblxuICBAcHJvcGVydHkoe3R5cGU6IFN0cmluZ30pXG4gIHBsYWNlaG9sZGVyOiBzdHJpbmcgPSBcIlwiO1xuXG4gIEBwcm9wZXJ0eSh7dHlwZTogU3RyaW5nfSlcbiAgdmFsdWU6IHN0cmluZyA9IFwiXCI7XG5cbiAgQHByb3BlcnR5KHt0eXBlOiBTdHJpbmd9KVxuICBuYW1lOiBzdHJpbmcgPSBcIlwiO1xuXG4gIEBwcm9wZXJ0eSh7dHlwZTogT2JqZWN0fSlcbiAgaW5wdXRFbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50O1xuXG4gIHB1YmxpYyBmaXJzdFVwZGF0ZWQoY2hhbmdlczogTWFwPHN0cmluZywgYW55Pikge1xuICAgIHN1cGVyLmZpcnN0VXBkYXRlZChjaGFuZ2VzKTtcbiAgICB0aGlzLmlucHV0RWxlbWVudCA9IHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKFwiLnRleHRpbnB1dFwiKTtcbiAgfVxuXG4gIHB1YmxpYyByZW5kZXIoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgIHJldHVybiBodG1sYFxuICAgIDxzdHlsZT5cbiAgICAgIC5pbnB1dC1jb250YWluZXIge1xuICAgICAgICBoZWlnaHQ6ICR7dGhpcy50ZXh0YXJlYSA/ICcxMDAlJyA6ICdhdXRvJ307XG4gICAgICB9XG4gICAgPC9zdHlsZT5cbiAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtY29udGFpbmVyXCIgQGNsaWNrPSR7KCk9PnsgKHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKFwiLnRleHRpbnB1dFwiKSBhcyBIVE1MSW5wdXRFbGVtZW50KS5mb2N1cygpfX0+XG4gICAgICAke3RoaXMudGV4dGFyZWEgPyBodG1sYFxuICAgICAgICA8dGV4dGFyZWEgY2xhc3M9XCJ0ZXh0aW5wdXRcIiBcbiAgICAgICAgICBuYW1lPSR7dGhpcy5uYW1lfVxuICAgICAgICAgIHBsYWNlaG9sZGVyPSR7dGhpcy5wbGFjZWhvbGRlcn1cbiAgICAgICAgICAudmFsdWU9JHt0aGlzLnZhbHVlfT5cbiAgICAgICAgPC90ZXh0YXJlYT5cbiAgICAgIGAgOiBodG1sYFxuICAgICAgICA8aW5wdXQgY2xhc3M9XCJ0ZXh0aW5wdXRcIiBcbiAgICAgICAgICBuYW1lPSR7dGhpcy5uYW1lfVxuICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICBwbGFjZWhvbGRlcj0ke3RoaXMucGxhY2Vob2xkZXJ9XG4gICAgICAgICAgLnZhbHVlPSR7dGhpcy52YWx1ZX0+XG4gICAgICBgfVxuICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cbn1cbiIsImltcG9ydCB7IExpdEVsZW1lbnQsIFRlbXBsYXRlUmVzdWx0LCBodG1sLCBjc3MsIGN1c3RvbUVsZW1lbnQsIHByb3BlcnR5IH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuaW1wb3J0IHsgZ2V0Q2xhc3NlcyB9IGZyb20gJy4uL3V0aWxzJztcblxuXG5AY3VzdG9tRWxlbWVudChcInJwLWxhYmVsXCIpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMYWJlbCBleHRlbmRzIExpdEVsZW1lbnQge1xuXG4gIHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgIHJldHVybiBjc3NgXG5cbiAgICAgIDpob3N0IHtcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgfVxuXG4gICAgICAubWFzayB7XG4gICAgICAgIHBhZGRpbmc6IDNweCA2cHg7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLWN1cnZhdHVyZSk7XG4gICAgICB9XG5cbiAgICAgIC5sYWJlbC5jbGlja2FibGUgLm1hc2s6aG92ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kOiByZ2IoMCwwLDAsLjA1KTtcbiAgICAgIH1cblxuICAgICAgLmxhYmVsIHtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMnB4O1xuICAgICAgICBmb250LXNpemU6IDgwJTtcbiAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogdmFyKC0tY3VydmF0dXJlKTtcbiAgICAgICAgYmFja2dyb3VuZDogdG9tYXRvO1xuICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgdGV4dC1zaGFkb3c6IDAgMC4wNGVtIDAuMDRlbSByZ2JhKDAsMCwwLDAuMzUpO1xuICAgICAgfVxuXG4gICAgICAucHJpbWFyeSB7XG4gICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWNvbG9yLWxhYmVsLXByaW1hcnkpO1xuICAgICAgICBjb2xvcjogdmFyKC0tY29sb3ItbGFiZWwtcHJpbWFyeS10ZXh0KTtcbiAgICAgIH1cblxuICAgICAgLnNlY29uZGFyeSB7XG4gICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWNvbG9yLWxhYmVsLXNlY29uZGFyeSk7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1jb2xvci1sYWJlbC1zZWNvbmRhcnktdGV4dCk7XG4gICAgICAgIHRleHQtc2hhZG93OiBub25lO1xuICAgICAgfVxuXG4gICAgICAubGlnaHQge1xuICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1jb2xvci1vdmVybGF5LWxpZ2h0KTtcbiAgICAgICAgY29sb3I6IHZhcigtLWNvbG9yLW92ZXJsYXktbGlnaHQtdGV4dCk7XG4gICAgICAgIHRleHQtc2hhZG93OiBub25lO1xuICAgICAgfVxuXG4gICAgICAuZGFyayB7XG4gICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWNvbG9yLW92ZXJsYXktZGFyayk7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1jb2xvci1vdmVybGF5LWRhcmstdGV4dCk7XG4gICAgICAgIHRleHQtc2hhZG93OiBub25lO1xuICAgICAgfVxuXG4gICAgICAuY2xpY2thYmxlIHtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgfVxuICBgO1xuICB9XG5cbiAgQHByb3BlcnR5KHt0eXBlOiBCb29sZWFufSlcbiAgY2xpY2thYmxlOiBib29sZWFuO1xuICBcbiAgQHByb3BlcnR5KHt0eXBlOiBCb29sZWFufSlcbiAgcHJpbWFyeTogYm9vbGVhbjtcblxuICBAcHJvcGVydHkoe3R5cGU6IEJvb2xlYW59KVxuICBzZWNvbmRhcnk6IGJvb2xlYW47XG5cbiAgQHByb3BlcnR5KHt0eXBlOiBCb29sZWFufSlcbiAgbGlnaHQ6IGJvb2xlYW47XG5cbiAgQHByb3BlcnR5KHt0eXBlOiBCb29sZWFufSlcbiAgZGFyazogYm9vbGVhbjtcblxuICBAcHJvcGVydHkoKVxuICBiYWNrZ3JvdW5kQ29sb3I6IHN0cmluZztcblxuICBAcHJvcGVydHkoKVxuICB0ZXh0Q29sb3I6IHN0cmluZztcblxuICBwdWJsaWMgcmVuZGVyKCk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgICR7dGhpcy5iYWNrZ3JvdW5kQ29sb3IgJiYgdGhpcy50ZXh0Q29sb3IgPyBodG1sYFxuICAgICAgICA8c3R5bGU+XG4gICAgICAgICAgLmxhYmVsIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7dGhpcy5iYWNrZ3JvdW5kQ29sb3J9O1xuICAgICAgICAgICAgY29sb3I6ICR7dGhpcy50ZXh0Q29sb3J9O1xuICAgICAgICAgIH1cbiAgICAgICAgPC9zdHlsZT5cbiAgICAgIGA6IG51bGx9XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJsYWJlbCAke2dldENsYXNzZXMoeyBcbiAgICAgICAgXCJjbGlja2FibGVcIjogdGhpcy5jbGlja2FibGUsXG4gICAgICAgIFwicHJpbWFyeVwiOiB0aGlzLnByaW1hcnksXG4gICAgICAgIFwic2Vjb25kYXJ5XCI6IHRoaXMuc2Vjb25kYXJ5LFxuICAgICAgICBcImxpZ2h0XCI6IHRoaXMubGlnaHQsXG4gICAgICAgIFwiZGFya1wiOiB0aGlzLmRhcmtcbiAgICAgICAgfSl9XCJcbiAgICAgICA+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtYXNrXCI+XG4gICAgICAgICAgPHNsb3Q+PC9zbG90PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cbn0iLCJpbXBvcnQgeyBjdXN0b21FbGVtZW50LCBUZW1wbGF0ZVJlc3VsdCwgaHRtbCwgcHJvcGVydHksIGNzcyB9IGZyb20gJ2xpdC1lbGVtZW50JztcbmltcG9ydCB7IEN1c3RvbUV2ZW50VHlwZSB9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IFJhcGlkRWxlbWVudCwgeyBFdmVudEhhbmRsZXIgfSBmcm9tICcuLi9SYXBpZEVsZW1lbnQnO1xuXG5AY3VzdG9tRWxlbWVudChcInJwLW9wdGlvbnNcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wdGlvbnMgZXh0ZW5kcyBSYXBpZEVsZW1lbnQge1xuXG4gIHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgIHJldHVybiBjc3NgXG4gICAgICAuY29udGFpbmVyIHtcbiAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLWN1cnZhdHVyZSk7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWNvbG9yLWJvcmRlcnMpO1xuICAgICAgICBib3gtc2hhZG93OiAwcHggMHB4IDNweCAxcHggcmdiYSgwLDAsMCwuMDYpO1xuICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgICAgICB6LWluZGV4OiAxO1xuICAgICAgfVxuXG4gICAgICAub3B0aW9ucyB7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLWN1cnZhdHVyZSk7XG4gICAgICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgICAgIG92ZXJmbG93LXk6IHNjcm9sbDtcbiAgICAgICAgbWF4LWhlaWdodDogMjI1cHg7XG4gICAgICB9XG5cbiAgICAgIC5zaG93IHtcbiAgICAgICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcbiAgICAgIH1cblxuICAgICAgLm9wdGlvbiB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgcGFkZGluZzogMTBweCAyMHB4O1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICAgIG1hcmdpbjogNXB4O1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1jb2xvci10ZXh0KTtcbiAgICAgIH1cblxuICAgICAgLm9wdGlvbi5mb2N1c2VkIHtcbiAgICAgICAgYmFja2dyb3VuZDogcmdiYSh2YXIoLS1wcmltYXJ5LXJnYiksIC44KTtcbiAgICAgICAgY29sb3I6IHZhcigtLWNvbG9yLXRleHQtbGlnaHQpO1xuICAgICAgfVxuXG4gICAgICAub3B0aW9uIC5kZXRhaWwge1xuICAgICAgICBmb250LXNpemU6IDg1JTtcbiAgICAgICAgY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsLjkpO1xuICAgICAgfVxuXG4gICAgICBjb2RlIHtcbiAgICAgICAgYmFja2dyb3VuZDogcmdiYSgwLDAsMCwuMTUpO1xuICAgICAgICBwYWRkaW5nOiAxcHggNXB4O1xuICAgICAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1jdXJ2YXR1cmUpO1xuICAgICAgfVxuICAgIGBcbiAgfVxuXG4gIEBwcm9wZXJ0eSh7dHlwZTogTnVtYmVyfSlcbiAgdG9wOiBudW1iZXI7XG5cbiAgQHByb3BlcnR5KHt0eXBlOiBOdW1iZXJ9KVxuICBsZWZ0OiBudW1iZXI7XG5cbiAgQHByb3BlcnR5KHt0eXBlOiBOdW1iZXJ9KVxuICB3aWR0aDogbnVtYmVyO1xuXG4gIEBwcm9wZXJ0eSh7dHlwZTogT2JqZWN0fSlcbiAgYW5jaG9yVG86IEhUTUxFbGVtZW50XG5cbiAgQHByb3BlcnR5KHt0eXBlOiBCb29sZWFufSlcbiAgdmlzaWJsZTogYm9vbGVhbjtcblxuICBAcHJvcGVydHkoe3R5cGU6IE51bWJlcn0pXG4gIGN1cnNvckluZGV4OiBudW1iZXIgPSAwO1xuXG4gIEBwcm9wZXJ0eSh7dHlwZTogQXJyYXl9KVxuICBvcHRpb25zOiBhbnlbXVxuXG4gIEBwcm9wZXJ0eSh7YXR0cmlidXRlOiBmYWxzZX0pXG4gIHJlbmRlck9wdGlvbjogKG9wdGlvbjogYW55LCBzZWxlY3RlZDogYm9vbGVhbikgPT4gdm9pZDtcblxuICBAcHJvcGVydHkoe2F0dHJpYnV0ZTogZmFsc2V9KVxuICByZW5kZXJPcHRpb25OYW1lOiAob3B0aW9uOiBhbnksIHNlbGVjdGVkOiBib29sZWFuKSA9PiB2b2lkO1xuXG4gIEBwcm9wZXJ0eSh7YXR0cmlidXRlOiBmYWxzZX0pXG4gIHJlbmRlck9wdGlvbkRldGFpbDogKG9wdGlvbjogYW55LCBzZWxlY3RlZDogYm9vbGVhbikgPT4gdm9pZDtcblxuICBwdWJsaWMgdXBkYXRlZChjaGFuZ2VkUHJvcGVydGllczogTWFwPHN0cmluZywgYW55Pikge1xuICAgIHN1cGVyLnVwZGF0ZWQoY2hhbmdlZFByb3BlcnRpZXMpO1xuXG4gICAgLy8gaWYgb3VyIGN1cnNvciBjaGFuZ2VkLCBsZXRzIG1ha2Ugc3VyZSBvdXIgc2Nyb2xsYm94IGlzIHNob3dpbmcgaXRcbiAgICBpZihjaGFuZ2VkUHJvcGVydGllcy5oYXMoXCJjdXJzb3JJbmRleFwiKSkge1xuICAgICAgY29uc3QgZm9jdXNlZEVsZSA9IHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKFwiLmZvY3VzZWRcIikgYXMgSFRNTERpdkVsZW1lbnQ7XG4gICAgICBpZiAoZm9jdXNlZEVsZSkge1xuICAgICAgICBjb25zdCBzY3JvbGxCb3ggPSAgdGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoXCIub3B0aW9uc1wiKTtcbiAgICAgICAgY29uc3Qgc2Nyb2xsQm94UmVjdCA9IHNjcm9sbEJveC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgY29uc3Qgc2Nyb2xsQm94SGVpZ2h0ID0gc2Nyb2xsQm94UmVjdC5oZWlnaHRcbiAgICAgICAgY29uc3QgZm9jdXNlZEVsZUhlaWdodCA9IGZvY3VzZWRFbGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuXG4gICAgICAgIGlmIChmb2N1c2VkRWxlLm9mZnNldFRvcCArIGZvY3VzZWRFbGVIZWlnaHQgPiBzY3JvbGxCb3guc2Nyb2xsVG9wICsgc2Nyb2xsQm94SGVpZ2h0IC0gNSkge1xuICAgICAgICAgIGNvbnN0IHNjcm9sbFRvID0gZm9jdXNlZEVsZS5vZmZzZXRUb3AgLSBzY3JvbGxCb3hIZWlnaHQgKyBmb2N1c2VkRWxlSGVpZ2h0ICsgNTtcbiAgICAgICAgICBzY3JvbGxCb3guc2Nyb2xsVG9wID0gc2Nyb2xsVG87XG4gICAgICAgIH0gZWxzZSBpZiAoZm9jdXNlZEVsZS5vZmZzZXRUb3AgPCBzY3JvbGxCb3guc2Nyb2xsVG9wKSB7XG4gICAgICAgICAgY29uc3Qgc2Nyb2xsVG8gPSBmb2N1c2VkRWxlLm9mZnNldFRvcCAtIDU7XG4gICAgICAgICAgc2Nyb2xsQm94LnNjcm9sbFRvcCA9IHNjcm9sbFRvO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYoY2hhbmdlZFByb3BlcnRpZXMuaGFzKFwib3B0aW9uc1wiKSkge1xuICAgICAgdGhpcy5jYWxjdWxhdGVQb3NpdGlvbigpO1xuICAgICAgdGhpcy5jdXJzb3JJbmRleCA9IDA7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZW5kZXJPcHRpb25EZWZhdWx0KG9wdGlvbjogYW55LCBzZWxlY3RlZDogYm9vbGVhbik6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICBjb25zdCByZW5kZXJPcHRpb25OYW1lID0gKHRoaXMucmVuZGVyT3B0aW9uTmFtZSB8fCB0aGlzLnJlbmRlck9wdGlvbk5hbWVEZWZhdWx0KTtcbiAgICBjb25zdCByZW5kZXJPcHRpb25EZXRhaWwgPSAodGhpcy5yZW5kZXJPcHRpb25EZXRhaWwgfHwgdGhpcy5yZW5kZXJPcHRpb25EZXRhaWxEZWZhdWx0KTtcbiAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgIHJldHVybiBodG1sYDxkaXYgY2xhc3M9XCJuYW1lXCI+JHtyZW5kZXJPcHRpb25OYW1lKG9wdGlvbiwgc2VsZWN0ZWQpfTwvZGl2PjxkaXYgY2xhc3M9XCJkZXRhaWxcIj4ke3JlbmRlck9wdGlvbkRldGFpbChvcHRpb24sIHNlbGVjdGVkKX08L2Rpdj5gO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaHRtbGA8ZGl2IGNsYXNzPVwibmFtZVwiPiR7cmVuZGVyT3B0aW9uTmFtZShvcHRpb24sIHNlbGVjdGVkKX08L2Rpdj5gO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyT3B0aW9uTmFtZURlZmF1bHQob3B0aW9uOiBhbnksIHNlbGVjdGVkOiBib29sZWFuKTogVGVtcGxhdGVSZXN1bHQge1xuICAgIHJldHVybiBodG1sYCR7b3B0aW9uLm5hbWV9YFxuICB9XG5cbiAgcHJpdmF0ZSByZW5kZXJPcHRpb25EZXRhaWxEZWZhdWx0KG9wdGlvbjogYW55LCBzZWxlY3RlZDogYm9vbGVhbik6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICByZXR1cm4gaHRtbGAke29wdGlvbi5kZXRhaWx9YFxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVTZWxlY3Rpb24odGFiYmVkOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICBjb25zdCBzZWxlY3RlZCA9IHRoaXMub3B0aW9uc1t0aGlzLmN1cnNvckluZGV4XTtcbiAgICB0aGlzLmZpcmVDdXN0b21FdmVudChDdXN0b21FdmVudFR5cGUuU2VsZWN0aW9uLCB7IHNlbGVjdGVkLCB0YWJiZWQgfSk7XG4gIH1cblxuICBwcml2YXRlIG1vdmVDdXJzb3IoZGlyZWN0aW9uOiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBuZXdJbmRleCA9IE1hdGgubWF4KE1hdGgubWluKHRoaXMuY3Vyc29ySW5kZXggKyBkaXJlY3Rpb24sIHRoaXMub3B0aW9ucy5sZW5ndGggLSAxKSwgMCk7XG4gICAgdGhpcy5zZXRDdXJzb3IobmV3SW5kZXgpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRDdXJzb3IobmV3SW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIGlmIChuZXdJbmRleCAhPT0gdGhpcy5jdXJzb3JJbmRleCl7XG4gICAgICB0aGlzLmN1cnNvckluZGV4ID0gbmV3SW5kZXg7XG4gICAgICB0aGlzLmZpcmVDdXN0b21FdmVudChDdXN0b21FdmVudFR5cGUuQ3Vyc29yQ2hhbmdlZCwgeyBpbmRleDogbmV3SW5kZXggfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVLZXlEb3duKGV2dDogS2V5Ym9hcmRFdmVudCkge1xuICAgIGlmICh0aGlzLnZpc2libGUpIHtcbiAgICAgIGlmICgoZXZ0LmN0cmxLZXkgJiYgZXZ0LmtleSA9PT0gXCJuXCIpIHx8IGV2dC5rZXkgPT09IFwiQXJyb3dEb3duXCIpIHtcbiAgICAgICAgdGhpcy5tb3ZlQ3Vyc29yKDEpO1xuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0gZWxzZSBpZiAoKGV2dC5jdHJsS2V5ICYmIGV2dC5rZXkgPT09IFwicFwiKSB8fCBldnQua2V5ID09PSBcIkFycm93VXBcIikge1xuICAgICAgICB0aGlzLm1vdmVDdXJzb3IoLTEpO1xuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0gZWxzZSBpZiAoZXZ0LmtleSA9PT0gXCJFbnRlclwiIHx8IGV2dC5rZXkgPT09IFwiVGFiXCIpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVTZWxlY3Rpb24oZXZ0LmtleSA9PT0gXCJUYWJcIik7XG4gICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuXG4gICAgICBpZihldnQua2V5ID09PSBcIkVzY2FwZVwiKSB7XG4gICAgICAgIHRoaXMuZmlyZUN1c3RvbUV2ZW50KEN1c3RvbUV2ZW50VHlwZS5DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjYWxjdWxhdGVQb3NpdGlvbigpIHtcbiAgICBjb25zdCBvcHRpb25zQm91bmRzID0gdGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJy5jb250YWluZXInKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBpZiAodGhpcy5hbmNob3JUbykge1xuICAgICAgY29uc3QgYW5jaG9yQm91bmRzID0gdGhpcy5hbmNob3JUby5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsgICBcbiAgICAgIGNvbnN0IHRvcFRvcCA9IGFuY2hvckJvdW5kcy50b3AgLSBvcHRpb25zQm91bmRzLmhlaWdodDtcblxuICAgICAgaWYgKHRvcFRvcCA+IDAgJiYgYW5jaG9yQm91bmRzLmJvdHRvbSArIG9wdGlvbnNCb3VuZHMuaGVpZ2h0ID4gd2luZG93LmlubmVySGVpZ2h0KSB7XG4gICAgICAgIHRoaXMudG9wID0gdG9wVG9wOyAvLyAgKyB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRvcCA9IGFuY2hvckJvdW5kcy5ib3R0b207IC8vICArIHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sZWZ0ID0gYW5jaG9yQm91bmRzLmxlZnQ7XG4gICAgICB0aGlzLndpZHRoID0gYW5jaG9yQm91bmRzLndpZHRoO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXRFdmVudEhhbmRsZXJzKCk6IEV2ZW50SGFuZGxlcltdIHtcbiAgICByZXR1cm4gW1xuICAgICAgeyBldmVudDogJ2tleWRvd24nLCBtZXRob2Q6IHRoaXMuaGFuZGxlS2V5RG93biB9LFxuICAgICAgeyBldmVudDogJ3Njcm9sbCcsIG1ldGhvZDogdGhpcy5jYWxjdWxhdGVQb3NpdGlvbiB9XG4gICAgXVxuICB9XG5cbiAgcHVibGljIHJlbmRlcigpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgY29uc3QgcmVuZGVyT3B0aW9uID0gKHRoaXMucmVuZGVyT3B0aW9uIHx8IHRoaXMucmVuZGVyT3B0aW9uRGVmYXVsdCkuYmluZCh0aGlzKTtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgIDxzdHlsZT5cbiAgICAgICAgLmNvbnRhaW5lciB7XG4gICAgICAgICAgdG9wOiAke3RoaXMudG9wfXB4O1xuICAgICAgICAgIGxlZnQ6ICR7dGhpcy5sZWZ0fXB4O1xuICAgICAgICAgIHdpZHRoOiAke3RoaXMud2lkdGh9cHg7XG4gICAgICAgIH1cblxuICAgICAgICAub3B0aW9ucyB7XG4gICAgICAgICAgd2lkdGg6ICR7dGhpcy53aWR0aH1weDtcbiAgICAgICAgfVxuICAgICAgPC9zdHlsZT5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXIgJHt0aGlzLnZpc2libGUgPyBcInNob3dcIjogXCJcIn1cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm9wdGlvbnNcIj5cbiAgICAgICAgICAke3RoaXMub3B0aW9ucy5tYXAoKG9wdGlvbjogYW55LCBpbmRleDogbnVtYmVyKT0+aHRtbGBcbiAgICAgICAgICAgIDxkaXYgXG4gICAgICAgICAgICAgIEBtb3VzZW92ZXI9JHsoZXZ0OiBNb3VzZUV2ZW50KT0+e1xuICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKGV2dC5tb3ZlbWVudFgpICsgTWF0aC5hYnMoZXZ0Lm1vdmVtZW50WSkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q3Vyc29yKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgQGNsaWNrPSR7KCk9Pnt0aGlzLmhhbmRsZVNlbGVjdGlvbigpO319XG4gICAgICAgICAgICAgIGNsYXNzPVwib3B0aW9uICR7aW5kZXggPT0gdGhpcy5jdXJzb3JJbmRleCA/ICdmb2N1c2VkJyA6ICcnfVwiPlxuICAgICAgICAgICAgICAgICR7cmVuZGVyT3B0aW9uKG9wdGlvbiwgaW5kZXggPT0gdGhpcy5jdXJzb3JJbmRleCl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICBgKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICAgIDwvZGl2PlxuICAgICAgYDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY3VzdG9tRWxlbWVudCwgVGVtcGxhdGVSZXN1bHQsIGh0bWwsIGNzcywgcHJvcGVydHkgfSBmcm9tICdsaXQtZWxlbWVudCc7XG5pbXBvcnQgeyBnZXRVcmwgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgYXhpb3MsIHsgQXhpb3NSZXNwb25zZSwgQ2FuY2VsVG9rZW5Tb3VyY2UgfSBmcm9tICdheGlvcyc7XG5pbXBvcnQgJy4uL29wdGlvbnMvT3B0aW9ucyc7XG5pbXBvcnQgUmFwaWRFbGVtZW50LCB7IEV2ZW50SGFuZGxlciB9IGZyb20gJy4uL1JhcGlkRWxlbWVudCc7XG5pbXBvcnQgeyBDdXN0b21FdmVudFR5cGUgfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSAnLi4vdGV4dGlucHV0L1RleHRJbnB1dCc7XG5cbmNvbnN0IExPT0tfQUhFQUQgPSAyMDtcblxuQGN1c3RvbUVsZW1lbnQoXCJycC1zZWxlY3RcIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbGVjdCBleHRlbmRzIFJhcGlkRWxlbWVudCB7XG5cbiAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgcmV0dXJuIGNzc2BcbiAgICAgIDpob3N0IHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgIH1cbiAgICBgXG4gIH1cblxuICBAcHJvcGVydHkoe3R5cGU6IEFycmF5fSlcbiAgc2VsZWN0ZWQ6IGFueVtdID0gW107XG5cbiAgQHByb3BlcnR5KClcbiAgcGxhY2Vob2xkZXI6IHN0cmluZyA9ICcnO1xuXG4gIEBwcm9wZXJ0eSgpXG4gIGVuZHBvaW50OiBzdHJpbmc7XG5cbiAgQHByb3BlcnR5KHt0eXBlOiBTdHJpbmd9KVxuICBpbnB1dDogc3RyaW5nID0gJyc7XG5cbiAgQHByb3BlcnR5KHt0eXBlOiBBcnJheX0pXG4gIG9wdGlvbnM6IGFueVtdID0gW107XG5cbiAgQHByb3BlcnR5KHt0eXBlOiBOdW1iZXJ9KVxuICBxdWlldE1pbGxpczogbnVtYmVyID0gMjAwO1xuXG4gIEBwcm9wZXJ0eSh7dHlwZTogQm9vbGVhbn0pXG4gIGZldGNoaW5nOiBib29sZWFuO1xuXG4gIEBwcm9wZXJ0eSh7YXR0cmlidXRlOiBmYWxzZX0pXG4gIGN1cnNvckluZGV4OiBudW1iZXI7XG5cbiAgQHByb3BlcnR5KHthdHRyaWJ1dGU6IGZhbHNlfSlcbiAgYW5jaG9yRWxlbWVudDogSFRNTEVsZW1lbnQ7XG5cbiAgQHByb3BlcnR5KHthdHRyaWJ1dGU6IGZhbHNlfSlcbiAgcmVuZGVyT3B0aW9uOiAob3B0aW9uOiBhbnksIHNlbGVjdGVkOiBib29sZWFuKSA9PiB2b2lkO1xuXG4gIEBwcm9wZXJ0eSh7YXR0cmlidXRlOiBmYWxzZX0pXG4gIHJlbmRlck9wdGlvbk5hbWU6IChvcHRpb246IGFueSwgc2VsZWN0ZWQ6IGJvb2xlYW4pID0+IHZvaWQ7XG5cbiAgQHByb3BlcnR5KHthdHRyaWJ1dGU6IGZhbHNlfSlcbiAgcmVuZGVyT3B0aW9uRGV0YWlsOiAob3B0aW9uOiBhbnksIHNlbGVjdGVkOiBib29sZWFuKSA9PiB2b2lkID0gKCk9Pnt9O1xuXG4gIHByaXZhdGUgbGFzdFF1ZXJ5OiBudW1iZXI7XG4gIHByaXZhdGUgY2FuY2VsVG9rZW46IENhbmNlbFRva2VuU291cmNlO1xuICBwcml2YXRlIGNvbXBsZXRlOiBib29sZWFuO1xuICBwcml2YXRlIHBhZ2U6IG51bWJlcjtcbiAgcHJpdmF0ZSBxdWVyeTogc3RyaW5nO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZWQoY2hhbmdlZFByb3BlcnRpZXM6IE1hcDxzdHJpbmcsIGFueT4pIHtcbiAgICBzdXBlci51cGRhdGVkKGNoYW5nZWRQcm9wZXJ0aWVzKTtcbiAgICBpZiAoY2hhbmdlZFByb3BlcnRpZXMuaGFzKFwic2VsZWN0ZWRcIikpIHtcbiAgICAgIHRoaXMuaW5wdXQgPSBcIlwiO1xuICAgICAgdGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFwiKS5ibHVyKCk7XG4gICAgfVxuICAgIFxuICAgIGlmIChjaGFuZ2VkUHJvcGVydGllcy5oYXMoXCJpbnB1dFwiKSAmJiAhY2hhbmdlZFByb3BlcnRpZXMuaGFzKFwic2VsZWN0ZWRcIikpIHtcbiAgICAgIGlmICghdGhpcy5pbnB1dCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBbXTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5sYXN0UXVlcnkpIHtcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLmxhc3RRdWVyeSk7XG4gICAgICB9XG4gICAgICB0aGlzLmxhc3RRdWVyeSA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpPT57XG4gICAgICAgIHRoaXMuZmV0Y2hPcHRpb25zKHRoaXMuaW5wdXQpO1xuICAgICAgfSwgdGhpcy5xdWlldE1pbGxpcyk7XG4gICAgfVxuXG4gICAgICAgLy8gaWYgb3VyIGN1cnNvciBjaGFuZ2VkLCBsZXRzIG1ha2Ugc3VyZSBvdXIgc2Nyb2xsYm94IGlzIHNob3dpbmcgaXRcbiAgICBpZihjaGFuZ2VkUHJvcGVydGllcy5oYXMoXCJjdXJzb3JJbmRleFwiKSkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5sZW5ndGggPiAwICYmIFxuICAgICAgICAgIHRoaXMucXVlcnkgJiYgXG4gICAgICAgICAgIXRoaXMuY29tcGxldGUgJiYgXG4gICAgICAgICAgdGhpcy5jdXJzb3JJbmRleCA+IHRoaXMub3B0aW9ucy5sZW5ndGggLSBMT09LX0FIRUFEKSB7XG4gICAgICAgIHRoaXMuZmV0Y2hPcHRpb25zKHRoaXMucXVlcnksIHRoaXMucGFnZSArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlT3B0aW9uU2VsZWN0aW9uKGV2ZW50OiBDdXN0b21FdmVudCkge1xuICAgIGNvbnN0IHNlbGVjdGVkID0gZXZlbnQuZGV0YWlsLnNlbGVjdGVkO1xuICAgIHRoaXMuc2VsZWN0ZWQgPSBbc2VsZWN0ZWRdO1xuICAgIHRoaXMub3B0aW9ucyA9IFtdO1xuICAgIHRoaXMuaW5wdXQgPSBzZWxlY3RlZC5uYW1lO1xuIH1cblxuICBwdWJsaWMgZmV0Y2hPcHRpb25zKHF1ZXJ5OiBzdHJpbmcsIHBhZ2U6IG51bWJlciA9IDApIHtcbiAgICBcbiAgICBpZiAoIXRoaXMuZmV0Y2hpbmcpIHtcbiAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBjYW5jZWwgYW55IHByZXZpb3VzIHJlcXVlc3RcbiAgICAgIGlmICh0aGlzLmNhbmNlbFRva2VuKSB7XG4gICAgICAgIHRoaXMuY2FuY2VsVG9rZW4uY2FuY2VsKCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IENhbmNlbFRva2VuID0gYXhpb3MuQ2FuY2VsVG9rZW47XG4gICAgICB0aGlzLmNhbmNlbFRva2VuID0gQ2FuY2VsVG9rZW4uc291cmNlKCk7XG5cbiAgICAgIHRoaXMuZmV0Y2hpbmcgPSB0cnVlO1xuICAgICAgZ2V0VXJsKHRoaXMuZW5kcG9pbnQgKyBlbmNvZGVVUklDb21wb25lbnQocXVlcnkpICsgXCImcGFnZT1cIiArIHBhZ2UsIHRoaXMuY2FuY2VsVG9rZW4udG9rZW4pLnRoZW4oKHJlc3BvbnNlOiBBeGlvc1Jlc3BvbnNlKSA9PiB7XG4gICAgICAgIGlmIChwYWdlID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zID0gcmVzcG9uc2UuZGF0YS5maWx0ZXIoKG9wdGlvbjogYW55KSA9PiBvcHRpb24ubGV2ZWwgPiAwKTtcbiAgICAgICAgICB0aGlzLmN1cnNvckluZGV4ID0gMDtcbiAgICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZSA9IHRoaXMub3B0aW9ucy5sZW5ndGggPT09IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgbmV3UmVzdWx0cyA9IHJlc3BvbnNlLmRhdGEuZmlsdGVyKChvcHRpb246IGFueSkgPT4gb3B0aW9uLmxldmVsID4gMCk7XG4gICAgICAgICAgaWYgKG5ld1Jlc3VsdHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gWyAuLi50aGlzLm9wdGlvbnMsIC4uLm5ld1Jlc3VsdHNdO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmNvbXBsZXRlID0gbmV3UmVzdWx0cy5sZW5ndGggPT09IDBcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZldGNoaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMucGFnZSA9IHBhZ2U7XG4gICAgICB9KS5jYXRjaCgocmVhc29uOiBhbnkpPT57XG4gICAgICAgIC8vIGNhbmNlbGxlZFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVCbHVyKCkge1xuICAgIC8vIHdlIGRvbid0IGRvIHRoaXMgaW1tZWRpYXRlbHkgc28gd2UgY2FuIGhhbmRsZSBjbGljayBldmVudHMgb3V0c2lkZSBvZiBvdXIgaW5wdXRcbiAgICB3aW5kb3cuc2V0VGltZW91dCgoKT0+e3RoaXMub3B0aW9ucyA9IFtdfSwgMTAwKTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlRm9jdXMoKTogdm9pZCB7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUtleVVwKGV2dDogS2V5Ym9hcmRFdmVudCkge1xuICAgIGNvbnN0IGVsZSA9IGV2dC5jdXJyZW50VGFyZ2V0IGFzIFRleHRJbnB1dDtcbiAgICB0aGlzLmlucHV0ID0gZWxlLmlucHV0RWxlbWVudC52YWx1ZS50cmltKCk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUNhbmNlbCgpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBbXTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlQ3Vyc29yQ2hhbmdlZChldmVudDogQ3VzdG9tRXZlbnQpIHtcbiAgICB0aGlzLmN1cnNvckluZGV4ID0gZXZlbnQuZGV0YWlsLmluZGV4O1xuICB9XG5cbiAgcHVibGljIGdldEV2ZW50SGFuZGxlcnMoKTogRXZlbnRIYW5kbGVyW10ge1xuICAgIHJldHVybiBbXG4gICAgICB7IGV2ZW50OiBDdXN0b21FdmVudFR5cGUuQ2FuY2VsZWQsIG1ldGhvZDogdGhpcy5oYW5kbGVDYW5jZWwgfSxcbiAgICAgIHsgZXZlbnQ6IEN1c3RvbUV2ZW50VHlwZS5DdXJzb3JDaGFuZ2VkLCBtZXRob2Q6IHRoaXMuaGFuZGxlQ3Vyc29yQ2hhbmdlZCB9LFxuICAgICAgLy8geyBldmVudDogQ3VzdG9tRXZlbnRUeXBlLlNlbGVjdGlvbiwgbWV0aG9kOiB0aGlzLmhhbmRsZU9wdGlvblNlbGVjdGlvbiB9LFxuICAgIF07XG4gIH1cblxuICBwdWJsaWMgZmlyc3RVcGRhdGVkKGNoYW5nZWRQcm9wZXJ0aWVzOiBhbnkpIHtcbiAgICB0aGlzLmFuY2hvckVsZW1lbnQgPSB0aGlzLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihcInJwLXRleHRpbnB1dFwiKTtcbiAgfVxuXG4gIHB1YmxpYyByZW5kZXIoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPHJwLXRleHRpbnB1dFxuICAgICAgICBAa2V5dXA9JHt0aGlzLmhhbmRsZUtleVVwfVxuICAgICAgICBAYmx1cj0ke3RoaXMuaGFuZGxlQmx1cn0gXG4gICAgICAgIEBmb2N1cz0ke3RoaXMuaGFuZGxlRm9jdXN9IFxuICAgICAgICAudmFsdWU9JHt0aGlzLmlucHV0fSAgXG4gICAgICAgIHBsYWNlaG9sZGVyPSR7dGhpcy5wbGFjZWhvbGRlcn1cbiAgICAgID48L3JwLXRleHRpbnB1dD5cbiAgICAgIDxycC1vcHRpb25zXG4gICAgICAgIGN1cnNvckluZGV4PSR7dGhpcy5jdXJzb3JJbmRleH1cbiAgICAgICAgQHJwLXNlbGVjdGlvbj0ke3RoaXMuaGFuZGxlT3B0aW9uU2VsZWN0aW9ufVxuICAgICAgICAucmVuZGVyT3B0aW9uRGV0YWlsPSR7dGhpcy5yZW5kZXJPcHRpb25EZXRhaWx9XG4gICAgICAgIC5yZW5kZXJPcHRpb25OYW1lPSR7dGhpcy5yZW5kZXJPcHRpb25OYW1lfVxuICAgICAgICAucmVuZGVyT3B0aW9uPSR7dGhpcy5yZW5kZXJPcHRpb259XG4gICAgICAgIC5hbmNob3JUbz0ke3RoaXMuYW5jaG9yRWxlbWVudH1cbiAgICAgICAgLm9wdGlvbnM9JHt0aGlzLm9wdGlvbnN9XG4gICAgICAgID92aXNpYmxlPSR7dGhpcy5pbnB1dC5sZW5ndGggPiAwICYmIHRoaXMub3B0aW9ucy5sZW5ndGggPiAwfVxuICAgICAgPjwvcnAtb3B0aW9ucz5cbiAgICBgXG4gIH1cbn0iLCJjb25zdCBTVEFURV9CT0RZID0gMDsgLy8gbm90IGluIGEgZXhwcmVzc2lvblxuY29uc3QgU1RBVEVfUFJFRklYID0gMTsgLy8gJ0AnIHByZWZpeCB0aGF0IGRlbm90ZXMgdGhlIHN0YXJ0IG9mIGFuIGV4cHJlc3Npb25cbmNvbnN0IFNUQVRFX0lERU5USUZJRVIgPSAyOyAvLyB0aGUgaWRlbnRpZmllciBwYXJ0LCBlLmcuICdjb250YWN0LmFnZScgaW4gJ0Bjb250YWN0LmFnZSdcbmNvbnN0IFNUQVRFX0JBTEFOQ0VEID0gMzsgLy8gdGhlIGJhbGFuY2VkIHBhcmVudGhlc2VzIGRlbGltaXRlZCBwYXJ0LCBlLmcuICcoMSArIDIpJyBpbiAnQCgxICsgMiknXG5jb25zdCBTVEFURV9TVFJJTkdfTElURVJBTCA9IDQ7IC8vIGEgc3RyaW5nIGxpdGVyYWwgd2hpY2ggY291bGQgY29udGFpbiApXG5jb25zdCBTVEFURV9FU0NBUEVEX1BSRUZJWCA9IDU7IC8vIGEgJ0AnIHByZWZpeCBwcmVjZWRlZCBieSBhbm90aGVyICdAJ1xuY29uc3QgU1RBVEVfSUdOT1JFID0gNjtcblxuZXhwb3J0IGludGVyZmFjZSBFeHByZXNzaW9uIHtcbiAgc3RhcnQ6IG51bWJlcjtcbiAgZW5kOiBudW1iZXI7XG4gIHRleHQ6IHN0cmluZztcbiAgY2xvc2VkOiBib29sZWFuO1xufVxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgZ2l2ZW4gc3RyaW5nIHN0YXJ0cyB3aXRoIHRoZSBnaXZlbiB0ZXh0XG4gKi9cbmNvbnN0IHN0YXJ0c1dpdGggPSAoc3RyOiBzdHJpbmcsIHN0YXJ0OiBzdHJpbmcpOiBib29sZWFuID0+IHtcbiAgcmV0dXJuIHN0ci5pbmRleE9mKHN0YXJ0LCAwKSA9PT0gMDtcbn07XG5cbi8qKlxuICogQ2hlY2tzIHRoZSBwYXJzZWQgKHBvc3NpYmx5IHBhcnRpYWwpIGV4cHJlc3Npb24gdG8gZGV0ZXJtaW5lIGlmIGl0J3MgdmFsaWQgYmFzZWQgb24gaG93IGl0IHN0YXJ0c1xuICovXG5jb25zdCBpc1ZhbGlkU3RhcnQgPSAoXG4gIHBhcnRpYWxFeHByZXNzaW9uOiBzdHJpbmcsXG4gIGFsbG93ZWRUb3BMZXZlbHM6IHN0cmluZ1tdLFxuICBhbGxvd0luY29tcGxldGU6IGJvb2xlYW5cbik6IGJvb2xlYW4gPT4ge1xuICBjb25zdCBib2R5ID0gcGFydGlhbEV4cHJlc3Npb24uc3Vic3RyaW5nKDEpOyAvLyBzdHJpcCBwcmVmaXhcblxuICBpZiAoYm9keVswXSA9PT0gJygnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgZXhwcmVzc2lvbiBkb2Vzbid0IHN0YXJ0IHdpdGggKCB0aGVuIGNoZWNrIGl0J3MgYW4gYWxsb3dlZCB0b3AgbGV2ZWwgY29udGV4dCByZWZlcmVuY2VcbiAgICBjb25zdCB0b3BMZXZlbCA9IGJvZHkuc3BsaXQoJy4nKVswXS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgaWYgKGFsbG93SW5jb21wbGV0ZSkge1xuICAgICAgZm9yIChjb25zdCBhbGxvd2VkIG9mIGFsbG93ZWRUb3BMZXZlbHMpIHtcbiAgICAgICAgaWYgKHN0YXJ0c1dpdGgoYWxsb3dlZCwgdG9wTGV2ZWwpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGFsbG93ZWRUb3BMZXZlbHMuaW5kZXhPZih0b3BMZXZlbCkgPj0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgZ2l2ZW4gY2hhcmFjdGVyIGlzIGEgd29yZCBjaGFyYWN0ZXIsIGkuZS4gXFx3IGluIGEgcmVnZXhcbiAqL1xuZXhwb3J0IGNvbnN0IGlzV29yZENoYXIgPSAoY2g6IHN0cmluZyB8IDApOiBib29sZWFuID0+IHtcbiAgcmV0dXJuIChcbiAgICAoY2ggPj0gJ2EnICYmIGNoIDw9ICd6JykgfHwgKGNoID49ICdBJyAmJiBjaCA8PSAnWicpIHx8IChjaCA+PSAnMCcgJiYgY2ggPD0gJzknKSB8fCBjaCA9PT0gJ18nXG4gICk7XG59O1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB3ZSBhcmUgaW4gYSBzdHJpbmcgbGl0ZXJhbFxuICovXG5jb25zdCBpc0luU3RyaW5nTGl0ZXJhbCA9IChwYXJ0aWFsRXhwcmVzc2lvbjogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gIC8vIGNvdW50IG51bWJlciBxdW90YXRpb24gbWFya3NcbiAgbGV0IG51bVF1b3RlcyA9IDA7XG4gIGZvciAoY29uc3QgcG9zIG9mIHBhcnRpYWxFeHByZXNzaW9uKSB7XG4gICAgaWYgKHBvcyA9PT0gJ1wiJykge1xuICAgICAgbnVtUXVvdGVzKys7XG4gICAgfVxuICB9XG4gIHJldHVybiBudW1RdW90ZXMgJSAyICE9PSAwOyAvLyBvZGQgbWVhbnMgbGFzdCBzdHJpbmcgbGl0ZXJhbCBpcyBvcGVuXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFeGNlbGxlbnRQYXJzZXIge1xuICBwcml2YXRlIGV4cHJlc3Npb25QcmVmaXg6IHN0cmluZztcbiAgcHJpdmF0ZSBhbGxvd2VkVG9wTGV2ZWxzOiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBwYXJzZXJcbiAgICogQHBhcmFtIGV4cHJlc3Npb25QcmVmaXggdGhlIHByZWZpeCBmb3IgZXhwcmVzc2lvbnMsIGUuZy4gJ0AnXG4gICAqIEBwYXJhbSBhbGxvd2VkVG9wTGV2ZWxzIHRoZSBjb250ZXh0IG5hbWVzIHRoYXQgYXJlIGFsbG93ZWQgd2l0aG91dCBwYXJlbnRoZXNlcywgZS5nLiBbXCJjb250YWN0XCIsIFwiZmxvd1wiLCAuLi5dXG4gICAqL1xuICBjb25zdHJ1Y3RvcihleHByZXNzaW9uUHJlZml4OiBzdHJpbmcsIGFsbG93ZWRUb3BMZXZlbHM6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5leHByZXNzaW9uUHJlZml4ID0gZXhwcmVzc2lvblByZWZpeDtcbiAgICB0aGlzLmFsbG93ZWRUb3BMZXZlbHMgPSBhbGxvd2VkVG9wTGV2ZWxzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdpdmVuIHRoZSB0ZXh0IHVwIHRvIHRoZSBjYXJldCBwb3NpdGlvbiwgcmV0dXJucyB0aGUgZXhwcmVzc2lvbiBjdXJyZW50bHkgYmVpbmcgZWRpdGVkLCB3aXRob3V0IGl0cyBwcmVmaXhcbiAgICovXG4gIHB1YmxpYyBleHByZXNzaW9uQ29udGV4dCh0ZXh0VG9DYXJldDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBleHByZXNzaW9ucyA9IHRoaXMuZmluZEV4cHJlc3Npb25zKHRleHRUb0NhcmV0KTtcbiAgICBpZiAoZXhwcmVzc2lvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBubyBleHByZXNzaW9ucyBmb3VuZFxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgbGFzdEV4cHJlc3Npb24gPSBleHByZXNzaW9uc1tleHByZXNzaW9ucy5sZW5ndGggLSAxXTtcblxuICAgIC8vIGhhcyBsYXN0IGV4cHJlc3Npb24gYWxyZWFkeSBlbmRlZCBvciBpcyBpdCBjbG9zZWQgKGkuZS4gaGFzIGJhbGFuY2VkIHBhcmVudGhlc2VzKVxuICAgIGlmIChsYXN0RXhwcmVzc2lvbi5lbmQgPCB0ZXh0VG9DYXJldC5sZW5ndGggfHwgbGFzdEV4cHJlc3Npb24uY2xvc2VkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbGFzdEV4cHJlc3Npb24udGV4dC5zdWJzdHJpbmcoMSk7IC8vIHJldHVybiB3aXRob3V0IHByZWZpeFxuICB9XG5cbiAgLyoqXG4gICAqIEdpdmVuIHRoZSBwYXJ0aWFsIGV4cHJlc3Npb24gY3VycmVudGx5IGJlaW5nIGVkaXRlZCwgcmV0dXJucyB0aGUgY3VycmVudCBhdXRvLWNvbXBsZXRhYmxlIGlkZW50aWZpZXJcbiAgICogd2hpY2ggbWF5IGJlIGEgZnVuY3Rpb24gbmFtZSBvciBhIGNvbnRleHQgcmVmZXJlbmNlLlxuICAgKi9cbiAgcHVibGljIGF1dG9Db21wbGV0ZUNvbnRleHQocGFydGlhbEV4cHJlc3Npb246IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKGlzSW5TdHJpbmdMaXRlcmFsKHBhcnRpYWxFeHByZXNzaW9uKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgbmVlZGVkUGFyZW50aGVzZXMgPSBbXTtcbiAgICBsZXQgZnJhZ21lbnQgPSAnJztcbiAgICBsZXQgc2tpcENoYXIgPSBmYWxzZTtcbiAgICBsZXQgaW5RdW90ZXMgPSBmYWxzZTtcbiAgICBsZXQgcHJlcGVuZEZsYWcgPSAnJztcblxuICAgIGZvciAobGV0IHBvcyA9IHBhcnRpYWxFeHByZXNzaW9uLmxlbmd0aCAtIDE7IHBvcyA+PSAwOyBwb3MtLSkge1xuICAgICAgY29uc3QgY2ggPSBwYXJ0aWFsRXhwcmVzc2lvbltwb3NdO1xuXG4gICAgICBpZiAoY2ggPT09ICcgJykge1xuICAgICAgICBza2lwQ2hhciA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaCA9PT0gJywnKSB7XG4gICAgICAgIHNraXBDaGFyID0gdHJ1ZTtcbiAgICAgICAgaWYgKG5lZWRlZFBhcmVudGhlc2VzW25lZWRlZFBhcmVudGhlc2VzLmxlbmd0aCAtIDFdICE9PSAnKCcpIHtcbiAgICAgICAgICBuZWVkZWRQYXJlbnRoZXNlcy5wdXNoKCcoJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNoID09PSAnKScgJiYgIWluUXVvdGVzKSB7XG4gICAgICAgIHNraXBDaGFyID0gdHJ1ZTtcbiAgICAgICAgbmVlZGVkUGFyZW50aGVzZXMucHVzaCgnKCcpO1xuICAgICAgICBuZWVkZWRQYXJlbnRoZXNlcy5wdXNoKCcoJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaCA9PT0gJ1wiJykge1xuICAgICAgICBpblF1b3RlcyA9ICFpblF1b3RlcztcbiAgICAgIH1cblxuICAgICAgaWYgKHNraXBDaGFyKSB7XG4gICAgICAgIGlmIChjaCA9PT0gJygnICYmICFpblF1b3Rlcykge1xuICAgICAgICAgIGlmIChuZWVkZWRQYXJlbnRoZXNlc1tuZWVkZWRQYXJlbnRoZXNlcy5sZW5ndGggLSAxXSA9PT0gJygnKSB7XG4gICAgICAgICAgICBuZWVkZWRQYXJlbnRoZXNlcy5wb3AoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobmVlZGVkUGFyZW50aGVzZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBza2lwQ2hhciA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY2ggPT09ICcoJyAmJiBmcmFnbWVudCA9PT0gJycpIHtcbiAgICAgICAgcHJlcGVuZEZsYWcgPSAnIyc7XG4gICAgICB9XG5cbiAgICAgIGlmIChza2lwQ2hhciB8fCBpblF1b3RlcyB8fCAoY2ggPT09ICcoJyAmJiBmcmFnbWVudCA9PT0gJycpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNXb3JkQ2hhcihjaCkgfHwgY2ggPT09ICcuJykge1xuICAgICAgICBmcmFnbWVudCA9IGNoICsgZnJhZ21lbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZnJhZ21lbnQubWF0Y2goL1tBLVphLXpdW1xcd10qKFxcLltcXHddKykqLykpIHtcbiAgICAgIHJldHVybiBwcmVwZW5kRmxhZyArIGZyYWdtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVE9ETyBmaW5kIHRoZSBmdW5jdGlvbiBjb250ZXh0XG4gICAqL1xuICBwdWJsaWMgZnVuY3Rpb25Db250ZXh0KHBhcnRpYWxFeHByZXNzaW9uOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IGluU3RyaW5nID0gaXNJblN0cmluZ0xpdGVyYWwocGFydGlhbEV4cHJlc3Npb24pO1xuXG4gICAgLy8gaW5pdGlhbCBzdGF0ZSBpcyBzdHJpbmcgbGl0ZXJhbCBpZiBudW1iZXIgb2YgcXVvdGVzIGlzIG9kZFxuICAgIGxldCBzdGF0ZSA9IGluU3RyaW5nID8gU1RBVEVfU1RSSU5HX0xJVEVSQUwgOiBTVEFURV9JR05PUkU7XG4gICAgbGV0IGlkZW50aWZpZXIgPSAnJztcbiAgICBsZXQgcGFyZW50aGVzZXNMZXZlbCA9IHBhcnRpYWxFeHByZXNzaW9uWy0xXSA9PT0gJygnID8gMCA6IDE7XG5cbiAgICBmb3IgKGxldCBwb3MgPSBwYXJ0aWFsRXhwcmVzc2lvbi5sZW5ndGggLSAxOyBwb3MgPj0gMDsgcG9zLS0pIHtcbiAgICAgIGNvbnN0IGNoID0gcGFydGlhbEV4cHJlc3Npb25bcG9zXTtcblxuICAgICAgaWYgKGNoID09PSAnQCcpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IFNUQVRFX0lHTk9SRSkge1xuICAgICAgICBpZiAocGFyZW50aGVzZXNMZXZlbCA9PT0gMCAmJiAoaXNXb3JkQ2hhcihjaCkgfHwgY2ggPT09ICcuJykpIHtcbiAgICAgICAgICBzdGF0ZSA9IFNUQVRFX0lERU5USUZJRVI7XG4gICAgICAgICAgaWRlbnRpZmllciA9IGNoICsgaWRlbnRpZmllcjtcbiAgICAgICAgfSBlbHNlIGlmIChjaCA9PT0gJ1wiJykge1xuICAgICAgICAgIHN0YXRlID0gU1RBVEVfU1RSSU5HX0xJVEVSQUw7XG4gICAgICAgIH0gZWxzZSBpZiAoY2ggPT09ICcoJykge1xuICAgICAgICAgIHBhcmVudGhlc2VzTGV2ZWwtLTtcbiAgICAgICAgfSBlbHNlIGlmIChjaCA9PT0gJyknKSB7XG4gICAgICAgICAgcGFyZW50aGVzZXNMZXZlbCsrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlID09PSBTVEFURV9JREVOVElGSUVSKSB7XG4gICAgICAgIGlmIChpc1dvcmRDaGFyKGNoKSB8fCBjaCA9PT0gJy4nKSB7XG4gICAgICAgICAgaWRlbnRpZmllciA9IGNoICsgaWRlbnRpZmllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gaWRlbnRpZmllcjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gU1RBVEVfU1RSSU5HX0xJVEVSQUwpIHtcbiAgICAgICAgaWYgKGNoID09PSAnXCInKSB7XG4gICAgICAgICAgc3RhdGUgPSBTVEFURV9JR05PUkU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgcHVibGljIGdldENvbnRhY3RGaWVsZHModGV4dDogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IGZpZWxkcyA9IHt9O1xuICAgIGNvbnN0IHJlID0gLygocGFyZW50fGNoaWxkXFwuKSpjb250YWN0XFwuKSpmaWVsZHNcXC4oW2EtejAtOV9dKykvZztcbiAgICBjb25zdCBleHByZXNzaW9ucyA9IHRoaXMuZmluZEV4cHJlc3Npb25zKHRleHQpO1xuICAgIGZvciAoY29uc3QgZXhwcmVzc2lvbiBvZiBleHByZXNzaW9ucykge1xuICAgICAgbGV0IG1hdGNoO1xuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbmRpdGlvbmFsLWFzc2lnbm1lbnRcbiAgICAgIHdoaWxlICgobWF0Y2ggPSByZS5leGVjKGV4cHJlc3Npb24udGV4dCkpKSB7XG4gICAgICAgIChmaWVsZHMgYXMgYW55KVttYXRjaFszXV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoZmllbGRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kcyBhbGwgZXhwcmVzc2lvbnMgaW4gdGhlIGdpdmVuIHRleHQsIGluY2x1ZGluZyBhbnkgcGFydGlhbGx5IGNvbXBsZXRlIGV4cHJlc3Npb24gYXQgdGhlIGVuZCBvZiB0aGUgaW5wdXRcbiAgICovXG4gIHB1YmxpYyBmaW5kRXhwcmVzc2lvbnModGV4dDogc3RyaW5nKTogRXhwcmVzc2lvbltdIHtcbiAgICBjb25zdCBleHByZXNzaW9uczogRXhwcmVzc2lvbltdID0gW107XG4gICAgbGV0IHN0YXRlID0gU1RBVEVfQk9EWTtcbiAgICBsZXQgY3VycmVudEV4cHJlc3Npb246IEV4cHJlc3Npb24gPSBudWxsO1xuICAgIGxldCBwYXJlbnRoZXNlc0xldmVsID0gMDtcblxuICAgIGZvciAobGV0IHBvcyA9IDA7IHBvcyA8IHRleHQubGVuZ3RoOyBwb3MrKykge1xuICAgICAgY29uc3QgY2ggPSB0ZXh0W3Bvc107XG4gICAgICAvLyBpbiBvcmRlciB0byBkZXRlcm1pbmUgaWYgdGhlIGIgaW4gYS5iIHRlcm1pbmF0ZXMgYW4gaWRlbnRpZmllciwgd2UgaGF2ZSB0byBwZWVrIHR3byBjaGFyYWN0ZXJzIGFoZWFkIGFzXG4gICAgICAvLyBpdCBjb3VsZCBiZSBhLmIuIChiIHRlcm1pbmF0ZXMpIG9yIGEuYi5jIChiIGRvZXNuJ3QgdGVybWluYXRlKVxuICAgICAgY29uc3QgbmV4dENoID0gcG9zIDwgdGV4dC5sZW5ndGggLSAxID8gdGV4dFtwb3MgKyAxXSA6IDA7XG4gICAgICBjb25zdCBuZXh0TmV4dENoID0gcG9zIDwgdGV4dC5sZW5ndGggLSAyID8gdGV4dFtwb3MgKyAyXSA6IDA7XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gU1RBVEVfQk9EWSkge1xuICAgICAgICBpZiAoY2ggPT09IHRoaXMuZXhwcmVzc2lvblByZWZpeCAmJiAoaXNXb3JkQ2hhcihuZXh0Q2gpIHx8IG5leHRDaCA9PT0gJygnKSkge1xuICAgICAgICAgIHN0YXRlID0gU1RBVEVfUFJFRklYO1xuICAgICAgICAgIGN1cnJlbnRFeHByZXNzaW9uID0ge1xuICAgICAgICAgICAgc3RhcnQ6IHBvcyxcbiAgICAgICAgICAgIGVuZDogbnVsbCxcbiAgICAgICAgICAgIHRleHQ6IGNoLFxuICAgICAgICAgICAgY2xvc2VkOiBmYWxzZVxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoY2ggPT09IHRoaXMuZXhwcmVzc2lvblByZWZpeCAmJiBuZXh0Q2ggPT09IHRoaXMuZXhwcmVzc2lvblByZWZpeCkge1xuICAgICAgICAgIHN0YXRlID0gU1RBVEVfRVNDQVBFRF9QUkVGSVg7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09IFNUQVRFX1BSRUZJWCkge1xuICAgICAgICBpZiAoaXNXb3JkQ2hhcihjaCkpIHtcbiAgICAgICAgICBzdGF0ZSA9IFNUQVRFX0lERU5USUZJRVI7IC8vIHdlJ3JlIHBhcnNpbmcgYW4gZXhwcmVzc2lvbiBsaWtlIEBYWFhcbiAgICAgICAgfSBlbHNlIGlmIChjaCA9PT0gJygnKSB7XG4gICAgICAgICAgLy8gd2UncmUgcGFyc2luZyBhbiBleHByZXNzaW9uIGxpa2UgQCgxICsgMilcbiAgICAgICAgICBzdGF0ZSA9IFNUQVRFX0JBTEFOQ0VEO1xuICAgICAgICAgIHBhcmVudGhlc2VzTGV2ZWwgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50RXhwcmVzc2lvbi50ZXh0ICs9IGNoO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gU1RBVEVfSURFTlRJRklFUikge1xuICAgICAgICBjdXJyZW50RXhwcmVzc2lvbi50ZXh0ICs9IGNoO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gU1RBVEVfQkFMQU5DRUQpIHtcbiAgICAgICAgaWYgKGNoID09PSAnKCcpIHtcbiAgICAgICAgICBwYXJlbnRoZXNlc0xldmVsICs9IDE7XG4gICAgICAgIH0gZWxzZSBpZiAoY2ggPT09ICcpJykge1xuICAgICAgICAgIHBhcmVudGhlc2VzTGV2ZWwgLT0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChjaCA9PT0gJ1wiJykge1xuICAgICAgICAgIHN0YXRlID0gU1RBVEVfU1RSSU5HX0xJVEVSQUw7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50RXhwcmVzc2lvbi50ZXh0ICs9IGNoO1xuXG4gICAgICAgIC8vIGV4cHJlc3Npb24gdGVybWluYXRlcyBpZiBwYXJlbnRoZXNlcyBiYWxhbmNlXG4gICAgICAgIGlmIChwYXJlbnRoZXNlc0xldmVsID09PSAwKSB7XG4gICAgICAgICAgY3VycmVudEV4cHJlc3Npb24uZW5kID0gcG9zICsgMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gU1RBVEVfU1RSSU5HX0xJVEVSQUwpIHtcbiAgICAgICAgaWYgKGNoID09PSAnXCInKSB7XG4gICAgICAgICAgc3RhdGUgPSBTVEFURV9CQUxBTkNFRDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50RXhwcmVzc2lvbi50ZXh0ICs9IGNoO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gU1RBVEVfRVNDQVBFRF9QUkVGSVgpIHtcbiAgICAgICAgc3RhdGUgPSBTVEFURV9CT0RZO1xuICAgICAgfVxuXG4gICAgICAvLyBpZGVudGlmaWVyIGNhbiB0ZXJtaW5hdGUgZXhwcmVzc2lvbiBpbiAzIHdheXM6XG4gICAgICAvLyAgMS4gbmV4dCBjaGFyIGlzIG51bGwgKGkuZS4gZW5kIG9mIHRoZSBpbnB1dClcbiAgICAgIC8vICAyLiBuZXh0IGNoYXIgaXMgbm90IGEgd29yZCBjaGFyYWN0ZXIgb3IgcGVyaW9kXG4gICAgICAvLyAgMy4gbmV4dCBjaGFyIGlzIGEgcGVyaW9kLCBidXQgaXQncyBub3QgZm9sbG93ZWQgYnkgYSB3b3JkIGNoYXJhY3RlclxuICAgICAgaWYgKHN0YXRlID09PSBTVEFURV9JREVOVElGSUVSKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAoIWlzV29yZENoYXIobmV4dENoKSAmJiBuZXh0Q2ggIT09ICcuJykgfHxcbiAgICAgICAgICAobmV4dENoID09PSAnLicgJiYgIWlzV29yZENoYXIobmV4dE5leHRDaCkpXG4gICAgICAgICkge1xuICAgICAgICAgIGN1cnJlbnRFeHByZXNzaW9uLmVuZCA9IHBvcyArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnRFeHByZXNzaW9uICE9IG51bGwgJiYgKGN1cnJlbnRFeHByZXNzaW9uLmVuZCAhPSBudWxsIHx8IG5leHRDaCA9PT0gMCkpIHtcbiAgICAgICAgY29uc3QgYWxsb3dJbmNvbXBsZXRlID0gbmV4dENoID09PSAwOyAvLyBpZiB3ZSdyZSBhdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCwgYWxsb3cgaW5jb21wbGV0ZSBleHByZXNzaW9uc1xuICAgICAgICBpZiAoaXNWYWxpZFN0YXJ0KGN1cnJlbnRFeHByZXNzaW9uLnRleHQsIHRoaXMuYWxsb3dlZFRvcExldmVscywgYWxsb3dJbmNvbXBsZXRlKSkge1xuICAgICAgICAgIGN1cnJlbnRFeHByZXNzaW9uLmNsb3NlZCA9IGN1cnJlbnRFeHByZXNzaW9uLnRleHRbMV0gPT09ICcoJyAmJiBwYXJlbnRoZXNlc0xldmVsID09PSAwO1xuICAgICAgICAgIGN1cnJlbnRFeHByZXNzaW9uLmVuZCA9IHBvcyArIDE7XG4gICAgICAgICAgZXhwcmVzc2lvbnMucHVzaChjdXJyZW50RXhwcmVzc2lvbik7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50RXhwcmVzc2lvbiA9IG51bGw7XG4gICAgICAgIHN0YXRlID0gU1RBVEVfQk9EWTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZXhwcmVzc2lvbnM7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbXBsZXRpb25PcHRpb24gfSBmcm9tICcuL0NvbXBsZXRpb24nO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBsZXRpb25Qcm9wZXJ0eSB7XG4gICAga2V5OiBzdHJpbmc7XG4gICAgaGVscDogc3RyaW5nO1xuICAgIHR5cGU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb21wbGV0aW9uVHlwZSB7XG4gICAgbmFtZTogc3RyaW5nO1xuXG4gICAga2V5X3NvdXJjZT86IHN0cmluZztcbiAgICBwcm9wZXJ0eV90ZW1wbGF0ZT86IENvbXBsZXRpb25Qcm9wZXJ0eTtcbiAgICBwcm9wZXJ0aWVzPzogQ29tcGxldGlvblByb3BlcnR5W107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGxldGlvblNjaGVtYSB7XG4gICAgdHlwZXM6IENvbXBsZXRpb25UeXBlW107XG4gICAgcm9vdDogQ29tcGxldGlvblByb3BlcnR5W107XG4gICAgcm9vdF9ub19zZXNzaW9uOiBDb21wbGV0aW9uUHJvcGVydHlbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQb3NpdGlvbiB7XG4gICAgdG9wOiBudW1iZXI7XG4gICAgbGVmdDogbnVtYmVyO1xufVxuXG5leHBvcnQgdHlwZSBLZXllZEFzc2V0cyA9IHsgW2Fzc2V0VHlwZTogc3RyaW5nXTogc3RyaW5nW10gfTtcblxuZXhwb3J0IGNvbnN0IGdldEZ1bmN0aW9ucyA9IChcbiAgICBmdW5jdGlvbnM6IENvbXBsZXRpb25PcHRpb25bXSxcbiAgICBxdWVyeTogc3RyaW5nXG4pOiBDb21wbGV0aW9uT3B0aW9uW10gPT4ge1xuICAgIGlmICghcXVlcnkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9ucztcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9ucy5maWx0ZXIoKG9wdGlvbjogQ29tcGxldGlvbk9wdGlvbikgPT4ge1xuICAgICAgICBpZiAob3B0aW9uLnNpZ25hdHVyZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbi5zaWduYXR1cmUuaW5kZXhPZihxdWVyeSkgPT09IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xufTtcblxuLyoqXG4gKiBUYWtlcyBhIGRvdCBxdWVyeSBhbmQgcmV0dXJucyB0aGUgY29tcGxldGlvbnMgb3B0aW9ucyBhdCB0aGUgY3VycmVudCBsZXZlbFxuICogQHBhcmFtIGRvdFF1ZXJ5IHF1ZXJ5IHN1Y2ggYXMgXCJjb250YWN0LmZpcnN0X25cIlxuICovXG5leHBvcnQgY29uc3QgZ2V0Q29tcGxldGlvbnMgPSAoXG4gICAgc2NoZW1hOiBDb21wbGV0aW9uU2NoZW1hLFxuICAgIGRvdFF1ZXJ5OiBzdHJpbmcsXG4gICAga2V5ZWRBc3NldHM6IEtleWVkQXNzZXRzID0ge31cbik6IENvbXBsZXRpb25PcHRpb25bXSA9PiB7XG4gICAgY29uc3QgcGFydHMgPSAoZG90UXVlcnkgfHwgJycpLnNwbGl0KCcuJyk7XG4gICAgbGV0IGN1cnJlbnRQcm9wczogQ29tcGxldGlvblByb3BlcnR5W10gPSBzY2hlbWEucm9vdF9ub19zZXNzaW9uO1xuXG4gICAgbGV0IHByZWZpeCA9ICcnO1xuICAgIGxldCBwYXJ0ID0gJyc7XG4gICAgd2hpbGUgKHBhcnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcGFydCA9IHBhcnRzLnNoaWZ0KCk7XG4gICAgICAgIGlmIChwYXJ0KSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgIGNvbnN0IG5leHRQcm9wID0gY3VycmVudFByb3BzLmZpbmQoXG4gICAgICAgICAgICAgICAgKHByb3A6IENvbXBsZXRpb25Qcm9wZXJ0eSkgPT4gcHJvcC5rZXkgPT09IHBhcnRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAobmV4dFByb3ApIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0VHlwZSA9IHNjaGVtYS50eXBlcy5maW5kKFxuICAgICAgICAgICAgICAgICAgICAodHlwZTogQ29tcGxldGlvblR5cGUpID0+IHR5cGUubmFtZSA9PT0gbmV4dFByb3AudHlwZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKG5leHRUeXBlICYmIG5leHRUeXBlLnByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFByb3BzID0gbmV4dFR5cGUucHJvcGVydGllcztcbiAgICAgICAgICAgICAgICAgICAgcHJlZml4ICs9IHBhcnQgKyAnLic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuZXh0VHlwZSAmJiBuZXh0VHlwZS5wcm9wZXJ0eV90ZW1wbGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBwcmVmaXggKz0gcGFydCArICcuJztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBuZXh0VHlwZS5wcm9wZXJ0eV90ZW1wbGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleWVkQXNzZXRzW25leHRUeXBlLm5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UHJvcHMgPSBrZXllZEFzc2V0c1tuZXh0VHlwZS5uYW1lXS5tYXAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGtleTogc3RyaW5nKSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IHRlbXBsYXRlLmtleS5yZXBsYWNlKCd7a2V5fScsIGtleSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHA6IHRlbXBsYXRlLmhlbHAucmVwbGFjZSgne2tleX0nLCBrZXkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB0ZW1wbGF0ZS50eXBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UHJvcHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UHJvcHMgPSBjdXJyZW50UHJvcHMuZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgKHByb3A6IENvbXBsZXRpb25Qcm9wZXJ0eSkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wLmtleS5zdGFydHNXaXRoKHBhcnQudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgICAgICBjdXJyZW50UHJvcHMgPSBjdXJyZW50UHJvcHMuZmlsdGVyKChwcm9wOiBDb21wbGV0aW9uUHJvcGVydHkpID0+XG4gICAgICAgICAgICAgICAgICAgIHByb3Aua2V5LnN0YXJ0c1dpdGgocGFydC50b0xvd2VyQ2FzZSgpKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFByb3BzLm1hcCgocHJvcDogQ29tcGxldGlvblByb3BlcnR5KSA9PiB7XG4gICAgICAgIGNvbnN0IG5hbWUgPVxuICAgICAgICAgICAgcHJvcC5rZXkgPT09ICdfX2RlZmF1bHRfXydcbiAgICAgICAgICAgICAgICA/IHByZWZpeC5zdWJzdHIoMCwgcHJlZml4Lmxlbmd0aCAtIDEpXG4gICAgICAgICAgICAgICAgOiBwcmVmaXggKyBwcm9wLmtleTtcbiAgICAgICAgcmV0dXJuIHsgbmFtZSwgc3VtbWFyeTogcHJvcC5oZWxwIH07XG4gICAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0T2Zmc2V0ID0gKGVsOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgIHZhciByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgIHNjcm9sbExlZnQgPSB3aW5kb3cucGFnZVhPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQsXG4gICAgICAgIHNjcm9sbFRvcCA9IHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgIHJldHVybiB7IHRvcDogcmVjdC50b3AgKyBzY3JvbGxUb3AsIGxlZnQ6IHJlY3QubGVmdCArIHNjcm9sbExlZnQgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRWZXJ0aWNhbFNjcm9sbCA9IChlbGU6IE5vZGUpID0+IHtcbiAgICBsZXQgY3VycmVudCA9IGVsZTtcbiAgICBsZXQgdmVydGljYWxTY3JvbGwgPSAwO1xuICAgIHdoaWxlIChjdXJyZW50KSB7XG4gICAgICAgIC8vIHZlcnRpY2FsU2Nyb2xsICs9IGN1cnJlbnQuc2Nyb2xsVG9wO1xuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnROb2RlO1xuICAgICAgICBjb25zb2xlLmxvZygncGFyZW50JywgY3VycmVudCk7XG4gICAgfVxuICAgIHJldHVybiB2ZXJ0aWNhbFNjcm9sbDtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRDb21wbGV0aW9uTmFtZSA9IChvcHRpb246IENvbXBsZXRpb25PcHRpb24pOiBzdHJpbmcgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAgIG9wdGlvbi5uYW1lIHx8IG9wdGlvbi5zaWduYXR1cmUuc3Vic3RyKDAsIG9wdGlvbi5zaWduYXR1cmUuaW5kZXhPZignKCcpKVxuICAgICk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Q29tcGxldGlvblNpZ25hdHVyZSA9IChvcHRpb246IENvbXBsZXRpb25PcHRpb24pOiBzdHJpbmcgPT4ge1xuICAgIHJldHVybiBvcHRpb24uc2lnbmF0dXJlLnN1YnN0cihvcHRpb24uc2lnbmF0dXJlLmluZGV4T2YoJygnKSk7XG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuXG5pbXBvcnQge2lzUHJpbWl0aXZlfSBmcm9tICcuLi9saWIvcGFydHMuanMnO1xuaW1wb3J0IHtkaXJlY3RpdmUsIE5vZGVQYXJ0LCBQYXJ0fSBmcm9tICcuLi9saXQtaHRtbC5qcyc7XG5cbmludGVyZmFjZSBQcmV2aW91c1ZhbHVlIHtcbiAgcmVhZG9ubHkgdmFsdWU6IHVua25vd247XG4gIHJlYWRvbmx5IGZyYWdtZW50OiBEb2N1bWVudEZyYWdtZW50O1xufVxuXG4vLyBGb3IgZWFjaCBwYXJ0LCByZW1lbWJlciB0aGUgdmFsdWUgdGhhdCB3YXMgbGFzdCByZW5kZXJlZCB0byB0aGUgcGFydCBieSB0aGVcbi8vIHVuc2FmZUhUTUwgZGlyZWN0aXZlLCBhbmQgdGhlIERvY3VtZW50RnJhZ21lbnQgdGhhdCB3YXMgbGFzdCBzZXQgYXMgYSB2YWx1ZS5cbi8vIFRoZSBEb2N1bWVudEZyYWdtZW50IGlzIHVzZWQgYXMgYSB1bmlxdWUga2V5IHRvIGNoZWNrIGlmIHRoZSBsYXN0IHZhbHVlXG4vLyByZW5kZXJlZCB0byB0aGUgcGFydCB3YXMgd2l0aCB1bnNhZmVIVE1MLiBJZiBub3QsIHdlJ2xsIGFsd2F5cyByZS1yZW5kZXIgdGhlXG4vLyB2YWx1ZSBwYXNzZWQgdG8gdW5zYWZlSFRNTC5cbmNvbnN0IHByZXZpb3VzVmFsdWVzID0gbmV3IFdlYWtNYXA8Tm9kZVBhcnQsIFByZXZpb3VzVmFsdWU+KCk7XG5cbi8qKlxuICogUmVuZGVycyB0aGUgcmVzdWx0IGFzIEhUTUwsIHJhdGhlciB0aGFuIHRleHQuXG4gKlxuICogTm90ZSwgdGhpcyBpcyB1bnNhZmUgdG8gdXNlIHdpdGggYW55IHVzZXItcHJvdmlkZWQgaW5wdXQgdGhhdCBoYXNuJ3QgYmVlblxuICogc2FuaXRpemVkIG9yIGVzY2FwZWQsIGFzIGl0IG1heSBsZWFkIHRvIGNyb3NzLXNpdGUtc2NyaXB0aW5nXG4gKiB2dWxuZXJhYmlsaXRpZXMuXG4gKi9cbmV4cG9ydCBjb25zdCB1bnNhZmVIVE1MID0gZGlyZWN0aXZlKCh2YWx1ZTogdW5rbm93bikgPT4gKHBhcnQ6IFBhcnQpOiB2b2lkID0+IHtcbiAgaWYgKCEocGFydCBpbnN0YW5jZW9mIE5vZGVQYXJ0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5zYWZlSFRNTCBjYW4gb25seSBiZSB1c2VkIGluIHRleHQgYmluZGluZ3MnKTtcbiAgfVxuXG4gIGNvbnN0IHByZXZpb3VzVmFsdWUgPSBwcmV2aW91c1ZhbHVlcy5nZXQocGFydCk7XG5cbiAgaWYgKHByZXZpb3VzVmFsdWUgIT09IHVuZGVmaW5lZCAmJiBpc1ByaW1pdGl2ZSh2YWx1ZSkgJiZcbiAgICAgIHZhbHVlID09PSBwcmV2aW91c1ZhbHVlLnZhbHVlICYmIHBhcnQudmFsdWUgPT09IHByZXZpb3VzVmFsdWUuZnJhZ21lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG4gIHRlbXBsYXRlLmlubmVySFRNTCA9IHZhbHVlIGFzIHN0cmluZzsgIC8vIGlubmVySFRNTCBjYXN0cyB0byBzdHJpbmcgaW50ZXJuYWxseVxuICBjb25zdCBmcmFnbWVudCA9IGRvY3VtZW50LmltcG9ydE5vZGUodGVtcGxhdGUuY29udGVudCwgdHJ1ZSk7XG4gIHBhcnQuc2V0VmFsdWUoZnJhZ21lbnQpO1xuICBwcmV2aW91c1ZhbHVlcy5zZXQocGFydCwge3ZhbHVlLCBmcmFnbWVudH0pO1xufSk7XG4iLCJpbXBvcnQgeyBjdXN0b21FbGVtZW50LCBUZW1wbGF0ZVJlc3VsdCwgaHRtbCwgY3NzLCBwcm9wZXJ0eSB9IGZyb20gJ2xpdC1lbGVtZW50JztcbmltcG9ydCBSYXBpZEVsZW1lbnQsIHsgRXZlbnRIYW5kbGVyIH0gZnJvbSAnLi4vUmFwaWRFbGVtZW50JztcbmltcG9ydCBFeGNlbGxlbnRQYXJzZXIsIHsgRXhwcmVzc2lvbiB9IGZyb20gJy4vRXhjZWxsZW50UGFyc2VyJztcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSAnLi4vdGV4dGlucHV0L1RleHRJbnB1dCc7XG5pbXBvcnQgeyBnZXRDb21wbGV0aW9ucywgQ29tcGxldGlvblNjaGVtYSwgZ2V0RnVuY3Rpb25zLCBQb3NpdGlvbiwgS2V5ZWRBc3NldHMsIGdldFZlcnRpY2FsU2Nyb2xsLCBnZXRPZmZzZXQgfSBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IHsgZ2V0VXJsLCBnZXRBc3NldHMsIEFzc2V0IH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgQXhpb3NSZXNwb25zZSB9IGZyb20gJ2F4aW9zJztcbmltcG9ydCBnZXRDYXJldENvb3JkaW5hdGVzIGZyb20gJ3RleHRhcmVhLWNhcmV0JztcbmltcG9ydCB7IGRpcmVjdGl2ZSwgUGFydH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHt1bnNhZmVIVE1MfSBmcm9tICdsaXQtaHRtbC9kaXJlY3RpdmVzL3Vuc2FmZS1odG1sLmpzJztcblxuY29uc3QgbWFya2VkID0gcmVxdWlyZSgnbWFya2VkJyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRnVuY3Rpb25FeGFtcGxlIHtcbiAgdGVtcGxhdGU6IHN0cmluZztcbiAgb3V0cHV0OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGxldGlvbk9wdGlvbiB7XG4gIG5hbWU/OiBzdHJpbmc7XG4gIHN1bW1hcnk6IHN0cmluZztcblxuICAvLyBmdW5jdGlvbnNcbiAgc2lnbmF0dXJlPzogc3RyaW5nO1xuICBkZXRhaWw/OiBzdHJpbmc7XG4gIGV4YW1wbGVzPzogRnVuY3Rpb25FeGFtcGxlW107XG59XG5cbmNvbnN0IG1hcmtlZFJlbmRlciA9IGRpcmVjdGl2ZSgoY29udGVudHM6IHN0cmluZykgPT4gKHBhcnQ6IFBhcnQpID0+IHsgXG4gIHBhcnQuc2V0VmFsdWUodW5zYWZlSFRNTChtYXJrZWQoY29udGVudHMpKSlcbn0pO1xuXG5cbi8qKlxuICogQ29tcGxldGlvbiBpcyBhIHRleHQgaW5wdXQgdGhhdCBoYW5kbGVzIGV4Y2VsbGVudCBjb21wbGV0aW9uIG9wdGlvbnMgaW4gYSBwb3B1cFxuICovXG5AY3VzdG9tRWxlbWVudChcInJwLWNvbXBsZXRpb25cIilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBsZXRpb24gZXh0ZW5kcyBSYXBpZEVsZW1lbnQge1xuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gY3NzYFxuICAgICAgXG4gICAgICA6aG9zdCB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgfVxuXG4gICAgICAuY29udGFpbmVyIHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICB9XG5cbiAgICAgICNhbmNob3Ige1xuICAgICAgICAvKiBiYWNrZ3JvdW5kOiByZ2JhKDEzMiwgNDAsIDE1OCwgLjEpOyAqL1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICAgICAgd2lkdGg6IDI1MHB4O1xuICAgICAgICBoZWlnaHQ6IDIwcHg7XG4gICAgICB9XG5cbiAgICAgIC5mbi1tYXJrZXIge1xuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgZm9udC1zaXplOiA0MnB4O1xuICAgICAgfVxuXG4gICAgICAub3B0aW9uLXNsb3Qge1xuICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgICAgfVxuXG4gICAgICAuY3VycmVudC1mbiB7XG4gICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgIG1hcmdpbjogNXB4O1xuICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1jb2xvci13aWRnZXQtYmcpO1xuICAgICAgICBjb2xvcjogcmdiYSgwLCAwLCAwLCAuNSk7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLWN1cnZhdHVyZSk7XG4gICAgICAgIGZvbnQtc2l6ZTogOTAlO1xuICAgICAgfVxuXG4gICAgICAuZm9vdGVyIHtcbiAgICAgICAgcGFkZGluZzogNXB4IDEwcHg7XG4gICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWNvbG9yLXdpZGdldC1iZyk7XG4gICAgICAgIGNvbG9yOiByZ2JhKDAsIDAsIDAsIC41KTtcbiAgICAgICAgZm9udC1zaXplOiA4MCU7XG4gICAgICB9XG5cbiAgICAgIGNvZGUge1xuICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsMCwwLC4xKTtcbiAgICAgICAgcGFkZGluZzogMXB4IDVweDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogdmFyKC0tY3VydmF0dXJlKTtcbiAgICAgIH1cbiAgICBgXG4gIH1cblxuICBzdGF0aWMgcGFyc2VyID0gbmV3IEV4Y2VsbGVudFBhcnNlcignQCcsIFtcbiAgICAnY29udGFjdCcsXG4gICAgJ2ZpZWxkcycsXG4gICAgJ3VybnMnLFxuICBdKTtcblxuICAvKiogUmVtb3RlIGRlc2NyaXB0aW9uIG9mIG91ciBjb21wbGV0aW9uIHNjaGVtYSAqLyAgXG4gIHByaXZhdGUgc2NoZW1hOiBDb21wbGV0aW9uU2NoZW1hO1xuXG4gIC8qKiBSZW1vdGUgbGlzdCBvZiBvdXIgZnVuY3Rpb24gb3B0aW9ucyAqL1xuICBwcml2YXRlIGZ1bmN0aW9uczogQ29tcGxldGlvbk9wdGlvbltdO1xuXG4gIHByaXZhdGUga2V5ZWRBc3NldHM6IEtleWVkQXNzZXRzO1xuXG4gIEBwcm9wZXJ0eSh7IHR5cGU6IE9iamVjdH0pXG4gIGFuY2hvclBvc2l0aW9uOiBQb3NpdGlvbiA9IHsgbGVmdDogMCwgdG9wOiAwfTtcblxuICBAcHJvcGVydHkoe2F0dHJpYnV0ZTogZmFsc2V9KVxuICBjdXJyZW50RnVuY3Rpb246IENvbXBsZXRpb25PcHRpb247XG5cbiAgQHByb3BlcnR5KHt0eXBlOiBTdHJpbmd9KVxuICBwbGFjZWhvbGRlcjogc3RyaW5nID0gXCJcIjtcblxuICBAcHJvcGVydHkoe2F0dHJpYnV0ZTogZmFsc2V9KVxuICB0ZXh0SW5wdXRFbGVtZW50OiBUZXh0SW5wdXQ7XG5cbiAgQHByb3BlcnR5KHthdHRyaWJ1dGU6IGZhbHNlfSlcbiAgYW5jaG9yRWxlbWVudDogSFRNTERpdkVsZW1lbnQ7XG5cbiAgQHByb3BlcnR5KHt0eXBlOiBBcnJheX0pXG4gIG9wdGlvbnM6IGFueVtdID0gW107XG5cbiAgQHByb3BlcnR5KHt0eXBlOiBTdHJpbmd9KVxuICBuYW1lOiBzdHJpbmcgPSBcIlwiO1xuXG4gIEBwcm9wZXJ0eSh7dHlwZTogU3RyaW5nfSlcbiAgdmFsdWU6IHN0cmluZyA9IFwiXCI7XG5cbiAgQHByb3BlcnR5KHt0eXBlOiBTdHJpbmd9KVxuICBjb21wbGV0aW9uc0VuZHBvaW50OiBzdHJpbmc7XG5cbiAgQHByb3BlcnR5KHt0eXBlOiBTdHJpbmd9KVxuICBmdW5jdGlvbnNFbmRwb2ludDogc3RyaW5nO1xuXG4gIEBwcm9wZXJ0eSh7dHlwZTogU3RyaW5nfSlcbiAgZmllbGRzRW5kcG9pbnQ6IHN0cmluZztcblxuICBAcHJvcGVydHkoe3R5cGU6IEJvb2xlYW59KVxuICB0ZXh0YXJlYTogYm9vbGVhbjtcblxuICBwcml2YXRlIGhpZGRlbkVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQ7XG4gIHByaXZhdGUgaW5wdXRFbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50O1xuICBwcml2YXRlIHF1ZXJ5OiBzdHJpbmc7XG4gIFxuICBwdWJsaWMgZmlyc3RVcGRhdGVkKGNoYW5nZWRQcm9wZXJ0aWVzOiBNYXA8c3RyaW5nLCBhbnk+KSB7XG4gICAgdGhpcy50ZXh0SW5wdXRFbGVtZW50ID0gdGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoXCJycC10ZXh0aW5wdXRcIikgYXMgVGV4dElucHV0O1xuICAgIHRoaXMuYW5jaG9yRWxlbWVudCA9IHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKFwiI2FuY2hvclwiKTtcblxuICAgIC8vIFRPRE86IGZldGNoIHRoZXNlIG9uY2UgcGVyIHBhZ2UsIG5vdCBvbmNlIHBlciBjb250cm9sXG4gICAgaWYgKHRoaXMuY29tcGxldGlvbnNFbmRwb2ludCkge1xuICAgICAgZ2V0VXJsKHRoaXMuY29tcGxldGlvbnNFbmRwb2ludCkudGhlbigocmVzcG9uc2U6IEF4aW9zUmVzcG9uc2UpID0+IHtcbiAgICAgICAgdGhpcy5zY2hlbWEgPSByZXNwb25zZS5kYXRhIGFzIENvbXBsZXRpb25TY2hlbWE7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5mdW5jdGlvbnNFbmRwb2ludCkge1xuICAgICAgZ2V0VXJsKHRoaXMuZnVuY3Rpb25zRW5kcG9pbnQpLnRoZW4oKHJlc3BvbnNlOiBBeGlvc1Jlc3BvbnNlKSA9PiB7XG4gICAgICAgIHRoaXMuZnVuY3Rpb25zID0gcmVzcG9uc2UuZGF0YSBhcyBDb21wbGV0aW9uT3B0aW9uW107XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5maWVsZHNFbmRwb2ludCkge1xuICAgICAgZ2V0QXNzZXRzKHRoaXMuZmllbGRzRW5kcG9pbnQpLnRoZW4oKGFzc2V0czogQXNzZXRbXSk9PntcbiAgICAgICAgdGhpcy5rZXllZEFzc2V0cyA9IHsgZmllbGRzOiBhc3NldHMubWFwKChhc3NldDogQXNzZXQpPT4gYXNzZXQua2V5ICkgfVxuICAgICAgfSk7ICAgICAgXG4gICAgfVxuXG4gICAgLy8gY3JlYXRlIG91ciBoaWRkZW4gY29udGFpbmVyIHNvIGl0IGdldHMgaW5jbHVkZWQgaW4gb3VyIGhvc3QgZWxlbWVudCdzIGZvcm1cbiAgICB0aGlzLmhpZGRlbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgdGhpcy5oaWRkZW5FbGVtZW50LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJoaWRkZW5cIik7XG4gICAgdGhpcy5oaWRkZW5FbGVtZW50LnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgdGhpcy5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpKTtcbiAgICB0aGlzLmhpZGRlbkVsZW1lbnQuc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgdGhpcy5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKSB8fCBcIlwiKTtcbiAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMuaGlkZGVuRWxlbWVudCk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUtleVVwKGV2dDogS2V5Ym9hcmRFdmVudCkge1xuXG4gICAgLy8gaWYgd2UgaGF2ZSBvcHRpb25zLCBpZ25vcmUga2V5cyB0aGF0IGFyZSBtZWFudCBmb3IgdGhlbVxuICAgIGlmICh0aGlzLm9wdGlvbnMubGVuZ3RoID4gMCkge1xuXG4gICAgICBpZihldnQua2V5ID09PSBcIkFycm93VXBcIiB8fCBldnQua2V5ID09PSBcIkFycm93RG93blwiKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2dC5jdHJsS2V5KSB7XG4gICAgICAgIGlmIChldnQua2V5ID09PSBcIm5cIiB8fCBldnQua2V5ID09PSBcInBcIikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZihldnQua2V5ID09PSBcIkVudGVyXCIgfHwgZXZ0LmtleSA9PT0gXCJFc2NhcGVcIiB8fCBldnQua2V5ID09PSBcIlRhYlwiIHx8IGV2dC5rZXkuc3RhcnRzV2l0aChcIkNvbnRyb2xcIikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmV4ZWN1dGVRdWVyeShldnQuY3VycmVudFRhcmdldCBhcyBUZXh0SW5wdXQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlQ2xpY2soZXZ0OiBNb3VzZUV2ZW50KSB7XG4gICAgdGhpcy5leGVjdXRlUXVlcnkoZXZ0LmN1cnJlbnRUYXJnZXQgYXMgVGV4dElucHV0KVxuICB9XG5cbiAgLyoqXG4gICAqIGhhbmRsZSB0aGUgdXNlciBtb3ZpbmcgdGhlIGNhcmV0IHRvIGEgbmV3IGxvY2F0aW9uXG4gICAqL1xuICBwcml2YXRlIGV4ZWN1dGVRdWVyeShlbGU6IFRleHRJbnB1dCkge1xuICAgIHRoaXMuaW5wdXRFbGVtZW50ID0gZWxlLmlucHV0RWxlbWVudDtcbiAgICB0aGlzLmN1cnJlbnRGdW5jdGlvbiA9IG51bGw7XG5cbiAgICBpZiAodGhpcy5zY2hlbWEpIHtcbiAgICAgIGNvbnN0IGN1cnNvciA9IGVsZS5pbnB1dEVsZW1lbnQuc2VsZWN0aW9uU3RhcnQ7XG4gICAgICBjb25zdCBpbnB1dCA9IGVsZS5pbnB1dEVsZW1lbnQudmFsdWUuc3Vic3RyaW5nKDAsIGN1cnNvcik7XG4gICAgICBjb25zdCBleHByZXNzaW9ucyA9IENvbXBsZXRpb24ucGFyc2VyLmZpbmRFeHByZXNzaW9ucyhpbnB1dCk7XG4gICAgICBjb25zdCBjdXJyZW50RXhwcmVzc2lvbiA9IGV4cHJlc3Npb25zLmZpbmQoKGV4cHI6IEV4cHJlc3Npb24pPT5leHByLnN0YXJ0IDw9IGN1cnNvciAmJiAoZXhwci5lbmQgPiBjdXJzb3IgfHwgZXhwci5lbmQgPT09IGN1cnNvciAmJiAhZXhwci5jbG9zZWQpKTtcblxuICAgICAgaWYgKGN1cnJlbnRFeHByZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGluY2x1ZGVGdW5jdGlvbnMgPSBjdXJyZW50RXhwcmVzc2lvbi50ZXh0LmluZGV4T2YoJygnKSA+IC0xO1xuICAgICAgICBpZiAoaW5jbHVkZUZ1bmN0aW9ucykge1xuICAgICAgICAgIGNvbnN0IGZ1bmN0aW9uUXVlcnkgPSBDb21wbGV0aW9uLnBhcnNlci5mdW5jdGlvbkNvbnRleHQoY3VycmVudEV4cHJlc3Npb24udGV4dCk7XG4gICAgICAgICAgaWYgKGZ1bmN0aW9uUXVlcnkpIHtcbiAgICAgICAgICAgIGNvbnN0IGZucyA9IGdldEZ1bmN0aW9ucyh0aGlzLmZ1bmN0aW9ucywgZnVuY3Rpb25RdWVyeSk7XG4gICAgICAgICAgICBpZiAoZm5zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RnVuY3Rpb24gPSBmbnNbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBcbiAgICAgICAgZm9yIChsZXQgaSA9IGN1cnJlbnRFeHByZXNzaW9uLnRleHQubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGNvbnN0IGN1cnIgPSBjdXJyZW50RXhwcmVzc2lvbi50ZXh0W2ldO1xuICAgICAgICAgIGlmIChjdXJyID09PSAnQCcgfHwgY3VyciA9PT0gJygnIHx8IGN1cnIgPT09ICcgJyB8fCBjdXJyID09PSAnLCcgfHwgY3VyciA9PT0gJyknIHx8IGkgPT09IDApIHtcbiAgICAgICAgICAgIC8vIGRvbid0IGluY2x1ZGUgbm9uLWV4cHJlc3Npb24gY2hhcnNcbiAgICAgICAgICAgIGlmIChjdXJyID09PSAnKCcgfHwgY3VyciA9PT0gJyAnIHx8IGN1cnIgPT09ICcsJyB8fCBjdXJyID09PSAnKScgfHwgY3VyciA9PT0gJ0AnKSB7XG4gICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGNhcmV0ID0gZ2V0Q2FyZXRDb29yZGluYXRlcyhlbGUuaW5wdXRFbGVtZW50LCBjdXJyZW50RXhwcmVzc2lvbi5zdGFydCArIGkpO1xuICAgICAgICAgICAgdGhpcy5hbmNob3JQb3NpdGlvbiA9IHtcbiAgICAgICAgICAgICAgIGxlZnQ6IGNhcmV0LmxlZnQgKyA3IC0gdGhpcy5pbnB1dEVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICAgICAgICAgICAgIHRvcDogY2FyZXQudG9wIC0gdGhpcy5pbnB1dEVsZW1lbnQuc2Nyb2xsVG9wXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucXVlcnkgPSBjdXJyZW50RXhwcmVzc2lvbi50ZXh0LnN1YnN0cihpLCBjdXJyZW50RXhwcmVzc2lvbi50ZXh0Lmxlbmd0aCAtIGkpO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gW1xuICAgICAgICAgICAgICAuLi5nZXRDb21wbGV0aW9ucyh0aGlzLnNjaGVtYSwgdGhpcy5xdWVyeSwgdGhpcy5rZXllZEFzc2V0cyksXG4gICAgICAgICAgICAgIC4uLihpbmNsdWRlRnVuY3Rpb25zID8gZ2V0RnVuY3Rpb25zKHRoaXMuZnVuY3Rpb25zLCB0aGlzLnF1ZXJ5KSA6IFtdKVxuICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gW107XG4gICAgICAgIHRoaXMucXVlcnkgPSBcIlwiO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlSW5wdXQoZXZ0OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgY29uc3QgZWxlID0gZXZ0LmN1cnJlbnRUYXJnZXQgYXMgVGV4dElucHV0O1xuICAgIHRoaXMuZXhlY3V0ZVF1ZXJ5KGVsZSk7XG4gICAgdGhpcy5oaWRkZW5FbGVtZW50LnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIGVsZS5pbnB1dEVsZW1lbnQudmFsdWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVPcHRpb25DYW5jZWxlZChldnQ6IEN1c3RvbUV2ZW50KSB7XG4gICAgdGhpcy5vcHRpb25zID0gW107XG4gICAgdGhpcy5xdWVyeSA9IFwiXCI7XG4gIH1cbiAgXG4gIHByaXZhdGUgaGFuZGxlT3B0aW9uU2VsZWN0aW9uKGV2dDogQ3VzdG9tRXZlbnQpIHtcbiAgICBjb25zdCBvcHRpb24gPSBldnQuZGV0YWlsLnNlbGVjdGVkIGFzIENvbXBsZXRpb25PcHRpb247XG4gICAgY29uc3QgdGFiYmVkID0gZXZ0LmRldGFpbC50YWJiZWQ7XG5cbiAgICBsZXQgaW5zZXJ0VGV4dCA9IFwiXCI7XG4gICAgXG4gICAgaWYgKG9wdGlvbi5zaWduYXR1cmUpIHtcbiAgICAgIC8vIHRoZXkgc2VsZWN0ZWQgYSBmdW5jdGlvblxuICAgICAgaW5zZXJ0VGV4dCA9IG9wdGlvbi5zaWduYXR1cmUuc3Vic3RyKDAsIG9wdGlvbi5zaWduYXR1cmUuaW5kZXhPZihcIihcIikgKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zZXJ0VGV4dCA9IG9wdGlvbi5uYW1lO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlucHV0RWxlbWVudCkge1xuICAgICAgbGV0IHZhbHVlID0gdGhpcy5pbnB1dEVsZW1lbnQudmFsdWU7XG4gICAgICBjb25zdCBpbnNlcnRpb25Qb2ludCA9IHRoaXMuaW5wdXRFbGVtZW50LnNlbGVjdGlvblN0YXJ0IC0gdGhpcy5xdWVyeS5sZW5ndGg7XG4gICAgICBcbiAgICAgIC8vIHN0cmlwIG91dCBvdXIgcXVlcnlcbiAgICAgIC8vIGNvbnN0IGluc2VydGlvblBvaW50ID0gdmFsdWUubGFzdEluZGV4T2YodmFsdWUuc3Vic3RyaW5nKDAsIHRoaXMuaW5wdXRFbGVtZW50LnNlbGVjdGlvblN0YXJ0KSk7XG4gICAgICBjb25zdCBsZWZ0U2lkZSA9IHZhbHVlLnN1YnN0cigwLCBpbnNlcnRpb25Qb2ludCk7XG4gICAgICBjb25zdCByZW1haW5pbmcgPSB2YWx1ZS5zdWJzdHIoaW5zZXJ0aW9uUG9pbnQgKyB0aGlzLnF1ZXJ5Lmxlbmd0aCk7XG4gICAgICBjb25zdCBjYXJldCA9IGxlZnRTaWRlLmxlbmd0aCArIGluc2VydFRleHQubGVuZ3RoO1xuXG4gICAgICAvLyBzZXQgb3VyIHZhbHVlIGFuZCBvdXIgbmV3IGNhcmV0XG4gICAgICB0aGlzLmlucHV0RWxlbWVudC52YWx1ZSA9IGxlZnRTaWRlICsgaW5zZXJ0VGV4dCArIHJlbWFpbmluZztcbiAgICAgIHRoaXMuaW5wdXRFbGVtZW50LnNldFNlbGVjdGlvblJhbmdlKGNhcmV0LCBjYXJldCk7XG5cbiAgICAgIC8vIG5vdyBzY3JvbGwgb3VyIHRleHQgYm94IGlmIG5lY2Vzc2FyeVxuICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRDYXJldENvb3JkaW5hdGVzKHRoaXMuaW5wdXRFbGVtZW50LCBjYXJldCk7XG4gICAgICBpZiAocG9zaXRpb24ubGVmdCA+IHRoaXMuaW5wdXRFbGVtZW50LndpZHRoKSB7XG4gICAgICAgIHRoaXMuaW5wdXRFbGVtZW50LnNjcm9sbExlZnQgPSBwb3NpdGlvbi5sZWZ0O1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgdGhpcy5xdWVyeSA9IFwiXCI7XG4gICAgdGhpcy5vcHRpb25zID0gW107XG4gICAgXG4gICAgaWYgKHRhYmJlZCkge1xuICAgICAgdGhpcy5leGVjdXRlUXVlcnkodGhpcy50ZXh0SW5wdXRFbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlbmRlckNvbXBsZXRpb25PcHRpb24ob3B0aW9uOiBDb21wbGV0aW9uT3B0aW9uLCBzZWxlY3RlZDogYm9vbGVhbikge1xuICAgIGlmKG9wdGlvbi5zaWduYXR1cmUpIHtcblxuICAgICAgY29uc3QgYXJnU3RhcnQgPSBvcHRpb24uc2lnbmF0dXJlLmluZGV4T2YoXCIoXCIpXG4gICAgICBjb25zdCBuYW1lID0gb3B0aW9uLnNpZ25hdHVyZS5zdWJzdHIoMCwgYXJnU3RhcnQpO1xuICAgICAgY29uc3QgYXJncyA9IG9wdGlvbi5zaWduYXR1cmUuc3Vic3RyKGFyZ1N0YXJ0KTtcblxuICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgIDxkaXYgc3R5bGU9XCIke3NlbGVjdGVkID8gJ2ZvbnQtd2VpZ2h0OiA0MDAnIDogJyd9XCI+XG4gICAgICAgICAgPGRpdiBzdHlsZT1cImRpc3BsYXk6aW5saW5lLWJsb2NrO1wiPsaSPC9kaXY+XG4gICAgICAgICAgPGRpdiBzdHlsZT1cImRpc3BsYXk6aW5saW5lLWJsb2NrXCI+JHtuYW1lfTwvZGl2PlxuICAgICAgICAgICR7c2VsZWN0ZWQgPyBodG1sYFxuICAgICAgICAgICAgPGRpdiBzdHlsZT1cImRpc3BsYXk6aW5saW5lLWJsb2NrOyBmb250LXdlaWdodDogMzAwOyBmb250LXNpemU6IDg1JVwiPiR7YXJnc308L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkZXRhaWxcIj4ke21hcmtlZFJlbmRlcihvcHRpb24uc3VtbWFyeSl9PC9kaXY+XG4gICAgICAgICAgYCA6IG51bGx9XG4gICAgICAgIDwvZGl2PmA7XG4gICAgICB9XG5cbiAgICByZXR1cm4gaHRtbGBcbiAgICA8ZGl2PlxuICAgICAgPGRpdiBzdHlsZT1cIiR7c2VsZWN0ZWQgPyAnZm9udC13ZWlnaHQ6IDQwMCcgOiAnJ31cIj4ke29wdGlvbi5uYW1lfTwvZGl2PlxuICAgICAgJHtzZWxlY3RlZCA/IGh0bWxgPGRpdiBzdHlsZT1cImZvbnQtc2l6ZTogODUlXCI+JHtvcHRpb24uc3VtbWFyeX08L2Rpdj5gIDogbnVsbH1cbiAgICA8L2Rpdj5gXG4gIH1cblxuICBwdWJsaWMgcmVuZGVyKCk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgIDxzdHlsZT5cbiAgICAgICAgI2FuY2hvciB7XG4gICAgICAgICAgdG9wOiR7dGhpcy5hbmNob3JQb3NpdGlvbi50b3B9cHg7XG4gICAgICAgICAgbGVmdDoke3RoaXMuYW5jaG9yUG9zaXRpb24ubGVmdH1weDtcbiAgICAgICAgfVxuICAgICAgPC9zdHlsZT5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgICAgICAgPGRpdiBpZD1cImFuY2hvclwiPjwvZGl2PlxuICAgICAgICA8cnAtdGV4dGlucHV0IFxuICAgICAgICAgIG5hbWU9JHt0aGlzLm5hbWV9XG4gICAgICAgICAgcGxhY2Vob2xkZXI9JHt0aGlzLnBsYWNlaG9sZGVyfVxuICAgICAgICAgIEBrZXl1cD0ke3RoaXMuaGFuZGxlS2V5VXB9XG4gICAgICAgICAgQGNsaWNrPSR7dGhpcy5oYW5kbGVDbGlja31cbiAgICAgICAgICBAaW5wdXQ9JHt0aGlzLmhhbmRsZUlucHV0fVxuICAgICAgICAgIC52YWx1ZT0ke3RoaXMudmFsdWUgfHwgXCJcIn1cbiAgICAgICAgICA/dGV4dGFyZWE9JHt0aGlzLnRleHRhcmVhfVxuICAgICAgICAgID5cbiAgICAgICAgPC9ycC10ZXh0aW5wdXQ+XG4gICAgICAgIDxycC1vcHRpb25zXG4gICAgICAgICAgQHJwLXNlbGVjdGlvbj0ke3RoaXMuaGFuZGxlT3B0aW9uU2VsZWN0aW9ufVxuICAgICAgICAgIEBycC1jYW5jZWxlZD0ke3RoaXMuaGFuZGxlT3B0aW9uQ2FuY2VsZWR9XG4gICAgICAgICAgLmFuY2hvclRvPSR7dGhpcy5hbmNob3JFbGVtZW50fVxuICAgICAgICAgIC5vcHRpb25zPSR7dGhpcy5vcHRpb25zfVxuICAgICAgICAgIC5yZW5kZXJPcHRpb249JHt0aGlzLnJlbmRlckNvbXBsZXRpb25PcHRpb259XG4gICAgICAgICAgP3Zpc2libGU9JHt0aGlzLm9wdGlvbnMubGVuZ3RoID4gMH1cbiAgICAgICAgPlxuICAgICAgICAgICR7dGhpcy5jdXJyZW50RnVuY3Rpb24gPyBodG1sYDxkaXYgY2xhc3M9XCJjdXJyZW50LWZuXCI+JHt0aGlzLnJlbmRlckNvbXBsZXRpb25PcHRpb24odGhpcy5jdXJyZW50RnVuY3Rpb24sIHRydWUpfTwvZGl2PmA6IG51bGx9XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImZvb3RlclwiPlRhYiB0byBjb21wbGV0ZSwgZW50ZXIgdG8gc2VsZWN0PC9kaXY+XG4gICAgICAgIDwvcnAtb3B0aW9ucz5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cbn0iXSwic291cmNlUm9vdCI6IiJ9