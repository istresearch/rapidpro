!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["rp-components"]=t():e["rp-components"]=t()}(window,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=29)}([function(e,t,n){"use strict";var r=n(5),i=n(11),o=Object.prototype.toString;function s(e){return"[object Array]"===o.call(e)}function a(e){return null!==e&&"object"==typeof e}function l(e){return"[object Function]"===o.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),s(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}e.exports={isArray:s,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:i,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:a,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:l,isStream:function(e){return a(e)&&l(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,i=arguments.length;r<i;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,function(t,i){e[i]=n&&"function"==typeof t?r(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){e.exports=n(10)},function(e,t,n){"use strict";var r=n(0),i=n(13),o={"Content-Type":"application/x-www-form-urlencoded"};function s(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var a,l={adapter:("undefined"!=typeof XMLHttpRequest?a=n(6):"undefined"!=typeof process&&(a=n(6)),a),transformRequest:[function(e,t){return i(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(s(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(s(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};l.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){l.headers[e]={}}),r.forEach(["post","put","patch"],function(e){l.headers[e]=r.merge(o)}),e.exports=l},function(e,t,n){var r,i,o;i=[e,t],void 0===(o="function"==typeof(r=function(e,t){"use strict";var n,r,i="function"==typeof Map?new Map:(n=[],r=[],{has:function(e){return n.indexOf(e)>-1},get:function(e){return r[n.indexOf(e)]},set:function(e,t){-1===n.indexOf(e)&&(n.push(e),r.push(t))},delete:function(e){var t=n.indexOf(e);t>-1&&(n.splice(t,1),r.splice(t,1))}}),o=function(e){return new Event(e,{bubbles:!0})};try{new Event("test")}catch(e){o=function(e){var t=document.createEvent("Event");return t.initEvent(e,!0,!1),t}}function s(e){if(e&&e.nodeName&&"TEXTAREA"===e.nodeName&&!i.has(e)){var t=null,n=null,r=null,s=function(){e.clientWidth!==n&&u()},a=function(t){window.removeEventListener("resize",s,!1),e.removeEventListener("input",u,!1),e.removeEventListener("keyup",u,!1),e.removeEventListener("autosize:destroy",a,!1),e.removeEventListener("autosize:update",u,!1),Object.keys(t).forEach(function(n){e.style[n]=t[n]}),i.delete(e)}.bind(e,{height:e.style.height,resize:e.style.resize,overflowY:e.style.overflowY,overflowX:e.style.overflowX,wordWrap:e.style.wordWrap});e.addEventListener("autosize:destroy",a,!1),"onpropertychange"in e&&"oninput"in e&&e.addEventListener("keyup",u,!1),window.addEventListener("resize",s,!1),e.addEventListener("input",u,!1),e.addEventListener("autosize:update",u,!1),e.style.overflowX="hidden",e.style.wordWrap="break-word",i.set(e,{destroy:a,update:u}),"vertical"===(l=window.getComputedStyle(e,null)).resize?e.style.resize="none":"both"===l.resize&&(e.style.resize="horizontal"),t="content-box"===l.boxSizing?-(parseFloat(l.paddingTop)+parseFloat(l.paddingBottom)):parseFloat(l.borderTopWidth)+parseFloat(l.borderBottomWidth),isNaN(t)&&(t=0),u()}var l;function c(t){var n=e.style.width;e.style.width="0px",e.offsetWidth,e.style.width=n,e.style.overflowY=t}function p(){if(0!==e.scrollHeight){var r=function(e){for(var t=[];e&&e.parentNode&&e.parentNode instanceof Element;)e.parentNode.scrollTop&&t.push({node:e.parentNode,scrollTop:e.parentNode.scrollTop}),e=e.parentNode;return t}(e),i=document.documentElement&&document.documentElement.scrollTop;e.style.height="",e.style.height=e.scrollHeight+t+"px",n=e.clientWidth,r.forEach(function(e){e.node.scrollTop=e.scrollTop}),i&&(document.documentElement.scrollTop=i)}}function u(){p();var t=Math.round(parseFloat(e.style.height)),n=window.getComputedStyle(e,null),i="content-box"===n.boxSizing?Math.round(parseFloat(n.height)):e.offsetHeight;if(i<t?"hidden"===n.overflowY&&(c("scroll"),p(),i="content-box"===n.boxSizing?Math.round(parseFloat(window.getComputedStyle(e,null).height)):e.offsetHeight):"hidden"!==n.overflowY&&(c("hidden"),p(),i="content-box"===n.boxSizing?Math.round(parseFloat(window.getComputedStyle(e,null).height)):e.offsetHeight),r!==i){r=i;var s=o("autosize:resized");try{e.dispatchEvent(s)}catch(e){}}}}function a(e){var t=i.get(e);t&&t.destroy()}function l(e){var t=i.get(e);t&&t.update()}var c=null;"undefined"==typeof window||"function"!=typeof window.getComputedStyle?((c=function(e){return e}).destroy=function(e){return e},c.update=function(e){return e}):((c=function(e,t){return e&&Array.prototype.forEach.call(e.length?e:[e],function(e){return s(e)}),e}).destroy=function(e){return e&&Array.prototype.forEach.call(e.length?e:[e],a),e},c.update=function(e){return e&&Array.prototype.forEach.call(e.length?e:[e],l),e}),t.default=c,e.exports=t.default})?r.apply(t,i):r)||(e.exports=o)},function(e,t,n){!function(){var t=["direction","boxSizing","width","height","overflowX","overflowY","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","borderStyle","paddingTop","paddingRight","paddingBottom","paddingLeft","fontStyle","fontVariant","fontWeight","fontStretch","fontSize","fontSizeAdjust","lineHeight","fontFamily","textAlign","textTransform","textIndent","textDecoration","letterSpacing","wordSpacing","tabSize","MozTabSize"],n="undefined"!=typeof window,r=n&&null!=window.mozInnerScreenX;function i(e,i,o){if(!n)throw new Error("textarea-caret-position#getCaretCoordinates should only be called in a browser");var s=o&&o.debug||!1;if(s){var a=document.querySelector("#input-textarea-caret-position-mirror-div");a&&a.parentNode.removeChild(a)}var l=document.createElement("div");l.id="input-textarea-caret-position-mirror-div",document.body.appendChild(l);var c=l.style,p=window.getComputedStyle?window.getComputedStyle(e):e.currentStyle,u="INPUT"===e.nodeName;c.whiteSpace="pre-wrap",u||(c.wordWrap="break-word"),c.position="absolute",s||(c.visibility="hidden"),t.forEach(function(e){u&&"lineHeight"===e?c.lineHeight=p.height:c[e]=p[e]}),r?e.scrollHeight>parseInt(p.height)&&(c.overflowY="scroll"):c.overflow="hidden",l.textContent=e.value.substring(0,i),u&&(l.textContent=l.textContent.replace(/\s/g,"Â "));var h=document.createElement("span");h.textContent=e.value.substring(i)||".",l.appendChild(h);var d={top:h.offsetTop+parseInt(p.borderTopWidth),left:h.offsetLeft+parseInt(p.borderLeftWidth),height:parseInt(p.lineHeight)};return s?h.style.backgroundColor="#aaa":document.body.removeChild(l),d}void 0!==e.exports?e.exports=i:n&&(window.getCaretCoordinates=i)}()},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(0),i=n(14),o=n(16),s=n(17),a=n(18),l=n(7),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(19);e.exports=function(e){return new Promise(function(t,p){var u=e.data,h=e.headers;r.isFormData(u)&&delete h["Content-Type"];var d=new XMLHttpRequest,f="onreadystatechange",g=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in d||a(e.url)||(d=new window.XDomainRequest,f="onload",g=!0,d.onprogress=function(){},d.ontimeout=function(){}),e.auth){var m=e.auth.username||"",y=e.auth.password||"";h.Authorization="Basic "+c(m+":"+y)}if(d.open(e.method.toUpperCase(),o(e.url,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d[f]=function(){if(d&&(4===d.readyState||g)&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?s(d.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:1223===d.status?204:d.status,statusText:1223===d.status?"No Content":d.statusText,headers:n,config:e,request:d};i(t,p,r),d=null}},d.onerror=function(){p(l("Network Error",e,null,d)),d=null},d.ontimeout=function(){p(l("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var v=n(20),b=(e.withCredentials||a(e.url))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;b&&(h[e.xsrfHeaderName]=b)}if("setRequestHeader"in d&&r.forEach(h,function(e,t){void 0===u&&"content-type"===t.toLowerCase()?delete h[t]:d.setRequestHeader(t,e)}),e.withCredentials&&(d.withCredentials=!0),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){d&&(d.abort(),p(e),d=null)}),void 0===u&&(u=null),d.send(u)})}},function(e,t,n){"use strict";var r=n(15);e.exports=function(e,t,n,i,o){var s=new Error(e);return r(s,t,n,i,o)}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";var r=n(0),i=n(5),o=n(12),s=n(2);function a(e){var t=new o(e),n=i(o.prototype.request,t);return r.extend(n,o.prototype,t),r.extend(n,t),n}var l=a(s);l.Axios=o,l.create=function(e){return a(r.merge(s,e))},l.Cancel=n(9),l.CancelToken=n(26),l.isCancel=n(8),l.all=function(e){return Promise.all(e)},l.spread=n(27),e.exports=l,e.exports.default=l},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(2),i=n(0),o=n(21),s=n(22);function a(e){this.defaults=e,this.interceptors={request:new o,response:new o}}a.prototype.request=function(e){"string"==typeof e&&(e=i.merge({url:arguments[0]},arguments[1])),(e=i.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[s,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},i.forEach(["delete","get","head","options"],function(e){a.prototype[e]=function(t,n){return this.request(i.merge(n||{},{method:e,url:t}))}}),i.forEach(["post","put","patch"],function(e){a.prototype[e]=function(t,n,r){return this.request(i.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=a},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(7);e.exports=function(e,t,n){var i=n.config.validateStatus;n.status&&i&&!i(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,i){return e.config=t,n&&(e.code=n),e.request=r,e.response=i,e}},function(e,t,n){"use strict";var r=n(0);function i(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var o;if(n)o=n(t);else if(r.isURLSearchParams(t))o=t.toString();else{var s=[];r.forEach(t,function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),s.push(i(t)+"="+i(e))}))}),o=s.join("&")}return o&&(e+=(-1===e.indexOf("?")?"?":"&")+o),e}},function(e,t,n){"use strict";var r=n(0),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,o,s={};return e?(r.forEach(e.split("\n"),function(e){if(o=e.indexOf(":"),t=r.trim(e.substr(0,o)).toLowerCase(),n=r.trim(e.substr(o+1)),t){if(s[t]&&i.indexOf(t)>=0)return;s[t]="set-cookie"===t?(s[t]?s[t]:[]).concat([n]):s[t]?s[t]+", "+n:n}}),s):s}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function i(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=i(window.location.href),function(t){var n=r.isString(t)?i(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function i(){this.message="String contains an invalid character"}i.prototype=new Error,i.prototype.code=5,i.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,o=String(e),s="",a=0,l=r;o.charAt(0|a)||(l="=",a%1);s+=l.charAt(63&t>>8-a%1*8)){if((n=o.charCodeAt(a+=.75))>255)throw new i;t=t<<8|n}return s}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,i,o,s){var a=[];a.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),r.isString(i)&&a.push("path="+i),r.isString(o)&&a.push("domain="+o),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(0);function i(){this.handlers=[]}i.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},i.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},i.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=i},function(e,t,n){"use strict";var r=n(0),i=n(23),o=n(8),s=n(2),a=n(24),l=n(25);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!a(e.url)&&(e.url=l(e.baseURL,e.url)),e.headers=e.headers||{},e.data=i(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||s.adapter)(e).then(function(t){return c(e),t.data=i(t.data,t.headers,e.transformResponse),t},function(t){return o(t)||(c(e),t&&t.response&&(t.response.data=i(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(9);function i(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var e;return{token:new i(function(t){e=t}),cancel:e}},e.exports=i},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){!function(t){"use strict";var n={newline:/^\n+/,code:/^( {4}[^\n]+\n*)+/,fences:/^ {0,3}(`{3,}|~{3,})([^`~\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?:\n+|$)|$)/,hr:/^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,heading:/^ {0,3}(#{1,6}) +([^\n]*?)(?: +#+)? *(?:\n+|$)/,blockquote:/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,list:/^( {0,3})(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,html:"^ {0,3}(?:<(script|pre|style)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?\\?>\\n*|<![A-Z][\\s\\S]*?>\\n*|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\n*|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:\\n{2,}|$)|<(?!script|pre|style)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$)|</(?!script|pre|style)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$))",def:/^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,nptable:m,table:m,lheading:/^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,_paragraph:/^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html)[^\n]+)*)/,text:/^[^\n]+/};function r(e){this.tokens=[],this.tokens.links=Object.create(null),this.options=e||k.defaults,this.rules=n.normal,this.options.pedantic?this.rules=n.pedantic:this.options.gfm&&(this.rules=n.gfm)}n._label=/(?!\s*\])(?:\\[\[\]]|[^\[\]])+/,n._title=/(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/,n.def=h(n.def).replace("label",n._label).replace("title",n._title).getRegex(),n.bullet=/(?:[*+-]|\d{1,9}\.)/,n.item=/^( *)(bull) ?[^\n]*(?:\n(?!\1bull ?)[^\n]*)*/,n.item=h(n.item,"gm").replace(/bull/g,n.bullet).getRegex(),n.list=h(n.list).replace(/bull/g,n.bullet).replace("hr","\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def","\\n+(?="+n.def.source+")").getRegex(),n._tag="address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul",n._comment=/<!--(?!-?>)[\s\S]*?-->/,n.html=h(n.html,"i").replace("comment",n._comment).replace("tag",n._tag).replace("attribute",/ +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(),n.paragraph=h(n._paragraph).replace("hr",n.hr).replace("heading"," {0,3}#{1,6} +").replace("|lheading","").replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}|~{3,})[^`\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)").replace("tag",n._tag).getRegex(),n.blockquote=h(n.blockquote).replace("paragraph",n.paragraph).getRegex(),n.normal=y({},n),n.gfm=y({},n.normal,{nptable:/^ *([^|\n ].*\|.*)\n *([-:]+ *\|[-| :]*)(?:\n((?:.*[^>\n ].*(?:\n|$))*)\n*|$)/,table:/^ *\|(.+)\n *\|?( *[-:]+[-| :]*)(?:\n((?: *[^>\n ].*(?:\n|$))*)\n*|$)/}),n.pedantic=y({},n.normal,{html:h("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace("comment",n._comment).replace(/tag/g,"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,heading:/^ *(#{1,6}) *([^\n]+?) *(?:#+ *)?(?:\n+|$)/,fences:m,paragraph:h(n.normal._paragraph).replace("hr",n.hr).replace("heading"," *#{1,6} *[^\n]").replace("lheading",n.lheading).replace("blockquote"," {0,3}>").replace("|fences","").replace("|list","").replace("|html","").getRegex()}),r.rules=n,r.lex=function(e,t){return new r(t).lex(e)},r.prototype.lex=function(e){return e=e.replace(/\r\n|\r/g,"\n").replace(/\t/g,"    ").replace(/\u00a0/g," ").replace(/\u2424/g,"\n"),this.token(e,!0)},r.prototype.token=function(e,t){var r,i,o,s,a,l,c,u,h,d,f,g,m,y,x,w;for(e=e.replace(/^ +$/gm,"");e;)if((o=this.rules.newline.exec(e))&&(e=e.substring(o[0].length),o[0].length>1&&this.tokens.push({type:"space"})),o=this.rules.code.exec(e)){var k=this.tokens[this.tokens.length-1];e=e.substring(o[0].length),k&&"paragraph"===k.type?k.text+="\n"+o[0].trimRight():(o=o[0].replace(/^ {4}/gm,""),this.tokens.push({type:"code",codeBlockStyle:"indented",text:this.options.pedantic?o:b(o,"\n")}))}else if(o=this.rules.fences.exec(e))e=e.substring(o[0].length),this.tokens.push({type:"code",lang:o[2]?o[2].trim():o[2],text:o[3]||""});else if(o=this.rules.heading.exec(e))e=e.substring(o[0].length),this.tokens.push({type:"heading",depth:o[1].length,text:o[2]});else if((o=this.rules.nptable.exec(e))&&(l={type:"table",header:v(o[1].replace(/^ *| *\| *$/g,"")),align:o[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:o[3]?o[3].replace(/\n$/,"").split("\n"):[]}).header.length===l.align.length){for(e=e.substring(o[0].length),f=0;f<l.align.length;f++)/^ *-+: *$/.test(l.align[f])?l.align[f]="right":/^ *:-+: *$/.test(l.align[f])?l.align[f]="center":/^ *:-+ *$/.test(l.align[f])?l.align[f]="left":l.align[f]=null;for(f=0;f<l.cells.length;f++)l.cells[f]=v(l.cells[f],l.header.length);this.tokens.push(l)}else if(o=this.rules.hr.exec(e))e=e.substring(o[0].length),this.tokens.push({type:"hr"});else if(o=this.rules.blockquote.exec(e))e=e.substring(o[0].length),this.tokens.push({type:"blockquote_start"}),o=o[0].replace(/^ *> ?/gm,""),this.token(o,t),this.tokens.push({type:"blockquote_end"});else if(o=this.rules.list.exec(e)){for(e=e.substring(o[0].length),c={type:"list_start",ordered:y=(s=o[2]).length>1,start:y?+s:"",loose:!1},this.tokens.push(c),u=[],r=!1,m=(o=o[0].match(this.rules.item)).length,f=0;f<m;f++)d=(l=o[f]).length,~(l=l.replace(/^ *([*+-]|\d+\.) */,"")).indexOf("\n ")&&(d-=l.length,l=this.options.pedantic?l.replace(/^ {1,4}/gm,""):l.replace(new RegExp("^ {1,"+d+"}","gm"),"")),f!==m-1&&(a=n.bullet.exec(o[f+1])[0],(s.length>1?1===a.length:a.length>1||this.options.smartLists&&a!==s)&&(e=o.slice(f+1).join("\n")+e,f=m-1)),i=r||/\n\n(?!\s*$)/.test(l),f!==m-1&&(r="\n"===l.charAt(l.length-1),i||(i=r)),i&&(c.loose=!0),w=void 0,(x=/^\[[ xX]\] /.test(l))&&(w=" "!==l[1],l=l.replace(/^\[[ xX]\] +/,"")),h={type:"list_item_start",task:x,checked:w,loose:i},u.push(h),this.tokens.push(h),this.token(l,!1),this.tokens.push({type:"list_item_end"});if(c.loose)for(m=u.length,f=0;f<m;f++)u[f].loose=!0;this.tokens.push({type:"list_end"})}else if(o=this.rules.html.exec(e))e=e.substring(o[0].length),this.tokens.push({type:this.options.sanitize?"paragraph":"html",pre:!this.options.sanitizer&&("pre"===o[1]||"script"===o[1]||"style"===o[1]),text:this.options.sanitize?this.options.sanitizer?this.options.sanitizer(o[0]):p(o[0]):o[0]});else if(t&&(o=this.rules.def.exec(e)))e=e.substring(o[0].length),o[3]&&(o[3]=o[3].substring(1,o[3].length-1)),g=o[1].toLowerCase().replace(/\s+/g," "),this.tokens.links[g]||(this.tokens.links[g]={href:o[2],title:o[3]});else if((o=this.rules.table.exec(e))&&(l={type:"table",header:v(o[1].replace(/^ *| *\| *$/g,"")),align:o[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:o[3]?o[3].replace(/\n$/,"").split("\n"):[]}).header.length===l.align.length){for(e=e.substring(o[0].length),f=0;f<l.align.length;f++)/^ *-+: *$/.test(l.align[f])?l.align[f]="right":/^ *:-+: *$/.test(l.align[f])?l.align[f]="center":/^ *:-+ *$/.test(l.align[f])?l.align[f]="left":l.align[f]=null;for(f=0;f<l.cells.length;f++)l.cells[f]=v(l.cells[f].replace(/^ *\| *| *\| *$/g,""),l.header.length);this.tokens.push(l)}else if(o=this.rules.lheading.exec(e))e=e.substring(o[0].length),this.tokens.push({type:"heading",depth:"="===o[2].charAt(0)?1:2,text:o[1]});else if(t&&(o=this.rules.paragraph.exec(e)))e=e.substring(o[0].length),this.tokens.push({type:"paragraph",text:"\n"===o[1].charAt(o[1].length-1)?o[1].slice(0,-1):o[1]});else if(o=this.rules.text.exec(e))e=e.substring(o[0].length),this.tokens.push({type:"text",text:o[0]});else if(e)throw new Error("Infinite loop on byte: "+e.charCodeAt(0));return this.tokens};var i={escape:/^\\([!"#$%&'()*+,\-.\/:;<=>?@\[\]\\^_`{|}~])/,autolink:/^<(scheme:[^\s\x00-\x1f<>]*|email)>/,url:m,tag:"^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",link:/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,reflink:/^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,nolink:/^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,strong:/^__([^\s_])__(?!_)|^\*\*([^\s*])\*\*(?!\*)|^__([^\s][\s\S]*?[^\s])__(?!_)|^\*\*([^\s][\s\S]*?[^\s])\*\*(?!\*)/,em:/^_([^\s_])_(?!_)|^\*([^\s*<\[])\*(?!\*)|^_([^\s<][\s\S]*?[^\s_])_(?!_|[^\spunctuation])|^_([^\s_<][\s\S]*?[^\s])_(?!_|[^\spunctuation])|^\*([^\s<"][\s\S]*?[^\s\*])\*(?!\*|[^\spunctuation])|^\*([^\s*"<\[][\s\S]*?[^\s])\*(?!\*)/,code:/^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,br:/^( {2,}|\\)\n(?!\s*$)/,del:m,text:/^(`+|[^`])(?:[\s\S]*?(?:(?=[\\<!\[`*]|\b_|$)|[^ ](?= {2,}\n))|(?= {2,}\n))/};function o(e,t){if(this.options=t||k.defaults,this.links=e,this.rules=i.normal,this.renderer=this.options.renderer||new s,this.renderer.options=this.options,!this.links)throw new Error("Tokens array requires a `links` property.");this.options.pedantic?this.rules=i.pedantic:this.options.gfm&&(this.options.breaks?this.rules=i.breaks:this.rules=i.gfm)}function s(e){this.options=e||k.defaults}function a(){}function l(e){this.tokens=[],this.token=null,this.options=e||k.defaults,this.options.renderer=this.options.renderer||new s,this.renderer=this.options.renderer,this.renderer.options=this.options,this.slugger=new c}function c(){this.seen={}}function p(e,t){if(t){if(p.escapeTest.test(e))return e.replace(p.escapeReplace,function(e){return p.replacements[e]})}else if(p.escapeTestNoEncode.test(e))return e.replace(p.escapeReplaceNoEncode,function(e){return p.replacements[e]});return e}function u(e){return e.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi,function(e,t){return"colon"===(t=t.toLowerCase())?":":"#"===t.charAt(0)?"x"===t.charAt(1)?String.fromCharCode(parseInt(t.substring(2),16)):String.fromCharCode(+t.substring(1)):""})}function h(e,t){return e=e.source||e,t=t||"",{replace:function(t,n){return n=(n=n.source||n).replace(/(^|[^\[])\^/g,"$1"),e=e.replace(t,n),this},getRegex:function(){return new RegExp(e,t)}}}function d(e,t,n){if(e){try{var r=decodeURIComponent(u(n)).replace(/[^\w:]/g,"").toLowerCase()}catch(e){return null}if(0===r.indexOf("javascript:")||0===r.indexOf("vbscript:")||0===r.indexOf("data:"))return null}t&&!g.test(n)&&(n=function(e,t){f[" "+e]||(/^[^:]+:\/*[^\/]*$/.test(e)?f[" "+e]=e+"/":f[" "+e]=b(e,"/",!0));return e=f[" "+e],"//"===t.slice(0,2)?e.replace(/:[\s\S]*/,":")+t:"/"===t.charAt(0)?e.replace(/(:\/*[^\/]*)[\s\S]*/,"$1")+t:e+t}(t,n));try{n=encodeURI(n).replace(/%25/g,"%")}catch(e){return null}return n}i._punctuation="!\"#$%&'()*+,\\-./:;<=>?@\\[^_{|}~",i.em=h(i.em).replace(/punctuation/g,i._punctuation).getRegex(),i._escapes=/\\([!"#$%&'()*+,\-.\/:;<=>?@\[\]\\^_`{|}~])/g,i._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,i._email=/[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,i.autolink=h(i.autolink).replace("scheme",i._scheme).replace("email",i._email).getRegex(),i._attribute=/\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/,i.tag=h(i.tag).replace("comment",n._comment).replace("attribute",i._attribute).getRegex(),i._label=/(?:\[[^\[\]]*\]|\\.|`[^`]*`|[^\[\]\\`])*?/,i._href=/<(?:\\[<>]?|[^\s<>\\])*>|[^\s\x00-\x1f]*/,i._title=/"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/,i.link=h(i.link).replace("label",i._label).replace("href",i._href).replace("title",i._title).getRegex(),i.reflink=h(i.reflink).replace("label",i._label).getRegex(),i.normal=y({},i),i.pedantic=y({},i.normal,{strong:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,em:/^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/,link:h(/^!?\[(label)\]\((.*?)\)/).replace("label",i._label).getRegex(),reflink:h(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label",i._label).getRegex()}),i.gfm=y({},i.normal,{escape:h(i.escape).replace("])","~|])").getRegex(),_extended_email:/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,url:/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,_backpedal:/(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,del:/^~+(?=\S)([\s\S]*?\S)~+/,text:/^(`+|[^`])(?:[\s\S]*?(?:(?=[\\<!\[`*~]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))|(?= {2,}\n|[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))/}),i.gfm.url=h(i.gfm.url,"i").replace("email",i.gfm._extended_email).getRegex(),i.breaks=y({},i.gfm,{br:h(i.br).replace("{2,}","*").getRegex(),text:h(i.gfm.text).replace("\\b_","\\b_| {2,}\\n").replace(/\{2,\}/g,"*").getRegex()}),o.rules=i,o.output=function(e,t,n){return new o(t,n).output(e)},o.prototype.output=function(e){for(var t,n,r,i,s,a,l="";e;)if(s=this.rules.escape.exec(e))e=e.substring(s[0].length),l+=p(s[1]);else if(s=this.rules.tag.exec(e))!this.inLink&&/^<a /i.test(s[0])?this.inLink=!0:this.inLink&&/^<\/a>/i.test(s[0])&&(this.inLink=!1),!this.inRawBlock&&/^<(pre|code|kbd|script)(\s|>)/i.test(s[0])?this.inRawBlock=!0:this.inRawBlock&&/^<\/(pre|code|kbd|script)(\s|>)/i.test(s[0])&&(this.inRawBlock=!1),e=e.substring(s[0].length),l+=this.options.sanitize?this.options.sanitizer?this.options.sanitizer(s[0]):p(s[0]):s[0];else if(s=this.rules.link.exec(e)){var c=x(s[2],"()");if(c>-1){var u=4+s[1].length+c;s[2]=s[2].substring(0,c),s[0]=s[0].substring(0,u).trim(),s[3]=""}e=e.substring(s[0].length),this.inLink=!0,r=s[2],this.options.pedantic?(t=/^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(r))?(r=t[1],i=t[3]):i="":i=s[3]?s[3].slice(1,-1):"",r=r.trim().replace(/^<([\s\S]*)>$/,"$1"),l+=this.outputLink(s,{href:o.escapes(r),title:o.escapes(i)}),this.inLink=!1}else if((s=this.rules.reflink.exec(e))||(s=this.rules.nolink.exec(e))){if(e=e.substring(s[0].length),t=(s[2]||s[1]).replace(/\s+/g," "),!(t=this.links[t.toLowerCase()])||!t.href){l+=s[0].charAt(0),e=s[0].substring(1)+e;continue}this.inLink=!0,l+=this.outputLink(s,t),this.inLink=!1}else if(s=this.rules.strong.exec(e))e=e.substring(s[0].length),l+=this.renderer.strong(this.output(s[4]||s[3]||s[2]||s[1]));else if(s=this.rules.em.exec(e))e=e.substring(s[0].length),l+=this.renderer.em(this.output(s[6]||s[5]||s[4]||s[3]||s[2]||s[1]));else if(s=this.rules.code.exec(e))e=e.substring(s[0].length),l+=this.renderer.codespan(p(s[2].trim(),!0));else if(s=this.rules.br.exec(e))e=e.substring(s[0].length),l+=this.renderer.br();else if(s=this.rules.del.exec(e))e=e.substring(s[0].length),l+=this.renderer.del(this.output(s[1]));else if(s=this.rules.autolink.exec(e))e=e.substring(s[0].length),r="@"===s[2]?"mailto:"+(n=p(this.mangle(s[1]))):n=p(s[1]),l+=this.renderer.link(r,null,n);else if(this.inLink||!(s=this.rules.url.exec(e))){if(s=this.rules.text.exec(e))e=e.substring(s[0].length),this.inRawBlock?l+=this.renderer.text(this.options.sanitize?this.options.sanitizer?this.options.sanitizer(s[0]):p(s[0]):s[0]):l+=this.renderer.text(p(this.smartypants(s[0])));else if(e)throw new Error("Infinite loop on byte: "+e.charCodeAt(0))}else{if("@"===s[2])r="mailto:"+(n=p(s[0]));else{do{a=s[0],s[0]=this.rules._backpedal.exec(s[0])[0]}while(a!==s[0]);n=p(s[0]),r="www."===s[1]?"http://"+n:n}e=e.substring(s[0].length),l+=this.renderer.link(r,null,n)}return l},o.escapes=function(e){return e?e.replace(o.rules._escapes,"$1"):e},o.prototype.outputLink=function(e,t){var n=t.href,r=t.title?p(t.title):null;return"!"!==e[0].charAt(0)?this.renderer.link(n,r,this.output(e[1])):this.renderer.image(n,r,p(e[1]))},o.prototype.smartypants=function(e){return this.options.smartypants?e.replace(/---/g,"â").replace(/--/g,"â").replace(/(^|[-\u2014\/(\[{"\s])'/g,"$1â").replace(/'/g,"â").replace(/(^|[-\u2014\/(\[{\u2018\s])"/g,"$1â").replace(/"/g,"â").replace(/\.{3}/g,"â¦"):e},o.prototype.mangle=function(e){if(!this.options.mangle)return e;for(var t,n="",r=e.length,i=0;i<r;i++)t=e.charCodeAt(i),Math.random()>.5&&(t="x"+t.toString(16)),n+="&#"+t+";";return n},s.prototype.code=function(e,t,n){var r=(t||"").match(/\S*/)[0];if(this.options.highlight){var i=this.options.highlight(e,r);null!=i&&i!==e&&(n=!0,e=i)}return r?'<pre><code class="'+this.options.langPrefix+p(r,!0)+'">'+(n?e:p(e,!0))+"</code></pre>\n":"<pre><code>"+(n?e:p(e,!0))+"</code></pre>"},s.prototype.blockquote=function(e){return"<blockquote>\n"+e+"</blockquote>\n"},s.prototype.html=function(e){return e},s.prototype.heading=function(e,t,n,r){return this.options.headerIds?"<h"+t+' id="'+this.options.headerPrefix+r.slug(n)+'">'+e+"</h"+t+">\n":"<h"+t+">"+e+"</h"+t+">\n"},s.prototype.hr=function(){return this.options.xhtml?"<hr/>\n":"<hr>\n"},s.prototype.list=function(e,t,n){var r=t?"ol":"ul";return"<"+r+(t&&1!==n?' start="'+n+'"':"")+">\n"+e+"</"+r+">\n"},s.prototype.listitem=function(e){return"<li>"+e+"</li>\n"},s.prototype.checkbox=function(e){return"<input "+(e?'checked="" ':"")+'disabled="" type="checkbox"'+(this.options.xhtml?" /":"")+"> "},s.prototype.paragraph=function(e){return"<p>"+e+"</p>\n"},s.prototype.table=function(e,t){return t&&(t="<tbody>"+t+"</tbody>"),"<table>\n<thead>\n"+e+"</thead>\n"+t+"</table>\n"},s.prototype.tablerow=function(e){return"<tr>\n"+e+"</tr>\n"},s.prototype.tablecell=function(e,t){var n=t.header?"th":"td";return(t.align?"<"+n+' align="'+t.align+'">':"<"+n+">")+e+"</"+n+">\n"},s.prototype.strong=function(e){return"<strong>"+e+"</strong>"},s.prototype.em=function(e){return"<em>"+e+"</em>"},s.prototype.codespan=function(e){return"<code>"+e+"</code>"},s.prototype.br=function(){return this.options.xhtml?"<br/>":"<br>"},s.prototype.del=function(e){return"<del>"+e+"</del>"},s.prototype.link=function(e,t,n){if(null===(e=d(this.options.sanitize,this.options.baseUrl,e)))return n;var r='<a href="'+p(e)+'"';return t&&(r+=' title="'+t+'"'),r+=">"+n+"</a>"},s.prototype.image=function(e,t,n){if(null===(e=d(this.options.sanitize,this.options.baseUrl,e)))return n;var r='<img src="'+e+'" alt="'+n+'"';return t&&(r+=' title="'+t+'"'),r+=this.options.xhtml?"/>":">"},s.prototype.text=function(e){return e},a.prototype.strong=a.prototype.em=a.prototype.codespan=a.prototype.del=a.prototype.text=function(e){return e},a.prototype.link=a.prototype.image=function(e,t,n){return""+n},a.prototype.br=function(){return""},l.parse=function(e,t){return new l(t).parse(e)},l.prototype.parse=function(e){this.inline=new o(e.links,this.options),this.inlineText=new o(e.links,y({},this.options,{renderer:new a})),this.tokens=e.reverse();for(var t="";this.next();)t+=this.tok();return t},l.prototype.next=function(){return this.token=this.tokens.pop(),this.token},l.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0},l.prototype.parseText=function(){for(var e=this.token.text;"text"===this.peek().type;)e+="\n"+this.next().text;return this.inline.output(e)},l.prototype.tok=function(){switch(this.token.type){case"space":return"";case"hr":return this.renderer.hr();case"heading":return this.renderer.heading(this.inline.output(this.token.text),this.token.depth,u(this.inlineText.output(this.token.text)),this.slugger);case"code":return this.renderer.code(this.token.text,this.token.lang,this.token.escaped);case"table":var e,t,n,r,i="",o="";for(n="",e=0;e<this.token.header.length;e++)n+=this.renderer.tablecell(this.inline.output(this.token.header[e]),{header:!0,align:this.token.align[e]});for(i+=this.renderer.tablerow(n),e=0;e<this.token.cells.length;e++){for(t=this.token.cells[e],n="",r=0;r<t.length;r++)n+=this.renderer.tablecell(this.inline.output(t[r]),{header:!1,align:this.token.align[r]});o+=this.renderer.tablerow(n)}return this.renderer.table(i,o);case"blockquote_start":for(o="";"blockquote_end"!==this.next().type;)o+=this.tok();return this.renderer.blockquote(o);case"list_start":o="";for(var s=this.token.ordered,a=this.token.start;"list_end"!==this.next().type;)o+=this.tok();return this.renderer.list(o,s,a);case"list_item_start":o="";var l=this.token.loose,c=this.token.checked,p=this.token.task;for(this.token.task&&(o+=this.renderer.checkbox(c));"list_item_end"!==this.next().type;)o+=l||"text"!==this.token.type?this.tok():this.parseText();return this.renderer.listitem(o,p,c);case"html":return this.renderer.html(this.token.text);case"paragraph":return this.renderer.paragraph(this.inline.output(this.token.text));case"text":return this.renderer.paragraph(this.parseText());default:var h='Token with "'+this.token.type+'" type was not found.';if(!this.options.silent)throw new Error(h);console.log(h)}},c.prototype.slug=function(e){var t=e.toLowerCase().trim().replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,.\/:;<=>?@[\]^`{|}~]/g,"").replace(/\s/g,"-");if(this.seen.hasOwnProperty(t)){var n=t;do{this.seen[n]++,t=n+"-"+this.seen[n]}while(this.seen.hasOwnProperty(t))}return this.seen[t]=0,t},p.escapeTest=/[&<>"']/,p.escapeReplace=/[&<>"']/g,p.replacements={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},p.escapeTestNoEncode=/[<>"']|&(?!#?\w+;)/,p.escapeReplaceNoEncode=/[<>"']|&(?!#?\w+;)/g;var f={},g=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;function m(){}function y(e){for(var t,n,r=1;r<arguments.length;r++)for(n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}function v(e,t){var n=e.replace(/\|/g,function(e,t,n){for(var r=!1,i=t;--i>=0&&"\\"===n[i];)r=!r;return r?"|":" |"}).split(/ \|/),r=0;if(n.length>t)n.splice(t);else for(;n.length<t;)n.push("");for(;r<n.length;r++)n[r]=n[r].trim().replace(/\\\|/g,"|");return n}function b(e,t,n){if(0===e.length)return"";for(var r=0;r<e.length;){var i=e.charAt(e.length-r-1);if(i!==t||n){if(i===t||!n)break;r++}else r++}return e.substr(0,e.length-r)}function x(e,t){if(-1===e.indexOf(t[1]))return-1;for(var n=0,r=0;r<e.length;r++)if("\\"===e[r])r++;else if(e[r]===t[0])n++;else if(e[r]===t[1]&&--n<0)return r;return-1}function w(e){e&&e.sanitize&&!e.silent&&console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options")}function k(e,t,n){if(null==e)throw new Error("marked(): input parameter is undefined or null");if("string"!=typeof e)throw new Error("marked(): input parameter is of type "+Object.prototype.toString.call(e)+", string expected");if(n||"function"==typeof t){n||(n=t,t=null),w(t=y({},k.defaults,t||{}));var i,o,s=t.highlight,a=0;try{i=r.lex(e,t)}catch(e){return n(e)}o=i.length;var c=function(e){if(e)return t.highlight=s,n(e);var r;try{r=l.parse(i,t)}catch(t){e=t}return t.highlight=s,e?n(e):n(null,r)};if(!s||s.length<3)return c();if(delete t.highlight,!o)return c();for(;a<i.length;a++)!function(e){"code"!==e.type?--o||c():s(e.text,e.lang,function(t,n){return t?c(t):null==n||n===e.text?--o||c():(e.text=n,e.escaped=!0,void(--o||c()))})}(i[a])}else try{return t&&(t=y({},k.defaults,t)),w(t),l.parse(r.lex(e,t),t)}catch(e){if(e.message+="\nPlease report this to https://github.com/markedjs/marked.",(t||k.defaults).silent)return"<p>An error occurred:</p><pre>"+p(e.message+"",!0)+"</pre>";throw e}}m.exec=m,k.options=k.setOptions=function(e){return y(k.defaults,e),k},k.getDefaults=function(){return{baseUrl:null,breaks:!1,gfm:!0,headerIds:!0,headerPrefix:"",highlight:null,langPrefix:"language-",mangle:!0,pedantic:!1,renderer:new s,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,xhtml:!1}},k.defaults=k.getDefaults(),k.Parser=l,k.parser=l.parse,k.Renderer=s,k.TextRenderer=a,k.Lexer=r,k.lexer=r.lex,k.InlineLexer=o,k.inlineLexer=o.output,k.Slugger=c,k.parse=k,e.exports=k}(this||("undefined"!=typeof window?window:global))},function(e,t,n){"use strict";n.r(t);const r=new WeakMap,i=e=>(function(){const t=e(...arguments);return r.set(t,!0),t}),o=e=>"function"==typeof e&&r.has(e),s=void 0!==window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,a=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;for(;t!==n;){const n=t.nextSibling;e.removeChild(t),t=n}},l={},c={},p=`{{lit-${String(Math.random()).slice(2)}}}`,u=`\x3c!--${p}--\x3e`,h=new RegExp(`${p}|${u}`),d="$lit$";class f{constructor(e,t){this.parts=[],this.element=t;const n=[],r=[],i=document.createTreeWalker(t.content,133,null,!1);let o=0,s=-1,a=0;const{strings:l,values:{length:c}}=e;for(;a<c;){const e=i.nextNode();if(null!==e){if(s++,1===e.nodeType){if(e.hasAttributes()){const t=e.attributes,{length:n}=t;let r=0;for(let e=0;e<n;e++)g(t[e].name,d)&&r++;for(;r-- >0;){const t=l[a],n=v.exec(t)[2],r=n.toLowerCase()+d,i=e.getAttribute(r);e.removeAttribute(r);const o=i.split(h);this.parts.push({type:"attribute",index:s,name:n,strings:o}),a+=o.length-1}}"TEMPLATE"===e.tagName&&(r.push(e),i.currentNode=e.content)}else if(3===e.nodeType){const t=e.data;if(t.indexOf(p)>=0){const r=e.parentNode,i=t.split(h),o=i.length-1;for(let t=0;t<o;t++){let n,o=i[t];if(""===o)n=y();else{const e=v.exec(o);null!==e&&g(e[2],d)&&(o=o.slice(0,e.index)+e[1]+e[2].slice(0,-d.length)+e[3]),n=document.createTextNode(o)}r.insertBefore(n,e),this.parts.push({type:"node",index:++s})}""===i[o]?(r.insertBefore(y(),e),n.push(e)):e.data=i[o],a+=o}}else if(8===e.nodeType)if(e.data===p){const t=e.parentNode;null!==e.previousSibling&&s!==o||(s++,t.insertBefore(y(),e)),o=s,this.parts.push({type:"node",index:s}),null===e.nextSibling?e.data="":(n.push(e),s--),a++}else{let t=-1;for(;-1!==(t=e.data.indexOf(p,t+1));)this.parts.push({type:"node",index:-1}),a++}}else i.currentNode=r.pop()}for(const e of n)e.parentNode.removeChild(e)}}const g=(e,t)=>{const n=e.length-t.length;return n>=0&&e.slice(n)===t},m=e=>-1!==e.index,y=()=>document.createComment(""),v=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=\/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;class b{constructor(e,t,n){this.__parts=[],this.template=e,this.processor=t,this.options=n}update(e){let t=0;for(const n of this.__parts)void 0!==n&&n.setValue(e[t]),t++;for(const e of this.__parts)void 0!==e&&e.commit()}_clone(){const e=s?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),t=[],n=this.template.parts,r=document.createTreeWalker(e,133,null,!1);let i,o=0,a=0,l=r.nextNode();for(;o<n.length;)if(i=n[o],m(i)){for(;a<i.index;)a++,"TEMPLATE"===l.nodeName&&(t.push(l),r.currentNode=l.content),null===(l=r.nextNode())&&(r.currentNode=t.pop(),l=r.nextNode());if("node"===i.type){const e=this.processor.handleTextExpression(this.options);e.insertAfterNode(l.previousSibling),this.__parts.push(e)}else this.__parts.push(...this.processor.handleAttributeExpressions(l,i.name,i.strings,this.options));o++}else this.__parts.push(void 0),o++;return s&&(document.adoptNode(e),customElements.upgrade(e)),e}}class x{constructor(e,t,n,r){this.strings=e,this.values=t,this.type=n,this.processor=r}getHTML(){const e=this.strings.length-1;let t="",n=!1;for(let r=0;r<e;r++){const e=this.strings[r],i=e.lastIndexOf("\x3c!--");n=(i>-1||n)&&-1===e.indexOf("--\x3e",i+1);const o=v.exec(e);t+=null===o?e+(n?p:u):e.substr(0,o.index)+o[1]+o[2]+d+o[3]+p}return t+=this.strings[e]}getTemplateElement(){const e=document.createElement("template");return e.innerHTML=this.getHTML(),e}}const w=e=>null===e||!("object"==typeof e||"function"==typeof e),k=e=>Array.isArray(e)||!(!e||!e[Symbol.iterator]);class _{constructor(e,t,n){this.dirty=!0,this.element=e,this.name=t,this.strings=n,this.parts=[];for(let e=0;e<n.length-1;e++)this.parts[e]=this._createPart()}_createPart(){return new S(this)}_getValue(){const e=this.strings,t=e.length-1;let n="";for(let r=0;r<t;r++){n+=e[r];const t=this.parts[r];if(void 0!==t){const e=t.value;if(w(e)||!k(e))n+="string"==typeof e?e:String(e);else for(const t of e)n+="string"==typeof t?t:String(t)}}return n+=e[t]}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class S{constructor(e){this.value=void 0,this.committer=e}setValue(e){e===l||w(e)&&e===this.value||(this.value=e,o(e)||(this.committer.dirty=!0))}commit(){for(;o(this.value);){const e=this.value;this.value=l,e(this)}this.value!==l&&this.committer.commit()}}class C{constructor(e){this.value=void 0,this.__pendingValue=void 0,this.options=e}appendInto(e){this.startNode=e.appendChild(y()),this.endNode=e.appendChild(y())}insertAfterNode(e){this.startNode=e,this.endNode=e.nextSibling}appendIntoPart(e){e.__insert(this.startNode=y()),e.__insert(this.endNode=y())}insertAfterPart(e){e.__insert(this.startNode=y()),this.endNode=e.endNode,e.endNode=this.startNode}setValue(e){this.__pendingValue=e}commit(){for(;o(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=l,e(this)}const e=this.__pendingValue;e!==l&&(w(e)?e!==this.value&&this.__commitText(e):e instanceof x?this.__commitTemplateResult(e):e instanceof Node?this.__commitNode(e):k(e)?this.__commitIterable(e):e===c?(this.value=c,this.clear()):this.__commitText(e))}__insert(e){this.endNode.parentNode.insertBefore(e,this.endNode)}__commitNode(e){this.value!==e&&(this.clear(),this.__insert(e),this.value=e)}__commitText(e){const t=this.startNode.nextSibling;e=null==e?"":e,t===this.endNode.previousSibling&&3===t.nodeType?t.data=e:this.__commitNode(document.createTextNode("string"==typeof e?e:String(e))),this.value=e}__commitTemplateResult(e){const t=this.options.templateFactory(e);if(this.value instanceof b&&this.value.template===t)this.value.update(e.values);else{const n=new b(t,e.processor,this.options),r=n._clone();n.update(e.values),this.__commitNode(r),this.value=n}}__commitIterable(e){Array.isArray(this.value)||(this.value=[],this.clear());const t=this.value;let n,r=0;for(const i of e)void 0===(n=t[r])&&(n=new C(this.options),t.push(n),0===r?n.appendIntoPart(this):n.insertAfterPart(t[r-1])),n.setValue(i),n.commit(),r++;r<t.length&&(t.length=r,this.clear(n&&n.endNode))}clear(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.startNode;a(this.startNode.parentNode,e.nextSibling,this.endNode)}}class E{constructor(e,t,n){if(this.value=void 0,this.__pendingValue=void 0,2!==n.length||""!==n[0]||""!==n[1])throw new Error("Boolean attributes can only contain a single expression");this.element=e,this.name=t,this.strings=n}setValue(e){this.__pendingValue=e}commit(){for(;o(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=l,e(this)}if(this.__pendingValue===l)return;const e=!!this.__pendingValue;this.value!==e&&(e?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=e),this.__pendingValue=l}}class $ extends _{constructor(e,t,n){super(e,t,n),this.single=2===n.length&&""===n[0]&&""===n[1]}_createPart(){return new A(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class A extends S{}let P=!1;try{const e={get capture(){return P=!0,!1}};window.addEventListener("test",e,e),window.removeEventListener("test",e,e)}catch(e){}class T{constructor(e,t,n){this.value=void 0,this.__pendingValue=void 0,this.element=e,this.eventName=t,this.eventContext=n,this.__boundHandleEvent=(e=>this.handleEvent(e))}setValue(e){this.__pendingValue=e}commit(){for(;o(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=l,e(this)}if(this.__pendingValue===l)return;const e=this.__pendingValue,t=this.value,n=null==e||null!=t&&(e.capture!==t.capture||e.once!==t.once||e.passive!==t.passive),r=null!=e&&(null==t||n);n&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),r&&(this.__options=O(e),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=e,this.__pendingValue=l}handleEvent(e){"function"==typeof this.value?this.value.call(this.eventContext||this.element,e):this.value.handleEvent(e)}}const O=e=>e&&(P?{capture:e.capture,passive:e.passive,once:e.once}:e.capture);const R=new class{handleAttributeExpressions(e,t,n,r){const i=t[0];return"."===i?new $(e,t.slice(1),n).parts:"@"===i?[new T(e,t.slice(1),r.eventContext)]:"?"===i?[new E(e,t.slice(1),n)]:new _(e,t,n).parts}handleTextExpression(e){return new C(e)}};function N(e){let t=z.get(e.type);void 0===t&&(t={stringsArray:new WeakMap,keyString:new Map},z.set(e.type,t));let n=t.stringsArray.get(e.strings);if(void 0!==n)return n;const r=e.strings.join(p);return void 0===(n=t.keyString.get(r))&&(n=new f(e,e.getTemplateElement()),t.keyString.set(r,n)),t.stringsArray.set(e.strings,n),n}const z=new Map,j=new WeakMap;(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.0.0");const q=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return new x(e,n,"html",R)},L=133;function B(e,t){const{element:{content:n},parts:r}=e,i=document.createTreeWalker(n,L,null,!1);let o=I(r),s=r[o],a=-1,l=0;const c=[];let p=null;for(;i.nextNode();){a++;const e=i.currentNode;for(e.previousSibling===p&&(p=null),t.has(e)&&(c.push(e),null===p&&(p=e)),null!==p&&l++;void 0!==s&&s.index===a;)s.index=null!==p?-1:s.index-l,s=r[o=I(r,o)]}c.forEach(e=>e.parentNode.removeChild(e))}const D=e=>{let t=11===e.nodeType?0:1;const n=document.createTreeWalker(e,L,null,!1);for(;n.nextNode();)t++;return t},I=function(e){for(let t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1)+1;t<e.length;t++){const n=e[t];if(m(n))return t}return-1};const U=(e,t)=>`${e}--${t}`;let F=!0;void 0===window.ShadyCSS?F=!1:void 0===window.ShadyCSS.prepareTemplateDom&&(console.warn("Incompatible ShadyCSS version detected. Please update to at least @webcomponents/webcomponentsjs@2.0.2 and @webcomponents/shadycss@1.3.1."),F=!1);const M=e=>t=>{const n=U(t.type,e);let r=z.get(n);void 0===r&&(r={stringsArray:new WeakMap,keyString:new Map},z.set(n,r));let i=r.stringsArray.get(t.strings);if(void 0!==i)return i;const o=t.strings.join(p);if(void 0===(i=r.keyString.get(o))){const n=t.getTemplateElement();F&&window.ShadyCSS.prepareTemplateDom(n,e),i=new f(t,n),r.keyString.set(o,i)}return r.stringsArray.set(t.strings,i),i},V=["html","svg"],H=new Set,W=(e,t,n)=>{H.add(n);const r=e.querySelectorAll("style"),{length:i}=r;if(0===i)return void window.ShadyCSS.prepareTemplateStyles(t.element,n);const o=document.createElement("style");for(let e=0;e<i;e++){const t=r[e];t.parentNode.removeChild(t),o.textContent+=t.textContent}(e=>{V.forEach(t=>{const n=z.get(U(t,e));void 0!==n&&n.keyString.forEach(e=>{const{element:{content:t}}=e,n=new Set;Array.from(t.querySelectorAll("style")).forEach(e=>{n.add(e)}),B(e,n)})})})(n);const s=t.element.content;!function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;const{element:{content:r},parts:i}=e;if(null==n)return void r.appendChild(t);const o=document.createTreeWalker(r,L,null,!1);let s=I(i),a=0,l=-1;for(;o.nextNode();)for(l++,o.currentNode===n&&(a=D(t),n.parentNode.insertBefore(t,n));-1!==s&&i[s].index===l;){if(a>0){for(;-1!==s;)i[s].index+=a,s=I(i,s);return}s=I(i,s)}}(t,o,s.firstChild),window.ShadyCSS.prepareTemplateStyles(t.element,n);const a=s.querySelector("style");if(window.ShadyCSS.nativeShadow&&null!==a)e.insertBefore(a.cloneNode(!0),e.firstChild);else{s.insertBefore(o,s.firstChild);const e=new Set;e.add(o),B(t,e)}};window.JSCompiler_renameProperty=((e,t)=>e);const Z={toAttribute(e,t){switch(t){case Boolean:return e?"":null;case Object:case Array:return null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){switch(t){case Boolean:return null!==e;case Number:return null===e?null:Number(e);case Object:case Array:return JSON.parse(e)}return e}},X=(e,t)=>t!==e&&(t==t||e==e),K={attribute:!0,type:String,converter:Z,reflect:!1,hasChanged:X},J=Promise.resolve(!0),Q=1,Y=4,G=8,ee=16,te=32;class ne extends HTMLElement{constructor(){super(),this._updateState=0,this._instanceProperties=void 0,this._updatePromise=J,this._hasConnectedResolver=void 0,this._changedProperties=new Map,this._reflectingProperties=void 0,this.initialize()}static get observedAttributes(){this.finalize();const e=[];return this._classProperties.forEach((t,n)=>{const r=this._attributeNameForProperty(n,t);void 0!==r&&(this._attributeToPropertyMap.set(r,n),e.push(r))}),e}static _ensureClassProperties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_classProperties",this))){this._classProperties=new Map;const e=Object.getPrototypeOf(this)._classProperties;void 0!==e&&e.forEach((e,t)=>this._classProperties.set(t,e))}}static createProperty(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:K;if(this._ensureClassProperties(),this._classProperties.set(e,t),t.noAccessor||this.prototype.hasOwnProperty(e))return;const n="symbol"==typeof e?Symbol():`__${e}`;Object.defineProperty(this.prototype,e,{get(){return this[n]},set(t){const r=this[e];this[n]=t,this._requestUpdate(e,r)},configurable:!0,enumerable:!0})}static finalize(){if(this.hasOwnProperty(JSCompiler_renameProperty("finalized",this))&&this.finalized)return;const e=Object.getPrototypeOf(this);if("function"==typeof e.finalize&&e.finalize(),this.finalized=!0,this._ensureClassProperties(),this._attributeToPropertyMap=new Map,this.hasOwnProperty(JSCompiler_renameProperty("properties",this))){const e=this.properties,t=[...Object.getOwnPropertyNames(e),..."function"==typeof Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(e):[]];for(const n of t)this.createProperty(n,e[n])}}static _attributeNameForProperty(e,t){const n=t.attribute;return!1===n?void 0:"string"==typeof n?n:"string"==typeof e?e.toLowerCase():void 0}static _valueHasChanged(e,t){return(arguments.length>2&&void 0!==arguments[2]?arguments[2]:X)(e,t)}static _propertyValueFromAttribute(e,t){const n=t.type,r=t.converter||Z,i="function"==typeof r?r:r.fromAttribute;return i?i(e,n):e}static _propertyValueToAttribute(e,t){if(void 0===t.reflect)return;const n=t.type,r=t.converter;return(r&&r.toAttribute||Z.toAttribute)(e,n)}initialize(){this._saveInstanceProperties(),this._requestUpdate()}_saveInstanceProperties(){this.constructor._classProperties.forEach((e,t)=>{if(this.hasOwnProperty(t)){const e=this[t];delete this[t],this._instanceProperties||(this._instanceProperties=new Map),this._instanceProperties.set(t,e)}})}_applyInstanceProperties(){this._instanceProperties.forEach((e,t)=>this[t]=e),this._instanceProperties=void 0}connectedCallback(){this._updateState=this._updateState|te,this._hasConnectedResolver&&(this._hasConnectedResolver(),this._hasConnectedResolver=void 0)}disconnectedCallback(){}attributeChangedCallback(e,t,n){t!==n&&this._attributeToProperty(e,n)}_propertyToAttribute(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:K;const r=this.constructor,i=r._attributeNameForProperty(e,n);if(void 0!==i){const e=r._propertyValueToAttribute(t,n);if(void 0===e)return;this._updateState=this._updateState|G,null==e?this.removeAttribute(i):this.setAttribute(i,e),this._updateState=this._updateState&~G}}_attributeToProperty(e,t){if(this._updateState&G)return;const n=this.constructor,r=n._attributeToPropertyMap.get(e);if(void 0!==r){const e=n._classProperties.get(r)||K;this._updateState=this._updateState|ee,this[r]=n._propertyValueFromAttribute(t,e),this._updateState=this._updateState&~ee}}_requestUpdate(e,t){let n=!0;if(void 0!==e){const r=this.constructor,i=r._classProperties.get(e)||K;r._valueHasChanged(this[e],t,i.hasChanged)?(this._changedProperties.has(e)||this._changedProperties.set(e,t),!0!==i.reflect||this._updateState&ee||(void 0===this._reflectingProperties&&(this._reflectingProperties=new Map),this._reflectingProperties.set(e,i))):n=!1}!this._hasRequestedUpdate&&n&&this._enqueueUpdate()}requestUpdate(e,t){return this._requestUpdate(e,t),this.updateComplete}async _enqueueUpdate(){let e,t;this._updateState=this._updateState|Y;const n=this._updatePromise;this._updatePromise=new Promise((n,r)=>{e=n,t=r});try{await n}catch(e){}this._hasConnected||await new Promise(e=>this._hasConnectedResolver=e);try{const e=this.performUpdate();null!=e&&await e}catch(e){t(e)}e(!this._hasRequestedUpdate)}get _hasConnected(){return this._updateState&te}get _hasRequestedUpdate(){return this._updateState&Y}get hasUpdated(){return this._updateState&Q}performUpdate(){this._instanceProperties&&this._applyInstanceProperties();let e=!1;const t=this._changedProperties;try{(e=this.shouldUpdate(t))&&this.update(t)}catch(t){throw e=!1,t}finally{this._markUpdated()}e&&(this._updateState&Q||(this._updateState=this._updateState|Q,this.firstUpdated(t)),this.updated(t))}_markUpdated(){this._changedProperties=new Map,this._updateState=this._updateState&~Y}get updateComplete(){return this._updatePromise}shouldUpdate(e){return!0}update(e){void 0!==this._reflectingProperties&&this._reflectingProperties.size>0&&(this._reflectingProperties.forEach((e,t)=>this._propertyToAttribute(t,this[t],e)),this._reflectingProperties=void 0)}updated(e){}firstUpdated(e){}}ne.finalized=!0;const re=e=>t=>"function"==typeof t?((e,t)=>(window.customElements.define(e,t),t))(e,t):((e,t)=>{const{kind:n,elements:r}=t;return{kind:n,elements:r,finisher(t){window.customElements.define(e,t)}}})(e,t),ie=(e,t)=>"method"!==t.kind||!t.descriptor||"value"in t.descriptor?{kind:"field",key:Symbol(),placement:"own",descriptor:{},initializer(){"function"==typeof t.initializer&&(this[t.key]=t.initializer.call(this))},finisher(n){n.createProperty(t.key,e)}}:Object.assign({},t,{finisher(n){n.createProperty(t.key,e)}}),oe=(e,t,n)=>{t.constructor.createProperty(n,e)};function se(e){return(t,n)=>void 0!==n?oe(e,t,n):ie(e,t)}const ae="adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,le=Symbol();class ce{constructor(e,t){if(t!==le)throw new Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e}get styleSheet(){return void 0===this._styleSheet&&(ae?(this._styleSheet=new CSSStyleSheet,this._styleSheet.replaceSync(this.cssText)):this._styleSheet=null),this._styleSheet}toString(){return this.cssText}}const pe=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];const i=n.reduce((t,n,r)=>t+(e=>{if(e instanceof ce)return e.cssText;throw new Error(`Value passed to 'css' function must be a 'css' function result: ${e}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`)})(n)+e[r+1],e[0]);return new ce(i,le)};(window.litElementVersions||(window.litElementVersions=[])).push("2.0.1");const ue=e=>e.flat?e.flat(1/0):function e(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];for(let r=0,i=t.length;r<i;r++){const i=t[r];Array.isArray(i)?e(i,n):n.push(i)}return n}(e);class he extends ne{static finalize(){super.finalize(),this._styles=this.hasOwnProperty(JSCompiler_renameProperty("styles",this))?this._getUniqueStyles():this._styles||[]}static _getUniqueStyles(){const e=this.styles,t=[];if(Array.isArray(e)){ue(e).reduceRight((e,t)=>(e.add(t),e),new Set).forEach(e=>t.unshift(e))}else e&&t.push(e);return t}initialize(){super.initialize(),this.renderRoot=this.createRenderRoot(),window.ShadowRoot&&this.renderRoot instanceof window.ShadowRoot&&this.adoptStyles()}createRenderRoot(){return this.attachShadow({mode:"open"})}adoptStyles(){const e=this.constructor._styles;0!==e.length&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow?ae?this.renderRoot.adoptedStyleSheets=e.map(e=>e.styleSheet):this._needsShimAdoptedStyleSheets=!0:window.ShadyCSS.ScopingShim.prepareAdoptedCssText(e.map(e=>e.cssText),this.localName))}connectedCallback(){super.connectedCallback(),this.hasUpdated&&void 0!==window.ShadyCSS&&window.ShadyCSS.styleElement(this)}update(e){super.update(e);const t=this.render();t instanceof x&&this.constructor.render(t,this.renderRoot,{scopeName:this.localName,eventContext:this}),this._needsShimAdoptedStyleSheets&&(this._needsShimAdoptedStyleSheets=!1,this.constructor._styles.forEach(e=>{const t=document.createElement("style");t.textContent=e.cssText,this.renderRoot.appendChild(t)}))}render(){}}he.finalized=!0,he.render=((e,t,n)=>{const r=n.scopeName,i=j.has(t),o=F&&11===t.nodeType&&!!t.host&&e instanceof x,s=o&&!H.has(r),l=s?document.createDocumentFragment():t;if(((e,t,n)=>{let r=j.get(t);void 0===r&&(a(t,t.firstChild),j.set(t,r=new C(Object.assign({templateFactory:N},n))),r.appendInto(t)),r.setValue(e),r.commit()})(e,l,Object.assign({templateFactory:M(r)},n)),s){const e=j.get(l);j.delete(l),e.value instanceof b&&W(l,e.value.template,r),a(t,t.firstChild),t.appendChild(l),j.set(t,e)}!i&&o&&window.ShadyCSS.styleElement(t.host)});var de=n(1),fe=n.n(de);const ge=e=>{for(const t of document.cookie.split(";")){const n=t.indexOf("=");let r=t.substr(0,n),i=t.substr(n+1);if(r=r.trim(),i=i.trim(),r===e)return i}return null},me=e=>{const t=[];Object.keys(e).forEach(n=>{e[n]&&t.push(n)});let n=t.join(" ");return n.trim().length>0&&(n=" "+n),n},ye=e=>new Promise((t,n)=>{ve(e).then(e=>{t({assets:e.data.results,next:e.data.next})}).catch(e=>n(e))}),ve=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const n=ge("csrftoken"),r={headers:n?{"X-CSRFToken":n}:{}};return t&&(r.cancelToken=t),fe.a.get(e,r)};var be=n(3),xe=n.n(be),we=function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s};let ke=class extends he{constructor(){super(),this.path=[]}static get styles(){return pe`:host{line-height:normal}rp-textinput{height:150px}#left-column{display:inline-block;margin-left:10px;width:300px;z-index:100}.search{margin-bottom:10px}.feature{padding:4px 14px;font-size:16px}.level-0{margin-left:0}.level-1{margin-left:5px;font-size:95%}.level-2{margin-left:10px;font-size:90%}.level-3{margin-left:15px;font-size:85%}.feature-name{display:inline-block}.clickable{text-decoration:none;cursor:pointer;color:var(--color-link-primary)}.clickable.secondary{color:var(--color-link-secondary)}.clickable:hover{text-decoration:underline;color:var(--color-link-primary-hover)}.feature:hover .showonhover{visibility:visible}.showonhover{visibility:hidden}.aliases{color:#bbb;font-size:80%;display:inline;margin-left:5px}rp-label{margin-right:3px;margin-bottom:3px;vertical-align:top}.selected{display:flex;flex-direction:column;padding:15px}.selected .name{font-size:18px;padding:5px}.selected .help{padding:5px 2px;font-size:11px;color:var(--color-secondary-light)}#right-column{vertical-align:top;margin-left:20px;display:inline-block}leaflet-map{height:250px;width:450px;border:0 solid #999;border-radius:5px}.edit{display:inline-block;margin-right:0}`}updated(e){if(e.has("osmId")){const e=[];for(let t of this.path)if(e.push(t),t.osm_id===this.osmId)return this.path=[...e],void this.hideAliasDialog();this.fetchFeature()}}fetchFeature(){ve(this.getEndpoint()+"boundaries/"+this.osmId+"/").then(e=>{this.path=e.data,this.hideAliasDialog()})}fireTextareaAutosize(){window.setTimeout(()=>{xe()(this.shadowRoot.querySelector("textarea")),xe.a.update(this.shadowRoot.querySelector("textarea"))},0)}handleMapClicked(e){this.hovered=null,e&&e.osm_id===this.osmId||(this.osmId=e.osm_id)}handlePlaceClicked(e){this.osmId=e.osm_id}handleSearchSelection(e){const t=e.detail.selected;this.showAliasDialog(t)}renderFeature(e,t){const n=this.path[this.path.length-1],r=(e.has_children||0===e.level)&&e!==n,i=q`<div class="feature"><div @mouseover="${()=>{e.level>0&&(this.hovered=e)}}" @mouseout="${()=>{this.hovered=null}}" class="level-${e.level}"><div class="feature-name ${r?"clickable":""}" @click="${()=>{r&&this.handlePlaceClicked(e)}}">${e.name}</div><div class="aliases">${e.aliases.split("\n").map(t=>t.trim().length>0?q`<rp-label class="alias" @click="${()=>{this.showAliasDialog(e)}}" light clickable>${t}</rp-label>`:null)} ${e.level>0?q`<div class="edit clickable showonhover" @click="${t=>{this.showAliasDialog(e),t.preventDefault(),t.stopPropagation()}}"><rp-icon name="register" size="12"></rp-icon></div>`:""}</div></div></div>`,o=(e.children||[]).map(e=>t.length>0&&t[0].osm_id===e.osm_id?this.renderFeature(t[0],t.slice(1)):0===t.length||0===t[0].children.length?this.renderFeature(e,t):null);return q`${i} ${o}`}showAliasDialog(e){this.editFeature=e;const t=this.shadowRoot.getElementById("alias-dialog");t&&(this.fireTextareaAutosize(),t.setAttribute("open",""))}hideAliasDialog(){const e=this.shadowRoot.getElementById("alias-dialog");e&&e.removeAttribute("open"),this.requestUpdate()}getEndpoint(){return this.endpoint+(this.endpoint.endsWith("/")?"":"/")}handleDialogClick(e){const t=e.detail.button;if("Save"===t.name){t.setProgress(!0);const e=this.shadowRoot.getElementById(this.editFeature.osm_id).inputElement.value,n={osm_id:this.editFeature.osm_id,aliases:e};((e,t)=>{const n=ge("csrftoken"),r=n?{"X-CSRFToken":n}:{};return fe.a.post(e,t,{headers:r})})(this.getEndpoint()+"boundaries/"+this.editFeature.osm_id+"/",n).then(e=>{this.fetchFeature()})}"Cancel"===t.name&&this.hideAliasDialog()}renderOptionDetail(e,t){const n=q`<style>rp-label{margin-top:3px;margin-right:3px}</style>`,r=e.aliases.split("\n").map(e=>e.trim().length>0?q`<rp-label class="alias" dark>${e}</rp-label>`:null);return q`${n}<div class="path">${e.path.replace(/>/gi,"â£")}</div><div class="aliases">${r}</div>`}render(){if(0===this.path.length)return q``;const e=this.path[this.path.length-1],t=0===e.children.length?this.path[this.path.length-2]:e,n=this.editFeature?this.editFeature.osm_id:null,r=this.editFeature?this.editFeature.name:null,i=this.editFeature?this.editFeature.aliases:null;return q`<div id="left-column"><div class="search"><rp-select placeholder="Search" endpoint="${this.getEndpoint()}boundaries/${this.path[0].osm_id}/?q=" .renderOptionDetail="${this.renderOptionDetail}" @rp-selection="${this.handleSearchSelection.bind(this)}"></rp-select></div><div class="feature-tree">${this.renderFeature(this.path[0],this.path.slice(1))}</div></div><div id="right-column"><leaflet-map endpoint="${this.getEndpoint()}" .feature="${t}" .osmId="${t.osm_id}" .hovered="${this.hovered}" .onFeatureClicked="${this.handleMapClicked.bind(this)}"></leaflet-map></div><rp-dialog id="alias-dialog" title="Aliases for ${r}" primaryButtonName="Save" @rp-button-clicked="${this.handleDialogClick.bind(this)}"><div class="selected"><rp-textinput name="aliases" id="${n}" .value="${i}" textarea></rp-textinput><div class="help">Enter other aliases for ${r}, one per line</div></div></rp-dialog>`}};we([se({type:Array,attribute:!1})],ke.prototype,"path",void 0),we([se()],ke.prototype,"endpoint",void 0),we([se()],ke.prototype,"osmId",void 0),we([se({type:Object})],ke.prototype,"hovered",void 0),we([se({type:Object})],ke.prototype,"editFeature",void 0);ke=we([re("alias-editor")],ke);var _e=function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s};let Se=class extends he{static get styles(){return pe`.button{background:#00f;color:#fff;cursor:pointer;display:inline-block;border-radius:var(--curvature);outline:0}.button:focus{outline:0;margin:0}.button:focus .mask{background:rgb(0,0,0,.1);box-shadow:0 0 0 2px var(--color-button-primary)}.button.secondary:focus .mask{border:1px solid var(--color-button-secondary);background:0 0;box-shadow:0 0 0 2px var(--color-button-secondary)}.mask{padding:5px 10px;border-radius:var(--curvature);border:1px solid transparent}.primary{background:var(--color-button-primary);color:var(--color-button-primary-text)}.secondary{background:0 0;color:var(--color-button-secondary)}.secondary:hover .mask{border:1px solid var(--color-button-secondary)}.button.progress{background:#ddd}.button.progress:focus .mask{box-shadow:0 0 0 2px var(--color-button-secondary)}.mask:hover{background:rgb(0,0,0,.1)}.secondary .mask:hover{background:0 0}`}setProgress(e){this.isProgress=e}handleKeyUp(e){"Enter"===e.key&&this.click()}render(){return q`<div class="button ${me({progress:this.isProgress,primary:this.primary,secondary:this.secondary})}" tabindex="0" @keyup="${this.handleKeyUp}"><div class="mask">${this.isProgress&&this.inProgessName||this.name}</div></div>`}};_e([se({type:Boolean})],Se.prototype,"primary",void 0),_e([se({type:Boolean})],Se.prototype,"secondary",void 0),_e([se()],Se.prototype,"name",void 0),_e([se()],Se.prototype,"inProgessName",void 0),_e([se({type:Boolean})],Se.prototype,"isProgress",void 0);var Ce;Se=_e([re("rp-button")],Se);class Ee extends he{getEventHandlers(){return[]}connectedCallback(){super.connectedCallback();for(const e of this.getEventHandlers())document.addEventListener(e.event,e.method.bind(this))}disconnectedCallback(){for(const e of this.getEventHandlers())document.removeEventListener(e.event,e.method);super.disconnectedCallback()}fireEvent(e){this.dispatchEvent(new Event(e,{bubbles:!0,composed:!0}))}fireCustomEvent(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=new CustomEvent(e,{detail:t,bubbles:!0,composed:!0});this.dispatchEvent(n)}}!function(e){e.Canceled="rp-canceled",e.CursorChanged="rp-cursor-changed",e.Selection="rp-selection",e.ButtonClicked="rp-button-clicked"}(Ce||(Ce={}));const $e=new WeakMap,Ae=i(e=>t=>{if(!(t instanceof S)||t instanceof A||"style"!==t.committer.name||t.committer.parts.length>1)throw new Error("The `styleMap` directive must be used in the style attribute and must be the only part in the attribute.");const{committer:n}=t,{style:r}=n.element;$e.has(t)||(r.cssText=n.strings.join(" "));const i=$e.get(t);for(const t in i)t in e||(-1===t.indexOf("-")?r[t]=null:r.removeProperty(t));for(const t in e)-1===t.indexOf("-")?r[t]=e[t]:r.setProperty(t,e[t]);$e.set(t,e)});var Pe=function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s};let Te=class extends Ee{constructor(){super(),this.primaryButtonName="Ok",this.cancelButtonName="Cancel",this.inProgressName="Saving"}static get styles(){return pe`.mask{width:100%;background:rgba(0,0,0,.5);opacity:0;visibility:hidden;position:fixed;top:0;left:0;transition:all ease-in 250ms}.dialog{width:500px;margin:0 auto;top:-200px;position:relative;transition:top ease-in-out .2s;border-radius:var(--curvature);box-shadow:0 0 0 4px rgba(0,0,0,.04);overflow:hidden}.body{background:#fff}.mask.open{opacity:1;visibility:visible}.mask.open > .dialog{top:100px}.title{padding:10px 20px;font-size:18px;color:var(--color-text-light);background:var(--color-primary-dark)}.footer{background:var(--color-primary-light);padding:10px;display:flex;flex-flow:row-reverse}rp-button{margin-left:5px}`}updated(e){if(e.has("open")&&this.open){this.shadowRoot.querySelectorAll("rp-button").forEach(e=>e.setProgress(!1));const e=this.querySelectorAll("textarea,input");e.length>0&&window.setTimeout(()=>{e[0].focus()},100)}}handleClick(e){const t=e.currentTarget;t.isProgress||this.fireCustomEvent(Ce.ButtonClicked,{button:t})}getDocumentHeight(){const e=document.body,t=document.documentElement;return Math.max(e.scrollHeight,e.offsetHeight,t.clientHeight,t.scrollHeight,t.offsetHeight)}handleKeyUp(e){"Escape"===e.key&&this.shadowRoot.querySelectorAll("rp-button").forEach(e=>{e.name===this.cancelButtonName&&e.click()})}render(){const e={height:`${this.getDocumentHeight()+100}px`};return q`<div class="mask ${this.open?"open":""}" style="${Ae(e)}"><div @keyup="${this.handleKeyUp}" class="dialog"><div class="header"><div class="title">${this.title}</div></div><div class="body" @keypress="${this.handleKeyUp}">${this.body?this.body:q`<slot></slot>`}</div><div class="footer"><rp-button @click="${this.handleClick}" name="${this.primaryButtonName}" inProgessName="${this.inProgressName}" primary>}</rp-button><rp-button @click="${this.handleClick}" name="${this.cancelButtonName}" secondary></rp-button></div></div></div>`}};Pe([se({type:Boolean})],Te.prototype,"open",void 0),Pe([se()],Te.prototype,"title",void 0),Pe([se()],Te.prototype,"body",void 0),Pe([se()],Te.prototype,"primaryButtonName",void 0),Pe([se({type:String})],Te.prototype,"cancelButtonName",void 0),Pe([se()],Te.prototype,"inProgressName",void 0),Pe([se({attribute:!1})],Te.prototype,"onButtonClicked",void 0);Te=Pe([re("rp-dialog")],Te);var Oe=function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s};let Re=class extends Ee{constructor(){super(...arguments),this.placeholder="",this.value="",this.name=""}static get styles(){return pe`.input-container{border-radius:var(--curvature);overflow:hidden;cursor:text;background:var(--color-widget-bg);border:1px solid var(--color-widget-border);box-shadow:none;transition:all ease-in-out .2s;display:flex;flex-direction:row;align-items:stretch}.input-container:focus-within{border-color:var(--color-widget-border);background:var(--color-widget-bg-focused);box-shadow:var(--color-widget-shadow-focused) 0 0 3px 0}.input-container:hover{background:var(--color-widget-bg-focused)}textarea{height:85%}.textinput{padding:8px;border:0 solid red;flex:1;margin:0;background:0 0;color:var(--color-text);font-size:13px;cursor:text;resize:none;box-shadow:var(--color-widget-shadow-focused) 0 1px 1px 0 inset}.textinput:focus{outline:0;box-shadow:none;cursor:text}.textinput::placeholder{color:rgba(0,0,0,.15)}`}firstUpdated(e){super.firstUpdated(e),this.inputElement=this.shadowRoot.querySelector(".textinput")}render(){const e={height:`${this.textarea?"100%":"auto"}`};return q`<div class="input-container" style="${Ae(e)}" @click="${()=>{this.shadowRoot.querySelector(".textinput").focus()}}">${this.textarea?q`<textarea class="textinput" name="${this.name}" placeholder="${this.placeholder}" .value="${this.value}">
        </textarea>`:q`<input class="textinput" name="${this.name}" type="text" placeholder="${this.placeholder}" .value="${this.value}">`}</div>`}};Oe([se({type:Boolean})],Re.prototype,"textarea",void 0),Oe([se({type:String})],Re.prototype,"placeholder",void 0),Oe([se({type:String})],Re.prototype,"value",void 0),Oe([se({type:String})],Re.prototype,"name",void 0),Oe([se({type:Object})],Re.prototype,"inputElement",void 0);Re=Oe([re("rp-textinput")],Re);var Ne=function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s};let ze=class extends he{static get styles(){return pe`:host{display:inline-block}.mask{padding:3px 6px;border-radius:var(--curvature)}.label.clickable .mask:hover{background:rgb(0,0,0,.05)}.label{border-radius:2px;font-size:80%;font-weight:400;border-radius:var(--curvature);background:tomato;color:#fff;text-shadow:0 .04em .04em rgba(0,0,0,.35)}.primary{background:var(--color-label-primary);color:var(--color-label-primary-text)}.secondary{background:var(--color-label-secondary);color:var(--color-label-secondary-text);text-shadow:none}.light{background:var(--color-overlay-light);color:var(--color-overlay-light-text);text-shadow:none}.dark{background:var(--color-overlay-dark);color:var(--color-overlay-dark-text);text-shadow:none}.clickable{cursor:pointer}`}render(){const e=this.backgroundColor&&this.textColor?{background:`${this.backgroundColor}`,color:`${this.textColor}`}:{};return q`<div class="label ${me({clickable:this.clickable,primary:this.primary,secondary:this.secondary,light:this.light,dark:this.dark})}" style="${Ae(e)}"><div class="mask"><slot></slot></div></div>`}};Ne([se({type:Boolean})],ze.prototype,"clickable",void 0),Ne([se({type:Boolean})],ze.prototype,"primary",void 0),Ne([se({type:Boolean})],ze.prototype,"secondary",void 0),Ne([se({type:Boolean})],ze.prototype,"light",void 0),Ne([se({type:Boolean})],ze.prototype,"dark",void 0),Ne([se()],ze.prototype,"backgroundColor",void 0),Ne([se()],ze.prototype,"textColor",void 0);ze=Ne([re("rp-label")],ze);var je=function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s};let qe=class extends Ee{constructor(){super(...arguments),this.cursorIndex=0}static get styles(){return pe`.options-container{visibility:hidden;position:fixed;border-radius:var(--curvature);border:0 solid var(--color-borders);box-shadow:0 0 2px 0 #ccc;background:#fff;z-index:1}.options{border-radius:var(--curvature);background:#fff;overflow-y:scroll;max-height:225px;border:none}.show{visibility:visible}.option{font-size:14px;padding:7px 14px;border-radius:var(--curvature);margin:3px;cursor:pointer;color:var(--color-text)}.option.focused{background:var(--color-selection);color:var(--color-text-light)}.option .detail{font-size:85%;color:rgba(255,255,255,.9)}code{background:rgba(0,0,0,.15);padding:1px 5px;border-radius:var(--curvature)}`}updated(e){if(super.updated(e),e.has("cursorIndex")){const e=this.shadowRoot.querySelector(".focused");if(e){const t=this.shadowRoot.querySelector(".options"),n=t.getBoundingClientRect().height,r=e.getBoundingClientRect().height;if(e.offsetTop+r>t.scrollTop+n-5){const i=e.offsetTop-n+r+5;t.scrollTop=i}else if(e.offsetTop<t.scrollTop){const n=e.offsetTop-5;t.scrollTop=n}}}e.has("options")&&(this.calculatePosition(),this.cursorIndex=0)}renderOptionDefault(e,t){const n=this.renderOptionName||this.renderOptionNameDefault,r=this.renderOptionDetail||this.renderOptionDetailDefault;return t?q`<div class="name">${n(e,t)}</div><div class="detail">${r(e,t)}</div>`:q`<div class="name">${n(e,t)}</div>`}renderOptionNameDefault(e,t){return q`${e.name}`}renderOptionDetailDefault(e,t){return q`${e.detail}`}handleSelection(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];const t=this.options[this.cursorIndex];this.fireCustomEvent(Ce.Selection,{selected:t,tabbed:e})}moveCursor(e){const t=Math.max(Math.min(this.cursorIndex+e,this.options.length-1),0);this.setCursor(t)}setCursor(e){e!==this.cursorIndex&&(this.cursorIndex=e,this.fireCustomEvent(Ce.CursorChanged,{index:e}))}handleKeyDown(e){this.visible&&(e.ctrlKey&&"n"===e.key||"ArrowDown"===e.key?(this.moveCursor(1),e.preventDefault()):e.ctrlKey&&"p"===e.key||"ArrowUp"===e.key?(this.moveCursor(-1),e.preventDefault()):"Enter"!==e.key&&"Tab"!==e.key||(this.handleSelection("Tab"===e.key),e.preventDefault()),"Escape"===e.key&&this.fireCustomEvent(Ce.Canceled))}calculatePosition(){const e=this.shadowRoot.querySelector(".options-container").getBoundingClientRect();if(this.anchorTo){const t=this.anchorTo.getBoundingClientRect(),n=t.top-e.height;n>0&&t.bottom+e.height>window.innerHeight?this.top=n:this.top=t.bottom,this.left=t.left,this.width=t.width}}getEventHandlers(){return[{event:"keydown",method:this.handleKeyDown},{event:"scroll",method:this.calculatePosition}]}render(){const e=(this.renderOption||this.renderOptionDefault).bind(this),t={top:`${this.top}px`,left:`${this.left}px`,width:`${this.width}px`},n={width:`${this.width}px`};return q`<div class="options-container ${this.visible?"show":""}" style="${Ae(t)}"><div class="options" style="${Ae(n)}">${this.options.map((t,n)=>q`<div @mouseover="${e=>{Math.abs(e.movementX)+Math.abs(e.movementY)>0&&this.setCursor(n)}}" @click="${()=>{this.handleSelection()}}" class="option ${n==this.cursorIndex?"focused":""}">${e(t,n==this.cursorIndex)}</div>`)}</div><slot></slot></div>`}};je([se({type:Number})],qe.prototype,"top",void 0),je([se({type:Number})],qe.prototype,"left",void 0),je([se({type:Number})],qe.prototype,"width",void 0),je([se({type:Object})],qe.prototype,"anchorTo",void 0),je([se({type:Boolean})],qe.prototype,"visible",void 0),je([se({type:Number})],qe.prototype,"cursorIndex",void 0),je([se({type:Array})],qe.prototype,"options",void 0),je([se({attribute:!1})],qe.prototype,"renderOption",void 0),je([se({attribute:!1})],qe.prototype,"renderOptionName",void 0),je([se({attribute:!1})],qe.prototype,"renderOptionDetail",void 0);qe=je([re("rp-options")],qe);var Le=function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s};let Be=class extends Ee{constructor(){super(),this.selected=[],this.placeholder="",this.input="",this.options=[],this.quietMillis=200,this.renderOptionDetail=(()=>{})}static get styles(){return pe`:host{display:flex;flex-direction:column}`}updated(e){if(super.updated(e),e.has("selected")&&(this.input="",this.shadowRoot.querySelector("input").blur()),e.has("input")&&!e.has("selected")){if(!this.input)return void(this.options=[]);this.lastQuery&&window.clearTimeout(this.lastQuery),this.lastQuery=window.setTimeout(()=>{this.fetchOptions(this.input)},this.quietMillis)}e.has("cursorIndex")&&this.options.length>0&&this.query&&!this.complete&&this.cursorIndex>this.options.length-20&&this.fetchOptions(this.query,this.page+1)}handleOptionSelection(e){const t=e.detail.selected;this.selected=[t],this.options=[],this.input=t.name}fetchOptions(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(!this.fetching){this.cancelToken&&this.cancelToken.cancel();const n=fe.a.CancelToken;this.cancelToken=n.source(),this.fetching=!0,ve(this.endpoint+encodeURIComponent(e)+"&page="+t,this.cancelToken.token).then(n=>{if(0===t)this.options=n.data.filter(e=>e.level>0),this.cursorIndex=0,this.query=e,this.complete=0===this.options.length;else{const e=n.data.filter(e=>e.level>0);e.length>0&&(this.options=[...this.options,...e]),this.complete=0===e.length}this.fetching=!1,this.page=t}).catch(e=>{})}}handleBlur(){window.setTimeout(()=>{this.options=[]},100)}handleFocus(){}handleKeyUp(e){const t=e.currentTarget;this.input=t.inputElement.value.trim()}handleCancel(){this.options=[]}handleCursorChanged(e){this.cursorIndex=e.detail.index}getEventHandlers(){return[{event:Ce.Canceled,method:this.handleCancel},{event:Ce.CursorChanged,method:this.handleCursorChanged}]}firstUpdated(e){this.anchorElement=this.shadowRoot.querySelector("rp-textinput")}render(){return q`<rp-textinput @keyup="${this.handleKeyUp}" @blur="${this.handleBlur}" @focus="${this.handleFocus}" .value="${this.input}" placeholder="${this.placeholder}"></rp-textinput><rp-options cursorIndex="${this.cursorIndex}" @rp-selection="${this.handleOptionSelection}" .renderOptionDetail="${this.renderOptionDetail}" .renderOptionName="${this.renderOptionName}" .renderOption="${this.renderOption}" .anchorTo="${this.anchorElement}" .options="${this.options}" ?visible="${this.input.length>0&&this.options.length>0}"></rp-options>`}};Le([se({type:Array})],Be.prototype,"selected",void 0),Le([se()],Be.prototype,"placeholder",void 0),Le([se()],Be.prototype,"endpoint",void 0),Le([se({type:String})],Be.prototype,"input",void 0),Le([se({type:Array})],Be.prototype,"options",void 0),Le([se({type:Number})],Be.prototype,"quietMillis",void 0),Le([se({type:Boolean})],Be.prototype,"fetching",void 0),Le([se({attribute:!1})],Be.prototype,"cursorIndex",void 0),Le([se({attribute:!1})],Be.prototype,"anchorElement",void 0),Le([se({attribute:!1})],Be.prototype,"renderOption",void 0),Le([se({attribute:!1})],Be.prototype,"renderOptionName",void 0),Le([se({attribute:!1})],Be.prototype,"renderOptionDetail",void 0);Be=Le([re("rp-select")],Be);const De=0,Ie=1,Ue=2,Fe=3,Me=4,Ve=5,He=6,We=(e,t)=>0===e.indexOf(t,0),Ze=(e,t,n)=>{const r=e.substring(1);if("("===r[0])return!0;{const e=r.split(".")[0].toLowerCase();if(!n)return t.indexOf(e)>=0;for(const n of t)if(We(n,e))return!0;return!1}},Xe=e=>e>="a"&&e<="z"||e>="A"&&e<="Z"||e>="0"&&e<="9"||"_"===e,Ke=e=>{let t=0;for(const n of e)'"'===n&&t++;return t%2!=0};const Je=(e,t)=>t?e.filter(e=>!!e.signature&&0===e.signature.indexOf(t)):e,Qe=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const r=(t||"").split(".");let i=e.root_no_session,o="",s="";for(;r.length>0;)if(s=r.shift()){const t=i.find(e=>e.key===s);if(!t){i=i.filter(e=>e.key.startsWith(s.toLowerCase()));break}{const r=e.types.find(e=>e.name===t.type);if(r&&r.properties)i=r.properties,o+=s+".";else{if(!r||!r.property_template){i=i.filter(e=>e.key.startsWith(s.toLowerCase()));break}{o+=s+".";const e=r.property_template;i=n[r.name]?n[r.name].map(t=>({key:e.key.replace("{key}",t),help:e.help.replace("{key}",t),type:e.type})):[]}}}}return i.map(e=>{return{name:"__default__"===e.key?o.substr(0,o.length-1):o+e.key,summary:e.help}})};var Ye=n(4),Ge=n.n(Ye);const et=new WeakMap,tt=i(e=>t=>{if(!(t instanceof C))throw new Error("unsafeHTML can only be used in text bindings");const n=et.get(t);if(void 0!==n&&w(e)&&e===n.value&&t.value===n.fragment)return;const r=document.createElement("template");r.innerHTML=e;const i=document.importNode(r.content,!0);t.setValue(i),et.set(t,{value:e,fragment:i})});var nt,rt=function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s};const it=n(28),ot=i(e=>t=>{t.setValue(tt(it(e)))});let st=nt=class extends Ee{constructor(){super(...arguments),this.anchorPosition={left:0,top:0},this.placeholder="",this.options=[],this.name="",this.value=""}static get styles(){return pe`:host{display:block}.comp-container{position:relative;height:100%}#anchor{position:absolute;visibility:hidden;width:250px;height:20px}.fn-marker{font-weight:700;font-size:42px}.option-slot{background:#fff}.current-fn{padding:10px;margin:5px;background:var(--color-primary-light);color:rgba(0,0,0,.5);border-radius:var(--curvature);font-size:90%}.footer{padding:5px 10px;background:var(--color-primary-light);color:rgba(0,0,0,.5);font-size:80%}code{background:rgba(0,0,0,.1);padding:1px 5px;border-radius:var(--curvature)}`}firstUpdated(e){this.textInputElement=this.shadowRoot.querySelector("rp-textinput"),this.anchorElement=this.shadowRoot.querySelector("#anchor"),this.completionsEndpoint&&ve(this.completionsEndpoint).then(e=>{this.schema=e.data}),this.functionsEndpoint&&ve(this.functionsEndpoint).then(e=>{this.functions=e.data}),this.fieldsEndpoint&&(async e=>{if(!e)return new Promise((e,t)=>e([]));let t=[],n=e;for(;n;){const e=await ye(n);t=t.concat(e.assets),n=e.next}return t})(this.fieldsEndpoint).then(e=>{this.keyedAssets={fields:e.map(e=>e.key)}}),this.hiddenElement=document.createElement("input"),this.hiddenElement.setAttribute("type","hidden"),this.hiddenElement.setAttribute("name",this.getAttribute("name")),this.hiddenElement.setAttribute("value",this.getAttribute("value")||""),this.appendChild(this.hiddenElement)}handleKeyUp(e){if(this.options.length>0){if("ArrowUp"===e.key||"ArrowDown"===e.key)return;if(e.ctrlKey&&("n"===e.key||"p"===e.key))return;if("Enter"===e.key||"Escape"===e.key||"Tab"===e.key||e.key.startsWith("Control"))return;this.executeQuery(e.currentTarget)}}handleClick(e){this.executeQuery(e.currentTarget)}executeQuery(e){if(this.inputElement=e.inputElement,this.currentFunction=null,this.schema){const n=e.inputElement.selectionStart,r=e.inputElement.value.substring(0,n),i=nt.parser.findExpressions(r).find(e=>e.start<=n&&(e.end>n||e.end===n&&!e.closed));if(i){const n=i.text.indexOf("(")>-1;if(n){const e=nt.parser.functionContext(i.text);if(e){const t=Je(this.functions,e);t.length>0&&(this.currentFunction=t[0])}}for(let r=i.text.length;r>=0;r--){const o=i.text[r];if("@"===o||"("===o||" "===o||","===o||")"===o||0===r){"("!==o&&" "!==o&&","!==o&&")"!==o&&"@"!==o||r++;var t=Ge()(e.inputElement,i.start+r);return this.anchorPosition={left:t.left-2-this.inputElement.scrollLeft,top:t.top-this.inputElement.scrollTop},this.query=i.text.substr(r,i.text.length-r),void(this.options=[...Qe(this.schema,this.query,this.keyedAssets),...n?Je(this.functions,this.query):[]])}}}else this.options=[],this.query=""}}updated(e){super.updated(e),e.has("value")&&this.hiddenElement.setAttribute("value",this.value)}handleInput(e){const t=e.currentTarget;this.executeQuery(t),this.value=t.inputElement.value}handleOptionCanceled(e){this.options=[],this.query=""}handleOptionSelection(e){const t=e.detail.selected,n=e.detail.tabbed;let r="";if(r=t.signature?t.signature.substr(0,t.signature.indexOf("(")+1):t.name,this.inputElement){let e=this.inputElement.value;const t=this.inputElement.selectionStart-this.query.length,n=e.substr(0,t),i=e.substr(t+this.query.length),o=n.length+r.length;this.inputElement.value=n+r+i,this.inputElement.setSelectionRange(o,o);const s=Ge()(this.inputElement,o);s.left>this.inputElement.width&&(this.inputElement.scrollLeft=s.left)}this.query="",this.options=[],n&&this.executeQuery(this.textInputElement)}renderCompletionOption(e,t){if(e.signature){const n=e.signature.indexOf("("),r=e.signature.substr(0,n),i=e.signature.substr(n);return q`<div style="${t?"font-weight: 400":""}"><div style="display:inline-block;">Æ</div><div style="display:inline-block">${r}</div>${t?q`<div style="display:inline-block; font-weight: 300; font-size: 85%">${i}</div><div class="detail">${ot(e.summary)}</div>`:null}</div>`}return q`<div><div style="${t?"font-weight: 400":""}">${e.name}</div>${t?q`<div style="font-size: 85%">${e.summary}</div>`:null}</div>`}render(){const e={top:`${this.anchorPosition.top}px`,left:`${this.anchorPosition.left}px`};return q`<div class="comp-container"><div id="anchor" style="${Ae(e)}"></div><rp-textinput name="${this.name}" placeholder="${this.placeholder}" @keyup="${this.handleKeyUp}" @click="${this.handleClick}" @input="${this.handleInput}" .value="${this.value}" ?textarea="${this.textarea}"></rp-textinput><rp-options @rp-selection="${this.handleOptionSelection}" @rp-canceled="${this.handleOptionCanceled}" .anchorTo="${this.anchorElement}" .options="${this.options}" .renderOption="${this.renderCompletionOption}" ?visible="${this.options.length>0}">${this.currentFunction?q`<div class="current-fn">${this.renderCompletionOption(this.currentFunction,!0)}</div>`:null}<div class="footer">Tab to complete, enter to select</div></rp-options></div>`}};st.parser=new class{constructor(e,t){this.expressionPrefix=e,this.allowedTopLevels=t}expressionContext(e){const t=this.findExpressions(e);if(0===t.length)return null;const n=t[t.length-1];return n.end<e.length||n.closed?null:n.text.substring(1)}autoCompleteContext(e){if(Ke(e))return null;const t=[];let n="",r=!1,i=!1,o="";for(let s=e.length-1;s>=0;s--){const a=e[s];if(" "===a&&(r=!0),","===a&&(r=!0,"("!==t[t.length-1]&&t.push("(")),")"!==a||i||(r=!0,t.push("("),t.push("(")),'"'===a&&(i=!i),r&&("("!==a||i||("("===t[t.length-1]&&t.pop(),0===t.length&&(r=!1))),"("===a&&""===n&&(o="#"),!(r||i||"("===a&&""===n)){if(!Xe(a)&&"."!==a)break;n=a+n}}return n.match(/[A-Za-z][\w]*(\.[\w]+)*/)?o+n:null}functionContext(e){let t=Ke(e)?Me:He,n="",r="("===e[-1]?0:1;for(let i=e.length-1;i>=0;i--){const o=e[i];if("@"===o)return"";if(t===He)0!==r||!Xe(o)&&"."!==o?'"'===o?t=Me:"("===o?r--:")"===o&&r++:(t=Ue,n=o+n);else if(t===Ue){if(!Xe(o)&&"."!==o)return n;n=o+n}else t===Me&&'"'===o&&(t=He)}return""}getContactFields(e){const t={},n=/((parent|child\.)*contact\.)*fields\.([a-z0-9_]+)/g,r=this.findExpressions(e);for(const e of r){let r;for(;r=n.exec(e.text);)t[r[3]]=!0}return Object.keys(t)}findExpressions(e){const t=[];let n=De,r=null,i=0;for(let o=0;o<e.length;o++){const s=e[o],a=o<e.length-1?e[o+1]:0,l=o<e.length-2?e[o+2]:0;if(n===De?s!==this.expressionPrefix||!Xe(a)&&"("!==a?s===this.expressionPrefix&&a===this.expressionPrefix&&(n=Ve):(n=Ie,r={start:o,end:null,text:s,closed:!1}):n===Ie?(Xe(s)?n=Ue:"("===s&&(n=Fe,i+=1),r.text+=s):n===Ue?r.text+=s:n===Fe?("("===s?i+=1:")"===s?i-=1:'"'===s&&(n=Me),r.text+=s,0===i&&(r.end=o+1)):n===Me?('"'===s&&(n=Fe),r.text+=s):n===Ve&&(n=De),n===Ue&&(!Xe(a)&&"."!==a||"."===a&&!Xe(l))&&(r.end=o+1),null!=r&&(null!=r.end||0===a)){const e=0===a;Ze(r.text,this.allowedTopLevels,e)&&(r.closed="("===r.text[1]&&0===i,r.end=o+1,t.push(r)),r=null,n=De}}return t}}("@",["contact","fields","urns"]),rt([se({type:Object})],st.prototype,"anchorPosition",void 0),rt([se({attribute:!1})],st.prototype,"currentFunction",void 0),rt([se({type:String})],st.prototype,"placeholder",void 0),rt([se({attribute:!1})],st.prototype,"textInputElement",void 0),rt([se({attribute:!1})],st.prototype,"anchorElement",void 0),rt([se({type:Array})],st.prototype,"options",void 0),rt([se({type:String})],st.prototype,"name",void 0),rt([se({type:String})],st.prototype,"value",void 0),rt([se({type:String})],st.prototype,"completionsEndpoint",void 0),rt([se({type:String})],st.prototype,"functionsEndpoint",void 0),rt([se({type:String})],st.prototype,"fieldsEndpoint",void 0),rt([se({type:Boolean})],st.prototype,"textarea",void 0);st=nt=rt([re("rp-completion")],st)}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,