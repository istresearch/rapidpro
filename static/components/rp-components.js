!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["rp-components"]=t():e["rp-components"]=t()}(window,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=10)}([function(e,t,n){"use strict";var r=n(4),o=n(12),i=Object.prototype.toString;function s(e){return"[object Array]"===i.call(e)}function a(e){return null!==e&&"object"==typeof e}function l(e){return"[object Function]"===i.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),s(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:s,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:a,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:l,isStream:function(e){return a(e)&&l(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){e.exports=n(11)},function(e,t,n){"use strict";(function(t){var r=n(0),o=n(15),i={"Content-Type":"application/x-www-form-urlencoded"};function s(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var a,l={adapter:("undefined"!=typeof XMLHttpRequest?a=n(5):void 0!==t&&(a=n(5)),a),transformRequest:[function(e,t){return o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(s(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(s(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};l.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){l.headers[e]={}}),r.forEach(["post","put","patch"],function(e){l.headers[e]=r.merge(i)}),e.exports=l}).call(this,n(14))},function(e,t,n){var r,o,i;o=[e,t],void 0===(i="function"==typeof(r=function(e,t){"use strict";var n,r,o="function"==typeof Map?new Map:(n=[],r=[],{has:function(e){return n.indexOf(e)>-1},get:function(e){return r[n.indexOf(e)]},set:function(e,t){-1===n.indexOf(e)&&(n.push(e),r.push(t))},delete:function(e){var t=n.indexOf(e);t>-1&&(n.splice(t,1),r.splice(t,1))}}),i=function(e){return new Event(e,{bubbles:!0})};try{new Event("test")}catch(e){i=function(e){var t=document.createEvent("Event");return t.initEvent(e,!0,!1),t}}function s(e){if(e&&e.nodeName&&"TEXTAREA"===e.nodeName&&!o.has(e)){var t=null,n=null,r=null,s=function(){e.clientWidth!==n&&p()},a=function(t){window.removeEventListener("resize",s,!1),e.removeEventListener("input",p,!1),e.removeEventListener("keyup",p,!1),e.removeEventListener("autosize:destroy",a,!1),e.removeEventListener("autosize:update",p,!1),Object.keys(t).forEach(function(n){e.style[n]=t[n]}),o.delete(e)}.bind(e,{height:e.style.height,resize:e.style.resize,overflowY:e.style.overflowY,overflowX:e.style.overflowX,wordWrap:e.style.wordWrap});e.addEventListener("autosize:destroy",a,!1),"onpropertychange"in e&&"oninput"in e&&e.addEventListener("keyup",p,!1),window.addEventListener("resize",s,!1),e.addEventListener("input",p,!1),e.addEventListener("autosize:update",p,!1),e.style.overflowX="hidden",e.style.wordWrap="break-word",o.set(e,{destroy:a,update:p}),"vertical"===(l=window.getComputedStyle(e,null)).resize?e.style.resize="none":"both"===l.resize&&(e.style.resize="horizontal"),t="content-box"===l.boxSizing?-(parseFloat(l.paddingTop)+parseFloat(l.paddingBottom)):parseFloat(l.borderTopWidth)+parseFloat(l.borderBottomWidth),isNaN(t)&&(t=0),p()}var l;function c(t){var n=e.style.width;e.style.width="0px",e.offsetWidth,e.style.width=n,e.style.overflowY=t}function u(){if(0!==e.scrollHeight){var r=function(e){for(var t=[];e&&e.parentNode&&e.parentNode instanceof Element;)e.parentNode.scrollTop&&t.push({node:e.parentNode,scrollTop:e.parentNode.scrollTop}),e=e.parentNode;return t}(e),o=document.documentElement&&document.documentElement.scrollTop;e.style.height="",e.style.height=e.scrollHeight+t+"px",n=e.clientWidth,r.forEach(function(e){e.node.scrollTop=e.scrollTop}),o&&(document.documentElement.scrollTop=o)}}function p(){u();var t=Math.round(parseFloat(e.style.height)),n=window.getComputedStyle(e,null),o="content-box"===n.boxSizing?Math.round(parseFloat(n.height)):e.offsetHeight;if(o<t?"hidden"===n.overflowY&&(c("scroll"),u(),o="content-box"===n.boxSizing?Math.round(parseFloat(window.getComputedStyle(e,null).height)):e.offsetHeight):"hidden"!==n.overflowY&&(c("hidden"),u(),o="content-box"===n.boxSizing?Math.round(parseFloat(window.getComputedStyle(e,null).height)):e.offsetHeight),r!==o){r=o;var s=i("autosize:resized");try{e.dispatchEvent(s)}catch(e){}}}}function a(e){var t=o.get(e);t&&t.destroy()}function l(e){var t=o.get(e);t&&t.update()}var c=null;"undefined"==typeof window||"function"!=typeof window.getComputedStyle?((c=function(e){return e}).destroy=function(e){return e},c.update=function(e){return e}):((c=function(e,t){return e&&Array.prototype.forEach.call(e.length?e:[e],function(e){return s(e)}),e}).destroy=function(e){return e&&Array.prototype.forEach.call(e.length?e:[e],a),e},c.update=function(e){return e&&Array.prototype.forEach.call(e.length?e:[e],l),e}),t.default=c,e.exports=t.default})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(0),o=n(16),i=n(18),s=n(19),a=n(20),l=n(6),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(21);e.exports=function(e){return new Promise(function(t,u){var p=e.data,h=e.headers;r.isFormData(p)&&delete h["Content-Type"];var d=new XMLHttpRequest,f="onreadystatechange",g=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in d||a(e.url)||(d=new window.XDomainRequest,f="onload",g=!0,d.onprogress=function(){},d.ontimeout=function(){}),e.auth){var m=e.auth.username||"",y=e.auth.password||"";h.Authorization="Basic "+c(m+":"+y)}if(d.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d[f]=function(){if(d&&(4===d.readyState||g)&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?s(d.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:1223===d.status?204:d.status,statusText:1223===d.status?"No Content":d.statusText,headers:n,config:e,request:d};o(t,u,r),d=null}},d.onerror=function(){u(l("Network Error",e,null,d)),d=null},d.ontimeout=function(){u(l("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var v=n(22),b=(e.withCredentials||a(e.url))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;b&&(h[e.xsrfHeaderName]=b)}if("setRequestHeader"in d&&r.forEach(h,function(e,t){void 0===p&&"content-type"===t.toLowerCase()?delete h[t]:d.setRequestHeader(t,e)}),e.withCredentials&&(d.withCredentials=!0),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){d&&(d.abort(),u(e),d=null)}),void 0===p&&(p=null),d.send(p)})}},function(e,t,n){"use strict";var r=n(17);e.exports=function(e,t,n,o,i){var s=new Error(e);return r(s,t,n,o,i)}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){!function(){var t=["direction","boxSizing","width","height","overflowX","overflowY","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","borderStyle","paddingTop","paddingRight","paddingBottom","paddingLeft","fontStyle","fontVariant","fontWeight","fontStretch","fontSize","fontSizeAdjust","lineHeight","fontFamily","textAlign","textTransform","textIndent","textDecoration","letterSpacing","wordSpacing","tabSize","MozTabSize"],n="undefined"!=typeof window,r=n&&null!=window.mozInnerScreenX;function o(e,o,i){if(!n)throw new Error("textarea-caret-position#getCaretCoordinates should only be called in a browser");var s=i&&i.debug||!1;if(s){var a=document.querySelector("#input-textarea-caret-position-mirror-div");a&&a.parentNode.removeChild(a)}var l=document.createElement("div");l.id="input-textarea-caret-position-mirror-div",document.body.appendChild(l);var c=l.style,u=window.getComputedStyle?window.getComputedStyle(e):e.currentStyle,p="INPUT"===e.nodeName;c.whiteSpace="pre-wrap",p||(c.wordWrap="break-word"),c.position="absolute",s||(c.visibility="hidden"),t.forEach(function(e){p&&"lineHeight"===e?c.lineHeight=u.height:c[e]=u[e]}),r?e.scrollHeight>parseInt(u.height)&&(c.overflowY="scroll"):c.overflow="hidden",l.textContent=e.value.substring(0,o),p&&(l.textContent=l.textContent.replace(/\s/g," "));var h=document.createElement("span");h.textContent=e.value.substring(o)||".",l.appendChild(h);var d={top:h.offsetTop+parseInt(u.borderTopWidth),left:h.offsetLeft+parseInt(u.borderLeftWidth),height:parseInt(u.lineHeight)};return s?h.style.backgroundColor="#aaa":document.body.removeChild(l),d}void 0!==e.exports?e.exports=o:n&&(window.getCaretCoordinates=o)}()},function(e,t,n){e.exports=n(32)},function(e,t,n){"use strict";var r=n(0),o=n(4),i=n(13),s=n(2);function a(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var l=a(s);l.Axios=i,l.create=function(e){return a(r.merge(s,e))},l.Cancel=n(8),l.CancelToken=n(28),l.isCancel=n(7),l.all=function(e){return Promise.all(e)},l.spread=n(29),e.exports=l,e.exports.default=l},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(2),o=n(0),i=n(23),s=n(24);function a(e){this.defaults=e,this.interceptors={request:new i,response:new i}}a.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[s,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},o.forEach(["delete","get","head","options"],function(e){a.prototype[e]=function(t,n){return this.request(o.merge(n||{},{method:e,url:t}))}}),o.forEach(["post","put","patch"],function(e){a.prototype[e]=function(t,n,r){return this.request(o.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=a},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(e){r=s}}();var l,c=[],u=!1,p=-1;function h(){u&&l&&(u=!1,l.length?c=l.concat(c):p=-1,c.length&&d())}function d(){if(!u){var e=a(h);u=!0;for(var t=c.length;t;){for(l=c,c=[];++p<t;)l&&l[p].run();p=-1,t=c.length}l=null,u=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function f(e,t){this.fun=e,this.array=t}function g(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new f(e,t)),1!==c.length||u||a(d)},f.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=g,o.addListener=g,o.once=g,o.off=g,o.removeListener=g,o.removeAllListeners=g,o.emit=g,o.prependListener=g,o.prependOnceListener=g,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(6);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},function(e,t,n){"use strict";var r=n(0);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var s=[];r.forEach(t,function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),s.push(o(t)+"="+o(e))}))}),i=s.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},function(e,t,n){"use strict";var r=n(0),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,s={};return e?(r.forEach(e.split("\n"),function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(s[t]&&o.indexOf(t)>=0)return;s[t]="set-cookie"===t?(s[t]?s[t]:[]).concat([n]):s[t]?s[t]+", "+n:n}}),s):s}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,i=String(e),s="",a=0,l=r;i.charAt(0|a)||(l="=",a%1);s+=l.charAt(63&t>>8-a%1*8)){if((n=i.charCodeAt(a+=.75))>255)throw new o;t=t<<8|n}return s}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,s){var a=[];a.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),r.isString(o)&&a.push("path="+o),r.isString(i)&&a.push("domain="+i),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(0);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},function(e,t,n){"use strict";var r=n(0),o=n(25),i=n(7),s=n(2),a=n(26),l=n(27);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!a(e.url)&&(e.url=l(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||s.adapter)(e).then(function(t){return c(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return i(t)||(c(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(8);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){(function(t){!function(t){"use strict";var n={newline:/^\n+/,code:/^( {4}[^\n]+\n*)+/,fences:/^ {0,3}(`{3,}|~{3,})([^`~\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?:\n+|$)|$)/,hr:/^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,heading:/^ {0,3}(#{1,6}) +([^\n]*?)(?: +#+)? *(?:\n+|$)/,blockquote:/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,list:/^( {0,3})(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,html:"^ {0,3}(?:<(script|pre|style)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?\\?>\\n*|<![A-Z][\\s\\S]*?>\\n*|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\n*|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:\\n{2,}|$)|<(?!script|pre|style)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$)|</(?!script|pre|style)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$))",def:/^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,nptable:m,table:m,lheading:/^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,_paragraph:/^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html)[^\n]+)*)/,text:/^[^\n]+/};function r(e){this.tokens=[],this.tokens.links=Object.create(null),this.options=e||_.defaults,this.rules=n.normal,this.options.pedantic?this.rules=n.pedantic:this.options.gfm&&(this.rules=n.gfm)}n._label=/(?!\s*\])(?:\\[\[\]]|[^\[\]])+/,n._title=/(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/,n.def=h(n.def).replace("label",n._label).replace("title",n._title).getRegex(),n.bullet=/(?:[*+-]|\d{1,9}\.)/,n.item=/^( *)(bull) ?[^\n]*(?:\n(?!\1bull ?)[^\n]*)*/,n.item=h(n.item,"gm").replace(/bull/g,n.bullet).getRegex(),n.list=h(n.list).replace(/bull/g,n.bullet).replace("hr","\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def","\\n+(?="+n.def.source+")").getRegex(),n._tag="address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul",n._comment=/<!--(?!-?>)[\s\S]*?-->/,n.html=h(n.html,"i").replace("comment",n._comment).replace("tag",n._tag).replace("attribute",/ +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(),n.paragraph=h(n._paragraph).replace("hr",n.hr).replace("heading"," {0,3}#{1,6} +").replace("|lheading","").replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}|~{3,})[^`\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)").replace("tag",n._tag).getRegex(),n.blockquote=h(n.blockquote).replace("paragraph",n.paragraph).getRegex(),n.normal=y({},n),n.gfm=y({},n.normal,{nptable:/^ *([^|\n ].*\|.*)\n *([-:]+ *\|[-| :]*)(?:\n((?:.*[^>\n ].*(?:\n|$))*)\n*|$)/,table:/^ *\|(.+)\n *\|?( *[-:]+[-| :]*)(?:\n((?: *[^>\n ].*(?:\n|$))*)\n*|$)/}),n.pedantic=y({},n.normal,{html:h("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace("comment",n._comment).replace(/tag/g,"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,heading:/^ *(#{1,6}) *([^\n]+?) *(?:#+ *)?(?:\n+|$)/,fences:m,paragraph:h(n.normal._paragraph).replace("hr",n.hr).replace("heading"," *#{1,6} *[^\n]").replace("lheading",n.lheading).replace("blockquote"," {0,3}>").replace("|fences","").replace("|list","").replace("|html","").getRegex()}),r.rules=n,r.lex=function(e,t){return new r(t).lex(e)},r.prototype.lex=function(e){return e=e.replace(/\r\n|\r/g,"\n").replace(/\t/g,"    ").replace(/\u00a0/g," ").replace(/\u2424/g,"\n"),this.token(e,!0)},r.prototype.token=function(e,t){var r,o,i,s,a,l,c,p,h,d,f,g,m,y,x,w;for(e=e.replace(/^ +$/gm,"");e;)if((i=this.rules.newline.exec(e))&&(e=e.substring(i[0].length),i[0].length>1&&this.tokens.push({type:"space"})),i=this.rules.code.exec(e)){var _=this.tokens[this.tokens.length-1];e=e.substring(i[0].length),_&&"paragraph"===_.type?_.text+="\n"+i[0].trimRight():(i=i[0].replace(/^ {4}/gm,""),this.tokens.push({type:"code",codeBlockStyle:"indented",text:this.options.pedantic?i:b(i,"\n")}))}else if(i=this.rules.fences.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"code",lang:i[2]?i[2].trim():i[2],text:i[3]||""});else if(i=this.rules.heading.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"heading",depth:i[1].length,text:i[2]});else if((i=this.rules.nptable.exec(e))&&(l={type:"table",header:v(i[1].replace(/^ *| *\| *$/g,"")),align:i[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:i[3]?i[3].replace(/\n$/,"").split("\n"):[]}).header.length===l.align.length){for(e=e.substring(i[0].length),f=0;f<l.align.length;f++)/^ *-+: *$/.test(l.align[f])?l.align[f]="right":/^ *:-+: *$/.test(l.align[f])?l.align[f]="center":/^ *:-+ *$/.test(l.align[f])?l.align[f]="left":l.align[f]=null;for(f=0;f<l.cells.length;f++)l.cells[f]=v(l.cells[f],l.header.length);this.tokens.push(l)}else if(i=this.rules.hr.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"hr"});else if(i=this.rules.blockquote.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"blockquote_start"}),i=i[0].replace(/^ *> ?/gm,""),this.token(i,t),this.tokens.push({type:"blockquote_end"});else if(i=this.rules.list.exec(e)){for(e=e.substring(i[0].length),c={type:"list_start",ordered:y=(s=i[2]).length>1,start:y?+s:"",loose:!1},this.tokens.push(c),p=[],r=!1,m=(i=i[0].match(this.rules.item)).length,f=0;f<m;f++)d=(l=i[f]).length,~(l=l.replace(/^ *([*+-]|\d+\.) */,"")).indexOf("\n ")&&(d-=l.length,l=this.options.pedantic?l.replace(/^ {1,4}/gm,""):l.replace(new RegExp("^ {1,"+d+"}","gm"),"")),f!==m-1&&(a=n.bullet.exec(i[f+1])[0],(s.length>1?1===a.length:a.length>1||this.options.smartLists&&a!==s)&&(e=i.slice(f+1).join("\n")+e,f=m-1)),o=r||/\n\n(?!\s*$)/.test(l),f!==m-1&&(r="\n"===l.charAt(l.length-1),o||(o=r)),o&&(c.loose=!0),w=void 0,(x=/^\[[ xX]\] /.test(l))&&(w=" "!==l[1],l=l.replace(/^\[[ xX]\] +/,"")),h={type:"list_item_start",task:x,checked:w,loose:o},p.push(h),this.tokens.push(h),this.token(l,!1),this.tokens.push({type:"list_item_end"});if(c.loose)for(m=p.length,f=0;f<m;f++)p[f].loose=!0;this.tokens.push({type:"list_end"})}else if(i=this.rules.html.exec(e))e=e.substring(i[0].length),this.tokens.push({type:this.options.sanitize?"paragraph":"html",pre:!this.options.sanitizer&&("pre"===i[1]||"script"===i[1]||"style"===i[1]),text:this.options.sanitize?this.options.sanitizer?this.options.sanitizer(i[0]):u(i[0]):i[0]});else if(t&&(i=this.rules.def.exec(e)))e=e.substring(i[0].length),i[3]&&(i[3]=i[3].substring(1,i[3].length-1)),g=i[1].toLowerCase().replace(/\s+/g," "),this.tokens.links[g]||(this.tokens.links[g]={href:i[2],title:i[3]});else if((i=this.rules.table.exec(e))&&(l={type:"table",header:v(i[1].replace(/^ *| *\| *$/g,"")),align:i[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:i[3]?i[3].replace(/\n$/,"").split("\n"):[]}).header.length===l.align.length){for(e=e.substring(i[0].length),f=0;f<l.align.length;f++)/^ *-+: *$/.test(l.align[f])?l.align[f]="right":/^ *:-+: *$/.test(l.align[f])?l.align[f]="center":/^ *:-+ *$/.test(l.align[f])?l.align[f]="left":l.align[f]=null;for(f=0;f<l.cells.length;f++)l.cells[f]=v(l.cells[f].replace(/^ *\| *| *\| *$/g,""),l.header.length);this.tokens.push(l)}else if(i=this.rules.lheading.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"heading",depth:"="===i[2].charAt(0)?1:2,text:i[1]});else if(t&&(i=this.rules.paragraph.exec(e)))e=e.substring(i[0].length),this.tokens.push({type:"paragraph",text:"\n"===i[1].charAt(i[1].length-1)?i[1].slice(0,-1):i[1]});else if(i=this.rules.text.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"text",text:i[0]});else if(e)throw new Error("Infinite loop on byte: "+e.charCodeAt(0));return this.tokens};var o={escape:/^\\([!"#$%&'()*+,\-.\/:;<=>?@\[\]\\^_`{|}~])/,autolink:/^<(scheme:[^\s\x00-\x1f<>]*|email)>/,url:m,tag:"^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",link:/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,reflink:/^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,nolink:/^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,strong:/^__([^\s_])__(?!_)|^\*\*([^\s*])\*\*(?!\*)|^__([^\s][\s\S]*?[^\s])__(?!_)|^\*\*([^\s][\s\S]*?[^\s])\*\*(?!\*)/,em:/^_([^\s_])_(?!_)|^\*([^\s*<\[])\*(?!\*)|^_([^\s<][\s\S]*?[^\s_])_(?!_|[^\spunctuation])|^_([^\s_<][\s\S]*?[^\s])_(?!_|[^\spunctuation])|^\*([^\s<"][\s\S]*?[^\s\*])\*(?!\*|[^\spunctuation])|^\*([^\s*"<\[][\s\S]*?[^\s])\*(?!\*)/,code:/^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,br:/^( {2,}|\\)\n(?!\s*$)/,del:m,text:/^(`+|[^`])(?:[\s\S]*?(?:(?=[\\<!\[`*]|\b_|$)|[^ ](?= {2,}\n))|(?= {2,}\n))/};function i(e,t){if(this.options=t||_.defaults,this.links=e,this.rules=o.normal,this.renderer=this.options.renderer||new s,this.renderer.options=this.options,!this.links)throw new Error("Tokens array requires a `links` property.");this.options.pedantic?this.rules=o.pedantic:this.options.gfm&&(this.options.breaks?this.rules=o.breaks:this.rules=o.gfm)}function s(e){this.options=e||_.defaults}function a(){}function l(e){this.tokens=[],this.token=null,this.options=e||_.defaults,this.options.renderer=this.options.renderer||new s,this.renderer=this.options.renderer,this.renderer.options=this.options,this.slugger=new c}function c(){this.seen={}}function u(e,t){if(t){if(u.escapeTest.test(e))return e.replace(u.escapeReplace,function(e){return u.replacements[e]})}else if(u.escapeTestNoEncode.test(e))return e.replace(u.escapeReplaceNoEncode,function(e){return u.replacements[e]});return e}function p(e){return e.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi,function(e,t){return"colon"===(t=t.toLowerCase())?":":"#"===t.charAt(0)?"x"===t.charAt(1)?String.fromCharCode(parseInt(t.substring(2),16)):String.fromCharCode(+t.substring(1)):""})}function h(e,t){return e=e.source||e,t=t||"",{replace:function(t,n){return n=(n=n.source||n).replace(/(^|[^\[])\^/g,"$1"),e=e.replace(t,n),this},getRegex:function(){return new RegExp(e,t)}}}function d(e,t,n){if(e){try{var r=decodeURIComponent(p(n)).replace(/[^\w:]/g,"").toLowerCase()}catch(e){return null}if(0===r.indexOf("javascript:")||0===r.indexOf("vbscript:")||0===r.indexOf("data:"))return null}t&&!g.test(n)&&(n=function(e,t){f[" "+e]||(/^[^:]+:\/*[^\/]*$/.test(e)?f[" "+e]=e+"/":f[" "+e]=b(e,"/",!0));return e=f[" "+e],"//"===t.slice(0,2)?e.replace(/:[\s\S]*/,":")+t:"/"===t.charAt(0)?e.replace(/(:\/*[^\/]*)[\s\S]*/,"$1")+t:e+t}(t,n));try{n=encodeURI(n).replace(/%25/g,"%")}catch(e){return null}return n}o._punctuation="!\"#$%&'()*+,\\-./:;<=>?@\\[^_{|}~",o.em=h(o.em).replace(/punctuation/g,o._punctuation).getRegex(),o._escapes=/\\([!"#$%&'()*+,\-.\/:;<=>?@\[\]\\^_`{|}~])/g,o._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,o._email=/[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,o.autolink=h(o.autolink).replace("scheme",o._scheme).replace("email",o._email).getRegex(),o._attribute=/\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/,o.tag=h(o.tag).replace("comment",n._comment).replace("attribute",o._attribute).getRegex(),o._label=/(?:\[[^\[\]]*\]|\\.|`[^`]*`|[^\[\]\\`])*?/,o._href=/<(?:\\[<>]?|[^\s<>\\])*>|[^\s\x00-\x1f]*/,o._title=/"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/,o.link=h(o.link).replace("label",o._label).replace("href",o._href).replace("title",o._title).getRegex(),o.reflink=h(o.reflink).replace("label",o._label).getRegex(),o.normal=y({},o),o.pedantic=y({},o.normal,{strong:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,em:/^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/,link:h(/^!?\[(label)\]\((.*?)\)/).replace("label",o._label).getRegex(),reflink:h(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label",o._label).getRegex()}),o.gfm=y({},o.normal,{escape:h(o.escape).replace("])","~|])").getRegex(),_extended_email:/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,url:/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,_backpedal:/(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,del:/^~+(?=\S)([\s\S]*?\S)~+/,text:/^(`+|[^`])(?:[\s\S]*?(?:(?=[\\<!\[`*~]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))|(?= {2,}\n|[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))/}),o.gfm.url=h(o.gfm.url,"i").replace("email",o.gfm._extended_email).getRegex(),o.breaks=y({},o.gfm,{br:h(o.br).replace("{2,}","*").getRegex(),text:h(o.gfm.text).replace("\\b_","\\b_| {2,}\\n").replace(/\{2,\}/g,"*").getRegex()}),i.rules=o,i.output=function(e,t,n){return new i(t,n).output(e)},i.prototype.output=function(e){for(var t,n,r,o,s,a,l="";e;)if(s=this.rules.escape.exec(e))e=e.substring(s[0].length),l+=u(s[1]);else if(s=this.rules.tag.exec(e))!this.inLink&&/^<a /i.test(s[0])?this.inLink=!0:this.inLink&&/^<\/a>/i.test(s[0])&&(this.inLink=!1),!this.inRawBlock&&/^<(pre|code|kbd|script)(\s|>)/i.test(s[0])?this.inRawBlock=!0:this.inRawBlock&&/^<\/(pre|code|kbd|script)(\s|>)/i.test(s[0])&&(this.inRawBlock=!1),e=e.substring(s[0].length),l+=this.options.sanitize?this.options.sanitizer?this.options.sanitizer(s[0]):u(s[0]):s[0];else if(s=this.rules.link.exec(e)){var c=x(s[2],"()");if(c>-1){var p=4+s[1].length+c;s[2]=s[2].substring(0,c),s[0]=s[0].substring(0,p).trim(),s[3]=""}e=e.substring(s[0].length),this.inLink=!0,r=s[2],this.options.pedantic?(t=/^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(r))?(r=t[1],o=t[3]):o="":o=s[3]?s[3].slice(1,-1):"",r=r.trim().replace(/^<([\s\S]*)>$/,"$1"),l+=this.outputLink(s,{href:i.escapes(r),title:i.escapes(o)}),this.inLink=!1}else if((s=this.rules.reflink.exec(e))||(s=this.rules.nolink.exec(e))){if(e=e.substring(s[0].length),t=(s[2]||s[1]).replace(/\s+/g," "),!(t=this.links[t.toLowerCase()])||!t.href){l+=s[0].charAt(0),e=s[0].substring(1)+e;continue}this.inLink=!0,l+=this.outputLink(s,t),this.inLink=!1}else if(s=this.rules.strong.exec(e))e=e.substring(s[0].length),l+=this.renderer.strong(this.output(s[4]||s[3]||s[2]||s[1]));else if(s=this.rules.em.exec(e))e=e.substring(s[0].length),l+=this.renderer.em(this.output(s[6]||s[5]||s[4]||s[3]||s[2]||s[1]));else if(s=this.rules.code.exec(e))e=e.substring(s[0].length),l+=this.renderer.codespan(u(s[2].trim(),!0));else if(s=this.rules.br.exec(e))e=e.substring(s[0].length),l+=this.renderer.br();else if(s=this.rules.del.exec(e))e=e.substring(s[0].length),l+=this.renderer.del(this.output(s[1]));else if(s=this.rules.autolink.exec(e))e=e.substring(s[0].length),r="@"===s[2]?"mailto:"+(n=u(this.mangle(s[1]))):n=u(s[1]),l+=this.renderer.link(r,null,n);else if(this.inLink||!(s=this.rules.url.exec(e))){if(s=this.rules.text.exec(e))e=e.substring(s[0].length),this.inRawBlock?l+=this.renderer.text(this.options.sanitize?this.options.sanitizer?this.options.sanitizer(s[0]):u(s[0]):s[0]):l+=this.renderer.text(u(this.smartypants(s[0])));else if(e)throw new Error("Infinite loop on byte: "+e.charCodeAt(0))}else{if("@"===s[2])r="mailto:"+(n=u(s[0]));else{do{a=s[0],s[0]=this.rules._backpedal.exec(s[0])[0]}while(a!==s[0]);n=u(s[0]),r="www."===s[1]?"http://"+n:n}e=e.substring(s[0].length),l+=this.renderer.link(r,null,n)}return l},i.escapes=function(e){return e?e.replace(i.rules._escapes,"$1"):e},i.prototype.outputLink=function(e,t){var n=t.href,r=t.title?u(t.title):null;return"!"!==e[0].charAt(0)?this.renderer.link(n,r,this.output(e[1])):this.renderer.image(n,r,u(e[1]))},i.prototype.smartypants=function(e){return this.options.smartypants?e.replace(/---/g,"—").replace(/--/g,"–").replace(/(^|[-\u2014\/(\[{"\s])'/g,"$1‘").replace(/'/g,"’").replace(/(^|[-\u2014\/(\[{\u2018\s])"/g,"$1“").replace(/"/g,"”").replace(/\.{3}/g,"…"):e},i.prototype.mangle=function(e){if(!this.options.mangle)return e;for(var t,n="",r=e.length,o=0;o<r;o++)t=e.charCodeAt(o),Math.random()>.5&&(t="x"+t.toString(16)),n+="&#"+t+";";return n},s.prototype.code=function(e,t,n){var r=(t||"").match(/\S*/)[0];if(this.options.highlight){var o=this.options.highlight(e,r);null!=o&&o!==e&&(n=!0,e=o)}return r?'<pre><code class="'+this.options.langPrefix+u(r,!0)+'">'+(n?e:u(e,!0))+"</code></pre>\n":"<pre><code>"+(n?e:u(e,!0))+"</code></pre>"},s.prototype.blockquote=function(e){return"<blockquote>\n"+e+"</blockquote>\n"},s.prototype.html=function(e){return e},s.prototype.heading=function(e,t,n,r){return this.options.headerIds?"<h"+t+' id="'+this.options.headerPrefix+r.slug(n)+'">'+e+"</h"+t+">\n":"<h"+t+">"+e+"</h"+t+">\n"},s.prototype.hr=function(){return this.options.xhtml?"<hr/>\n":"<hr>\n"},s.prototype.list=function(e,t,n){var r=t?"ol":"ul";return"<"+r+(t&&1!==n?' start="'+n+'"':"")+">\n"+e+"</"+r+">\n"},s.prototype.listitem=function(e){return"<li>"+e+"</li>\n"},s.prototype.checkbox=function(e){return"<input "+(e?'checked="" ':"")+'disabled="" type="checkbox"'+(this.options.xhtml?" /":"")+"> "},s.prototype.paragraph=function(e){return"<p>"+e+"</p>\n"},s.prototype.table=function(e,t){return t&&(t="<tbody>"+t+"</tbody>"),"<table>\n<thead>\n"+e+"</thead>\n"+t+"</table>\n"},s.prototype.tablerow=function(e){return"<tr>\n"+e+"</tr>\n"},s.prototype.tablecell=function(e,t){var n=t.header?"th":"td";return(t.align?"<"+n+' align="'+t.align+'">':"<"+n+">")+e+"</"+n+">\n"},s.prototype.strong=function(e){return"<strong>"+e+"</strong>"},s.prototype.em=function(e){return"<em>"+e+"</em>"},s.prototype.codespan=function(e){return"<code>"+e+"</code>"},s.prototype.br=function(){return this.options.xhtml?"<br/>":"<br>"},s.prototype.del=function(e){return"<del>"+e+"</del>"},s.prototype.link=function(e,t,n){if(null===(e=d(this.options.sanitize,this.options.baseUrl,e)))return n;var r='<a href="'+u(e)+'"';return t&&(r+=' title="'+t+'"'),r+=">"+n+"</a>"},s.prototype.image=function(e,t,n){if(null===(e=d(this.options.sanitize,this.options.baseUrl,e)))return n;var r='<img src="'+e+'" alt="'+n+'"';return t&&(r+=' title="'+t+'"'),r+=this.options.xhtml?"/>":">"},s.prototype.text=function(e){return e},a.prototype.strong=a.prototype.em=a.prototype.codespan=a.prototype.del=a.prototype.text=function(e){return e},a.prototype.link=a.prototype.image=function(e,t,n){return""+n},a.prototype.br=function(){return""},l.parse=function(e,t){return new l(t).parse(e)},l.prototype.parse=function(e){this.inline=new i(e.links,this.options),this.inlineText=new i(e.links,y({},this.options,{renderer:new a})),this.tokens=e.reverse();for(var t="";this.next();)t+=this.tok();return t},l.prototype.next=function(){return this.token=this.tokens.pop(),this.token},l.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0},l.prototype.parseText=function(){for(var e=this.token.text;"text"===this.peek().type;)e+="\n"+this.next().text;return this.inline.output(e)},l.prototype.tok=function(){switch(this.token.type){case"space":return"";case"hr":return this.renderer.hr();case"heading":return this.renderer.heading(this.inline.output(this.token.text),this.token.depth,p(this.inlineText.output(this.token.text)),this.slugger);case"code":return this.renderer.code(this.token.text,this.token.lang,this.token.escaped);case"table":var e,t,n,r,o="",i="";for(n="",e=0;e<this.token.header.length;e++)n+=this.renderer.tablecell(this.inline.output(this.token.header[e]),{header:!0,align:this.token.align[e]});for(o+=this.renderer.tablerow(n),e=0;e<this.token.cells.length;e++){for(t=this.token.cells[e],n="",r=0;r<t.length;r++)n+=this.renderer.tablecell(this.inline.output(t[r]),{header:!1,align:this.token.align[r]});i+=this.renderer.tablerow(n)}return this.renderer.table(o,i);case"blockquote_start":for(i="";"blockquote_end"!==this.next().type;)i+=this.tok();return this.renderer.blockquote(i);case"list_start":i="";for(var s=this.token.ordered,a=this.token.start;"list_end"!==this.next().type;)i+=this.tok();return this.renderer.list(i,s,a);case"list_item_start":i="";var l=this.token.loose,c=this.token.checked,u=this.token.task;for(this.token.task&&(i+=this.renderer.checkbox(c));"list_item_end"!==this.next().type;)i+=l||"text"!==this.token.type?this.tok():this.parseText();return this.renderer.listitem(i,u,c);case"html":return this.renderer.html(this.token.text);case"paragraph":return this.renderer.paragraph(this.inline.output(this.token.text));case"text":return this.renderer.paragraph(this.parseText());default:var h='Token with "'+this.token.type+'" type was not found.';if(!this.options.silent)throw new Error(h);console.log(h)}},c.prototype.slug=function(e){var t=e.toLowerCase().trim().replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,.\/:;<=>?@[\]^`{|}~]/g,"").replace(/\s/g,"-");if(this.seen.hasOwnProperty(t)){var n=t;do{this.seen[n]++,t=n+"-"+this.seen[n]}while(this.seen.hasOwnProperty(t))}return this.seen[t]=0,t},u.escapeTest=/[&<>"']/,u.escapeReplace=/[&<>"']/g,u.replacements={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},u.escapeTestNoEncode=/[<>"']|&(?!#?\w+;)/,u.escapeReplaceNoEncode=/[<>"']|&(?!#?\w+;)/g;var f={},g=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;function m(){}function y(e){for(var t,n,r=1;r<arguments.length;r++)for(n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}function v(e,t){var n=e.replace(/\|/g,function(e,t,n){for(var r=!1,o=t;--o>=0&&"\\"===n[o];)r=!r;return r?"|":" |"}).split(/ \|/),r=0;if(n.length>t)n.splice(t);else for(;n.length<t;)n.push("");for(;r<n.length;r++)n[r]=n[r].trim().replace(/\\\|/g,"|");return n}function b(e,t,n){if(0===e.length)return"";for(var r=0;r<e.length;){var o=e.charAt(e.length-r-1);if(o!==t||n){if(o===t||!n)break;r++}else r++}return e.substr(0,e.length-r)}function x(e,t){if(-1===e.indexOf(t[1]))return-1;for(var n=0,r=0;r<e.length;r++)if("\\"===e[r])r++;else if(e[r]===t[0])n++;else if(e[r]===t[1]&&--n<0)return r;return-1}function w(e){e&&e.sanitize&&!e.silent&&console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options")}function _(e,t,n){if(null==e)throw new Error("marked(): input parameter is undefined or null");if("string"!=typeof e)throw new Error("marked(): input parameter is of type "+Object.prototype.toString.call(e)+", string expected");if(n||"function"==typeof t){n||(n=t,t=null),w(t=y({},_.defaults,t||{}));var o,i,s=t.highlight,a=0;try{o=r.lex(e,t)}catch(e){return n(e)}i=o.length;var c=function(e){if(e)return t.highlight=s,n(e);var r;try{r=l.parse(o,t)}catch(t){e=t}return t.highlight=s,e?n(e):n(null,r)};if(!s||s.length<3)return c();if(delete t.highlight,!i)return c();for(;a<o.length;a++)!function(e){"code"!==e.type?--i||c():s(e.text,e.lang,function(t,n){return t?c(t):null==n||n===e.text?--i||c():(e.text=n,e.escaped=!0,void(--i||c()))})}(o[a])}else try{return t&&(t=y({},_.defaults,t)),w(t),l.parse(r.lex(e,t),t)}catch(e){if(e.message+="\nPlease report this to https://github.com/markedjs/marked.",(t||_.defaults).silent)return"<p>An error occurred:</p><pre>"+u(e.message+"",!0)+"</pre>";throw e}}m.exec=m,_.options=_.setOptions=function(e){return y(_.defaults,e),_},_.getDefaults=function(){return{baseUrl:null,breaks:!1,gfm:!0,headerIds:!0,headerPrefix:"",highlight:null,langPrefix:"language-",mangle:!0,pedantic:!1,renderer:new s,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,xhtml:!1}},_.defaults=_.getDefaults(),_.Parser=l,_.parser=l.parse,_.Renderer=s,_.TextRenderer=a,_.Lexer=r,_.lexer=r.lex,_.InlineLexer=i,_.inlineLexer=i.output,_.Slugger=c,_.parse=_,e.exports=_}(this||"undefined"!=typeof window&&window)}).call(this,n(31))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.r(t);const r=new WeakMap,o=e=>(function(){const t=e(...arguments);return r.set(t,!0),t}),i=e=>"function"==typeof e&&r.has(e),s=void 0!==window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,a=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;for(;t!==n;){const n=t.nextSibling;e.removeChild(t),t=n}},l={},c={},u="{{lit-".concat(String(Math.random()).slice(2),"}}"),p="\x3c!--".concat(u,"--\x3e"),h=new RegExp("".concat(u,"|").concat(p)),d="$lit$";class f{constructor(e,t){this.parts=[],this.element=t;const n=[],r=[],o=document.createTreeWalker(t.content,133,null,!1);let i=0,s=-1,a=0;const{strings:l,values:{length:c}}=e;for(;a<c;){const e=o.nextNode();if(null!==e){if(s++,1===e.nodeType){if(e.hasAttributes()){const t=e.attributes,{length:n}=t;let r=0;for(let e=0;e<n;e++)g(t[e].name,d)&&r++;for(;r-- >0;){const t=l[a],n=v.exec(t)[2],r=n.toLowerCase()+d,o=e.getAttribute(r);e.removeAttribute(r);const i=o.split(h);this.parts.push({type:"attribute",index:s,name:n,strings:i}),a+=i.length-1}}"TEMPLATE"===e.tagName&&(r.push(e),o.currentNode=e.content)}else if(3===e.nodeType){const t=e.data;if(t.indexOf(u)>=0){const r=e.parentNode,o=t.split(h),i=o.length-1;for(let t=0;t<i;t++){let n,i=o[t];if(""===i)n=y();else{const e=v.exec(i);null!==e&&g(e[2],d)&&(i=i.slice(0,e.index)+e[1]+e[2].slice(0,-d.length)+e[3]),n=document.createTextNode(i)}r.insertBefore(n,e),this.parts.push({type:"node",index:++s})}""===o[i]?(r.insertBefore(y(),e),n.push(e)):e.data=o[i],a+=i}}else if(8===e.nodeType)if(e.data===u){const t=e.parentNode;null!==e.previousSibling&&s!==i||(s++,t.insertBefore(y(),e)),i=s,this.parts.push({type:"node",index:s}),null===e.nextSibling?e.data="":(n.push(e),s--),a++}else{let t=-1;for(;-1!==(t=e.data.indexOf(u,t+1));)this.parts.push({type:"node",index:-1}),a++}}else o.currentNode=r.pop()}for(const e of n)e.parentNode.removeChild(e)}}const g=(e,t)=>{const n=e.length-t.length;return n>=0&&e.slice(n)===t},m=e=>-1!==e.index,y=()=>document.createComment(""),v=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=\/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;class b{constructor(e,t,n){this.__parts=[],this.template=e,this.processor=t,this.options=n}update(e){let t=0;for(const n of this.__parts)void 0!==n&&n.setValue(e[t]),t++;for(const e of this.__parts)void 0!==e&&e.commit()}_clone(){const e=s?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),t=[],n=this.template.parts,r=document.createTreeWalker(e,133,null,!1);let o,i=0,a=0,l=r.nextNode();for(;i<n.length;)if(o=n[i],m(o)){for(;a<o.index;)a++,"TEMPLATE"===l.nodeName&&(t.push(l),r.currentNode=l.content),null===(l=r.nextNode())&&(r.currentNode=t.pop(),l=r.nextNode());if("node"===o.type){const e=this.processor.handleTextExpression(this.options);e.insertAfterNode(l.previousSibling),this.__parts.push(e)}else this.__parts.push(...this.processor.handleAttributeExpressions(l,o.name,o.strings,this.options));i++}else this.__parts.push(void 0),i++;return s&&(document.adoptNode(e),customElements.upgrade(e)),e}}class x{constructor(e,t,n,r){this.strings=e,this.values=t,this.type=n,this.processor=r}getHTML(){const e=this.strings.length-1;let t="",n=!1;for(let r=0;r<e;r++){const e=this.strings[r],o=e.lastIndexOf("\x3c!--");n=(o>-1||n)&&-1===e.indexOf("--\x3e",o+1);const i=v.exec(e);t+=null===i?e+(n?u:p):e.substr(0,i.index)+i[1]+i[2]+d+i[3]+u}return t+=this.strings[e]}getTemplateElement(){const e=document.createElement("template");return e.innerHTML=this.getHTML(),e}}const w=e=>null===e||!("object"==typeof e||"function"==typeof e),_=e=>Array.isArray(e)||!(!e||!e[Symbol.iterator]);class k{constructor(e,t,n){this.dirty=!0,this.element=e,this.name=t,this.strings=n,this.parts=[];for(let e=0;e<n.length-1;e++)this.parts[e]=this._createPart()}_createPart(){return new S(this)}_getValue(){const e=this.strings,t=e.length-1;let n="";for(let r=0;r<t;r++){n+=e[r];const t=this.parts[r];if(void 0!==t){const e=t.value;if(w(e)||!_(e))n+="string"==typeof e?e:String(e);else for(const t of e)n+="string"==typeof t?t:String(t)}}return n+=e[t]}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class S{constructor(e){this.value=void 0,this.committer=e}setValue(e){e===l||w(e)&&e===this.value||(this.value=e,i(e)||(this.committer.dirty=!0))}commit(){for(;i(this.value);){const e=this.value;this.value=l,e(this)}this.value!==l&&this.committer.commit()}}class C{constructor(e){this.value=void 0,this.__pendingValue=void 0,this.options=e}appendInto(e){this.startNode=e.appendChild(y()),this.endNode=e.appendChild(y())}insertAfterNode(e){this.startNode=e,this.endNode=e.nextSibling}appendIntoPart(e){e.__insert(this.startNode=y()),e.__insert(this.endNode=y())}insertAfterPart(e){e.__insert(this.startNode=y()),this.endNode=e.endNode,e.endNode=this.startNode}setValue(e){this.__pendingValue=e}commit(){for(;i(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=l,e(this)}const e=this.__pendingValue;e!==l&&(w(e)?e!==this.value&&this.__commitText(e):e instanceof x?this.__commitTemplateResult(e):e instanceof Node?this.__commitNode(e):_(e)?this.__commitIterable(e):e===c?(this.value=c,this.clear()):this.__commitText(e))}__insert(e){this.endNode.parentNode.insertBefore(e,this.endNode)}__commitNode(e){this.value!==e&&(this.clear(),this.__insert(e),this.value=e)}__commitText(e){const t=this.startNode.nextSibling;e=null==e?"":e,t===this.endNode.previousSibling&&3===t.nodeType?t.data=e:this.__commitNode(document.createTextNode("string"==typeof e?e:String(e))),this.value=e}__commitTemplateResult(e){const t=this.options.templateFactory(e);if(this.value instanceof b&&this.value.template===t)this.value.update(e.values);else{const n=new b(t,e.processor,this.options),r=n._clone();n.update(e.values),this.__commitNode(r),this.value=n}}__commitIterable(e){Array.isArray(this.value)||(this.value=[],this.clear());const t=this.value;let n,r=0;for(const o of e)void 0===(n=t[r])&&(n=new C(this.options),t.push(n),0===r?n.appendIntoPart(this):n.insertAfterPart(t[r-1])),n.setValue(o),n.commit(),r++;r<t.length&&(t.length=r,this.clear(n&&n.endNode))}clear(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.startNode;a(this.startNode.parentNode,e.nextSibling,this.endNode)}}class E{constructor(e,t,n){if(this.value=void 0,this.__pendingValue=void 0,2!==n.length||""!==n[0]||""!==n[1])throw new Error("Boolean attributes can only contain a single expression");this.element=e,this.name=t,this.strings=n}setValue(e){this.__pendingValue=e}commit(){for(;i(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=l,e(this)}if(this.__pendingValue===l)return;const e=!!this.__pendingValue;this.value!==e&&(e?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=e),this.__pendingValue=l}}class O extends k{constructor(e,t,n){super(e,t,n),this.single=2===n.length&&""===n[0]&&""===n[1]}_createPart(){return new T(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class T extends S{}let P=!1;try{const e={get capture(){return P=!0,!1}};window.addEventListener("test",e,e),window.removeEventListener("test",e,e)}catch(e){}class A{constructor(e,t,n){this.value=void 0,this.__pendingValue=void 0,this.element=e,this.eventName=t,this.eventContext=n,this.__boundHandleEvent=(e=>this.handleEvent(e))}setValue(e){this.__pendingValue=e}commit(){for(;i(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=l,e(this)}if(this.__pendingValue===l)return;const e=this.__pendingValue,t=this.value,n=null==e||null!=t&&(e.capture!==t.capture||e.once!==t.once||e.passive!==t.passive),r=null!=e&&(null==t||n);n&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),r&&(this.__options=R(e),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=e,this.__pendingValue=l}handleEvent(e){"function"==typeof this.value?this.value.call(this.eventContext||this.element,e):this.value.handleEvent(e)}}const R=e=>e&&(P?{capture:e.capture,passive:e.passive,once:e.once}:e.capture);const z=new class{handleAttributeExpressions(e,t,n,r){const o=t[0];return"."===o?new O(e,t.slice(1),n).parts:"@"===o?[new A(e,t.slice(1),r.eventContext)]:"?"===o?[new E(e,t.slice(1),n)]:new k(e,t,n).parts}handleTextExpression(e){return new C(e)}};function N(e){let t=j.get(e.type);void 0===t&&(t={stringsArray:new WeakMap,keyString:new Map},j.set(e.type,t));let n=t.stringsArray.get(e.strings);if(void 0!==n)return n;const r=e.strings.join(u);return void 0===(n=t.keyString.get(r))&&(n=new f(e,e.getTemplateElement()),t.keyString.set(r,n)),t.stringsArray.set(e.strings,n),n}const j=new Map,q=new WeakMap;(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.0.0");const L=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return new x(e,n,"html",z)},B=133;function D(e,t){const{element:{content:n},parts:r}=e,o=document.createTreeWalker(n,B,null,!1);let i=U(r),s=r[i],a=-1,l=0;const c=[];let u=null;for(;o.nextNode();){a++;const e=o.currentNode;for(e.previousSibling===u&&(u=null),t.has(e)&&(c.push(e),null===u&&(u=e)),null!==u&&l++;void 0!==s&&s.index===a;)s.index=null!==u?-1:s.index-l,s=r[i=U(r,i)]}c.forEach(e=>e.parentNode.removeChild(e))}const I=e=>{let t=11===e.nodeType?0:1;const n=document.createTreeWalker(e,B,null,!1);for(;n.nextNode();)t++;return t},U=function(e){for(let t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1)+1;t<e.length;t++){const n=e[t];if(m(n))return t}return-1};const $=(e,t)=>"".concat(e,"--").concat(t);let F=!0;void 0===window.ShadyCSS?F=!1:void 0===window.ShadyCSS.prepareTemplateDom&&(console.warn("Incompatible ShadyCSS version detected. Please update to at least @webcomponents/webcomponentsjs@2.0.2 and @webcomponents/shadycss@1.3.1."),F=!1);const V=e=>t=>{const n=$(t.type,e);let r=j.get(n);void 0===r&&(r={stringsArray:new WeakMap,keyString:new Map},j.set(n,r));let o=r.stringsArray.get(t.strings);if(void 0!==o)return o;const i=t.strings.join(u);if(void 0===(o=r.keyString.get(i))){const n=t.getTemplateElement();F&&window.ShadyCSS.prepareTemplateDom(n,e),o=new f(t,n),r.keyString.set(i,o)}return r.stringsArray.set(t.strings,o),o},M=["html","svg"],H=new Set,W=(e,t,n)=>{H.add(n);const r=e.querySelectorAll("style"),{length:o}=r;if(0===o)return void window.ShadyCSS.prepareTemplateStyles(t.element,n);const i=document.createElement("style");for(let e=0;e<o;e++){const t=r[e];t.parentNode.removeChild(t),i.textContent+=t.textContent}(e=>{M.forEach(t=>{const n=j.get($(t,e));void 0!==n&&n.keyString.forEach(e=>{const{element:{content:t}}=e,n=new Set;Array.from(t.querySelectorAll("style")).forEach(e=>{n.add(e)}),D(e,n)})})})(n);const s=t.element.content;!function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;const{element:{content:r},parts:o}=e;if(null==n)return void r.appendChild(t);const i=document.createTreeWalker(r,B,null,!1);let s=U(o),a=0,l=-1;for(;i.nextNode();)for(l++,i.currentNode===n&&(a=I(t),n.parentNode.insertBefore(t,n));-1!==s&&o[s].index===l;){if(a>0){for(;-1!==s;)o[s].index+=a,s=U(o,s);return}s=U(o,s)}}(t,i,s.firstChild),window.ShadyCSS.prepareTemplateStyles(t.element,n);const a=s.querySelector("style");if(window.ShadyCSS.nativeShadow&&null!==a)e.insertBefore(a.cloneNode(!0),e.firstChild);else{s.insertBefore(i,s.firstChild);const e=new Set;e.add(i),D(t,e)}};window.JSCompiler_renameProperty=((e,t)=>e);const Z={toAttribute(e,t){switch(t){case Boolean:return e?"":null;case Object:case Array:return null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){switch(t){case Boolean:return null!==e;case Number:return null===e?null:Number(e);case Object:case Array:return JSON.parse(e)}return e}},X=(e,t)=>t!==e&&(t==t||e==e),K={attribute:!0,type:String,converter:Z,reflect:!1,hasChanged:X},J=Promise.resolve(!0),Y=1,Q=4,G=8,ee=16,te=32;class ne extends HTMLElement{constructor(){super(),this._updateState=0,this._instanceProperties=void 0,this._updatePromise=J,this._hasConnectedResolver=void 0,this._changedProperties=new Map,this._reflectingProperties=void 0,this.initialize()}static get observedAttributes(){this.finalize();const e=[];return this._classProperties.forEach((t,n)=>{const r=this._attributeNameForProperty(n,t);void 0!==r&&(this._attributeToPropertyMap.set(r,n),e.push(r))}),e}static _ensureClassProperties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_classProperties",this))){this._classProperties=new Map;const e=Object.getPrototypeOf(this)._classProperties;void 0!==e&&e.forEach((e,t)=>this._classProperties.set(t,e))}}static createProperty(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:K;if(this._ensureClassProperties(),this._classProperties.set(e,t),t.noAccessor||this.prototype.hasOwnProperty(e))return;const n="symbol"==typeof e?Symbol():"__".concat(e);Object.defineProperty(this.prototype,e,{get(){return this[n]},set(t){const r=this[e];this[n]=t,this._requestUpdate(e,r)},configurable:!0,enumerable:!0})}static finalize(){if(this.hasOwnProperty(JSCompiler_renameProperty("finalized",this))&&this.finalized)return;const e=Object.getPrototypeOf(this);if("function"==typeof e.finalize&&e.finalize(),this.finalized=!0,this._ensureClassProperties(),this._attributeToPropertyMap=new Map,this.hasOwnProperty(JSCompiler_renameProperty("properties",this))){const e=this.properties,t=[...Object.getOwnPropertyNames(e),..."function"==typeof Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(e):[]];for(const n of t)this.createProperty(n,e[n])}}static _attributeNameForProperty(e,t){const n=t.attribute;return!1===n?void 0:"string"==typeof n?n:"string"==typeof e?e.toLowerCase():void 0}static _valueHasChanged(e,t){return(arguments.length>2&&void 0!==arguments[2]?arguments[2]:X)(e,t)}static _propertyValueFromAttribute(e,t){const n=t.type,r=t.converter||Z,o="function"==typeof r?r:r.fromAttribute;return o?o(e,n):e}static _propertyValueToAttribute(e,t){if(void 0===t.reflect)return;const n=t.type,r=t.converter;return(r&&r.toAttribute||Z.toAttribute)(e,n)}initialize(){this._saveInstanceProperties(),this._requestUpdate()}_saveInstanceProperties(){this.constructor._classProperties.forEach((e,t)=>{if(this.hasOwnProperty(t)){const e=this[t];delete this[t],this._instanceProperties||(this._instanceProperties=new Map),this._instanceProperties.set(t,e)}})}_applyInstanceProperties(){this._instanceProperties.forEach((e,t)=>this[t]=e),this._instanceProperties=void 0}connectedCallback(){this._updateState=this._updateState|te,this._hasConnectedResolver&&(this._hasConnectedResolver(),this._hasConnectedResolver=void 0)}disconnectedCallback(){}attributeChangedCallback(e,t,n){t!==n&&this._attributeToProperty(e,n)}_propertyToAttribute(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:K;const r=this.constructor,o=r._attributeNameForProperty(e,n);if(void 0!==o){const e=r._propertyValueToAttribute(t,n);if(void 0===e)return;this._updateState=this._updateState|G,null==e?this.removeAttribute(o):this.setAttribute(o,e),this._updateState=this._updateState&~G}}_attributeToProperty(e,t){if(this._updateState&G)return;const n=this.constructor,r=n._attributeToPropertyMap.get(e);if(void 0!==r){const e=n._classProperties.get(r)||K;this._updateState=this._updateState|ee,this[r]=n._propertyValueFromAttribute(t,e),this._updateState=this._updateState&~ee}}_requestUpdate(e,t){let n=!0;if(void 0!==e){const r=this.constructor,o=r._classProperties.get(e)||K;r._valueHasChanged(this[e],t,o.hasChanged)?(this._changedProperties.has(e)||this._changedProperties.set(e,t),!0!==o.reflect||this._updateState&ee||(void 0===this._reflectingProperties&&(this._reflectingProperties=new Map),this._reflectingProperties.set(e,o))):n=!1}!this._hasRequestedUpdate&&n&&this._enqueueUpdate()}requestUpdate(e,t){return this._requestUpdate(e,t),this.updateComplete}async _enqueueUpdate(){let e,t;this._updateState=this._updateState|Q;const n=this._updatePromise;this._updatePromise=new Promise((n,r)=>{e=n,t=r});try{await n}catch(e){}this._hasConnected||await new Promise(e=>this._hasConnectedResolver=e);try{const e=this.performUpdate();null!=e&&await e}catch(e){t(e)}e(!this._hasRequestedUpdate)}get _hasConnected(){return this._updateState&te}get _hasRequestedUpdate(){return this._updateState&Q}get hasUpdated(){return this._updateState&Y}performUpdate(){this._instanceProperties&&this._applyInstanceProperties();let e=!1;const t=this._changedProperties;try{(e=this.shouldUpdate(t))&&this.update(t)}catch(t){throw e=!1,t}finally{this._markUpdated()}e&&(this._updateState&Y||(this._updateState=this._updateState|Y,this.firstUpdated(t)),this.updated(t))}_markUpdated(){this._changedProperties=new Map,this._updateState=this._updateState&~Q}get updateComplete(){return this._updatePromise}shouldUpdate(e){return!0}update(e){void 0!==this._reflectingProperties&&this._reflectingProperties.size>0&&(this._reflectingProperties.forEach((e,t)=>this._propertyToAttribute(t,this[t],e)),this._reflectingProperties=void 0)}updated(e){}firstUpdated(e){}}ne.finalized=!0;const re=e=>t=>"function"==typeof t?((e,t)=>(window.customElements.define(e,t),t))(e,t):((e,t)=>{const{kind:n,elements:r}=t;return{kind:n,elements:r,finisher(t){window.customElements.define(e,t)}}})(e,t),oe=(e,t)=>"method"!==t.kind||!t.descriptor||"value"in t.descriptor?{kind:"field",key:Symbol(),placement:"own",descriptor:{},initializer(){"function"==typeof t.initializer&&(this[t.key]=t.initializer.call(this))},finisher(n){n.createProperty(t.key,e)}}:Object.assign({},t,{finisher(n){n.createProperty(t.key,e)}}),ie=(e,t,n)=>{t.constructor.createProperty(n,e)};function se(e){return(t,n)=>void 0!==n?ie(e,t,n):oe(e,t)}const ae="adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,le=Symbol();class ce{constructor(e,t){if(t!==le)throw new Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e}get styleSheet(){return void 0===this._styleSheet&&(ae?(this._styleSheet=new CSSStyleSheet,this._styleSheet.replaceSync(this.cssText)):this._styleSheet=null),this._styleSheet}toString(){return this.cssText}}const ue=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];const o=n.reduce((t,n,r)=>t+(e=>{if(e instanceof ce)return e.cssText;throw new Error("Value passed to 'css' function must be a 'css' function result: ".concat(e,". Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security."))})(n)+e[r+1],e[0]);return new ce(o,le)};(window.litElementVersions||(window.litElementVersions=[])).push("2.0.1");const pe=e=>e.flat?e.flat(1/0):function e(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];for(let r=0,o=t.length;r<o;r++){const o=t[r];Array.isArray(o)?e(o,n):n.push(o)}return n}(e);class he extends ne{static finalize(){super.finalize(),this._styles=this.hasOwnProperty(JSCompiler_renameProperty("styles",this))?this._getUniqueStyles():this._styles||[]}static _getUniqueStyles(){const e=this.styles,t=[];if(Array.isArray(e)){pe(e).reduceRight((e,t)=>(e.add(t),e),new Set).forEach(e=>t.unshift(e))}else e&&t.push(e);return t}initialize(){super.initialize(),this.renderRoot=this.createRenderRoot(),window.ShadowRoot&&this.renderRoot instanceof window.ShadowRoot&&this.adoptStyles()}createRenderRoot(){return this.attachShadow({mode:"open"})}adoptStyles(){const e=this.constructor._styles;0!==e.length&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow?ae?this.renderRoot.adoptedStyleSheets=e.map(e=>e.styleSheet):this._needsShimAdoptedStyleSheets=!0:window.ShadyCSS.ScopingShim.prepareAdoptedCssText(e.map(e=>e.cssText),this.localName))}connectedCallback(){super.connectedCallback(),this.hasUpdated&&void 0!==window.ShadyCSS&&window.ShadyCSS.styleElement(this)}update(e){super.update(e);const t=this.render();t instanceof x&&this.constructor.render(t,this.renderRoot,{scopeName:this.localName,eventContext:this}),this._needsShimAdoptedStyleSheets&&(this._needsShimAdoptedStyleSheets=!1,this.constructor._styles.forEach(e=>{const t=document.createElement("style");t.textContent=e.cssText,this.renderRoot.appendChild(t)}))}render(){}}he.finalized=!0,he.render=((e,t,n)=>{const r=n.scopeName,o=q.has(t),i=F&&11===t.nodeType&&!!t.host&&e instanceof x,s=i&&!H.has(r),l=s?document.createDocumentFragment():t;if(((e,t,n)=>{let r=q.get(t);void 0===r&&(a(t,t.firstChild),q.set(t,r=new C(Object.assign({templateFactory:N},n))),r.appendInto(t)),r.setValue(e),r.commit()})(e,l,Object.assign({templateFactory:V(r)},n)),s){const e=q.get(l);q.delete(l),e.value instanceof b&&W(l,e.value.template,r),a(t,t.firstChild),t.appendChild(l),q.set(t,e)}!o&&i&&window.ShadyCSS.styleElement(t.host)});var de=n(1),fe=n.n(de);const ge=e=>{for(const t of document.cookie.split(";")){const n=t.indexOf("=");let r=t.substr(0,n),o=t.substr(n+1);if(r=r.trim(),o=o.trim(),r===e)return o}return null},me=e=>{const t=[];Object.keys(e).forEach(n=>{e[n]&&t.push(n)});let n=t.join(" ");return n.trim().length>0&&(n=" "+n),n},ye=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const n=ge("csrftoken"),r={headers:n?{"X-CSRFToken":n}:{}};return t&&(r.cancelToken=t),fe.a.get(e,r)};var ve=n(3),be=n.n(ve);function xe(){const e=Ae(['<div id="left-column"><div class="search"><rp-select placeholder="Search" endpoint="',"boundaries/",'/?q=" .renderOptionDetail="','" @rp-selection="','"></rp-select></div><div class="feature-tree">','</div></div><div id="right-column"><leaflet-map endpoint="','" .feature="','" .osmId="','" .hovered="','" .onFeatureClicked="','"></leaflet-map></div><rp-dialog id="alias-dialog" title="Aliases for ','" primaryButtonName="Save" .onButtonClicked="','"><div class="selected"><textarea id="','" .value="','"></textarea><div class="help">Enter other aliases for ',", one per line</div></div></rp-dialog>"]);return xe=function(){return e},e}function we(){const e=Ae([""]);return we=function(){return e},e}function _e(){const e=Ae(["",'<div class="path">','</div><div class="aliases">',"</div>"]);return _e=function(){return e},e}function ke(){const e=Ae(['<rp-label class="alias" dark>',"</rp-label>"]);return ke=function(){return e},e}function Se(){const e=Ae(["<style>rp-label {\n          margin-top: 3px;\n          margin-right: 3px;\n        }</style>"]);return Se=function(){return e},e}function Ce(){const e=Ae([""," ",""]);return Ce=function(){return e},e}function Ee(){const e=Ae(['<div class="edit clickable showonhover" @click="','"><rp-icon name="register" size="12"></rp-icon></div>']);return Ee=function(){return e},e}function Oe(){const e=Ae(['<rp-label class="alias" @click="','" light clickable>',"</rp-label>"]);return Oe=function(){return e},e}function Te(){const e=Ae(['<div class="feature"><div @mouseover="','" @mouseout="','" class="level-','"><div class="feature-name ','" @click="','">','</div><div class="aliases">'," ","</div></div></div>"]);return Te=function(){return e},e}function Pe(){const e=Ae([":host {\n        line-height: normal;\n      }\n\n      textarea {\n        border-radius: 5px;\n        border-color: var(--color-borders);\n        padding: 10px;\n        color: var(--color-text);\n        font-size: 14px;\n        resize: none;\n      }\n\n      textarea:focus {\n        box-shadow: none;\n        outline: none;\n      }\n\n      #left-column {\n        display: inline-block;\n        margin-left: 10px;\n        width: 300px;\n        z-index: 100;\n      }\n\n      .search {\n        margin-bottom: 10px;\n      }\n\n      .feature {\n        padding: 4px 14px;\n        font-size: 16px;\n      }\n\n      .level-0 {\n        margin-left: 0px;\n      }\n\n      .level-1 {\n        margin-left: 5px;\n        font-size: 95%;\n      }\n\n      .level-2 {\n        margin-left: 10px;\n        font-size: 90%;\n      }\n\n      .level-3 {\n        margin-left: 15px;\n        font-size: 85%;\n      }\n\n      .feature-name {\n        display: inline-block;\n      }\n\n      .clickable {\n        text-decoration: none;\n        cursor: pointer;\n        color: var(--color-link-primary);\n      }\n\n      .clickable.secondary {\n        color: var(--color-link-secondary);\n      }\n\n      .clickable:hover {\n        text-decoration: underline;\n        color: var(--color-link-primary-hover);\n      }\n\n      .feature:hover .showonhover {\n        visibility: visible;\n      }\n\n      .showonhover {\n        visibility: hidden;\n      }\n\n      .aliases {\n        color: #bbb;\n        font-size: 80%;\n        display: inline;\n        margin-left: 5px;\n      }\n\n      rp-label {\n        margin-right: 3px;\n        margin-bottom: 3px;\n        vertical-align: top;\n      }\n\n      .selected {\n        display: flex;\n        flex-direction: column;\n        padding: 15px;\n      }\n\n      .selected .name {\n        font-size: 18px;\n        padding: 5px;\n      }\n\n      .selected .help {\n        padding: 5px 2px;\n        font-size: 11px;\n        color: var(--color-secondary-light);\n      }\n\n      #right-column {\n        vertical-align: top;\n        margin-left: 20px;\n        display: inline-block;\n      }\n\n      leaflet-map {\n        height: 250px;\n        width: 450px;\n        border: 0px solid #999;\n        border-radius: 5px;\n      }\n\n      .edit {\n        display: inline-block;\n        margin-right: 0px;\n      }"]);return Pe=function(){return e},e}function Ae(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Re=function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s};let ze=class extends he{constructor(){super(),this.path=[]}static get styles(){return ue(Pe())}updated(e){if(e.has("osmId")){const e=[];for(let t of this.path)if(e.push(t),t.osm_id===this.osmId)return this.path=[...e],void this.hideAliasDialog();this.fetchFeature()}}fetchFeature(){ye(this.getEndpoint()+"boundaries/"+this.osmId+"/").then(e=>{this.path=e.data,this.hideAliasDialog()})}fireTextareaAutosize(){window.setTimeout(()=>{be()(this.shadowRoot.querySelector("textarea")),be.a.update(this.shadowRoot.querySelector("textarea"))},0)}handleMapClicked(e){this.hovered=null,e&&e.osm_id===this.osmId||(this.osmId=e.osm_id)}handlePlaceClicked(e){this.osmId=e.osm_id}handleSearchSelection(e){const t=e.detail.selected;this.showAliasDialog(t)}renderFeature(e,t){const n=this.path[this.path.length-1],r=(e.has_children||0===e.level)&&e!==n,o=L(Te(),()=>{e.level>0&&(this.hovered=e)},()=>{this.hovered=null},e.level,r?"clickable":"",()=>{r&&this.handlePlaceClicked(e)},e.name,e.aliases.split("\n").map(t=>t.trim().length>0?L(Oe(),()=>{this.showAliasDialog(e)},t):null),e.level>0?L(Ee(),t=>{this.showAliasDialog(e),t.preventDefault(),t.stopPropagation()}):""),i=(e.children||[]).map(e=>t.length>0&&t[0].osm_id===e.osm_id?this.renderFeature(t[0],t.slice(1)):0===t.length||0===t[0].children.length?this.renderFeature(e,t):null);return L(Ce(),o,i)}showAliasDialog(e){this.editFeature=e;const t=this.shadowRoot.getElementById("alias-dialog");t&&(this.fireTextareaAutosize(),t.setAttribute("open",""))}hideAliasDialog(){const e=this.shadowRoot.getElementById("alias-dialog");e&&e.removeAttribute("open"),this.requestUpdate()}getEndpoint(){return this.endpoint+(this.endpoint.endsWith("/")?"":"/")}handleDialogClick(e){if("Save"===e.name){e.setProgress(!0);const t=this.shadowRoot.getElementById(this.editFeature.osm_id).value,n={osm_id:this.editFeature.osm_id,aliases:t};((e,t)=>{const n=ge("csrftoken"),r=n?{"X-CSRFToken":n}:{};return fe.a.post(e,t,{headers:r})})(this.getEndpoint()+"boundaries/"+this.editFeature.osm_id+"/",n).then(e=>{this.fetchFeature()})}"Cancel"===e.name&&this.hideAliasDialog()}renderOptionDetail(e,t){const n=L(Se()),r=e.aliases.split("\n").map(e=>e.trim().length>0?L(ke(),e):null);return L(_e(),n,e.path.replace(/>/gi,"‣"),r)}render(){if(0===this.path.length)return L(we());const e=this.path[this.path.length-1],t=0===e.children.length?this.path[this.path.length-2]:e,n=this.editFeature?this.editFeature.osm_id:null,r=this.editFeature?this.editFeature.name:null,o=this.editFeature?this.editFeature.aliases:null;return L(xe(),this.getEndpoint(),this.path[0].osm_id,this.renderOptionDetail,this.handleSearchSelection.bind(this),this.renderFeature(this.path[0],this.path.slice(1)),this.getEndpoint(),t,t.osm_id,this.hovered,this.handleMapClicked.bind(this),r,this.handleDialogClick.bind(this),n,o,r)}};Re([se({type:Array,attribute:!1})],ze.prototype,"path",void 0),Re([se()],ze.prototype,"endpoint",void 0),Re([se()],ze.prototype,"osmId",void 0),Re([se({type:Object})],ze.prototype,"hovered",void 0),Re([se({type:Object})],ze.prototype,"editFeature",void 0);ze=Re([re("alias-editor")],ze);function Ne(){const e=qe(['<div class="button ','" tabindex="0" @keyup="','"><div class="mask">',"</div></div>"]);return Ne=function(){return e},e}function je(){const e=qe([".button {\n        background: blue;\n        color: #fff;\n        cursor: pointer;\n        display: inline-block;\n        border-radius: var(--curvature);\n        outline: none;\n      }\n\n      .button:focus {\n        outline: none;\n        margin: 0;\n      }\n\n      .button:focus .mask{\n        background: rgb(0,0,0,.1);\n        box-shadow: 0 0 0px 2px var(--color-button-primary);\n      }\n\n      .button.secondary:focus .mask{\n        border: 1px solid var(--color-button-secondary);\n        background: transparent;\n        box-shadow: 0 0 0px 2px var(--color-button-secondary);\n      }\n\n      .mask {\n        padding: 5px 10px;\n        border-radius: var(--curvature);\n        border: 1px solid transparent;\n      }\n\n      .primary {\n        background: var(--color-button-primary);\n        color: var(--color-button-primary-text);\n      }\n\n      .secondary {\n        background: transparent;\n        color: var(--color-button-secondary);\n      }\n\n      .secondary:hover .mask{\n        border: 1px solid var(--color-button-secondary);\n      }\n\n      .button.progress{\n        background: #ddd;\n      }\n\n      .button.progress:focus .mask {\n        box-shadow: 0 0 0px 2px var(--color-button-secondary);\n      }\n\n      .mask:hover {\n        background: rgb(0,0,0,.1);\n      }\n\n      .secondary .mask:hover {\n        background: transparent;\n      }"]);return je=function(){return e},e}function qe(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Le=function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s};let Be=class extends he{static get styles(){return ue(je())}setProgress(e){this.isProgress=e}handleKeyUp(e){"Enter"===e.key&&this.click()}render(){return L(Ne(),me({progress:this.isProgress,primary:this.primary,secondary:this.secondary}),this.handleKeyUp,this.isProgress&&this.inProgessName||this.name)}};Le([se({type:Boolean})],Be.prototype,"primary",void 0),Le([se({type:Boolean})],Be.prototype,"secondary",void 0),Le([se()],Be.prototype,"name",void 0),Le([se()],Be.prototype,"inProgessName",void 0),Le([se({type:Boolean})],Be.prototype,"isProgress",void 0);Be=Le([re("rp-button")],Be);function De(){const e=$e(["<slot></slot>"]);return De=function(){return e},e}function Ie(){const e=$e(["<style>.mask {\n            height: ",'px;\n          }\n          .mask.open > .dialog {\n            top: 100px;\n          }</style><div class="mask ','"><div @keyup="','" class="dialog"><div class="header"><div class="title">','</div></div><div class="body" @keypress="','">','</div><div class="footer"><rp-button @click="','" name="','" inProgessName="','" primary>}</rp-button><rp-button @click="','" name="','" secondary></rp-button></div></div></div>']);return Ie=function(){return e},e}function Ue(){const e=$e([".mask {\n        width: 100%;\n        background: rgba(0, 0, 0, .5);\n        opacity: 0;\n        visibility: hidden;\n        position: fixed;\n        top:0px;\n        left:0px;\n        z-index: 2000;\n        transition: all ease-in 250ms;\n      }\n\n      .dialog {\n        background: #fff;\n        width: 500px;\n        margin: 0px auto; \n        top: -200px;\n        position: relative;\n        transition: top ease-in-out 200ms;\n        border-radius: var(--curvature);\n        overflow: hidden;\n        box-shadow: 0px 0px 0px 4px rgba(0,0,0,.04);\n      }\n\n      .mask.open {\n        opacity: 1;\n        visibility: visible;\n      }\n\n      .title {\n        padding: 10px 20px;\n        font-size: 18px;\n        color: var(--color-text-light);\n        background: var(--color-primary-dark);\n      }\n\n      .footer {\n        background: var(--color-primary-light);\n        padding: 10px;\n        display: flex;\n        flex-flow: row-reverse;\n      }\n\n      rp-button {\n        margin-left: 5px;\n      }"]);return Ue=function(){return e},e}function $e(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Fe=function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s};let Ve=class extends he{constructor(){super(),this.primaryButtonName="Ok",this.cancelButtonName="Cancel",this.inProgressName="Saving"}static get styles(){return ue(Ue())}updated(e){if(e.has("open")&&this.open){this.shadowRoot.querySelectorAll("rp-button").forEach(e=>e.setProgress(!1));const e=this.querySelectorAll("textarea,input");e.length>0&&window.setTimeout(()=>{e[0].focus()},100)}}handleClick(e){const t=e.currentTarget;t.isProgress||this.onButtonClicked(t)}getDocumentHeight(){const e=document.body,t=document.documentElement;return Math.max(e.scrollHeight,e.offsetHeight,t.clientHeight,t.scrollHeight,t.offsetHeight)}handleKeyUp(e){"Escape"===e.key&&this.shadowRoot.querySelectorAll("rp-button").forEach(e=>{e.name===this.cancelButtonName&&e.click()})}render(){const e=this.getDocumentHeight();return L(Ie(),e+100,this.open?"open":"",this.handleKeyUp,this.title,this.handleKeyUp,this.body?this.body:L(De()),this.handleClick,this.primaryButtonName,this.inProgressName,this.handleClick,this.cancelButtonName)}};Fe([se({type:Boolean})],Ve.prototype,"open",void 0),Fe([se()],Ve.prototype,"title",void 0),Fe([se()],Ve.prototype,"body",void 0),Fe([se()],Ve.prototype,"primaryButtonName",void 0),Fe([se({type:String})],Ve.prototype,"cancelButtonName",void 0),Fe([se()],Ve.prototype,"inProgressName",void 0),Fe([se({attribute:!1})],Ve.prototype,"onButtonClicked",void 0);Ve=Fe([re("rp-dialog")],Ve);class Me extends he{getEventHandlers(){return[]}connectedCallback(){super.connectedCallback();for(const e of this.getEventHandlers())document.addEventListener(e.event,e.method.bind(this))}disconnectedCallback(){for(const e of this.getEventHandlers())document.removeEventListener(e.event,e.method);super.disconnectedCallback()}fireEvent(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=new CustomEvent(e,{detail:t,bubbles:!0,composed:!0});this.dispatchEvent(n)}}function He(){const e=Ke(['<input class="textinput" .value="','" placeholder="','">']);return He=function(){return e},e}function We(){const e=Ke(['<textarea class="textinput" .value="','" placeholder="','">\n        </textarea>']);return We=function(){return e},e}function Ze(){const e=Ke(["<style>.input-container {\n        height: ",';\n      }</style><div class="input-container" @click="','">',"</div>"]);return Ze=function(){return e},e}function Xe(){const e=Ke([".input-container {\n        border-radius: 5px;\n        overflow: hidden;\n        cursor: pointer;\n        background: var(--color-widget-bg);\n        border: 1px solid var(--color-widget-border);\n        box-shadow: none;\n        transition: all ease-in-out 200ms;\n        display: flex;\n        flex-direction: row;\n        align-items: stretch;\n      }\n\n      .input-container:focus-within {\n        border-color: var(--color-widget-border);\n        background: var(--color-widget-bg-focused);\n        box-shadow: var(--color-widget-shadow-focused) 1px 1px 6px 0px inset;\n      }\n\n      .input-container:hover {\n        background: var(--color-widget-bg-focused);\n      }\n\n      textarea {\n        height: 85%;\n      }\n\n      .textinput {\n        padding: 8px;\n        border: 0px solid red;\n        flex: 1;\n        margin: 0;\n        background: transparent;\n        color: var(--color-text);\n        font-size: 13px;\n        cursor: pointer;\n        resize: none;\n      }\n\n      .textinput:focus {\n        outline: none;\n        cursor: text;\n      }"]);return Xe=function(){return e},e}function Ke(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Je=function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s};let Ye=class extends Me{constructor(){super(...arguments),this.placeholder="",this.value=""}static get styles(){return ue(Xe())}firstUpdated(e){super.firstUpdated(e),this.inputElement=this.shadowRoot.querySelector(".textinput")}render(){return L(Ze(),this.textarea?"100%":"auto",()=>{this.shadowRoot.querySelector(".textinput").focus()},this.textarea?L(We(),this.value,this.placeholder):L(He(),this.value,this.placeholder))}};Je([se({type:Boolean})],Ye.prototype,"textarea",void 0),Je([se({type:String})],Ye.prototype,"placeholder",void 0),Je([se({type:String})],Ye.prototype,"value",void 0),Je([se({type:Object})],Ye.prototype,"inputElement",void 0);Ye=Je([re("rp-textinput")],Ye);function Qe(){const e=tt(["<style>.label {\n            background: ",";\n            color: ",";\n          }</style>"]);return Qe=function(){return e},e}function Ge(){const e=tt(["",'<div class="label ','"><div class="mask"><slot></slot></div></div>']);return Ge=function(){return e},e}function et(){const e=tt([":host {\n        display: inline-block;\n      }\n\n      .mask {\n        padding: 3px 6px;\n        border-radius: var(--curvature);\n      }\n\n      .label.clickable .mask:hover {\n        background: rgb(0,0,0,.05);\n      }\n\n      .label {\n        border-radius: 2px;\n        font-size: 80%;\n        font-weight: 400;\n        border-radius: var(--curvature);\n        background: tomato;\n        color: #fff;\n        text-shadow: 0 0.04em 0.04em rgba(0,0,0,0.35);\n      }\n\n      .primary {\n        background: var(--color-label-primary);\n        color: var(--color-label-primary-text);\n      }\n\n      .secondary {\n        background: var(--color-label-secondary);\n        color: var(--color-label-secondary-text);\n        text-shadow: none;\n      }\n\n      .light {\n        background: var(--color-overlay-light);\n        color: var(--color-overlay-light-text);\n        text-shadow: none;\n      }\n\n      .dark {\n        background: var(--color-overlay-dark);\n        color: var(--color-overlay-dark-text);\n        text-shadow: none;\n      }\n\n      .clickable {\n        cursor: pointer;\n      }"]);return et=function(){return e},e}function tt(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var nt=function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s};let rt=class extends he{static get styles(){return ue(et())}render(){return L(Ge(),this.backgroundColor&&this.textColor?L(Qe(),this.backgroundColor,this.textColor):null,me({clickable:this.clickable,primary:this.primary,secondary:this.secondary,light:this.light,dark:this.dark}))}};nt([se({type:Boolean})],rt.prototype,"clickable",void 0),nt([se({type:Boolean})],rt.prototype,"primary",void 0),nt([se({type:Boolean})],rt.prototype,"secondary",void 0),nt([se({type:Boolean})],rt.prototype,"light",void 0),nt([se({type:Boolean})],rt.prototype,"dark",void 0),nt([se()],rt.prototype,"backgroundColor",void 0),nt([se()],rt.prototype,"textColor",void 0);var ot;rt=nt([re("rp-label")],rt);function it(){const e=ht(['<div @mousemove="','" @click="','" class="option ','">',"</div>"]);return it=function(){return e},e}function st(){const e=ht(["<style>.options {\n          top: ","px;\n          left: ","px;\n          width: ",'px;\n        }</style><div class="options ','">',"</div>"]);return st=function(){return e},e}function at(){const e=ht(["",""]);return at=function(){return e},e}function lt(){const e=ht(["",""]);return lt=function(){return e},e}function ct(){const e=ht(['<div class="name">',"</div>"]);return ct=function(){return e},e}function ut(){const e=ht(['<div class="name">','</div><div class="detail">',"</div>"]);return ut=function(){return e},e}function pt(){const e=ht([".options {\n        overflow-y: scroll;\n        background: #fff;\n        border-radius: 5px;\n        position: absolute;\n        border: 1px solid var(--color-borders);\n        box-shadow: 0px 0px 3px 1px rgba(0,0,0,.06);\n        /* transition: opacity ease-in-out 200ms, top ease-in-out 100ms; */\n        max-height: 300px;\n        opacity: 0;\n        visibility: hidden;\n      }\n\n      .show {\n        opacity: 1;\n        visibility: visible;\n      }\n\n      .option {\n        font-size: 14px;\n        padding: 10px 20px;\n        border-radius: 5px;\n        margin: 5px;\n        cursor: pointer;\n        color: var(--color-text);\n      }\n\n      .option.focused {\n        background: rgba(var(--primary-rgb), .8);\n        color: var(--color-text-light);\n      }\n\n      .option .detail {\n        font-size: 85%;\n        color: rgba(255,255,255,.9);\n      }\n\n      code {\n        background: rgba(0,0,0,.15);\n        padding: 1px 5px;\n        border-radius: 4px;\n      }"]);return pt=function(){return e},e}function ht(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}!function(e){e.Canceled="rp-canceled",e.CursorChanged="rp-cursor-changed",e.Selection="rp-selection"}(ot||(ot={}));var dt=function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s};let ft=class extends Me{constructor(){super(...arguments),this.cursorIndex=0}static get styles(){return ue(pt())}updated(e){if(super.updated(e),e.has("cursorIndex")){const e=this.shadowRoot.querySelector(".focused");if(e){const t=this.shadowRoot.querySelector(".options"),n=t.getBoundingClientRect().height,r=e.getBoundingClientRect().height;if(e.offsetTop+r>t.scrollTop+n-5){const o=e.offsetTop-n+r+5;t.scrollTo({top:o})}else if(e.offsetTop<t.scrollTop){const n=e.offsetTop-5;t.scrollTo({top:n})}}}e.has("options")&&(this.calculatePosition(),this.cursorIndex=0)}renderOptionDefault(e,t){const n=this.renderOptionName||this.renderOptionNameDefault,r=this.renderOptionDetail||this.renderOptionDetailDefault;return t?L(ut(),n(e,t),r(e,t)):L(ct(),n(e,t))}renderOptionNameDefault(e,t){return L(lt(),e.name)}renderOptionDetailDefault(e,t){return L(at(),e.detail)}handleSelection(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];const t=this.options[this.cursorIndex];this.fireEvent(ot.Selection,{selected:t,tabbed:e})}moveCursor(e){const t=Math.max(Math.min(this.cursorIndex+e,this.options.length-1),0);this.setCursor(t)}setCursor(e){e!==this.cursorIndex&&(this.cursorIndex=e,this.fireEvent(ot.CursorChanged,{index:e}))}handleKeyDown(e){this.visible&&(e.ctrlKey&&"n"===e.key||"ArrowDown"===e.key?(this.moveCursor(1),e.preventDefault()):e.ctrlKey&&"p"===e.key||"ArrowUp"===e.key?(this.moveCursor(-1),e.preventDefault()):"Enter"!==e.key&&"Tab"!==e.key||(this.handleSelection("Tab"===e.key),e.preventDefault()),"Escape"===e.key&&this.fireEvent(ot.Canceled))}calculatePosition(){const e=this.shadowRoot.querySelector(".options").getBoundingClientRect();if(this.anchorTo){const t=this.anchorTo.getBoundingClientRect(),n=t.top-e.height;n>0&&t.bottom+e.height>window.innerHeight?this.top=n+window.pageYOffset:this.top=t.bottom+window.pageYOffset,this.left=t.left,this.width=t.width}}getEventHandlers(){return[{event:"keydown",method:this.handleKeyDown},{event:"scroll",method:this.calculatePosition}]}render(){const e=(this.renderOption||this.renderOptionDefault).bind(this);return L(st(),this.top,this.left,this.width,this.visible?"show":"",this.options.map((t,n)=>L(it(),()=>{this.setCursor(n)},()=>{this.handleSelection()},n==this.cursorIndex?"focused":"",e(t,n==this.cursorIndex))))}};dt([se({type:Number})],ft.prototype,"top",void 0),dt([se({type:Number})],ft.prototype,"left",void 0),dt([se({type:Number})],ft.prototype,"width",void 0),dt([se({type:Object})],ft.prototype,"anchorTo",void 0),dt([se({type:Boolean})],ft.prototype,"visible",void 0),dt([se({type:Number})],ft.prototype,"cursorIndex",void 0),dt([se({type:Array})],ft.prototype,"options",void 0),dt([se({attribute:!1})],ft.prototype,"renderOption",void 0),dt([se({attribute:!1})],ft.prototype,"renderOptionName",void 0),dt([se({attribute:!1})],ft.prototype,"renderOptionDetail",void 0);ft=dt([re("rp-options")],ft);function gt(){const e=yt(['<rp-textinput @keyup="','" @blur="','" @focus="','" .value="','" placeholder="','"></rp-textinput><rp-options cursorIndex="','" @rp-selection="','" .renderOptionDetail="','" .renderOptionName="','" .renderOption="','" .anchorTo="','" .options="','" ?visible="','"></rp-options>']);return gt=function(){return e},e}function mt(){const e=yt([":host {\n        display: flex;\n        flex-direction: column;\n      }"]);return mt=function(){return e},e}function yt(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var vt=function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s};let bt=class extends Me{constructor(){super(),this.selected=[],this.placeholder="",this.input="",this.options=[],this.quietMillis=200,this.renderOptionDetail=(()=>{})}static get styles(){return ue(mt())}updated(e){if(super.updated(e),e.has("selected")&&(this.input="",this.shadowRoot.querySelector("input").blur()),e.has("input")&&!e.has("selected")){if(!this.input)return void(this.options=[]);this.lastQuery&&window.clearTimeout(this.lastQuery),this.lastQuery=window.setTimeout(()=>{this.fetchOptions(this.input)},this.quietMillis)}e.has("cursorIndex")&&this.options.length>0&&this.query&&!this.complete&&this.cursorIndex>this.options.length-20&&this.fetchOptions(this.query,this.page+1)}handleOptionSelection(e){const t=e.detail.selected;this.selected=[t],this.options=[],this.input=t.name}fetchOptions(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(!this.fetching){this.cancelToken&&this.cancelToken.cancel();const n=fe.a.CancelToken;this.cancelToken=n.source(),this.fetching=!0,ye(this.endpoint+encodeURIComponent(e)+"&page="+t,this.cancelToken.token).then(n=>{if(0===t)this.options=n.data.filter(e=>e.level>0),this.cursorIndex=0,this.query=e,this.complete=0===this.options.length;else{const e=n.data.filter(e=>e.level>0);e.length>0&&(this.options=[...this.options,...e]),this.complete=0===e.length}this.fetching=!1,this.page=t}).catch(e=>{})}}handleBlur(){window.setTimeout(()=>{this.options=[]},100)}handleFocus(){}handleKeyUp(e){const t=e.currentTarget;this.input=t.inputElement.value.trim()}handleCancel(){this.options=[]}handleCursorChanged(e){this.cursorIndex=e.detail.index}getEventHandlers(){return[{event:ot.Canceled,method:this.handleCancel},{event:ot.CursorChanged,method:this.handleCursorChanged}]}firstUpdated(e){this.anchorElement=this.shadowRoot.querySelector("rp-textinput")}render(){return L(gt(),this.handleKeyUp,this.handleBlur,this.handleFocus,this.input,this.placeholder,this.cursorIndex,this.handleOptionSelection,this.renderOptionDetail,this.renderOptionName,this.renderOption,this.anchorElement,this.options,this.input.length>0&&this.options.length>0)}};vt([se({type:Array})],bt.prototype,"selected",void 0),vt([se()],bt.prototype,"placeholder",void 0),vt([se()],bt.prototype,"endpoint",void 0),vt([se({type:String})],bt.prototype,"input",void 0),vt([se({type:Array})],bt.prototype,"options",void 0),vt([se({type:Number})],bt.prototype,"quietMillis",void 0),vt([se({type:Boolean})],bt.prototype,"fetching",void 0),vt([se({attribute:!1})],bt.prototype,"cursorIndex",void 0),vt([se({attribute:!1})],bt.prototype,"anchorElement",void 0),vt([se({attribute:!1})],bt.prototype,"renderOption",void 0),vt([se({attribute:!1})],bt.prototype,"renderOptionName",void 0),vt([se({attribute:!1})],bt.prototype,"renderOptionDetail",void 0);bt=vt([re("rp-select")],bt);const xt=0,wt=1,_t=2,kt=3,St=4,Ct=5,Et=6,Ot=(e,t)=>0===e.indexOf(t,0),Tt=(e,t,n)=>{const r=e.substring(1);if("("===r[0])return!0;{const e=r.split(".")[0].toLowerCase();if(!n)return t.indexOf(e)>=0;for(const n of t)if(Ot(n,e))return!0;return!1}},Pt=e=>e>="a"&&e<="z"||e>="A"&&e<="Z"||e>="0"&&e<="9"||"_"===e,At=e=>{let t=0;for(const n of e)'"'===n&&t++;return t%2!=0};const Rt=(e,t)=>t?e.filter(e=>!!e.signature&&0===e.signature.indexOf(t)):e,zt=(e,t)=>{const n=(t||"").split(".");let r=e.root_no_session,o="",i="";for(;n.length>0;)if(i=n.shift()){const t=r.find(e=>e.key===i);if(!t){r=r.filter(e=>e.key.startsWith(i.toLowerCase()));break}{const n=e.types.find(e=>e.name===t.type);if(!n||!n.properties){r=r.filter(e=>e.key.startsWith(i.toLowerCase()));break}r=n.properties,o+=i+"."}}return r.map(e=>{return{name:"__default__"===e.key?o.substr(0,o.length-1):o+e.key,summary:e.help}})};var Nt=n(9),jt=n.n(Nt);const qt=new WeakMap,Lt=o(e=>t=>{if(!(t instanceof C))throw new Error("unsafeHTML can only be used in text bindings");const n=qt.get(t);if(void 0!==n&&w(e)&&e===n.value&&t.value===n.fragment)return;const r=document.createElement("template");r.innerHTML=e;const o=document.importNode(r.content,!0);t.setValue(o),qt.set(t,{value:e,fragment:o})});function Bt(){const e=Vt(["<style>#anchor {\n          top:","px;\n          left:",'px;\n        }</style><div id="anchor"></div><rp-textinput placeholder="','" @keyup="','" @click="','" @input="','" .value="','" ?textarea="','"></rp-textinput><rp-options @rp-selection="','" .anchorTo="','" .options="','" .renderOption="','" ?visible="','"></rp-options>']);return Bt=function(){return e},e}function Dt(){const e=Vt(['<div style="font-size: 85%">',"</div>"]);return Dt=function(){return e},e}function It(){const e=Vt(['<div><div style="','">',"</div>","</div>"]);return It=function(){return e},e}function Ut(){const e=Vt(['<div style="display:inline-block; font-weight: 300; font-size: 85%">','</div><div class="detail">',"</div>"]);return Ut=function(){return e},e}function $t(){const e=Vt(['<div style="','"><div style="display:inline-block;">ƒ</div><div style="display:inline-block">',"</div>","</div>"]);return $t=function(){return e},e}function Ft(){const e=Vt(["#anchor {\n        position: absolute;\n        visibility: visible;\n        width: 250px;\n        border: 0px solid purple;\n      }\n\n      .fn-marker {\n        font-weight: bold;\n        font-size: 42px;\n      }"]);return Ft=function(){return e},e}function Vt(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Mt,Ht=function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s};const Wt=n(30),Zt=o(e=>t=>{t.setValue(Lt(Wt(e)))});let Xt=Mt=class extends Me{constructor(){super(...arguments),this.anchorPosition={left:0,top:0},this.placeholder="",this.options=[],this.value=""}static get styles(){return ue(Ft())}firstUpdated(e){this.textInputElement=this.shadowRoot.querySelector("rp-textinput"),this.anchorElement=this.shadowRoot.querySelector("#anchor"),this.completionsEndpoint&&ye(this.completionsEndpoint).then(e=>{this.schema=e.data}),this.functionsEndpoint&&ye(this.functionsEndpoint).then(e=>{this.functions=e.data})}handleKeyUp(e){if(this.options.length>0){if("ArrowUp"===e.key||"ArrowDown"===e.key)return;if(e.ctrlKey&&("n"===e.key||"p"===e.key))return;if("Enter"===e.key||"Escape"===e.key||"Tab"===e.key||e.key.startsWith("Control"))return;this.executeQuery(e.currentTarget)}}handleClick(e){this.executeQuery(e.currentTarget)}executeQuery(e){if(this.inputElement=e.inputElement,this.schema){const n=e.inputElement.selectionStart,r=e.inputElement.value.trim().substring(0,n),o=Mt.parser.findExpressions(r).find(e=>e.start<=n&&(e.end>n||e.end===n&&!e.closed));if(o){const n=o.text.indexOf("(")>-1;if(n){const e=Mt.parser.functionContext(o.text);if(e){const t=Rt(this.functions,e);t.length>0&&(this.currentFunction=t[0])}}for(let r=o.text.length;r>=0;r--){const i=o.text[r];if("@"===i||"("===i||" "===i||","===i||")"===i||0===r){"("!==i&&" "!==i&&","!==i&&")"!==i&&"@"!==i||r++;var t=jt()(e.inputElement,o.start+r);return this.anchorPosition={left:t.left+5,top:e.inputElement.offsetTop+t.top-e.inputElement.scrollTop+20},this.query=o.text.substr(r,o.text.length-r),void(this.options=[...zt(this.schema,this.query),...n?Rt(this.functions,this.query):[]])}}}else this.options=[],this.query=""}}handleInput(e){const t=e.currentTarget;this.executeQuery(t)}handleOptionSelection(e){const t=e.detail.selected,n=e.detail.tabbed;let r="";if(r=t.signature?t.signature.substr(0,t.signature.indexOf("(")+1):t.name,this.inputElement){let e=this.inputElement.value;e=e.substr(0,e.lastIndexOf(this.query)),e+=r,this.inputElement.value=e}this.query="",this.options=[],n&&this.executeQuery(this.textInputElement)}renderCompletionOption(e,t){if(e.signature){const n=e.signature.indexOf("("),r=e.signature.substr(0,n),o=e.signature.substr(n);return L($t(),t?"font-weight: 400":"",r,t?L(Ut(),o,Zt(e.summary)):null)}return L(It(),t?"font-weight: 400":"",e.name,t?L(Dt(),e.summary):null)}render(){return L(Bt(),this.anchorPosition.top,this.anchorPosition.left,this.placeholder,this.handleKeyUp,this.handleClick,this.handleInput,this.value,this.textarea,this.handleOptionSelection,this.anchorElement,this.options,this.renderCompletionOption,this.options.length>0)}};Xt.parser=new class{constructor(e,t){this.expressionPrefix=e,this.allowedTopLevels=t}expressionContext(e){const t=this.findExpressions(e);if(0===t.length)return null;const n=t[t.length-1];return n.end<e.length||n.closed?null:n.text.substring(1)}autoCompleteContext(e){if(At(e))return null;const t=[];let n="",r=!1,o=!1,i="";for(let s=e.length-1;s>=0;s--){const a=e[s];if(" "===a&&(r=!0),","===a&&(r=!0,"("!==t[t.length-1]&&t.push("(")),")"!==a||o||(r=!0,t.push("("),t.push("(")),'"'===a&&(o=!o),r&&("("!==a||o||("("===t[t.length-1]&&t.pop(),0===t.length&&(r=!1))),"("===a&&""===n&&(i="#"),!(r||o||"("===a&&""===n)){if(!Pt(a)&&"."!==a)break;n=a+n}}return n.match(/[A-Za-z][\w]*(\.[\w]+)*/)?i+n:null}functionContext(e){let t=At(e)?St:Et,n="",r="("===e[-1]?0:1;for(let o=e.length-1;o>=0;o--){const i=e[o];if("@"===i)return"";if(t===Et)0!==r||!Pt(i)&&"."!==i?'"'===i?t=St:"("===i?r--:")"===i&&r++:(t=_t,n=i+n);else if(t===_t){if(!Pt(i)&&"."!==i)return n;n=i+n}else t===St&&'"'===i&&(t=Et)}return""}getContactFields(e){const t={},n=/((parent|child\.)*contact\.)*fields\.([a-z0-9_]+)/g,r=this.findExpressions(e);for(const e of r){let r;for(;r=n.exec(e.text);)t[r[3]]=!0}return Object.keys(t)}findExpressions(e){const t=[];let n=xt,r=null,o=0;for(let i=0;i<e.length;i++){const s=e[i],a=i<e.length-1?e[i+1]:0,l=i<e.length-2?e[i+2]:0;if(n===xt?s!==this.expressionPrefix||!Pt(a)&&"("!==a?s===this.expressionPrefix&&a===this.expressionPrefix&&(n=Ct):(n=wt,r={start:i,end:null,text:s,closed:!1}):n===wt?(Pt(s)?n=_t:"("===s&&(n=kt,o+=1),r.text+=s):n===_t?r.text+=s:n===kt?("("===s?o+=1:")"===s?o-=1:'"'===s&&(n=St),r.text+=s,0===o&&(r.end=i+1)):n===St?('"'===s&&(n=kt),r.text+=s):n===Ct&&(n=xt),n===_t&&(!Pt(a)&&"."!==a||"."===a&&!Pt(l))&&(r.end=i+1),null!=r&&(null!=r.end||0===a)){const e=0===a;Tt(r.text,this.allowedTopLevels,e)&&(r.closed="("===r.text[1]&&0===o,r.end=i+1,t.push(r)),r=null,n=xt}}return t}}("@",["contact","fields","urns"]),Ht([se({type:Object})],Xt.prototype,"anchorPosition",void 0),Ht([se({attribute:!1})],Xt.prototype,"currentFunction",void 0),Ht([se({type:String})],Xt.prototype,"placeholder",void 0),Ht([se({attribute:!1})],Xt.prototype,"textInputElement",void 0),Ht([se({attribute:!1})],Xt.prototype,"anchorElement",void 0),Ht([se({type:Array})],Xt.prototype,"options",void 0),Ht([se({type:String})],Xt.prototype,"value",void 0),Ht([se({type:String})],Xt.prototype,"completionsEndpoint",void 0),Ht([se({type:String})],Xt.prototype,"functionsEndpoint",void 0),Ht([se({type:Boolean})],Xt.prototype,"textarea",void 0);Xt=Mt=Ht([re("rp-completion")],Xt)}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,