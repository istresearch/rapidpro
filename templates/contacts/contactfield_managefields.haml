-extends "smartmin/base.html"
-load smartmin
-load i18n

-block top-form
  - if view.search_fields and object_list
    - block search-form
      %form
        %input.input-medium.search-query{type:'text', placeholder:'Search', name:"search", value:"{{search}}"}

-block content
  -block table-controls
    .row
      .table-buttons
        - block table-buttons
          - if view.add_button
            - if org_perms.contacts.contactfield_create
              %a.btn.btn-primary.pull-right{ onClick:'showCreateContactFieldModal()' } Create a field

  {% block pjax %}
  #pjax
    .row-fluid
      .span12
        - block pre-table

        - block table
          .scroll-x
            %table{ class:'{% get_list_class object_list %} list-table table table-striped', cellspacing:'0'}
              %thead
                %tr
                  %th.drag-icon

                  - for field in fields
                    %th{ class:'header-{{field}} {% if view|field_orderable:field %}header {% if field == order %}{% if order_asc %}headerSortUp{% else %}headerSortDown{% endif %}{% endif %}{% endif %}', id:'header-{{field}}' }
                      {% get_label field %}

                %tbody#draggable-tbody
                  - for obj in object_list
                    %tr.draggable-row{ class:'{% cycle "row2" "row1" %} {% if not obj.is_active and obj|is_smartobject %}inactive{% endif %}', data-cfid:'{{ obj.id }}', data-priority:'{{ obj.priority }}'}

                      - if org_perms.contacts.contactfield_updatepriority
                        %td.drag-icon
                          .drag-handle.icon.icon-menu
                      - else
                        %td

                      -for field in fields
                        %td{class:'value-{{field}} {% get_class field obj %}{% if field in link_fields %} {% endif %}' }
                          - if field in link_fields
                            <a {% if pjax %}data-pjax='{{ pjax }}'{% endif %} href="{% get_field_link field obj %}">{% get_value obj field %}</a>
                          - else
                            {% get_value obj field %}

                  - empty
                    %tr.empty_list
                      %td
                      - for field in fields
                        %td

          - block extra-rows

        - block post-table

  {% block paginator %}
  .row
    - include "smartmin/sidebar_pagination.haml"

{% endblock pjax %}
{% endblock content %}

{% block extra-script %}
{{ block.super }}
:javascript

<script>

  $(document).ready(function(){

    - if org_perms.contacts.contactfield_updatepriority
      $('#draggable-tbody').sortable({
        handle: '.drag-handle',  // make this row draggable only by the handle
        placeholder: "sortable-placeholder",
        dataIdAttr: 'data-cfid',
        direction: 'vertical',
        stop: function (event, ui) {
          $(ui.item).removeClass('sortable-dragging');

          var priorityMapping = {};
          $('#draggable-tbody > tr').each(function(idx, elem) {
            // rewrite priority of every element based on the current order of elements
            var new_idx = 1000 - idx;

            priorityMapping[$(elem).data('cfid')] = new_idx;

          });

          var priorityUpdateUrl = '{% url "contacts.contactfield_updatepriority" %}';

          $.ajax({
            type: 'POST',
            url: priorityUpdateUrl,
            data: JSON.stringify(priorityMapping),
            success: function (data, status, jqXHR) {
              // show user a notification ???
              // console.log(data, status, jqXHR);
            },
            error: function (jqXHR, status, error) {
              // how do we display errors to the user ???
              // console.log(jqXHR, status, error);
            }
          });

        },
        start: function (event, ui) {
          $(ui.item).addClass('sortable-dragging');
          // since we use a table we need to manually add a div to the sortable.placeholder in order to modify its margin
          ui.placeholder.html('<td colspan=99><div></div></td>');
        }
      });

    - if org_perms.contacts.contactfield_update
      $('tr[data-cfid]').on('click', function(evt) {
        evt.preventDefault();

        showUpdateContactFieldModal($(this).data('cfid'));
      });

  }); // document.ready

  function showCreateContactFieldModal() {

    var modal = new Modax('{% trans "Create Contact Field" %}', '{% url "contacts.contactfield_create" %}')
    modal.setIcon('icon-vcard');
    modal.ele.find('.primary').text('{% trans "Create" %}');

    modal.setListeners({
      onSuccess: function() {
        // simply reload the whole page
        location.reload();
      }
    })
    modal.show()
  }

  function showUpdateContactFieldModal(cfid) {
    var updateUrl = '/contactfield/update/' + cfid + '/';

    var modal = new Modax('{% trans "Update Contact Field" %}', updateUrl);

    modal.setIcon('icon-vcard');
    modal.ele.find('.primary').text('{% trans "Update" %}');

    - if org_perms.contacts.contactfield_delete
      modal.setTertiaryButton('{% trans "Delete" %}', function() {
        // hide current UpdateModal
        modal.dismiss();

        showDeleteContactFieldModal(cfid);
      });
      // make Delete dangerous
      modal.ele.find('.tertiary').addClass('btn-danger');

    modal.setListeners({
      onSuccess: function() {
        // simply reload the whole page
        location.reload();
      },
      onFormLoaded: function() {
        // fonty checkboxy
        useFontCheckbox(".smartmin-form input[type=checkbox]", true);
      }
    })
    modal.show();
  }

  function _updateModalButtonsStyle(modal) {
    var has_related_flows = !!$(modal.ele.find('.has-related-flows')).length;

    if (has_related_flows) {
      // hide the secondary button
      modal.hideSecondaryButton();
      // rename the primary button
      modal.ele.find('.primary').text('Cancel').on('click', function () { modal.dismiss()} );

      modal.submit = function () {};
    } else {
      modal.ele.find('.primary').text('{% trans "Delete" %}').addClass('btn-danger')
    }
  };


  function showDeleteContactFieldModal(cfid) {
    var deleteUrl = '/contactfield/delete/' + cfid + '/';

    var modal = new Modax('{% trans "Delete Contact Field" %}', deleteUrl);
    modal.setIcon('icon-vcard');

    modal.redirectOnSuccess = true;

    modal.show();

    modal.setListeners({
      onCompleted: function() {
        _updateModalButtonsStyle(modal)

        // simply reload the whole page
        location.reload();
      },
      onFormLoaded: function() {
        _updateModalButtonsStyle(modal)
      }
    })
  }
</script>

{% endblock %}



-block extra-style
  {{block.super}}
  :css
    .drag-handle {
      cursor: move;
      display: block;
      /*padding-top:10px;*/
    }

    .drag-icon:before {
      content: '';
      display: block;
      width: 15px;
    }

    .sortable-dragging {
      opacity: 1;
      background-color: #f9f9f9;
      border: 1px solid #dbdfe0 !important;
      border-radius: 3px;
      margin: 0px;
    }

    .draggable-row .icon {
      display: none;
    }

    .draggable-row > td {
      cursor: pointer;
    }

    .draggable-row:hover .icon {
      display: inline-block;
      color: #cccccc;
    }

    #draggable-tbody tr.sortable-placeholder {
      visibility: visible;
    }

    #draggable-tbody .sortable-placeholder div {
      border-top: 1px solid #dbdfe0;
      border-bottom: 1px solid #dbdfe0;
      background-color: #f5f9fa;
      height: 57px;
      margin-bottom: 10px;
      margin-top: 0px;
    }

    .value-label {
      min-width: 400px;
    }
    .value-key {
      width: 240px;
    }
    .value-value_type {
      width: 80px;
    }
    .value-show_in_table {
      width: 50px;
    }

    td.value-show_in_table {
      text-align: center;
    }

    .drag-icon {
      width: 15px;
    }
