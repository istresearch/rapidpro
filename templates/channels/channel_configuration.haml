-extends "smartmin/read.haml"
-load i18n channels

-block title
  .medium-help.float-left{class:'{{object|channel_icon}}'}
  %h2.font_normalize.header-margin.title
    {{ object.get_channel_type_display }} Configuration

    .number
      {{ object.get_address_display }}
      -if object.get_country_display
        ({{ object.get_country_display }})

      -if object.channel_type == 'A'
        \- {{ channel.device }}
        -if channel.os
          (v{{channel.os}})

-block content
  -if object.channel_type == 'AT'
    %h4
      -blocktrans
        To finish configuring your Africa's Talking connection you'll need to set the following callback URLs on the
        Africa's Talking website under your account.

    .clearfix
      .config-value
        .name
          -trans "Username:"
        .value {{ object.config.username }}
      .config-value
        .name
          -trans "API Key:"
        .value {{ object.config.api_key }}

    .clearfix
    %hr

    %h4
      -trans "Callback URL"

    %p
      -blocktrans
        You can set the callback URL on your Africa's Talking account by visiting the SMS Dashboard page, then clicking on
        <a href="http://www.africastalking.com/account/sms/smscallback" target="africastalking">Callback URL</a>.

    %code
      https://{{ domain }}{% url 'courier.at' object.uuid 'receive' %}

    %hr

    %h4
      -trans "Delivery URL"

    %p
      -trans "You can set the delivery URL on your Africa's Talking account by visiting the SMS Dashboard page, then clicking on"
      <a href="http://www.africastalking.com/account/sms/dlrcallback" target="africastalking">Delivery Reports</a>.

    %code
      https://{{ domain }}{% url 'courier.at' object.uuid 'status' %}

    %hr

  -elif object.channel_type == 'CT'
    %h4
      -blocktrans
        To finish configuring your Clickatell connection you'll need to set the following callback URLs on the
        Clickatell website for your integration.

    %h4
      -trans "Reply Callback"

    %p
      -blocktrans
        You can set the callback URL on your Clickatell account by managing your integration, then setting your reply
        callback under "Two Way Settings" to HTTP POST and your target address to the URL below. (leave username and password blank)

    %code
      https://{{ domain }}{% url 'courier.ct' object.uuid 'receive' %}

    %hr

    %h4
      -trans "Delivery Notifications"

    %p
      -blocktrans
        You can set the delivery notification URL on your Clickatell account by managing your integration, then setting your
        delivery notification URL under "Settings" to HTTP POST and your target address to the URL below. (leave username and password blank)

    %code
      https://{{ domain }}{% url 'courier.ct' object.uuid 'status' %}

    %hr


  -elif object.channel_type == 'SQ'
    %h4
      -blocktrans with number=channel.address
        To finish configuring your Shaqodoon connection you'll need to provide Shaqodoon with the following delivery
        URL for incoming messages to {{ number }}.

    %code
      https://{{ domain }}{% url 'courier.sq' object.uuid 'receive' %}

    %hr

  -elif object.channel_type == 'ZV'
    %h4
      -trans "To finish configuring your Zenvia connection you'll need to set the following callback URLs on your Zenvia account."

    .clearfix
      .config-value
        .name
          -trans "Account:"
        .value {{ object.config.account }}
      .config-value
        .name
          -trans "Code:"
        .value {{ object.config.code }}

    .clearfix
    %hr

    %h4
      -trans "Status URL"

    %p
      -blocktrans
        To receive delivery and acknowledgement of sent messages, you need to set the status URL
        for your Zenvia account.

    %code
      https://{{ domain }}{% url 'courier.zv' object.uuid 'status' %}

    %hr

    %h4
      -trans "Receive URL"

    %p
      -trans "To receive incoming messages, you need to set the receive URL for your Zenvia account."

    %code
      https://{{ domain }}{% url 'courier.zv' object.uuid 'receive' %}

    %hr

  -elif object.channel_type == 'NX'
    %h4
      -trans "Your Nexmo configuration URLs are as follows. These should have been set up automatically when claiming your number, but if not you can set them from your Nexmo dashboard."

    %h4
      -trans "Callback URL for Inbound Messages"

    %p
      -blocktrans
        The callback URL is called by Nexmo when you receive new incoming messages.

    %code
      https://{{ domain }}{% url 'courier.nx' object.uuid 'receive' %}

    %h4
      -trans "Callback URL for Delivery Receipt"

    %p
      -blocktrans
        The delivery URL is called by Nexmo when a message is successfully delivered to a recipient.

    %code
      https://{{ domain }}{% url 'courier.nx' object.uuid 'status' %}


    %h4
      -trans "Callback URL for Incoming Call"

    %p
      -blocktrans
        The callback URL is called by Nexmo when you receive an incoming call

    %code
      https://{{ domain }}{% url 'handlers.nexmo_call_handler' 'answer' object.uuid %}



  -elif object.channel_type == 'IB'
    %h4
      -blocktrans
        To finish configuring your Infobip connection you'll need to set the following callback URLs on the
        Infobip website under your account.

    .clearfix
      .config-value
        .name
          -trans "Username:"
        .value {{ object.config.username }}
      .config-value
        .name
          -trans "Password:"
        .value
          xxxxxxxx

    .clearfix
    %hr

    %h4
      -trans "Received URL"

    %p
      -blocktrans
        This endpoint should be called with a POST by Infobip when new messages are received to your number. You can set the receive URL on your Infobip account by contacting your sales agent.

    %code
      https://{{ domain }}{% url 'courier.ib' object.uuid 'receive' %}

    %hr

    %h4
      -trans "Delivered URL"

    %p
      -blocktrans
        This endpoint should be called with a POST by Infobip when a message has been to the final recipient. (delivery reports)
        You can set the delivery callback URL on your Infobip account by contacting your sales agent.

    %code
      https://{{ domain }}{% url 'courier.ib' object.uuid 'delivered' %}

  -elif object.channel_type == 'MK'
    %h4
      -blocktrans
        To finish configuring your MACROKIOSK connection you'll need to notify MACROKIOSK of the following URLs.

    %hr

    %h4
      -trans "Inbound URL"

    %p
      -blocktrans
        This endpoint should be called by MACROKIOSK when new messages are received to your number.

    %code
      https://{{ domain }}{% url 'courier.mk' object.uuid 'receive' %}

    %hr

    %h4
      -trans "DLR URL"

    %p
      -blocktrans
        This endpoint should be called by MACROKIOSK when the message status changes. (delivery reports)

    %code
      https://{{ domain }}{% url 'courier.mk' object.uuid 'status' %}

  -elif object.channel_type == 'BM'
    %h4
      -blocktrans
        To finish configuring your Blackmyna connection you'll need to notify Blackmyna of the following URLs.

    %hr

    %h4
      -trans "Inbound URL"

    %p
      -blocktrans
        This endpoint should be called by Blackmyna when new messages are received to your number.

    %code
      https://{{ domain }}{% url 'courier.bm' object.uuid 'receive' %}

    %hr

    %h4
      -trans "DLR URL"

    %p
      -blocktrans
        This endpoint should be called by Blackmyna when the message status changes. (delivery reports)

    %code
      https://{{ domain }}{% url 'courier.bm' object.uuid 'status' %}

  -elif object.channel_type == 'TMS'
    %h4
      -blocktrans
        To finish configuring your Twilio Messaging Service connection you'll need to add the following URL in your Messaging Service Inbound Settings.

    %hr

    %h4
      -trans "Request URL"

    %p
      -blocktrans
        This endpoint should be called by Twilio when new messages are received by your Messaging Service.

    %code
      https://{{ domain }}{% url 'courier.tms' object.uuid 'receive' %}

    %hr

  -elif object.channel_type == 'TW'
    %h4
      -blocktrans
        To finish configuring your TwiML REST API channel you'll need to add the following URL in your TwiML REST API instance.

    %hr

    %h4
      -trans "TwiML REST API Host"

    %p
      -blocktrans
        The endpoint which will receive Twilio API requests for this channel

    %code
      {{ object.config.send_url }}

    %h4
      -trans "Request URL"

    %p
      -blocktrans
        Incoming messages for this channel will be sent to this endpoint.

    %code
      https://{{ domain }}{% url 'handlers.twiml_api_handler' object.uuid %}

    %hr

  -elif object.channel_type == 'SC'
    %h4
      -blocktrans
        To finish configuring your SMSCentral connection you'll need to notify SMSCentral of the following URL.

    %hr

    %h4
      -trans "Inbound URL"

    %p
      -blocktrans
        This endpoint should be called by SMSCentral when new messages are received to your number.

    %code
      https://{{ domain }}{% url 'courier.sc' object.uuid 'receive' %}

  -elif object.channel_type == 'ST'
    %h4
      -blocktrans
        To finish configuring your Start connection you'll need to notify Start of the following receiving URL.

    %hr

    %h4
      -trans "Inbound URL"

    %p
      -blocktrans
        This endpoint should be called by Start when new messages are received to your number.

    %code
      https://{{ domain }}{% url 'courier.st' object.uuid 'receive' %}

  -elif object.channel_type == 'M3'
    %h4
      -blocktrans
        To finish configuring your connection you'll need to notify M3Tech of the following callback URLs:

    %h4
      -trans "Received URL"
    %code
      https://{{ domain }}{% url 'courier.m3' object.uuid 'receive' %}

    %p
      -blocktrans
        When a new message is received by M3Tech, it should notify us with a POST to the following URL, passing
        the following parameters: 'from' and 'text'
    %pre.prettyprint.example<
      :plain
        POST https://{{ domain }}{% url 'courier.m3' object.uuid 'receive' %}
        from=%2B250788123123&text=Love+is+patient.+Love+is+kind.
    %hr

    %h4
      -trans "Sent URL"
    %code
      https://{{ domain }}{% url 'courier.m3' object.uuid 'sent' %}

    %p
      -blocktrans
        When M3Tech successfully sends a message, it should notify us with a POST to the following URL, passing
        the id of the message as the parameter 'id' (reporting sent messages is optional)
    %pre.prettyprint.example<
      :plain
        POST https://{{ domain }}{% url 'courier.m3' object.uuid 'sent' %}
        id=2599235
    %hr

    %h4
      -trans "Delivered URL"
    %code
      https://{{ domain }}{% url 'courier.m3' object.uuid 'delivered' %}

    %p
      -blocktrans
        When M3Tech successfully delivers a message, it should notify us with a POST to the following URL, passing
        the id of the message as the parameter 'id' (reporting deliveries is optional)
    %pre.prettyprint.example<
      :plain
        POST https://{{ domain }}{% url 'courier.m3' object.uuid 'delivered' %}
        id=2599235
    %hr

    %h4
      -trans "Failed URL"
    %code
      https://{{ domain }}{% url 'courier.m3' object.uuid 'failed' %}

    %p
      -blocktrans
        If M3Tech fails to send an outgoing message, it should notify us with a POST to the following URL, passing
        the id of the message as the parameter 'id' (reporting failed sends is optional)
    %pre.prettyprint.example<
      :plain
        POST https://{{ domain }}{% url 'courier.m3' object.uuid 'failed' %}
        id=2599235
    %hr

  -elif object.channel_type == 'H9'
    %h4
      -blocktrans
        To finish configuring your Hub9 connection you'll need to provide them with the following details.

    .clearfix
      .config-value
        .name
          -trans "Username:"
        .value {{ object.config.username }}
      .config-value
        .name
          -trans "Password:"
        .value
          xxxxxxxx

    .clearfix
    %hr

    %h4
      -trans "Received URL"

    %p
      -blocktrans
        This endpoint should be called by Hub9 when new messages are received to your number. You can set the receive URL on your Hub9 account by contacting your sales agent.

    %code
      https://{{ domain }}{% url 'courier.h9' object.uuid 'receive' %}

    %hr

    %h4
      -trans "Delivered URL"

    %p
      -blocktrans
        This endpoint should be called by Hub9 when a message has been to the final recipient. (delivery reports)
        You can set the delivery callback URL on your Hub9 account by contacting your sales agent.

    %code
      https://{{ domain }}{% url 'courier.h9' object.uuid 'delivered' %}

    %hr

    %h4
      -trans "IP Addresses"

    %p
      Contact your sales agent to make sure the following IPs are whitelisted

    -for ip_address in ip_addresses
      %code= ip_address


  -elif object.channel_type == 'DA'
    %h4
      -blocktrans
        To finish configuring your Dart Media connection you'll need to provide them with the following details.

    .clearfix
      .config-value
        .name
          -trans "Username:"
        .value {{ object.config.username }}
      .config-value
        .name
          -trans "Password:"
        .value
          xxxxxxxx

    .clearfix
    %hr

    %h4
      -trans "Received URL"

    %p
      -blocktrans
        This endpoint should be called by Dart Media when new messages are received to your number. You can set the receive URL on your Dart Media account by contacting your sales agent.

    %code
      https://{{ domain }}{% url 'courier.da' object.uuid 'receive' %}

    %hr

    %h4
      -trans "Delivered URL"

    %p
      -blocktrans
        This endpoint should be called by Dart Media when a message has been to the final recipient. (delivery reports)
        You can set the delivery callback URL on your Dart Media account by contacting your sales agent.

    %code
      https://{{ domain }}{% url 'courier.da' object.uuid 'delivered' %}

    %hr

    %h4
      -trans "IP Addresses"

    %p
      Contact your sales agent to make sure the following IPs are whitelisted

    -for ip_address in ip_addresses
      %code= ip_address


  -elif object.channel_type == 'FCM'
    %h4
      -trans "To use your Firebase Cloud Messaging channel you'll have to POST to the following URLs with the parameters below."

    .clearfix
    %hr

    %h4
      -trans "Contact Register"

    %p
      -trans "To register contacts, POST to the following URL with the parameters urn, fcm_token and optionally name."

    %code
      https://{{ domain }}{% url 'handlers.fcm_handler' 'register' object.uuid %}

    %h4
      -trans "Receive URL"

    %p
      -trans "To handle incoming messages, POST to the following URL with the parameters from, msg and fcm_token."

    %code
      https://{{ domain }}{% url 'handlers.fcm_handler' 'receive' object.uuid %}

    %hr

  -elif object.channel_type == 'VM' or object.channel_type == 'VMU'
    %h4
      -blocktrans
        To finish configuring your Vumi connection you'll need to set the following parameters on your Vumi conversation:

    .clearfix
      .config-value
        .name
          -trans "Conversation Key:"
        .value
          {{ object.config.conversation_key }}

      .config-value
        .name
          -trans "Account Key:"
        .value
          {{ object.config.account_key }}

    .clearfix

    %hr

    %h4
      -trans "API Token"

    %p
      -blocktrans
        This token is used to authenticate with your Vumi account, set it by editing the "Content" page on your conversation.

    %code
      {{ object.config.access_token }}

    %hr

    %h4
      -trans "Push Message URL"

    %p
      -blocktrans
        This endpoint will be called by Vumi when new messages are received to your number.

    %code
      https://{{ domain }}{% url 'courier.vm' object.uuid 'receive' %}

    %hr

    %h4
      -trans "Push Event URL"

    %p
      -blocktrans
        This endpoint will be called by Vumi when sent messages are sent or delivered.

    %code
      https://{{ domain }}{% url 'courier.vm' object.uuid 'event' %}

  -elif object.channel_type == 'KN'
    %h4
      -blocktrans
        As a last step you'll need to configure Kannel to send and receive messages. Here is a stanza you
        can add to your Kannel configuration to enable sending and receiving.

    %b
      -trans "Make sure to change the forced-smsc and default-smsc values to the appropriate values for your configuration."

    %pre
      :escaped
        ######################################################################
        # {{channel.address}} - {{user_org.name}}
        ######################################################################

        group = sendsms-user
        username = "{{channel.config.username}}"
        password = "{{channel.config.password}}"
        concatenation = true
        max-messages = 10
        user-allow-ip = "*.*.*.*"
        faked-sender = {{channel.address}}
        forced-smsc = YOUR-SMSC
        default-smsc = YOUR-SMSC

        group = sms-service
        keyword = default
        allowed-receiver-prefix = {{channel.address}}
        max-messages = 0
        post-url = "https://{{domain}}{% url 'courier.kn' object.uuid 'receive' %}?backend=%i&sender=%p&message=%b&ts=%T&id=%I&to=%P"
        concatenation = true
        assume-plain-text = true
        accept-x-kannel-headers = true
        omit-empty = true
        accepted-smsc = YOUR-SMSC

  -elif object.channel_type == 'JS'
    %h4
      -blocktrans
        As a last step you'll need to configure Jasmin to call the following URL for MO (incoming) messages.

    %hr

    %h4
      -trans "Push Message URL"

    %p
      -blocktrans
        This endpoint will be called by Jasmin when new messages are received to your number, it must be configured
        to be called as a POST

    %code
      https://{{ domain }}{% url 'courier.js' object.uuid 'receive' %}

  -elif object.channel_type == 'JN' or object.channel_type == 'JNU'
    %h4
      -blocktrans
        As a last step you'll need to configure Junebug to call the following URL for MO (incoming) messages.

    %hr

    %h4
      -trans "Push Message URL"

    %p
      -blocktrans
        This endpoint will be called by Junebug when new messages are received to your number, it must be configured
        to be called as a POST

    %code
      https://{{ domain }}{% url 'courier.jn' object.uuid 'inbound' %}

  -elif object.channel_type == 'MB'
    %h4
      -blocktrans
        As a last step you'll need to set the following callback URL on your Mblox account:

    %hr

    %h4
      -trans "Callback URL"

    %p
      -blocktrans
        This endpoint will be called by Mblox when new messages are received to your number and for delivery reports.

    %code
      https://{{ domain }}{% url 'courier.mb' object.uuid 'receive' %}

  -elif object.channel_type == 'VB'
    %h4
      -blocktrans
        To finish configuring your connection you'll need to set the following status callback URL for your Verboice project

    %hr

    %h4
      -trans "Status Callback URL"

    %code
      https://{{ domain }}{% url 'courier.vb' object.uuid 'status' %}

  -elif object.channel_type == 'FB'
    %h4
      -blocktrans
        To finish configuring your Facebook connection, you'll need to enter the following webhook URL and token on your application's
        Messenger settings page. Make sure to check all boxes within the 'Webhooks' section to subscribe to all incoming Facebook events
        and referral parameters (<code>messaging_referrals</code>), within the same section, select the page whose events you'd like the 
        webhook to subscribe to. 

    .important
      %p
        -blocktrans
          It may take up to ten minutes for a new webhook to take effect after being set on your Facebook application. Remember,
          until your Facebook application is approved by Facebook you will only be able to send and receive messages
          with administrators of your application.

      %p
        -blocktrans
          When submitting your application for approval, make sure to include the <code>pages_messaging</code>
          and <code>pages_messaging_subscriptions</code> permissions so that you are able to initiate conversations with your contacts.

    %hr

    %h4
      -trans "Webhook URL"

    %code
      https://{{ domain }}{% url 'courier.fb' object.uuid %}

    %h4
      -trans "Verify Token"

    %code
      {{ channel.config.secret }}

  -elif object.channel_type == 'JC'
    %h4
      -blocktrans
        To finish configuring your JioChat connection, you'll need to enter the following webhook URL and token on JioChat Developer Center configuration

    %hr

    %h4
      -trans "Webhook URL"

    %code
      https://{{ domain }}{% url 'courier.jc' object.uuid %}

    %h4
      -trans "Token"

    %code
      {{ channel.config.secret }}


  -elif object.channel_type == 'VI'
    %h4
      -blocktrans
        Your Viber channel is connected, the IP addresses, status and receive endpoints are listed below.

    %hr

    %h4
      -trans "IP Addresses"

    -for ip_address in ip_addresses
      %code= ip_address

    %h4
      -trans "Status URL"

    %code
      https://{{ domain }}{% url 'courier.vi' object.uuid 'status' %}

    %h4
      -trans "Receive URL"

    %code
      https://{{ domain }}{% url 'courier.vi' object.uuid 'receive'  %}

  -elif object.channel_type == 'VP'
    %h4
      -blocktrans
        Your Viber channel is connected. If needed the webhook endpoints are listed below.

    %hr

    %h4
      -trans "Webhook URL"

    %code
      https://{{ domain }}{% url 'courier.vp' object.uuid %}

  -elif object.channel_type == 'LN'
    %h4
      -blocktrans
        To finish the configuration of Line channel you'll need to set the following callback URL in the Line Bot settings page, following the steps below:

    .info

      %p

        %ol.line-steps
          %li
            -blocktrans
              Configure "Callback URL" in the channel page (the same page which get the information Channel Secret and Channel Access Token) by clicking on the "Edit" button, filling the field "webhook URL" and pressing on the "Save" button.

          %li
            -blocktrans
              Fill the IP addresses in the "Server IP Whitelist" with the list of addresses displayed below.

    %h4
      -trans "Callback URL"

    %code
      https://{{ domain }}{% url 'courier.ln' object.uuid %}

    %hr

    %h4
      -trans "IP Addresses"

    -for ip_address in ip_addresses
      %code= ip_address

  -elif object.channel_type == 'GL'
    %h4
      -blocktrans
        To finish configuring your Globe Labs connection you'll need to set the following notify URI for SMS on your
        application configuration page.

    %hr

    %h4
      -trans "Notify URI"

    %code
      https://{{ domain }}{% url 'courier.gl' object.uuid 'receive' %}

  -elif object.channel_type == 'HX'
    %h4
      -blocktrans
        To finish configuring your connection you'll need to notify HighConnection of the following URL for
        incoming (MO) messages

    %hr

    %h4
      -trans "Receive URL"

    %code
      https://{{ domain }}{% url 'courier.hx' object.uuid 'receive' %}

  -elif object.channel_type == 'YO'
    %h4
      -blocktrans
        To finish configuring your Yo! connection you'll need to notify Yo! of the following inbound SMS URL.

    %h4
      -trans "Inbound SMS URL"

    %p
      -blocktrans
        This URL should be called with a GET by Yo! when new incoming messages are received on your shortcode.

    %code
      https://{{ domain }}{% url 'courier.yo' object.uuid 'receive' %}

  -elif object.channel_type == 'DK'
    %h4
      -blocktrans
        To finish configuring your DMark channel you need to set DMark to send MO messages to the URL below.

    %hr

    %h4
      -trans "Receive URL"

    %code
      https://{{ domain }}{% url 'courier.dk' object.uuid 'receive' %}

  -elif object.channel_type == 'CK'
    %h4
      -blocktrans
        To finish configuring your Chikka connection you need to set the following URLs in your Chikka account API settings.

    %hr

    %h4
      -trans "Notification Receiver URL"

    %code
      https://{{ domain }}{% url 'courier.ck' object.uuid %}

    %hr

    %h4
      -trans "Message Receiver URL"

    %code
      https://{{ domain }}{% url 'courier.ck' object.uuid %}

  -elif object.channel_type == 'EX'
    %h4
      -blocktrans
        To finish configuring your connection you'll need to set the following callback URLs on your service or aggregator.

    %hr

    %h4
      -trans "Send URL"
      %code
        {{ object.config.send_url }}

    %p
      -blocktrans
        When we need to send an outgoing message it will make a

      {{ object.config.method|default:"POST" }}

      -blocktrans
        to this URL with the parameters 'text', 'to', 'from', 'channel' and 'id'

    %h4
      -trans "Example"

    -if object.config.method == "GET"

      %pre.prettyprint.example<
        :plain
          {{ object.config.method }} {{ example_url }}

    -else
      %pre.prettyprint.example<
        :plain
          {{ object.config.method }} {{ example_url }}
          {{ example_content_type }}

          {{ example_body }}
    %hr

    -if object.role != 'S'

      %h4
        -trans "Received URL"
        %code
          https://{{ domain }}{% url 'courier.ex' object.uuid 'receive' %}

      %p
        -blocktrans
          When a new message is received by your service, it should notify us with a POST to the following URL, passing
          the following parameters: 'from' and 'text'. Callers can optionally also send a 'date' parameter in ISO-8601
          (ex: 2012-04-23T18:25:43.511Z) format to specify the time the message was received.
      %pre.prettyprint.example<
        :plain
          POST https://{{ domain }}{% url 'courier.ex' object.uuid 'receive' %}
          from=%2B250788123123&text=Love+is+patient.+Love+is+kind.&date=2012-04-23T18:25:43.511Z
      %hr

    %h4
      -trans "Sent URL"
      %code
        https://{{ domain }}{% url 'courier.ex' object.uuid 'sent' %}

    %p
      -blocktrans
        When your service successfully sends a message, it should notify us with a POST to the following URL, passing
        the id of the message as the parameter 'id' (reporting sent messages is optional)
    %pre.prettyprint.example<
      :plain
        POST https://{{ domain }}{% url 'courier.ex' object.uuid 'sent' %}
        id=2599235
    %hr

    %h4
      -trans "Delivered URL"
      %code
        https://{{ domain }}{% url 'courier.ex' object.uuid 'delivered' %}

    %p
      -blocktrans
        When your service successfully delivers a message, it should notify us with a POST to the following URL, passing
        the id of the message as the parameter 'id' (reporting deliveries is optional)
    %pre.prettyprint.example<
      :plain
        POST https://{{ domain }}{% url 'courier.ex' object.uuid 'delivered' %}
        id=2599235
    %hr

    %h4
      -trans "Failed URL"
      %code
        https://{{ domain }}{% url 'courier.ex' object.uuid 'failed' %}

    %p
      -blocktrans
        If your service fails to send an outgoing message, it should notify us with a POST to the following URL, passing
        the id of the message as the parameter 'id' (reporting failed sends is optional)
    %pre.prettyprint.example<
      :plain
        POST https://{{ domain }}{% url 'courier.ex' object.uuid 'failed' %}
        id=2599235
    %hr

-block extra-script
  {{ block.super }}
  <script src="{{ STATIC_URL }}rest_framework/js/prettify-min.js"></script>
  :javascript
    $(function(){
      prettyPrint();
    });

-block extra-style
  <link rel="stylesheet" type="text/css" href="{{ STATIC_URL }}rest_framework/css/prettify.css"/>
  :css
    .config-value {
      float: left;
      padding-top: 10px;
      padding-bottom: 10px;
      padding-right: 20px;
      height: 10px;
    }

    .config-value .name {
      font-weight: normal;
      float: left;
    }

    .config-value .value {
      float: left;
      padding-left: 5px;
    }

    pre.prettyprint {
      margin-top: 0px;
      margin-bottom: 0px;

      font-family: monospace;
      font-size: inherit;
      white-space: pre;
      line-height: 110%;

      -webkit-border-radius: 0px;
      -moz-border-radius: 0px;
      border-radius: 0px;
    }

    .important {
      background-color: #efefef;
      border: 1px solid #ccc;
      padding: 10px 10px 0px 10px;
      margin-bottom: 10px;
    }

    .device .number {
      padding-left:5px;
    }

    .title .number {
      font-size:20px;
    }

    ol.line-steps li {
      margin-top: 10px;
      list-style: decimal;
    }

    .info {
      margin-bottom: 20px;
    }
