-extends "smartmin/read.haml"
-load i18n channels

-block title
  .medium-help.float-left{class:'{{object|channel_icon}}'}
  %h2.font_normalize.header-margin.title
    {{ object.get_channel_type_display }} Configuration

    .number
      {{ object.get_address_display }}
      -if object.get_country_display
        ({{ object.get_country_display }})

      -if object.channel_type == 'A'
        \- {{ channel.device }}
        -if channel.os
          (v{{channel.os}})

-block content
  -if configuration_template
    {{ configuration_template }}

  -elif configuration_blurb
    %h4
      {{configuration_blurb}}

    -for url in configuration_urls
      %hr

      %h4
        {{url.label}}

      -if url.description
        %p
          {{url.description}}

      -if url.url
        %code
          {{url.url}}

  -elif object.channel_type == 'VB'
    %h4
      -blocktrans
        To finish configuring your connection you'll need to set the following status callback URL for your Verboice project

    %hr

    %h4
      -trans "Status Callback URL"

    %code
      https://{{ domain }}{% url 'courier.vb' object.uuid 'status' %}

  -elif object.channel_type == 'VI'
    %h4
      -blocktrans
        Your Viber channel is connected, the IP addresses, status and receive endpoints are listed below.

    %hr

    %h4
      -trans "IP Addresses"

    -for ip_address in ip_addresses
      %code= ip_address

    %h4
      -trans "Status URL"

    %code
      https://{{ domain }}{% url 'courier.vi' object.uuid 'status' %}

    %h4
      -trans "Receive URL"

    %code
      https://{{ domain }}{% url 'courier.vi' object.uuid 'receive'  %}



  -elif object.channel_type == 'EX'
    %h4
      -blocktrans
        To finish configuring your connection you'll need to set the following callback URLs on your service or aggregator.

    %hr

    %h4
      -trans "Send URL"
      %code
        {{ object.config_json.send_url }}

    %p
      -blocktrans
        When we need to send an outgoing message it will make a

      {{ object.config_json.method|default:"POST" }}

      -blocktrans
        to this URL with the parameters 'text', 'to', 'from', 'channel' and 'id'

    %h4
      -trans "Example"

    -if object.config_json.method == "GET"

      %pre.prettyprint.example<
        :plain
          {{ object.config_json.method }} {{ example_url }}

    -else
      %pre.prettyprint.example<
        :plain
          {{ object.config_json.method }} {{ example_url }}
          {{ example_content_type }}

          {{ example_body }}
    %hr

    -if object.role != 'S'

      %h4
        -trans "Received URL"
        %code
          https://{{ domain }}{% url 'courier.ex' object.uuid 'receive' %}

      %p
        -blocktrans
          When a new message is received by your service, it should notify us with a POST to the following URL, passing
          the following parameters: 'from' and 'text'. Callers can optionally also send a 'date' parameter in ISO-8601
          (ex: 2012-04-23T18:25:43.511Z) format to specify the time the message was received.
      %pre.prettyprint.example<
        :plain
          POST https://{{ domain }}{% url 'courier.ex' object.uuid 'receive' %}
          from=%2B250788123123&text=Love+is+patient.+Love+is+kind.&date=2012-04-23T18:25:43.511Z
      %hr

    %h4
      -trans "Sent URL"
      %code
        https://{{ domain }}{% url 'courier.ex' object.uuid 'sent' %}

    %p
      -blocktrans
        When your service successfully sends a message, it should notify us with a POST to the following URL, passing
        the id of the message as the parameter 'id' (reporting sent messages is optional)
    %pre.prettyprint.example<
      :plain
        POST https://{{ domain }}{% url 'courier.ex' object.uuid 'sent' %}
        id=2599235
    %hr

    %h4
      -trans "Delivered URL"
      %code
        https://{{ domain }}{% url 'courier.ex' object.uuid 'delivered' %}

    %p
      -blocktrans
        When your service successfully delivers a message, it should notify us with a POST to the following URL, passing
        the id of the message as the parameter 'id' (reporting deliveries is optional)
    %pre.prettyprint.example<
      :plain
        POST https://{{ domain }}{% url 'courier.ex' object.uuid 'delivered' %}
        id=2599235
    %hr

    %h4
      -trans "Failed URL"
      %code
        https://{{ domain }}{% url 'courier.ex' object.uuid 'failed' %}

    %p
      -blocktrans
        If your service fails to send an outgoing message, it should notify us with a POST to the following URL, passing
        the id of the message as the parameter 'id' (reporting failed sends is optional)
    %pre.prettyprint.example<
      :plain
        POST https://{{ domain }}{% url 'courier.ex' object.uuid 'failed' %}
        id=2599235
    %hr

  -if show_public_addresses
    %h4
      -trans "IP Addresses"

    %p
      Make sure the following IPs are whitelisted

    -for ip_address in ip_addresses
      %code= ip_address

-block extra-script
  {{ block.super }}
  <script src="{{ STATIC_URL }}rest_framework/js/prettify-min.js"></script>
  :javascript
    $(function(){
      prettyPrint();
    });

-block extra-style
  <link rel="stylesheet" type="text/css" href="{{ STATIC_URL }}rest_framework/css/prettify.css"/>
  :css
    .config-value {
      float: left;
      padding-top: 10px;
      padding-bottom: 10px;
      padding-right: 20px;
      height: 10px;
    }

    .config-value .name {
      font-weight: normal;
      float: left;
    }

    .config-value .value {
      float: left;
      padding-left: 5px;
    }

    pre.prettyprint {
      margin-top: 0px;
      margin-bottom: 0px;

      font-family: monospace;
      font-size: inherit;
      white-space: pre;
      line-height: 110%;

      -webkit-border-radius: 0px;
      -moz-border-radius: 0px;
      border-radius: 0px;
    }

    .important {
      background-color: #efefef;
      border: 1px solid #ccc;
      padding: 10px 10px 0px 10px;
      margin-bottom: 10px;
    }

    .device .number {
      padding-left:5px;
    }

    .title .number {
      font-size:20px;
    }

    ol.line-steps li {
      margin-top: 10px;
      list-style: decimal;
    }

    .info {
      margin-bottom: 20px;
    }
