# Generated by Django 4.0.2 on 2022-02-15 20:41

from django.core.exceptions import ObjectDoesNotExist
from django.db import migrations


def full_release_deleted_contacts(apps, schema_editor):  # pragma: no cover
    Contact = apps.get_model("contacts", "Contact")

    # get inactive contacts who have tickets
    deleted_contacts = Contact.objects.filter(is_active=False, name=None).exclude(tickets=None)
    num_deleted = 0

    for contact in deleted_contacts:
        contact.ticket_events.all().delete()

        for ticket in contact.tickets.all():
            ticket.broadcasts.update(ticket=None)
            ticket.delete()

        # release our messages
        for msg in contact.msgs.all():
            msg.delete()

        # any urns currently owned by us
        for urn in contact.urns.all():
            # release any messages attached with each urn,
            # these could include messages that began life
            # on a different contact
            for msg in urn.msgs.all():
                msg.delete()

            # same thing goes for connections
            for conn in urn.connections.all():
                for log in conn.channel_logs.all():
                    log.delete()
                session = None
                try:
                    session = conn.session
                except ObjectDoesNotExist:  # pragma: no cover
                    pass
                if session:
                    for run in session.runs.all():
                        run.delete()
                    session.delete()
                conn.delete()
            for event in urn.channel_events.all():
                event.delete()
            urn.delete()

        # release our channel events
        for event in contact.channel_events.all():  # pragma: needs cover
            event.delete()

        # release our runs too
        for run in contact.runs.all():
            run.delete()

        # release our runs too
        for run in contact.runs.all():
            run.delete()

        for session in contact.sessions.all():
            session.delete()

        for conn in contact.connections.all():  # pragma: needs cover
            for log in conn.channel_logs.all():
                log.delete()
            session = None
            try:
                session = conn.session
            except ObjectDoesNotExist:  # pragma: no cover
                pass
            if session:
                for run in session.runs.all():
                    run.delete()
                session.delete()
            conn.delete()

        # and any event fire history
        contact.campaign_fires.all().delete()

        # take us out of broadcast addressed contacts
        for broadcast in contact.addressed_broadcasts.all():
            broadcast.contacts.remove(contact)

        num_deleted += 1

    print(f"Fully deleted {num_deleted} partially deleted contacts with tickets")


def reverse(apps, schema_editor):  # pragma: no cover
    pass


def apply_manual():  # pragma: no cover
    from django.apps import apps

    full_release_deleted_contacts(apps, schema_editor=None)


class Migration(migrations.Migration):

    dependencies = [
        ("contacts", "0149_populate_current_flow"),
    ]

    operations = [migrations.RunPython(full_release_deleted_contacts, reverse)]
