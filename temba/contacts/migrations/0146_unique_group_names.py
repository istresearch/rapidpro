# Generated by Django 3.2.9 on 2022-01-11 18:15

from collections import defaultdict

from django.db import migrations, transaction
from django.db.models.functions import Lower

from temba.utils.uuid import uuid4


def make_group_names_unique(apps, schema_editor):  # pragma: no cover
    Org = apps.get_model("orgs", "Org")  # noqa

    for org in Org.objects.all():
        active_updated, inactive_updated = 0, 0

        with transaction.atomic():
            active_groups = org.all_groups.filter(group_type="U", is_active=True).order_by(Lower("name"), "created_on")
            unique_names = set()
            by_unique_name = defaultdict(list)

            for g in active_groups:
                unique_names.add(g.name.lower())
                by_unique_name[g.name.lower()].append(g)

            for unique_name, groups in by_unique_name.items():
                if len(groups) > 1:
                    for g in groups[1:]:
                        suffix = 1
                        new_name = f"{g.name} {suffix}"
                        while new_name.lower() in unique_names:
                            suffix += 1
                            new_name = f"{g.name} {suffix}"

                        print(f"   - '{g.name}' renamed to '{new_name}'")

                        g.name = new_name
                        g.save(update_fields=("name",))
                        active_updated += 1

                        unique_names.add(new_name.lower())

        # update deleted group names for this org..
        with transaction.atomic():
            for g in org.all_groups.filter(group_type="U", is_active=False):
                if not g.name.startswith("deleted-"):
                    g.name = f"deleted-{uuid4()}-{g.name}"[:64]
                    g.save(update_fields=("name",))
                    inactive_updated += 1

        print(f" > org '{org.name}' active updated = {active_updated}, inactive updated = {inactive_updated}")


def reverse(apps, schema_editor):  # pragma: no cover
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("contacts", "0145_alter_contact_created_by_alter_contact_modified_by_and_more"),
    ]

    operations = [migrations.RunPython(make_group_names_unique, reverse)]
