# Generated by Django 4.0.3 on 2022-03-30 20:28

from django.db import migrations, transaction


def create_open_tickets_groups(apps, schema_editor):  # pragma: no cover
    Org = apps.get_model("orgs", "Org")
    for org in Org.objects.filter(is_active=True):
        if not org.groups.filter(name="Open Tickets", is_system=True).exists():
            with transaction.atomic():
                open_tickets = org.groups.create(
                    name="Open Tickets",
                    group_type="Q",
                    is_system=True,
                    query="tickets > 0",
                    status="R",
                    created_by=org.created_by,
                    modified_by=org.modified_by,
                )
                contacts = org.tickets.filter(status="O").order_by().values_list("contact", flat=True).distinct()
                open_tickets.contacts.add(*contacts)

        # while we're here... update the status groups to be READY
        org.groups.filter(group_type__in=("A", "B", "S", "V")).update(status="R")


def reverse(apps, schema_editor):  # pragma: no cover
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("contacts", "0158_alter_contactgroup_managers_and_more"),
    ]

    operations = [migrations.RunPython(create_open_tickets_groups, reverse)]
