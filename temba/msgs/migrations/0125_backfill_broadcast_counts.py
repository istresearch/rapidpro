# -*- coding: utf-8 -*-
# Generated by Django 1.11.6 on 2018-06-25 19:44
from __future__ import unicode_literals

from django.db import migrations

from temba.utils import chunk_list

CREATE_INDEX = """
CREATE INDEX CONCURRENTLY IF NOT EXISTS msgs_broadcast_sending_idx ON msgs_broadcast(org_id, created_on) WHERE status = 'Q';
"""


def backfill_broadcast_counts(Broadcast, Msg, BroadcastMsgCount):
    broadcast_ids = list(Broadcast.objects.all().values_list("id", flat=True))
    if not broadcast_ids:
        return

    print(f"Fetched {len(broadcast_ids)} broadcasts to update msg counts for")

    num_updated = 0
    for id in broadcast_ids:
        # get our count of messages
        count = Msg.objects.filter(broadcast_id=id).count()
        BroadcastMsgCount.objects.create(broadcast_id=id, count=count, is_squashed=True)

        num_updated += 1

        if num_updated % 1000 == 0:
            print(f" > Updated {num_updated} of {len(broadcast_ids)} broadcasts")

    # update the status of all broadcasts that are not in a final state to sent
    num_updated = 0
    for chunk in chunk_list(broadcast_ids, 1000):
        Broadcast.objects.filter(id__in=chunk, status__in=["P", "Q", "I"]).update(status="S")
        num_updated += len(chunk)
        print(f" > Updated status on {num_updated} of {len(broadcast_ids)} broadcasts")


def apply_as_migration(apps, schema_editor):
    Broadcast = apps.get_model("msgs", "Broadcast")
    Msg = apps.get_model("msgs", "Msg")
    BroadcastMsgCount = apps.get_model("msgs", "BroadcastMsgCount")

    backfill_broadcast_counts(Broadcast, Msg, BroadcastMsgCount)


def apply_manual():
    from temba.msgs.models import Broadcast, Msg, BroadcastMsgCount

    backfill_broadcast_counts(Broadcast, Msg, BroadcastMsgCount)


class Migration(migrations.Migration):
    atomic = False

    dependencies = [("msgs", "0124_broadcastmsgcount_triggers")]

    operations = [migrations.RunPython(apply_as_migration), migrations.RunSQL(CREATE_INDEX)]
