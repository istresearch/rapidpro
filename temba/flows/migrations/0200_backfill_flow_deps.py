# Generated by Django 2.1.8 on 2019-04-17 11:20

from django.db import connection, migrations, transaction

from temba import mailroom
from temba.mailroom import MailroomException
from temba.utils import json


def latest_flow_revisions():
    with connection.cursor() as cursor:
        sql = """
        select ff.id, ff.org_id, frd.revision, frd.definition
from flows_flow ff JOIN LATERAL (
    select revision, definition from flows_flowrevision fr WHERE flow_id=ff.id ORDER By revision DESC limit 1
    ) frd ON True
WHERE ff.is_active = True ORDER BY ff.id
"""

        cursor.execute(sql)

        return cursor.fetchall()


def backfill_flow_deps(Flow, Channel, Label):
    FlowChannelDeps = Flow.channel_dependencies.through
    FlowLabelDeps = Flow.label_dependencies.through

    flows_qs = Flow.objects.filter(is_active=True)

    total_count = flows_qs.count()
    print(f"Found {total_count} flows with missing channel and label deps...")

    num_updated = 0
    total_added_channels = 0
    total_added_labels = 0

    invalid_flow_ids = set()

    with transaction.atomic():
        for flow_id, org_id, revision, flow_definition in latest_flow_revisions():
            # validate flow
            try:
                validated = mailroom.get_client().flow_validate(None, json.loads(flow_definition))
            except MailroomException:
                invalid_flow_ids.add(flow_id)
                continue  # skip error

            dependencies = validated["_dependencies"]

            channel_uuids = [g["uuid"] for g in dependencies.get("channels", [])]
            label_uuids = [g["uuid"] for g in dependencies.get("labels", [])]

            channel_ids = Channel.objects.filter(org_id=org_id, uuid__in=channel_uuids, is_active=True).values_list(
                "id", flat=True
            )
            label_ids = Label.all_objects.filter(
                label_type="L", org_id=org_id, uuid__in=label_uuids, is_active=True
            ).values_list("id", flat=True)

            # channels
            FlowChannelDeps.objects.filter(flow_id=flow_id).delete()

            bulk_chan_deps_to_add = [FlowChannelDeps(flow_id=flow_id, channel_id=chan_id) for chan_id in channel_ids]
            FlowChannelDeps.objects.bulk_create(bulk_chan_deps_to_add)
            total_added_channels += len(bulk_chan_deps_to_add)

            # labels
            FlowLabelDeps.objects.filter(flow_id=flow_id).delete()

            bulk_label_deps_to_add = [FlowLabelDeps(flow_id=flow_id, label_id=label_id) for label_id in label_ids]
            FlowLabelDeps.objects.bulk_create(bulk_label_deps_to_add)
            total_added_labels += len(bulk_label_deps_to_add)

            num_updated += 1

            if num_updated % 1000 == 0:
                print(
                    f" > Updated {num_updated} of {total_count} flows, invalid flows {len(invalid_flow_ids)}, c:{total_added_channels} l:{total_added_labels}"
                )

        if num_updated:
            print(
                f" > Updated {num_updated} of {total_count} flows, invalid flows {len(invalid_flow_ids)}, c:{total_added_channels} l:{total_added_labels}"
            )


def apply_migration(apps, schema_editor):
    Flow = apps.get_model("flows", "Flow")
    Channel = apps.get_model("channels", "Channel")
    Label = apps.get_model("msgs", "Label")

    backfill_flow_deps(Flow, Channel, Label)


def apply_manual():
    from temba.flows.models import Flow
    from temba.channels.models import Channel
    from temba.msgs.models import Label

    backfill_flow_deps(Flow, Channel, Label)


class Migration(migrations.Migration):

    dependencies = [("flows", "0199_auto_20190523_1935")]

    operations = [migrations.RunPython(apply_migration)]
