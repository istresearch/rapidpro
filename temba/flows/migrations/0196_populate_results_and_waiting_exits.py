# Generated by Django 2.1.5 on 2019-03-07 16:28

import regex

from django.db import migrations
from django.db.models import Prefetch

WAITING_RULESET_TYPES = {
    "wait_message",
    "wait_recording",
    "wait_digit",
    "wait_digits",
    "wait_photo",
    "wait_video",
    "wait_audio",
    "wait_gps",
}


def label_to_slug(label):
    return regex.sub(r"[^a-z0-9]+", "_", label.lower(), regex.V0)


def extract_results(flow):
    result_specs = []

    for rs in flow.rule_sets.all():
        if not rs.label:
            continue

        categories = []
        for rule in rs.rules:
            category_dict = rule.get("category", {})
            category_name = category_dict.get(flow.base_language) if isinstance(category_dict, dict) else category_dict
            if category_name and category_name.lower() not in [c.lower() for c in categories]:
                categories.append(category_name)

        result_specs.append({"key": label_to_slug(rs.label), "name": rs.label, "categories": categories})

    return merge_result_specs(result_specs)


def extract_waiting_exits(flow):
    exit_uuids = []

    for rs in flow.rule_sets.all():
        if rs.ruleset_type not in WAITING_RULESET_TYPES:
            continue

        for rule in rs.rules:
            exit_uuids.append(rule["uuid"])

    return exit_uuids


def merge_result_specs(specs):
    merged = []
    by_key = {}

    for spec in specs:
        existing = by_key.get(spec["key"])

        if existing:
            # if we already have a result spec with this key, merge categories
            for category in spec["categories"]:
                if category.lower() not in [c.lower() for c in existing["categories"]]:
                    existing["categories"].append(category)

        else:
            # if not, add as new unique result spec
            merged.append(spec)
            by_key[spec["key"]] = spec

    return merged


def populate_results_and_waiting_exits(apps, schema_editor):
    Flow = apps.get_model("flows", "Flow")
    RuleSet = apps.get_model("flows", "RuleSet")

    ruleset_prefetch = Prefetch("rule_sets", queryset=RuleSet.objects.order_by("y"))

    num_updated = 0
    for flow in Flow.objects.filter(is_active=True).prefetch_related(ruleset_prefetch):
        flow.metadata["results"] = extract_results(flow)
        flow.metadata["waiting_exit_uuids"] = extract_waiting_exits(flow)
        flow.save(update_fields=("metadata",))

        if num_updated % 1000 == 0:
            print(f"Updated {num_updated} flows with results and waiting exits")
        num_updated += 1


def reverse(apps, schema_editor):
    pass


def apply_manual():
    from django.apps import apps

    populate_results_and_waiting_exits(apps, None)


class Migration(migrations.Migration):

    dependencies = [("flows", "0195_auto_20190322_2059")]

    operations = [migrations.RunPython(populate_results_and_waiting_exits, reverse)]
