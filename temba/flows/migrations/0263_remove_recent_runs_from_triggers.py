# Generated by Django 3.2.9 on 2022-01-06 15:56

from django.db import migrations

SQL = """
----------------------------------------------------------------------
-- Handles inserting new flow runs
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_flowrun_insert() RETURNS TRIGGER AS $$
DECLARE
    p INT;
    _path_json JSONB;
    _path_len INT;
BEGIN
    -- nothing to do if path is empty
    IF NEW.path IS NULL OR NEW.path = '[]' THEN RETURN NULL; END IF;
    -- parse path as JSON
    _path_json := NEW.path::json;
    _path_len := jsonb_array_length(_path_json);
    -- increment node count at last node in this path if this is an active run
    IF _path_len > 0 AND NEW.status IN ('A', 'W') THEN
        PERFORM temba_insert_flownodecount(NEW.flow_id, UUID(_path_json->(_path_len-1)->>'node_uuid'), 1);
    END IF;
    -- for each step in the path, increment the path count, and record a recent run
    p := 1;
    LOOP
        EXIT WHEN p >= _path_len;
        PERFORM temba_insert_flowpathcount(
            NEW.flow_id,
            UUID(_path_json->(p-1)->>'exit_uuid'),
            UUID(_path_json->p->>'node_uuid'),
            timestamptz(_path_json->p->>'arrived_on'),
            1
        );
        p := p + 1;
    END LOOP;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------
-- Handles changes relating to a flow run's path
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_flowrun_path_change() RETURNS TRIGGER AS $$
DECLARE
  p INT;
  _old_path_json JSONB;
  _new_path_json JSONB;
  _old_path_len INT;
  _new_path_len INT;
  _old_last_step_uuid TEXT;
BEGIN
    -- restrict changes
    IF OLD.status NOT IN ('A', 'W') AND NEW.status IN ('A', 'W') THEN RAISE EXCEPTION 'Cannot restart an exited flow run'; END IF;
    _old_path_json := COALESCE(OLD.path, '[]')::jsonb;
    _new_path_json := COALESCE(NEW.path, '[]')::jsonb;
    _old_path_len := jsonb_array_length(_old_path_json);
    _new_path_len := jsonb_array_length(_new_path_json);
    -- we don't support rewinding run paths, so the new path must be longer than the old
    IF _new_path_len < _old_path_len THEN RAISE EXCEPTION 'Cannot rewind a flow run path'; END IF;
    -- update the node counts
    IF _old_path_len > 0 AND OLD.status IN ('A', 'W') THEN
        PERFORM temba_insert_flownodecount(OLD.flow_id, UUID(_old_path_json->(_old_path_len-1)->>'node_uuid'), -1);
    END IF;
    IF _new_path_len > 0 AND NEW.status IN ('A', 'W') THEN
        PERFORM temba_insert_flownodecount(NEW.flow_id, UUID(_new_path_json->(_new_path_len-1)->>'node_uuid'), 1);
    END IF;
    -- if we have an old path, find its last step in the new path, and that will be our starting point
    IF _old_path_len > 1 THEN
        _old_last_step_uuid := _old_path_json->(_old_path_len-1)->>'uuid';
        -- old and new paths end with same step so path activity doesn't change
        IF _old_last_step_uuid = _new_path_json->(_new_path_len-1)->>'uuid' THEN
            RETURN NULL;
        END IF;
        p := _new_path_len - 1;
        LOOP
            EXIT WHEN p = 1 OR _new_path_json->(p-1)->>'uuid' = _old_last_step_uuid;
            p := p - 1;
        END LOOP;
    ELSE
        p := 1;
    END IF;
    LOOP
      EXIT WHEN p >= _new_path_len;
      PERFORM temba_insert_flowpathcount(
          NEW.flow_id,
          UUID(_new_path_json->(p-1)->>'exit_uuid'),
          UUID(_new_path_json->p->>'node_uuid'),
          timestamptz(_new_path_json->p->>'arrived_on'),
          1
      );
      p := p + 1;
    END LOOP;
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------
-- Handles deleting flow runs
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_flowrun_delete() RETURNS TRIGGER AS $$
DECLARE
    p INT;
    _path_json JSONB;
    _path_len INT;
BEGIN
    -- leave activity as is if we're being archived
    IF OLD.delete_reason = 'A' THEN
        RETURN NULL;
    END IF;
    -- nothing to do if path was empty
    IF OLD.path IS NULL OR OLD.path = '[]' THEN RETURN NULL; END IF;
    -- parse path as JSON
    _path_json := OLD.path::json;
    _path_len := jsonb_array_length(_path_json);
    -- decrement node count at last node in this path if this was an active run
    IF OLD.status IN ('A', 'W') THEN
        PERFORM temba_insert_flownodecount(OLD.flow_id, UUID(_path_json->(_path_len-1)->>'node_uuid'), -1);
    END IF;
    -- for each step in the path, decrement the path count
    p := 1;
    LOOP
        EXIT WHEN p >= _path_len;
        -- it's possible that steps from old flows don't have exit_uuid
        IF (_path_json->(p-1)->'exit_uuid') IS NOT NULL THEN
            PERFORM temba_insert_flowpathcount(
                OLD.flow_id,
                UUID(_path_json->(p-1)->>'exit_uuid'),
                UUID(_path_json->p->>'node_uuid'),
                timestamptz(_path_json->p->>'arrived_on'),
                -1
            );
        END IF;
        p := p + 1;
    END LOOP;
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;
DROP FUNCTION temba_insert_flowpathrecentrun(UUID, UUID, UUID, UUID, INTEGER, TIMESTAMPTZ);
DROP FUNCTION temba_insert_flowpathrecentrun(UUID, UUID, UUID, UUID, BIGINT, TIMESTAMPTZ);
"""


class Migration(migrations.Migration):

    dependencies = [
        ("flows", "0262_auto_20220103_1945"),
    ]

    operations = [migrations.RunSQL(SQL)]
