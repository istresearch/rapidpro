# Generated by Django 2.2.4 on 2020-02-05 21:57

from django.db import migrations, transaction

BATCH_SIZE = 5000


def convert_flow_metadata(apps, schema_editor):  # pragma: no cover
    Flow = apps.get_model("flows", "Flow")

    num_updated = 0
    max_id = -1
    while True:
        batch = list(
            Flow.objects.filter(id__gt=max_id, is_active=True).only("id", "metadata").order_by("id")[:BATCH_SIZE]
        )
        if not batch:
            break

        with transaction.atomic():
            for flow in batch:
                dependencies = flow.metadata.get("dependencies", {})
                if isinstance(dependencies, dict):
                    new_deps = []
                    for key, deps_for_key in dependencies.items():
                        type_name = key[:-1]
                        for dep in deps_for_key:
                            dep["type"] = type_name
                            new_deps.append(dep)

                    new_deps = sorted(new_deps, key=lambda d: d["type"])

                    flow.metadata["dependencies"] = new_deps
                    flow.save(update_fields=("metadata",))

        num_updated += len(batch)
        print(f" > Updated {num_updated} flows with new dependencies metadata")

        max_id = batch[-1].id


def reverse(apps, schema_editor):  # pragma: no cover
    pass


def apply_manual():  # pragma: no cover
    from django.apps import apps

    convert_flow_metadata(apps, None)


class Migration(migrations.Migration):

    dependencies = [("flows", "0222_auto_20200108_2214")]

    operations = [migrations.RunPython(convert_flow_metadata, reverse)]
