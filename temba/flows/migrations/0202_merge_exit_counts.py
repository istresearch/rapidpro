# Generated by Django 2.1.8 on 2019-06-12 20:12

from collections import defaultdict

from django.db import migrations


def merge_exit_counts(apps, schema_editor):
    Org = apps.get_model("orgs", "Org")
    RuleSet = apps.get_model("flows", "RuleSet")
    FlowPathCount = apps.get_model("flows", "FlowPathCount")

    num_rulesets = RuleSet.objects.count()
    if not num_rulesets:
        return

    print(f"Found {num_rulesets} rulesets to check for path counts to merge...")

    num_rulesets_checked = 0
    num_rules_merged = 0

    for org in Org.objects.filter(is_active=True):
        for flow in org.flows.filter(is_active=True).prefetch_related("rule_sets"):
            for rs in flow.rule_sets.all():
                rule_uuids_by_category = defaultdict(list)

                for rule in rs.rules:
                    if "category" not in rule or not isinstance(rule["category"], dict):
                        continue

                    category = rule["category"].get(flow.base_language)
                    if category:
                        rule_uuids_by_category[category].append(rule["uuid"])

                for category, rule_uuids in rule_uuids_by_category.items():
                    # no merging by category taking place
                    if len(rule_uuids) <= 1:
                        continue

                    surviving_uuid = rule_uuids[0]
                    replace_uuids = rule_uuids[1:]

                    FlowPathCount.objects.filter(flow=flow, from_uuid__in=replace_uuids).update(
                        from_uuid=surviving_uuid
                    )

                    num_rules_merged += 1

                num_rulesets_checked += 1

                if num_rulesets_checked % 1000 == 0:
                    print(
                        f" > Checked {num_rulesets_checked} of {num_rulesets} (merged path counts for {num_rules_merged} rules)"
                    )


def apply_manual():
    from django.apps import apps

    merge_exit_counts(apps, None)


def reverse(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [("flows", "0201_auto_20190611_1937")]

    operations = [migrations.RunPython(merge_exit_counts, reverse)]
