# Generated by Django 4.0.2 on 2022-02-23 20:46

from django.db import migrations

SQL = """
----------------------------------------------------------------------
-- Inserts a new flowruncount
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_insert_flowrunstatuscount(_flow_id INT, _status CHAR(1), _count INT) RETURNS VOID AS $$
DECLARE
    _exit_type CHAR(1);
BEGIN
    _exit_type := CASE _status
        WHEN 'A' THEN NULL
        WHEN 'W' THEN NULL
        WHEN 'I' THEN 'I'
        WHEN 'C' THEN 'C'
        WHEN 'X' THEN 'E'
        WHEN 'F' THEN 'F'
    END;
    INSERT INTO flows_flowruncount("flow_id", "exit_type", "count", "is_squashed")
    VALUES(_flow_id, _exit_type, _count, FALSE);
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------
-- Handles insertion of flow runs
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_flowrun_insert() RETURNS TRIGGER AS $$
DECLARE
    p INT;
    _path_json JSONB;
    _path_len INT;
BEGIN
    -- increment count for runs with this flow and status
    PERFORM temba_insert_flowrunstatuscount(NEW.flow_id, NEW.status, 1);
    -- if this run is part of a flow start, increment that start's count of runs
    IF NEW.start_id IS NOT NULL THEN
        PERFORM temba_insert_flowstartcount(NEW.start_id, 1);
    END IF;
    -- increment node count at current node in this path if this is an active run
    IF NEW.status IN ('A', 'W') AND NEW.current_node_uuid IS NOT NULL THEN
        PERFORM temba_insert_flownodecount(NEW.flow_id, NEW.current_node_uuid, 1);
    END IF;
    -- nothing more to do if path is empty
    IF NEW.path IS NULL OR NEW.path = '[]' THEN RETURN NULL; END IF;
    -- parse path as JSON
    _path_json := NEW.path::json;
    _path_len := jsonb_array_length(_path_json);
    -- for each step in the path, increment the path count, and record a recent run
    p := 1;
    LOOP
        EXIT WHEN p >= _path_len;
        PERFORM temba_insert_flowpathcount(
            NEW.flow_id,
            UUID(_path_json->(p-1)->>'exit_uuid'),
            UUID(_path_json->p->>'node_uuid'),
            timestamptz(_path_json->p->>'arrived_on'),
            1
        );
        p := p + 1;
    END LOOP;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------
-- Handles deletion of flow runs
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_flowrun_delete() RETURNS TRIGGER AS $$
DECLARE
    p INT;
    _path_json JSONB;
    _path_len INT;
BEGIN
    -- if we're deleting a run which is sitting at a node, decrement that node's count
    IF OLD.status IN ('A', 'W') AND OLD.current_node_uuid IS NOT NULL THEN
        PERFORM temba_insert_flownodecount(OLD.flow_id, OLD.current_node_uuid, -1);
    END IF;
    -- if this is a user delete then remove from results
    IF OLD.delete_from_results THEN
        PERFORM temba_insert_flowrunstatuscount(OLD.flow_id, OLD.status, -1);
        PERFORM temba_update_category_counts(OLD.flow_id, NULL, OLD.results::json);
        -- nothing more to do if path was empty
        IF OLD.path IS NULL OR OLD.path = '[]' THEN RETURN NULL; END IF;
        -- parse path as JSON
        _path_json := OLD.path::json;
        _path_len := jsonb_array_length(_path_json);
        -- for each step in the path, decrement the path count
        p := 1;
        LOOP
            EXIT WHEN p >= _path_len;
            -- it's possible that steps from old flows don't have exit_uuid
            IF (_path_json->(p-1)->'exit_uuid') IS NOT NULL THEN
                PERFORM temba_insert_flowpathcount(
                    OLD.flow_id,
                    UUID(_path_json->(p-1)->>'exit_uuid'),
                    UUID(_path_json->p->>'node_uuid'),
                    timestamptz(_path_json->p->>'arrived_on'),
                    -1
                );
            END IF;
            p := p + 1;
        END LOOP;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------
-- Handles changes relating to a flow run's path
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_flowrun_path_change() RETURNS TRIGGER AS $$
DECLARE
  p INT;
  _old_path_json JSONB;
  _new_path_json JSONB;
  _old_path_len INT;
  _new_path_len INT;
  _old_last_step_uuid TEXT;
BEGIN
    _old_path_json := COALESCE(OLD.path, '[]')::jsonb;
    _new_path_json := COALESCE(NEW.path, '[]')::jsonb;
    _old_path_len := jsonb_array_length(_old_path_json);
    _new_path_len := jsonb_array_length(_new_path_json);
    -- we don't support rewinding run paths, so the new path must be longer than the old
    IF _new_path_len < _old_path_len THEN RAISE EXCEPTION 'Cannot rewind a flow run path'; END IF;
    -- update the node counts
    IF _old_path_len > 0 AND OLD.status IN ('A', 'W') THEN
        PERFORM temba_insert_flownodecount(OLD.flow_id, UUID(_old_path_json->(_old_path_len-1)->>'node_uuid'), -1);
    END IF;
    IF _new_path_len > 0 AND NEW.status IN ('A', 'W') THEN
        PERFORM temba_insert_flownodecount(NEW.flow_id, UUID(_new_path_json->(_new_path_len-1)->>'node_uuid'), 1);
    END IF;
    -- if we have an old path, find its last step in the new path, and that will be our starting point
    IF _old_path_len > 1 THEN
        _old_last_step_uuid := _old_path_json->(_old_path_len-1)->>'uuid';
        -- old and new paths end with same step so path activity doesn't change
        IF _old_last_step_uuid = _new_path_json->(_new_path_len-1)->>'uuid' THEN
            RETURN NULL;
        END IF;
        p := _new_path_len - 1;
        LOOP
            EXIT WHEN p = 1 OR _new_path_json->(p-1)->>'uuid' = _old_last_step_uuid;
            p := p - 1;
        END LOOP;
    ELSE
        p := 1;
    END IF;
    LOOP
      EXIT WHEN p >= _new_path_len;
      PERFORM temba_insert_flowpathcount(
          NEW.flow_id,
          UUID(_new_path_json->(p-1)->>'exit_uuid'),
          UUID(_new_path_json->p->>'node_uuid'),
          timestamptz(_new_path_json->p->>'arrived_on'),
          1
      );
      p := p + 1;
    END LOOP;
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------
-- Handles changes to a run's status
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_flowrun_status_change() RETURNS TRIGGER AS $$
BEGIN
    -- restrict changes
    IF OLD.status NOT IN ('A', 'W') AND NEW.status IN ('A', 'W') THEN RAISE EXCEPTION 'Cannot restart an exited flow run'; END IF;
    IF OLD.status != NEW.status THEN
        PERFORM temba_insert_flowrunstatuscount(OLD.flow_id, OLD.status, -1);
        PERFORM temba_insert_flowrunstatuscount(NEW.flow_id, NEW.status, 1);
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER temba_flowrun_status_change
    AFTER UPDATE OF status ON flows_flowrun
    FOR EACH ROW EXECUTE PROCEDURE temba_flowrun_status_change();
DROP TRIGGER temba_flowrun_update_flowruncount ON flows_flowrun;
DROP FUNCTION temba_update_flowruncount();
DROP TRIGGER temba_flowrun_path_change ON flows_flowrun;
CREATE TRIGGER temba_flowrun_path_change
    AFTER UPDATE OF path, status ON flows_flowrun
    FOR EACH ROW EXECUTE PROCEDURE temba_flowrun_path_change();
DROP FUNCTION temba_insert_flowruncount(INT, CHAR(1), INT);
"""


class Migration(migrations.Migration):

    dependencies = [
        ("flows", "0273_delete_from_results"),
    ]

    operations = [migrations.RunSQL(SQL)]
