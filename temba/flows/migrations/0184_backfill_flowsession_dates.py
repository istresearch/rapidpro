# Generated by Django 2.0.8 on 2018-09-28 19:43

from django.db import migrations, transaction
from django.db.models import Prefetch
from django.utils import timezone


def backfill_flowsession_dates(FlowSession, FlowRun):
    total_count = FlowSession.objects.filter(created_on=None).count()
    if not total_count:
        return

    print(f"Found {total_count} sessions without dates to update...")

    runs_prefetch = Prefetch("runs", FlowRun.objects.only("created_on", "exited_on").order_by("id"))

    num_updated = 0
    max_id = 0
    while True:
        sessions = list(
            FlowSession.objects.filter(id__gt=max_id, created_on=None)
            .prefetch_related(runs_prefetch)
            .order_by("id")[:1000]
        )
        if not sessions:
            break

        with transaction.atomic():
            for session in sessions:
                runs = list(session.runs.all())
                if runs:
                    created_on = runs[0].created_on
                else:
                    created_on = timezone.now()

                if session.status == "W":
                    ended_on = None
                elif runs:
                    ended_on = runs[-1].exited_on
                else:
                    ended_on = timezone.now()

                session.created_on = created_on
                session.ended_on = ended_on
                session.save(update_fields=("created_on", "ended_on"))
                num_updated += 1

        max_id = sessions[-1].id
        print(f" > Updated {num_updated} of {total_count} sessions")


def apply_migration(apps, schema_editor):
    FlowSession = apps.get_model("flows", "FlowSession")
    FlowRun = apps.get_model("flows", "FlowRun")
    backfill_flowsession_dates(FlowSession, FlowRun)


def apply_manual():
    from temba.flows.models import FlowSession, FlowRun

    backfill_flowsession_dates(FlowSession, FlowRun)


class Migration(migrations.Migration):

    dependencies = [("flows", "0183_run_timeout_index")]

    operations = [migrations.RunPython(apply_migration)]
