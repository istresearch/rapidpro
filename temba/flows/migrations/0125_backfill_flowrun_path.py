# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-11-02 15:39
from __future__ import unicode_literals, print_function

import json
import time

from datetime import timedelta
from django.db import migrations
from django.db.models import Prefetch
from django.utils import timezone
from temba.utils import chunk_list

# these are called out here because we can't reference the real FlowRun in this migration
PATH_NODE_UUID = 'node_uuid'
PATH_ARRIVED_ON = 'arrived_on'
PATH_EXIT_UUID = 'exit_uuid'
PATH_MAX_STEPS = 100


def backfill_flowrun_path(FlowRun, FlowStep):
    # get all flow run ids we're going to migrate
    run_ids = FlowRun.objects.filter(flow__is_active=True).values_list('id', flat=True)
    if not run_ids:
        return

    print("Found %d runs to migrate path for" % len(run_ids))

    num_updated = 0
    num_trimmed = 0
    start = time.time()

    for id_batch in chunk_list(run_ids, 1000):
        batch = FlowRun.objects.filter(id__in=id_batch).prefetch_related(
            Prefetch('steps', queryset=FlowStep.objects.only('step_uuid', 'rule_uuid', 'arrived_on').order_by('arrived_on'))
        )

        for run in batch:
            path = []
            for step in run.steps.all():
                step_dict = {PATH_NODE_UUID: step.step_uuid, PATH_ARRIVED_ON: step.arrived_on.isoformat()}
                if step.rule_uuid:
                    step_dict[PATH_EXIT_UUID] = step.rule_uuid
                path.append(step_dict)

            # trim path if necessary
            if len(path) > PATH_MAX_STEPS:
                path = path[len(path) - PATH_MAX_STEPS:]
                num_trimmed += 1

            run.path = json.dumps(path)
            run.save(update_fields=('path',))

        num_updated += len(batch)
        updated_per_sec = num_updated / (time.time() - start)

        # figure out estimated time remaining
        time_remaining = ((len(run_ids) - num_updated) / updated_per_sec)
        finishes = timezone.now() + timedelta(seconds=time_remaining)

        print("Updated %d runs of %d (%2.2f per sec) Est finish: %s" % (num_updated, len(run_ids), updated_per_sec, finishes))

    print("Run path migration completed in %d mins. %d paths were trimmed" % ((int(time.time() - start) / 60), num_trimmed))


def apply_manual():
    from temba.flows.models import FlowRun, FlowStep
    backfill_flowrun_path(FlowRun, FlowStep)


def apply_as_migration(apps, schema_editor):
    FlowRun = apps.get_model('flows', 'FlowRun')
    FlowStep = apps.get_model('flows', 'FlowStep')
    backfill_flowrun_path(FlowRun, FlowStep)


class Migration(migrations.Migration):

    dependencies = [
        ('flows', '0124_flowrun_path'),
    ]

    operations = [
        migrations.RunPython(apply_as_migration)
    ]
