# Generated by Django 4.0.4 on 2022-06-15 19:47
from collections import defaultdict

from django.db import migrations

ROLE_ADMINISTRATOR = "A"
ROLE_EDITOR = "E"
ROLE_VIEWER = "V"
ROLE_AGENT = "T"
ROLE_SURVEYOR = "S"


def backfill_org_membership(apps, schema_editor):  # pragma: no cover
    Org = apps.get_model("orgs", "Org")

    # ensure old definition exists, so we can migrate to new schema
    from django.contrib.auth.models import User
    from django.db import models
    Org.administrators = models.ManyToManyField(User, related_name='org_admins')
    Org.editors = models.ManyToManyField(User, related_name='org_editors')
    Org.viewers = models.ManyToManyField(User, related_name='org_viewers')
    Org.agents = models.ManyToManyField(User, related_name='org_agents')
    Org.surveyors = models.ManyToManyField(User, related_name='org_surveyors')

    role_counts = defaultdict(int)

    def add_user(o, u, r: str):
        o.users.add(u, through_defaults={"role_code": r})
        role_counts[r] += 1

    for org in Org.objects.all():
        for user in org.administrators.all():
            add_user(org, user, ROLE_ADMINISTRATOR)
        for user in org.editors.all():
            add_user(org, user, ROLE_EDITOR)
        for user in org.viewers.all():
            add_user(org, user, ROLE_VIEWER)
        for user in org.agents.all():
            add_user(org, user, ROLE_AGENT)
        for user in org.surveyors.all():
            add_user(org, user, ROLE_SURVEYOR)

    for role, count in role_counts.items():
        print(f"Added {count} users with role {role} to orgs")

    delattr(Org, 'administrators')
    delattr(Org, 'editors')
    delattr(Org, 'viewers')
    delattr(Org, 'agents')
    delattr(Org, 'surveyors')

def reverse(apps, schema_editor):  # pragma: no cover
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("orgs", "0098_orgmembership_org_users_orgmembership_org_and_more"),
    ]

    operations = [migrations.RunPython(backfill_org_membership, reverse)]
