# Generated by Django 2.2.4 on 2020-06-22 18:05

from django.db import migrations, transaction
from django.db.models import Sum

from temba.middleware import BrandingMiddleware


def populate_multi_fields(apps, schema_editor):  # pragma: no cover
    Org = apps.get_model("orgs", "Org")
    TopUp = apps.get_model("orgs", "TopUp")
    orgs = Org.objects.all()

    num_updated = 0
    max_id = -1
    while True:
        batch = list(orgs.filter(id__gt=max_id).order_by("id")[:5000])
        if not batch:
            break

        with transaction.atomic():
            for org in batch:
                c = TopUp.objects.filter(org=org, is_active=True).aggregate(Sum("credits")).get("credits__sum")
                if not c:
                    continue

                brand = BrandingMiddleware.get_branding_for_host(org.brand)

                # flip on multi-org based on brand tiers
                org.is_multi_org = c >= brand.get("tiers", {}).get("multi_org", 0)

                # flip on multi-user based on brand tiers
                org.is_multi_user = c >= brand.get("tiers", {}).get("multi_user", 0)

                if not org.is_multi_org and not org.is_multi_user:
                    continue

                org.save(update_fields=("is_multi_org", "is_multi_user"))

        num_updated += len(batch)
        print(f" > Updated {num_updated} orgs")

        max_id = batch[-1].id


def reverse(apps, schema_editor):  # pragma: no cover
    pass


def apply_manual():  # pragma: no cover
    from django.apps import apps

    populate_multi_fields(apps, None)


class Migration(migrations.Migration):

    dependencies = [("orgs", "0066_add_multi_org_multi_user")]

    operations = [migrations.RunPython(populate_multi_fields, reverse)]
