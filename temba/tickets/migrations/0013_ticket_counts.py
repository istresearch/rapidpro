# Generated by Django 2.2.20 on 2021-07-22 20:55

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

SQL = """
----------------------------------------------------------------------
-- Inserts a new ticketcount row with the given values
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_insert_ticketcount(_org_id INTEGER, _assignee_id INTEGER, status CHAR(1), _count INT) RETURNS VOID AS $$
  BEGIN
    INSERT INTO tickets_ticketcount("org_id", "assignee_id", "status", "count", "is_squashed")
    VALUES(_org_id, _assignee_id, status, _count, FALSE);
  END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------
-- Trigger procedure to update user and system labels on column changes
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_ticket_on_change() RETURNS TRIGGER AS $$
DECLARE
  _new_label_type CHAR(1);
  _old_label_type CHAR(1);
BEGIN
  IF TG_OP = 'INSERT' THEN -- new ticket inserted
    PERFORM temba_insert_ticketcount(NEW.org_id, NEW.assignee_id, NEW.status, 1);
  ELSIF TG_OP = 'UPDATE' THEN -- existing ticket updated
    IF OLD.assignee_id IS DISTINCT FROM NEW.assignee_id OR OLD.status != NEW.status THEN
      PERFORM temba_insert_ticketcount(OLD.org_id, OLD.assignee_id, OLD.status, -1);
      PERFORM temba_insert_ticketcount(NEW.org_id, NEW.assignee_id, NEW.status, 1);
    END IF;
  ELSIF TG_OP = 'DELETE' THEN -- existing ticket deleted
    PERFORM temba_insert_ticketcount(OLD.org_id, OLD.assignee_id, OLD.status, -1);
  END IF;
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER temba_ticket_on_change_trg
  AFTER INSERT OR UPDATE OR DELETE ON tickets_ticket
  FOR EACH ROW EXECUTE PROCEDURE temba_ticket_on_change();
"""


class Migration(migrations.Migration):

    dependencies = [
        ("orgs", "0088_auto_20210715_1825"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("tickets", "0012_create_internal_ticketers"),
    ]

    operations = [
        migrations.CreateModel(
            name="TicketCount",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("is_squashed", models.BooleanField(default=False)),
                ("status", models.CharField(choices=[("O", "Open"), ("C", "Closed")], max_length=1)),
                ("count", models.IntegerField(default=0)),
                (
                    "assignee",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ticket_counts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "org",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="ticket_counts", to="orgs.Org"
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="ticketcount",
            index=models.Index(fields=["org", "status"], name="tickets_tic_org_id_3bdc4d_idx"),
        ),
        migrations.AddIndex(
            model_name="ticketcount",
            index=models.Index(fields=["org", "assignee", "status"], name="tickets_tic_org_id_6e466a_idx"),
        ),
        migrations.RunSQL(SQL),
    ]
