# Generated by Django 4.0.4 on 2022-05-19 14:35
from collections import defaultdict
from dataclasses import dataclass

from django.db import migrations

TYPE_FIRST_REPLY = "R"


@dataclass
class CountAndSeconds:
    count: int = 0
    seconds: int = 0


def backfill_ticket_reply_timings(apps, schema_editor):
    Org = apps.get_model("orgs", "Org")
    TicketDailyTiming = apps.get_model("tickets", "TicketDailyTiming")

    for org in Org.objects.exclude(tickets=None):
        timings = defaultdict(lambda: CountAndSeconds())

        print(f"Backfilling ticket daily reply timings for org '{org.name}'...")

        def record(dt, secs):
            d = dt.astimezone(org.timezone).date()
            s = f"o:{org.id}"
            timings[(s, d)].count += 1
            timings[(s, d)].seconds += secs

        for ticket in org.tickets.order_by("opened_on"):
            first_reply = ticket.broadcasts.order_by("id").first()
            if first_reply:
                ticket.replied_on = first_reply.created_on
                ticket.save(update_fields=("replied_on",))

                record(first_reply.created_on, (first_reply.created_on - ticket.opened_on).total_seconds())

        for (scope, day), timing in timings.items():
            print(
                f" > type={TYPE_FIRST_REPLY} day={day} scope={scope} => count={timing.count} seconds={timing.seconds} avg={timing.seconds / timing.count}"
            )

            TicketDailyTiming.objects.filter(count_type=TYPE_FIRST_REPLY, scope=scope, day=day).delete()
            TicketDailyTiming.objects.create(
                count_type=TYPE_FIRST_REPLY,
                scope=scope,
                day=day,
                count=timing.count,
                seconds=timing.seconds,
                is_squashed=True,
            )


def reverse(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("tickets", "0035_ticketdailytiming_ticket_replied_on_and_more"),
    ]

    operations = [migrations.RunPython(backfill_ticket_reply_timings, reverse)]
