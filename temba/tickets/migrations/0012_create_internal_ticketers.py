# Generated by Django 2.2.20 on 2021-07-01 21:17

from uuid import uuid4

from django.conf import settings
from django.db import migrations

INTERNAL_TYPE = "internal"


def create_internal_ticketers(apps, schema_editor):  # pragma: no cover
    Org = apps.get_model("orgs", "Org")

    num_created = 0
    num_updated = 0

    for org in Org.objects.filter(is_active=True).select_related("created_by"):
        brand = settings.BRANDING.get(org.brand, settings.BRANDING.get(settings.DEFAULT_BRAND))
        name = f"{brand['name']} Tickets"

        if not org.ticketers.filter(ticketer_type=INTERNAL_TYPE).exists():
            org.ticketers.create(
                uuid=uuid4(),
                ticketer_type=INTERNAL_TYPE,
                name=name,
                config={},
                created_by=org.created_by,
                modified_by=org.created_by,
            )
            num_created += 1
        else:
            org.ticketers.filter(ticketer_type=INTERNAL_TYPE).update(name=name)
            num_updated += 1

    if num_created or num_updated:
        print(f"Created {num_created} new internal ticketers and updated {num_updated}")


def reverse(apps, schema_editor):  # pragma: no cover
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("tickets", "0011_auto_20210701_1719"),
    ]

    operations = [migrations.RunPython(create_internal_ticketers, reverse)]
