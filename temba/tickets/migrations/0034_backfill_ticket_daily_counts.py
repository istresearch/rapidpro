# Generated by Django 4.0.4 on 2022-05-12 15:16
from collections import defaultdict

from django.db import migrations

TYPE_OPENING = "O"
TYPE_ASSIGNMENT = "A"
TYPE_REPLY = "R"


def backfill_ticket_daily_counts(apps, schema_editor):  # pragma: no cover
    Org = apps.get_model("orgs", "Org")
    TicketDailyCount = apps.get_model("tickets", "TicketDailyCount")

    for org in Org.objects.exclude(tickets=None):
        counts = defaultdict(int)

        print(f"Backfilling ticket daily counts for org '{org.name}'...")

        def record(t, o, u, dt):
            d = dt.astimezone(org.timezone).date()
            s = f"o:{o.id}:u:{u.id}" if u else f"o:{o.id}"
            counts[(t, s, d)] += 1

        for ticket in org.tickets.order_by("opened_on"):
            opened_event = ticket.events.filter(event_type="O").first()
            record(TYPE_OPENING, org, None, opened_event.created_on)

            # tickets can be opened with an assignee or assigned later
            if opened_event.assignee:
                record(TYPE_ASSIGNMENT, org, opened_event.assignee, opened_event.created_on)
            else:
                assigned_event = ticket.events.filter(event_type="A").order_by("created_on").first()
                if assigned_event:
                    record(TYPE_ASSIGNMENT, org, assigned_event.assignee, assigned_event.created_on)

            for bcast in ticket.broadcasts.all():
                record(TYPE_REPLY, org, None, bcast.created_on)
                record(TYPE_REPLY, org, bcast.created_by, bcast.created_on)

        for (count_type, scope, day), count in counts.items():
            print(f" > type={count_type} day={day} scope={scope} => {count}")

            TicketDailyCount.objects.filter(count_type=count_type, scope=scope, day=day).delete()
            TicketDailyCount.objects.create(count_type=count_type, scope=scope, day=day, count=count, is_squashed=True)


def reverse(apps, schema_editor):  # pragma: no cover
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("tickets", "0033_populate_is_system"),
    ]

    operations = [migrations.RunPython(backfill_ticket_daily_counts, reverse)]
