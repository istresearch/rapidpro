# Generated by Django 2.1.3 on 2019-01-10 20:29

from django.db import migrations


class RenameBaseModel(migrations.RenameModel):
    """
    see https://code.djangoproject.com/ticket/26488
    """

    def state_forwards(self, app_label, state):
        apps = state.apps
        model = apps.get_model(app_label, self.old_name)
        model._meta.apps = apps
        # Get all of the related objects we need to repoint
        all_related_objects = (
            f
            for f in model._meta.get_fields(include_hidden=True)
            if f.auto_created and not f.concrete and (not f.hidden or f.many_to_many)
        )
        # Rename the model
        state.models[app_label, self.new_name_lower] = state.models[app_label, self.old_name_lower]
        state.models[app_label, self.new_name_lower].name = self.new_name
        state.remove_model(app_label, self.old_name_lower)
        # Repoint bases, this needs to be done before reloading any model
        full_old_name = "%s.%s" % (app_label, self.old_name_lower)
        full_new_name = "%s.%s" % (app_label, self.new_name_lower)
        for state_model in state.models.values():
            if full_old_name in state_model.bases:
                state_model.bases = tuple(full_new_name if b == full_old_name else b for b in state_model.bases)
        # Repoint the FKs and M2Ms pointing to us
        for related_object in all_related_objects:
            if related_object.model is not model:
                # The model being renamed does not participate in this relation
                # directly. Rather, a superclass does.
                continue
            # Use the new related key for self referential related objects.
            if related_object.related_model == model:
                related_key = (app_label, self.new_name_lower)
            else:
                related_key = (
                    related_object.related_model._meta.app_label,
                    related_object.related_model._meta.model_name,
                )
            new_fields = []
            for name, field in state.models[related_key].fields:
                if name == related_object.field.name:
                    field = field.clone()
                    field.remote_field.model = "%s.%s" % (app_label, self.new_name)
                new_fields.append((name, field))
            state.models[related_key].fields = new_fields
            state.reload_model(*related_key)
        state.reload_model(app_label, self.new_name_lower)


class Migration(migrations.Migration):

    dependencies = [("channels", "0110_auto_20190110_2100"), ("ivr", "0015_initial"), ("ussd", "0003_initial")]

    operations = [RenameBaseModel("ChannelSession", "Connection")]
