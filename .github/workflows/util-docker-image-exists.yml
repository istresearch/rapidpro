name: Utility - Docker Image Exists

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      tag:
        required: true
        type: string
    outputs:
      exists:
        description: "Returns 1 if image is found, 0 otherwise."
        value: ${{ jobs.docker_image_exists.outputs.exists }}
      err_msg:
        description: "Non-empty if an error occurred."
        value: ${{ jobs.docker_image_exists.outputs.err_msg }}

jobs:
  docker_image_exists:
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.curl_dockerhub.outputs.EXISTS }}
      err_msg: ${{ steps.curl_dockerhub.outputs.ERR_MSG }}
    steps:
      - name: "curl DockerHub"
        id: curl_dockerhub
        env:
          DOCKER_UN: ${{ secrets.DOCKER_USER }}
          DOCKER_PW: ${{ secrets.DOCKER_PASS }}
          IMAGE_NAME: ${{ inputs.name }}
          IMAGE_TAG: ${{ inputs.tag }}
        run: |-
          R=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${DOCKER_UN}'", "password": "'${DOCKER_PW}'"}' https://hub.docker.com/v2/users/login/)
          S=$? #non-0 means error
          if [ $S -eq 0 ]; then
            TOKEN=$(echo "${R}" | jq -r .token)
            sleep 1  # DockerHub quirk added at some point before next curl can succeed
          else
            ERR_MSG="::error::DockerHub login failed: ${R}"
            echo "ERR_MSG=${ERR_MSG}" >> $GITHUB_OUTPUT
            exit 1
          fi
          DH_URL=https://hub.docker.com/v2/repositories/${IMAGE_NAME}/tags/?page_size=10000
          R=$(curl -s -H "Authorization: JWT ${TOKEN}" "${DH_URL}")
          if [ $S -eq 0 ]; then
            EXISTS=$(echo "$R" | jq -r "[.results | .[] | .name == \"${IMAGE_TAG}\"] | any")
          else
            ERR_MSG="::error::DockerHub tag curl failed: ${R}"
            echo "ERR_MSG=${ERR_MSG}" >> $GITHUB_OUTPUT
            exit 1
          fi
          if [ EXISTS ]; then
            #echo "::notice::Docker image already exists"
            echo "EXISTS=1" >> $GITHUB_OUTPUT
          else
            #echo "::notice::Docker Image needs to be built"
            echo "EXISTS=0" >> $GITHUB_OUTPUT
          fi
  #endjob docker_image_exists
