name: "Build (4 of 6) Generic Files Layer"

on:
  repository_dispatch:
    types: [build_layer_files, build_layer_app_error]

env:
  IMAGE_STAGE: pyfiles
  DOCKERFILE2USE: docker/dfstage-pyfiles.dockerfile
  FROM_LAYER: ${{ github.event.client_payload.image.layer }}

jobs:
  build_result:
    name: "Build App Layer Result [#${{ github.event.client_payload.run_number }}]"
    runs-on: ubuntu-latest
    env:
      RUN_URL: "[Run #${{ github.event.client_payload.run_number }}](${{ github.event.client_payload.run_url }})"
    steps:
      - name: "Display Error Msg"
        if: github.event.client_payload.error_msg != ''
        run: |-
          echo -e "::error::${RUN_URL}%0A${{ github.event.client_payload.error_msg }}"
          exit 1
      - name: "Display Success Msg"
        if: github.event.client_payload.build_msg != ''
        run: |-
          echo -e "::notice::${RUN_URL}%0A${{ github.event.client_payload.build_msg }}"
  #endjob build_result

  build_cfg:
    needs: [build_result]
    runs-on: ubuntu-latest
    environment: default
    outputs:
      IMAGE_NAME: ${{ steps.config_step.outputs.IMAGE_NAME }}
      IMAGE_TAG: ${{ steps.config_step.outputs.IMAGE_TAG }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.repo.ref_name }}

      - name: "Determine Hash Tag To Use"
        id: config_step
        shell: bash
        env:
          REF_NAME: "${{ github.event.client_payload.repo.ref_name }}"
        run: |-
          IMAGE_NAME=${{ github.repository_owner }}/rapidpro
          echo "${FROM_LAYER#**:}" > base_tag.txt
          source scm/utils.sh
          CalcDirArgsHash static media "engage/static" "engage/hamls" "docker/customizations/generic/static" > dir_hash.txt
          IMAGE_TAG_HASH=$(CalcFileArgsHash "${DOCKERFILE2USE}" "base_tag.txt" "package-lock.json" "package.json" "dir_hash.txt")
          IMAGE_TAG="${IMAGE_STAGE}-${IMAGE_TAG_HASH}"
          
          echo "::notice::Generic Static Files Layer: ${IMAGE_NAME}:${IMAGE_TAG}"
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT
  #endjob build_cfg

  check_image_exist:
    if: ${{ github.event.client_payload.repo.ref_name }} == 'ci-develop'
    needs: [build_cfg]
    uses: ./.github/workflows/util-docker-image-exists.yml
    secrets: inherit
    with:
      name: ${{ needs.build_cfg.outputs.IMAGE_NAME }}
      tag: ${{ needs.build_cfg.outputs.IMAGE_TAG }}
  #endjob check_image_exist

  check_build_image:
    if: ${{ github.event.client_payload.repo.ref_name }} == 'ci-develop'
    runs-on: ubuntu-latest
    needs: [check_image_exist]
    environment: default
    env:
      BUILD_ERR_MSG: ${{ needs.check_image_exist.outputs.err_msg }}
    outputs:
      BUILD_STAGE: ${{ steps.is_building.outputs.BUILD_STAGE }}
    steps:
      - name: "Set BUILD_STAGE output"
        id: is_building
        run: |-
          if [[ -n "${BUILD_ERR_MSG}" ]]; then
            echo "${BUILD_ERR_MSG}"
            exit 1
          fi
          if [[ '${{ needs.check_image_exist.outputs.exists }}' == '0' ]]; then
            BUILD_STAGE=1
          else
            BUILD_STAGE=0
          fi
          echo "::notice::Build Stage?=${BUILD_STAGE}"
          echo "BUILD_STAGE=${BUILD_STAGE}" >> $GITHUB_OUTPUT
  #endjob check_build_image

  trigger-build:
    if: ${{ github.event.client_payload.repo.ref_name }} == 'ci-develop' && needs.check_build_image.outputs.BUILD_STAGE == 1
    runs-on: ubuntu-latest
    needs: [build_cfg, check_build_image]
    environment: default
    steps:
      - name: "Trigger Generic Static Files Build"
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.CI_WEBHOOK_TOKEN }}
          repository: istresearch/ci-docker
          event-type: build-repo
          client-payload: |-
            {
              "repo": {
                "name": "${{ github.repository }}",
                "ref_type": "${{ github.event.client_payload.repo.ref_type }}",
                "ref_name": "${{ github.event.client_payload.repo.ref_name }}"
              },
              "image": {
                "dockerfile": "${{ env.DOCKERFILE2USE }}",
                "arch_allowed": "amd64 arm64",
                "name": "${{ needs.build_cfg.outputs.IMAGE_NAME }}",
                "tag": "${{ needs.build_cfg.outputs.IMAGE_TAG }}",
                "build_args": [
                  "BRAND_NAME=generic",
                  "FROM_STAGE=${{ env.FROM_LAYER }}"
                ]
              },
              "deployment": {
                "deploy_flag": "0"
              },
              "callback": {
                "repository": "${{ github.repository }}",
                "event_type": "build_layer_generic",
                "error_type": "build_layer_generic_files_error",
                "payload": {
                  "repo": {
                    "ref_type": "${{ github.event.client_payload.repo.ref_type }}",
                    "ref_name": "${{ github.event.client_payload.repo.ref_name }}"
                  },
                  "image": {
                    "tag": "${{ github.event.client_payload.image.tag }}",
                    "ver_num": "${{ github.event.client_payload.image.ver_num }}",
                    "layer": "${{ env.FROM_LAYER }}",
                    "pyfiles": "${{ needs.build_cfg.outputs.IMAGE_NAME }}:${{ needs.build_cfg.outputs.IMAGE_TAG }}"
                  }
                }
              }
            }
  #endjob trigger-build

  trigger-next-stage:
    if: ${{ github.event.client_payload.repo.ref_name }} == 'ci-develop' && needs.check_build_image.outputs.BUILD_STAGE == 0
    runs-on: ubuntu-latest
    needs: [build_cfg, check_build_image]
    environment: default
    steps:
      - name: Trigger Next Stage
        uses: peter-evans/repository-dispatch@v3
        with:
          event-type: build_layer_generic
          client-payload: |-
            {
              "repo": {
                "ref_type": "${{ github.event.client_payload.repo.ref_type }}",
                "ref_name": "${{ github.event.client_payload.repo.ref_name }}"
              },
              "image": {
                "tag": "${{ github.event.client_payload.image.tag }}",
                "ver_num": "${{ github.event.client_payload.image.ver_num }}",
                "layer": "${{ env.FROM_LAYER }}",
                "pyfiles": "${{ needs.build_cfg.outputs.IMAGE_NAME }}:${{ needs.build_cfg.outputs.IMAGE_TAG }}"
              }
            }
  #endjob trigger-next-stage
