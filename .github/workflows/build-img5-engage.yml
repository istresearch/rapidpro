name: "Build (5 of 6) Engage Brand"

on:
  repository_dispatch:
    types: [build_layer_engage, build_layer_engage_files_error]

jobs:
  build_result:
    name: "Build Engage Files Layer Result [#${{ github.event.client_payload.run_number }}]"
    runs-on: ubuntu-latest
    env:
      RUN_URL: "[Run #${{ github.event.client_payload.run_number }}](${{ github.event.client_payload.run_url }})"
    steps:
      - name: "Display Error Msg"
        if: github.event.client_payload.error_msg != ''
        run: |-
          echo -e "::error::${RUN_URL}%0A${{ github.event.client_payload.error_msg }}"
          exit 1
      - name: "Display Success Msg"
        if: github.event.client_payload.build_msg != ''
        run: |-
          echo -e "::notice::${RUN_URL}%0A${{ github.event.client_payload.build_msg }}"
  #endjob build_result

  build_cfg:
    needs: [build_result]
    runs-on: ubuntu-latest
    environment: default
    outputs:
      DOCKERFILE2USE: "docker/final-engage.dockerfile"
      IMAGE_NAME: "${{ github.repository_owner }}/p4-engage"
      IMAGE_TAG: "${{ github.event.client_payload.version.str }}"
    steps:
      - name: "no op"
        id: config_step
        run: ''
  #endjob build_cfg

  trigger-build:
    runs-on: ubuntu-latest
    needs: [build_cfg]
    environment: default
    steps:
      - name: "Trigger Container Build For Engage"
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.CI_WEBHOOK_TOKEN }}
          repository: istresearch/ci-docker
          event-type: build-repo
          client-payload: |-
            {
              "repo": {
                "name": "${{ github.repository }}",
                "ref_type": "${{ github.event.client_payload.repo.ref_type }}",
                "ref_name": "${{ github.event.client_payload.repo.ref_name }}"
              },
              "image": {
                "dockerfile": "${{ needs.build_cfg.outputs.DOCKERFILE2USE }}",
                "arch_allowed": "${{ github.event.client_payload.image.arch_allowed }}",
                "name": "${{ needs.build_cfg.outputs.IMAGE_NAME }}",
                "tag": "${{ needs.build_cfg.outputs.IMAGE_TAG }}${{ github.event.client_payload.version.alt }}",
                "build_args": [
                  "FROM_STAGE=${{ github.event.client_payload.image.layer }}",
                  "STATICFILES_FROM_IMAGE=${{ github.event.client_payload.image.pyfiles }}",
                  "VERSION_CI=${{ github.event.client_payload.version.int }}",
                  "VERSION_TAG=${{ github.event.client_payload.version.str }}"
                ]
              },
              "deployment": {
                "deploy_flag": "${{ github.ref_type == 'branch' }}",
                "k8s": [ {
                  "project": "pulse-engage",
                  "container": "pulse-engage",
                  "deploy_msg": ""
                }, {
                  "project": "pulse-engage-celery",
                  "container": "celery-base",
                  "deploy_msg": ""
                }, {
                  "project": "pulse-engage-celery",
                  "container": "celery-msgs",
                  "deploy_msg": ""
                } ]
              },
              "callback": {
                "repository": "${{ github.repository }}",
                "event_type": "build_nginx",
                "error_type": "build_engage_error",
                "payload": {
                  "repo": {
                    "ref_type": "${{ github.event.client_payload.repo.ref_type }}",
                    "ref_name": "${{ github.event.client_payload.repo.ref_name }}"
                  },
                  "image": {
                    "name": "${{ needs.build_cfg.outputs.IMAGE_NAME }}",
                    "arch_allowed": "${{ github.event.client_payload.image.arch_allowed }}",
                    "layer": "${{ needs.build_cfg.outputs.IMAGE_NAME }}:${{ needs.build_cfg.outputs.IMAGE_TAG }}"
                  },
                  "version": {
                    "str": "${{ github.event.client_payload.version.str }}",
                    "int": "${{ github.event.client_payload.version.int }}",
                    "kind": "${{ github.event.client_payload.version.kind }}",
                    "alt": "${{ github.event.client_payload.version.alt }}"
                  },
                  "deploy": ${{ github.event.client_payload.version.kind == 'dev' }}
                }
              }
            }
  #endjob trigger-build
